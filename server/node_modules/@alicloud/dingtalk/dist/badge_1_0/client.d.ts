/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateBadgeCodeUserInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    availableTimes?: CreateBadgeCodeUserInstanceRequestAvailableTimes[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * TEST
     */
    codeIdentity?: string;
    codeValue?: string;
    /**
     * @example
     * DING_STATIC
     */
    codeValueType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * corpid1234
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    extInfo?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * yyyy-MM-dd HH:mm:ss
     */
    gmtExpired?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 202102021212
     */
    requestId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * OPEN
     */
    status?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * INTERNAL_STAFF
     */
    userCorpRelationType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 86-xxxxxx
     */
    userIdentity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceResponseBody extends $tea.Model {
    codeDetailUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * codexxxxxx
     */
    codeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateBadgeCodeUserInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    content?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SUCCESS
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateBadgeNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    payCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2512345678
     */
    alipayCode?: string;
    /**
     * @example
     * codeIdxxxxx
     */
    codeId?: string;
    /**
     * @example
     * DT_VISITOR
     */
    codeIdentity?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PURE_IDENTIFY_CODE
     */
    codeType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1234
     */
    corpId?: string;
    /**
     * @example
     * {"authRules":{}}
     */
    extInfo?: string;
    /**
     * @example
     * xxxx
     */
    outBizId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * INTERNAL_STAFF
     */
    userCorpRelationType?: string;
    /**
     * @example
     * staffId
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DecodeBadgeCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234.56
     */
    amount?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1.00, 没有传0.00
     */
    chargeAmount?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1234
     */
    corpId?: string;
    /**
     * @example
     * { "akey": "avalue“}
     */
    extInfo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-01-01 11:11:11
     */
    gmtTradeCreate?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-01-01 11:11:11
     */
    gmtTradeFinish?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * XX公司食堂
     */
    merchantName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    payChannelDetailList?: NotifyBadgeCodePayResultRequestPayChannelDetailList[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 261234567890
     */
    payCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1.23，没有传0.00
     */
    promotionAmount?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 备注
     */
    remark?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 晚餐100.0元
     */
    title?: string;
    /**
     * @example
     * BALANCE_NOT_ENOUGH
     */
    tradeErrorCode?: string;
    /**
     * @example
     * 余额不足，请充值
     */
    tradeErrorMsg?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 202101012345678
     */
    tradeNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SUCCESS/FAIL
     */
    tradeStatus?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userId1234
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SUCCESS
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyBadgeCodePayResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1234
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-11-11 11:11:11
     */
    gmtRefund?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    payChannelDetailList?: NotifyBadgeCodeRefundResultRequestPayChannelDetailList[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * payCode
     */
    payCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1.00
     */
    refundAmount?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * refundOrderNo
     */
    refundOrderNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0.00
     */
    refundPromotionAmount?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 晚餐退款
     */
    remark?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * tradeNo
     */
    tradeNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userId
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SUCCESS
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyBadgeCodeRefundResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * corpxxxx
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 261234567890
     */
    payCode?: string;
    remark?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * INTERNAL_STAFF
     */
    userCorpRelationType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxx
     */
    userIdentity?: string;
    /**
     * @example
     * 门禁验证
     */
    verifyEvent?: string;
    /**
     * @example
     * 1号食堂
     */
    verifyLocation?: string;
    /**
     * @example
     * 202112120003232
     */
    verifyNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    verifyResult?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-01-01 12:12:12
     */
    verifyTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SUCCESS
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyBadgeCodeVerifyResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * H_FISH_CANTEEN
     */
    codeIdentity?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxx
     */
    corpId?: string;
    extInfo?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * OPEN
     */
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceResponseBody extends $tea.Model {
    codeIdentity?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: string;
    };
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveBadgeCodeCorpInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    availableTimes?: UpdateBadgeCodeUserInstanceRequestAvailableTimes[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ccodexxxxx
     */
    codeId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * TEST
     */
    codeIdentity?: string;
    codeValue?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * corpIdxxxx
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    extInfo?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    gmtExpired?: string;
    /**
     * @example
     * OPEN
     */
    status?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * INTERNAL_STAFF
     */
    userCorpRelationType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 86-xxxxxx
     */
    userIdentity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceResponseBody extends $tea.Model {
    /**
     * @example
     * codexxxxxx
     */
    codeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateBadgeCodeUserInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceRequestAvailableTimes extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * yyyy-MM-dd HH:mm:ss
     */
    gmtEnd?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * yyyy-MM-dd HH:mm:ss
     */
    gmtStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 金额
     */
    amount?: string;
    /**
     * @example
     * {"key":"value"}
     */
    extInfo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 优惠券
     */
    fundToolName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-01-01
     */
    gmtCreate?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-01-01 11:11:11
     */
    gmtFinish?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultRequestPayChannelDetailList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1.23
     */
    amount?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fundToolDetailList?: NotifyBadgeCodePayResultRequestPayChannelDetailListFundToolDetailList[];
    /**
     * @example
     * 2021-01-01 11:11:11
     */
    gmtCreate?: string;
    /**
     * @example
     * 2021-01-01 11:11:11
     */
    gmtFinish?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 卡余额
     */
    payChannelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20211234
     */
    payChannelOrderNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ALIPAY|BALANCE
     */
    payChannelType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0.00
     */
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1.00
     */
    amount?: string;
    extInfo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 余额
     */
    fundToolName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-05-31 11:11:11
     */
    gmtCreate?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-05-31 11:11:11
     */
    gmtFinish?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultRequestPayChannelDetailList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1.00
     */
    amount?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fundToolDetailList?: NotifyBadgeCodeRefundResultRequestPayChannelDetailListFundToolDetailList[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ALIPAY
     */
    payChannelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20210531123456
     */
    payChannelOrderNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021053112345678
     */
    payChannelRefundOrderNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ALIPAY
     */
    payChannelType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0.00
     */
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceRequestAvailableTimes extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * yyyy-MM-dd HH:mm:ss
     */
    gmtEnd?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * yyyy-MM-dd HH:mm:ss
     */
    gmtStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 创建钉工牌码用户实例
     *
     * @param request - CreateBadgeCodeUserInstanceRequest
     * @param headers - CreateBadgeCodeUserInstanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateBadgeCodeUserInstanceResponse
     */
    createBadgeCodeUserInstanceWithOptions(request: CreateBadgeCodeUserInstanceRequest, headers: CreateBadgeCodeUserInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateBadgeCodeUserInstanceResponse>;
    /**
     * 创建钉工牌码用户实例
     *
     * @param request - CreateBadgeCodeUserInstanceRequest
     * @returns CreateBadgeCodeUserInstanceResponse
     */
    createBadgeCodeUserInstance(request: CreateBadgeCodeUserInstanceRequest): Promise<CreateBadgeCodeUserInstanceResponse>;
    /**
     * 创建钉工牌通知消息
     *
     * @param request - CreateBadgeNotifyRequest
     * @param headers - CreateBadgeNotifyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateBadgeNotifyResponse
     */
    createBadgeNotifyWithOptions(request: CreateBadgeNotifyRequest, headers: CreateBadgeNotifyHeaders, runtime: $Util.RuntimeOptions): Promise<CreateBadgeNotifyResponse>;
    /**
     * 创建钉工牌通知消息
     *
     * @param request - CreateBadgeNotifyRequest
     * @returns CreateBadgeNotifyResponse
     */
    createBadgeNotify(request: CreateBadgeNotifyRequest): Promise<CreateBadgeNotifyResponse>;
    /**
     * 钉工牌解码
     *
     * @param request - DecodeBadgeCodeRequest
     * @param headers - DecodeBadgeCodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DecodeBadgeCodeResponse
     */
    decodeBadgeCodeWithOptions(request: DecodeBadgeCodeRequest, headers: DecodeBadgeCodeHeaders, runtime: $Util.RuntimeOptions): Promise<DecodeBadgeCodeResponse>;
    /**
     * 钉工牌解码
     *
     * @param request - DecodeBadgeCodeRequest
     * @returns DecodeBadgeCodeResponse
     */
    decodeBadgeCode(request: DecodeBadgeCodeRequest): Promise<DecodeBadgeCodeResponse>;
    /**
     * 通知钉工牌码付款结果
     *
     * @param request - NotifyBadgeCodePayResultRequest
     * @param headers - NotifyBadgeCodePayResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns NotifyBadgeCodePayResultResponse
     */
    notifyBadgeCodePayResultWithOptions(request: NotifyBadgeCodePayResultRequest, headers: NotifyBadgeCodePayResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyBadgeCodePayResultResponse>;
    /**
     * 通知钉工牌码付款结果
     *
     * @param request - NotifyBadgeCodePayResultRequest
     * @returns NotifyBadgeCodePayResultResponse
     */
    notifyBadgeCodePayResult(request: NotifyBadgeCodePayResultRequest): Promise<NotifyBadgeCodePayResultResponse>;
    /**
     * 通知钉工牌码退款结果
     *
     * @param request - NotifyBadgeCodeRefundResultRequest
     * @param headers - NotifyBadgeCodeRefundResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns NotifyBadgeCodeRefundResultResponse
     */
    notifyBadgeCodeRefundResultWithOptions(request: NotifyBadgeCodeRefundResultRequest, headers: NotifyBadgeCodeRefundResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyBadgeCodeRefundResultResponse>;
    /**
     * 通知钉工牌码退款结果
     *
     * @param request - NotifyBadgeCodeRefundResultRequest
     * @returns NotifyBadgeCodeRefundResultResponse
     */
    notifyBadgeCodeRefundResult(request: NotifyBadgeCodeRefundResultRequest): Promise<NotifyBadgeCodeRefundResultResponse>;
    /**
     * 通知钉工牌码验证结果
     *
     * @param request - NotifyBadgeCodeVerifyResultRequest
     * @param headers - NotifyBadgeCodeVerifyResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns NotifyBadgeCodeVerifyResultResponse
     */
    notifyBadgeCodeVerifyResultWithOptions(request: NotifyBadgeCodeVerifyResultRequest, headers: NotifyBadgeCodeVerifyResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyBadgeCodeVerifyResultResponse>;
    /**
     * 通知钉工牌码验证结果
     *
     * @param request - NotifyBadgeCodeVerifyResultRequest
     * @returns NotifyBadgeCodeVerifyResultResponse
     */
    notifyBadgeCodeVerifyResult(request: NotifyBadgeCodeVerifyResultRequest): Promise<NotifyBadgeCodeVerifyResultResponse>;
    /**
     * 保存钉工牌企业实例
     *
     * @param request - SaveBadgeCodeCorpInstanceRequest
     * @param headers - SaveBadgeCodeCorpInstanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveBadgeCodeCorpInstanceResponse
     */
    saveBadgeCodeCorpInstanceWithOptions(request: SaveBadgeCodeCorpInstanceRequest, headers: SaveBadgeCodeCorpInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<SaveBadgeCodeCorpInstanceResponse>;
    /**
     * 保存钉工牌企业实例
     *
     * @param request - SaveBadgeCodeCorpInstanceRequest
     * @returns SaveBadgeCodeCorpInstanceResponse
     */
    saveBadgeCodeCorpInstance(request: SaveBadgeCodeCorpInstanceRequest): Promise<SaveBadgeCodeCorpInstanceResponse>;
    /**
     * 更新钉工牌码用户实例
     *
     * @param request - UpdateBadgeCodeUserInstanceRequest
     * @param headers - UpdateBadgeCodeUserInstanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateBadgeCodeUserInstanceResponse
     */
    updateBadgeCodeUserInstanceWithOptions(request: UpdateBadgeCodeUserInstanceRequest, headers: UpdateBadgeCodeUserInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateBadgeCodeUserInstanceResponse>;
    /**
     * 更新钉工牌码用户实例
     *
     * @param request - UpdateBadgeCodeUserInstanceRequest
     * @returns UpdateBadgeCodeUserInstanceResponse
     */
    updateBadgeCodeUserInstance(request: UpdateBadgeCodeUserInstanceRequest): Promise<UpdateBadgeCodeUserInstanceResponse>;
}
