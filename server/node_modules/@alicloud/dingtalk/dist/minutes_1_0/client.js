"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryMinutesTextResponseBodyParagraphList = exports.QueryMinutesTextResponseBodyParagraphListSentenceList = exports.QueryMinutesTextResponseBodyParagraphListSentenceListWordList = exports.QueryMinutesTextResponse = exports.QueryMinutesTextResponseBody = exports.QueryMinutesTextRequest = exports.QueryMinutesTextHeaders = exports.QueryMinutesStatusResponse = exports.QueryMinutesStatusResponseBody = exports.QueryMinutesStatusRequest = exports.QueryMinutesStatusHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class QueryMinutesStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesStatusHeaders = QueryMinutesStatusHeaders;
class QueryMinutesStatusRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesStatusRequest = QueryMinutesStatusRequest;
class QueryMinutesStatusResponseBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesStatusResponseBody = QueryMinutesStatusResponseBody;
class QueryMinutesStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMinutesStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesStatusResponse = QueryMinutesStatusResponse;
class QueryMinutesTextHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextHeaders = QueryMinutesTextHeaders;
class QueryMinutesTextRequest extends $tea.Model {
    static names() {
        return {
            direction: 'direction',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            direction: 'number',
            maxResults: 'number',
            nextToken: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextRequest = QueryMinutesTextRequest;
class QueryMinutesTextResponseBody extends $tea.Model {
    static names() {
        return {
            hasNext: 'hasNext',
            nextToken: 'nextToken',
            paragraphList: 'paragraphList',
        };
    }
    static types() {
        return {
            hasNext: 'boolean',
            nextToken: 'string',
            paragraphList: { 'type': 'array', 'itemType': QueryMinutesTextResponseBodyParagraphList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextResponseBody = QueryMinutesTextResponseBody;
class QueryMinutesTextResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMinutesTextResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextResponse = QueryMinutesTextResponse;
class QueryMinutesTextResponseBodyParagraphListSentenceListWordList extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            word: 'word',
            wordId: 'wordId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
            word: 'string',
            wordId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextResponseBodyParagraphListSentenceListWordList = QueryMinutesTextResponseBodyParagraphListSentenceListWordList;
class QueryMinutesTextResponseBodyParagraphListSentenceList extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            sentence: 'sentence',
            startTime: 'startTime',
            wordList: 'wordList',
        };
    }
    static types() {
        return {
            endTime: 'number',
            sentence: 'string',
            startTime: 'number',
            wordList: { 'type': 'array', 'itemType': QueryMinutesTextResponseBodyParagraphListSentenceListWordList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextResponseBodyParagraphListSentenceList = QueryMinutesTextResponseBodyParagraphListSentenceList;
class QueryMinutesTextResponseBodyParagraphList extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            nickName: 'nickName',
            paragraph: 'paragraph',
            paragraphId: 'paragraphId',
            recordId: 'recordId',
            sentenceList: 'sentenceList',
            startTime: 'startTime',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            nickName: 'string',
            paragraph: 'string',
            paragraphId: 'number',
            recordId: 'number',
            sentenceList: { 'type': 'array', 'itemType': QueryMinutesTextResponseBodyParagraphListSentenceList },
            startTime: 'number',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMinutesTextResponseBodyParagraphList = QueryMinutesTextResponseBodyParagraphList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 查询闪记状态
     *
     * @param request - QueryMinutesStatusRequest
     * @param headers - QueryMinutesStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMinutesStatusResponse
     */
    async queryMinutesStatusWithOptions(taskUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMinutesStatus",
            version: "minutes_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/minutes/flashMinutes/${taskUuid}/taskStatus`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMinutesStatusResponse({}));
    }
    /**
     * 查询闪记状态
     *
     * @param request - QueryMinutesStatusRequest
     * @returns QueryMinutesStatusResponse
     */
    async queryMinutesStatus(taskUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMinutesStatusHeaders({});
        return await this.queryMinutesStatusWithOptions(taskUuid, request, headers, runtime);
    }
    /**
     * 查询闪记转写文本内容
     *
     * @param request - QueryMinutesTextRequest
     * @param headers - QueryMinutesTextHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMinutesTextResponse
     */
    async queryMinutesTextWithOptions(taskUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.direction)) {
            query["direction"] = request.direction;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMinutesText",
            version: "minutes_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/minutes/flashMinutes/${taskUuid}/textInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMinutesTextResponse({}));
    }
    /**
     * 查询闪记转写文本内容
     *
     * @param request - QueryMinutesTextRequest
     * @returns QueryMinutesTextResponse
     */
    async queryMinutesText(taskUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMinutesTextHeaders({});
        return await this.queryMinutesTextWithOptions(taskUuid, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map