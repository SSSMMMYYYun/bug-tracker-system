/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFieldRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @example
     * key: id或者name
     *     value: 对应字段值,不同类型的字段传入的value值不同
     *       - text: "TextString"          // 文本字符串
     *       - number: 123                 // 整数/浮点数均可
     *       - singleSelect: "optionIdxxx1" | "optionName1" // 单选选项Id/单选选项名
     *       - date: 1688601600000 ｜ "2023-12-20 03:00"
     *                                     // 支持传时间戳或ISO 8601字符串
     *       - user: [{
     *           uid: \"1234567\"            // 用户uid
     *         }, {
     *           uid: \"2345678\"
     *         }]
     */
    property?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFieldResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    /**
     * @example
     * key: id或者name
     *     value: 对应字段值,不同类型的字段传入的value值不同
     *       - text: "TextString"          // 文本字符串
     *       - number: 123                 // 整数/浮点数均可
     *       - singleSelect: "optionIdxxx1" | "optionName1" // 单选选项Id/单选选项名
     *       - date: 1688601600000 ｜ "2023-12-20 03:00"
     *                                     // 支持传时间戳或ISO 8601字符串
     *       - user: [{
     *           uid: \"1234567\"            // 用户uid
     *         }, {
     *           uid: \"2345678\"
     *         }]
     */
    property?: {
        [key: string]: any;
    };
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetRequest extends $tea.Model {
    fields?: CreateSheetRequestFields[];
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFieldResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    recordIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecordsResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllFieldsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllFieldsResponseBody extends $tea.Model {
    value?: GetAllFieldsResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllFieldsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAllFieldsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponseBody extends $tea.Model {
    value?: GetAllSheetsResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAllSheetsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordResponseBody extends $tea.Model {
    fields?: {
        [key: string]: any;
    };
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordsResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasMore?: boolean;
    /**
     * @example
     * nextToken
     */
    nextToken?: string;
    records?: GetRecordsResponseBodyRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRecordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    records?: InsertRecordsRequestRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRecordsResponseBody extends $tea.Model {
    value?: InsertRecordsResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFieldRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @example
     * key: id或者name
     *     value: 对应字段值,不同类型的字段传入的value值不同
     *       - text: "TextString"          // 文本字符串
     *       - number: 123                 // 整数/浮点数均可
     *       - singleSelect: "optionIdxxx1" | "optionName1" // 单选选项Id/单选选项名
     *       - date: 1688601600000 ｜ "2023-12-20 03:00"
     *                                     // 支持传时间戳或ISO 8601字符串
     *       - user: [{
     *           uid: \"1234567\"            // 用户uid
     *         }, {
     *           uid: \"2345678\"
     *         }]
     */
    property?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFieldResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRecordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    records?: UpdateRecordsRequestRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRecordsResponseBody extends $tea.Model {
    value?: UpdateRecordsResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetRequestFields extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @example
     * key: id或者name
     *     value: 对应字段值,不同类型的字段传入的value值不同
     *       - text: "TextString"          // 文本字符串
     *       - number: 123                 // 整数/浮点数均可
     *       - singleSelect: "optionIdxxx1" | "optionName1" // 单选选项Id/单选选项名
     *       - date: 1688601600000 ｜ "2023-12-20 03:00"
     *                                     // 支持传时间戳或ISO 8601字符串
     *       - user: [{
     *           uid: \"1234567\"            // 用户uid
     *         }, {
     *           uid: \"2345678\"
     *         }]
     */
    property?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllFieldsResponseBodyValue extends $tea.Model {
    id?: string;
    name?: string;
    /**
     * @example
     * key: id或者name
     *     value: 对应字段值,不同类型的字段传入的value值不同
     *       - text: "TextString"          // 文本字符串
     *       - number: 123                 // 整数/浮点数均可
     *       - singleSelect: "optionIdxxx1" | "optionName1" // 单选选项Id/单选选项名
     *       - date: 1688601600000 ｜ "2023-12-20 03:00"
     *                                     // 支持传时间戳或ISO 8601字符串
     *       - user: [{
     *           uid: \"1234567\"            // 用户uid
     *         }, {
     *           uid: \"2345678\"
     *         }]
     */
    property?: {
        [key: string]: any;
    };
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponseBodyValue extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecordsResponseBodyRecords extends $tea.Model {
    fields?: {
        [key: string]: any;
    };
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRecordsRequestRecords extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fields?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRecordsResponseBodyValue extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRecordsRequestRecords extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fields?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRecordsResponseBodyValue extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 新增数据表字段
     *
     * @param request - CreateFieldRequest
     * @param headers - CreateFieldHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateFieldResponse
     */
    createFieldWithOptions(baseId: string, sheetIdOrName: string, request: CreateFieldRequest, headers: CreateFieldHeaders, runtime: $Util.RuntimeOptions): Promise<CreateFieldResponse>;
    /**
     * 新增数据表字段
     *
     * @param request - CreateFieldRequest
     * @returns CreateFieldResponse
     */
    createField(baseId: string, sheetIdOrName: string, request: CreateFieldRequest): Promise<CreateFieldResponse>;
    /**
     * 创建数据表
     *
     * @param request - CreateSheetRequest
     * @param headers - CreateSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSheetResponse
     */
    createSheetWithOptions(baseId: string, request: CreateSheetRequest, headers: CreateSheetHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSheetResponse>;
    /**
     * 创建数据表
     *
     * @param request - CreateSheetRequest
     * @returns CreateSheetResponse
     */
    createSheet(baseId: string, request: CreateSheetRequest): Promise<CreateSheetResponse>;
    /**
     * 删除数据表字段
     *
     * @param headers - DeleteFieldHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteFieldResponse
     */
    deleteFieldWithOptions(baseId: string, sheetIdOrName: string, fieldIdOrName: string, headers: DeleteFieldHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteFieldResponse>;
    /**
     * 删除数据表字段
     * @returns DeleteFieldResponse
     */
    deleteField(baseId: string, sheetIdOrName: string, fieldIdOrName: string): Promise<DeleteFieldResponse>;
    /**
     * 删除数据表多行记录
     *
     * @param request - DeleteRecordsRequest
     * @param headers - DeleteRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRecordsResponse
     */
    deleteRecordsWithOptions(baseId: string, sheetIdOrName: string, request: DeleteRecordsRequest, headers: DeleteRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRecordsResponse>;
    /**
     * 删除数据表多行记录
     *
     * @param request - DeleteRecordsRequest
     * @returns DeleteRecordsResponse
     */
    deleteRecords(baseId: string, sheetIdOrName: string, request: DeleteRecordsRequest): Promise<DeleteRecordsResponse>;
    /**
     * 删除数据表
     *
     * @param headers - DeleteSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteSheetResponse
     */
    deleteSheetWithOptions(baseId: string, sheetIdOrName: string, headers: DeleteSheetHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSheetResponse>;
    /**
     * 删除数据表
     * @returns DeleteSheetResponse
     */
    deleteSheet(baseId: string, sheetIdOrName: string): Promise<DeleteSheetResponse>;
    /**
     * 获取所有字段
     *
     * @param headers - GetAllFieldsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAllFieldsResponse
     */
    getAllFieldsWithOptions(baseId: string, sheetIdOrName: string, headers: GetAllFieldsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllFieldsResponse>;
    /**
     * 获取所有字段
     * @returns GetAllFieldsResponse
     */
    getAllFields(baseId: string, sheetIdOrName: string): Promise<GetAllFieldsResponse>;
    /**
     * 获取所有数据表
     *
     * @param headers - GetAllSheetsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAllSheetsResponse
     */
    getAllSheetsWithOptions(baseId: string, headers: GetAllSheetsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllSheetsResponse>;
    /**
     * 获取所有数据表
     * @returns GetAllSheetsResponse
     */
    getAllSheets(baseId: string): Promise<GetAllSheetsResponse>;
    /**
     * 获取记录
     *
     * @param headers - GetRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecordResponse
     */
    getRecordWithOptions(baseId: string, sheetIdOrName: string, recordId: string, headers: GetRecordHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecordResponse>;
    /**
     * 获取记录
     * @returns GetRecordResponse
     */
    getRecord(baseId: string, sheetIdOrName: string, recordId: string): Promise<GetRecordResponse>;
    /**
     * 获取多行记录
     *
     * @param request - GetRecordsRequest
     * @param headers - GetRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecordsResponse
     */
    getRecordsWithOptions(baseId: string, sheetIdOrName: string, request: GetRecordsRequest, headers: GetRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecordsResponse>;
    /**
     * 获取多行记录
     *
     * @param request - GetRecordsRequest
     * @returns GetRecordsResponse
     */
    getRecords(baseId: string, sheetIdOrName: string, request: GetRecordsRequest): Promise<GetRecordsResponse>;
    /**
     * 获取数据表
     *
     * @param headers - GetSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSheetResponse
     */
    getSheetWithOptions(baseId: string, sheetIdOrName: string, headers: GetSheetHeaders, runtime: $Util.RuntimeOptions): Promise<GetSheetResponse>;
    /**
     * 获取数据表
     * @returns GetSheetResponse
     */
    getSheet(baseId: string, sheetIdOrName: string): Promise<GetSheetResponse>;
    /**
     * 新增记录
     *
     * @param request - InsertRecordsRequest
     * @param headers - InsertRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InsertRecordsResponse
     */
    insertRecordsWithOptions(baseId: string, sheetIdOrName: string, request: InsertRecordsRequest, headers: InsertRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<InsertRecordsResponse>;
    /**
     * 新增记录
     *
     * @param request - InsertRecordsRequest
     * @returns InsertRecordsResponse
     */
    insertRecords(baseId: string, sheetIdOrName: string, request: InsertRecordsRequest): Promise<InsertRecordsResponse>;
    /**
     * 更新数据表字段
     *
     * @param request - UpdateFieldRequest
     * @param headers - UpdateFieldHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateFieldResponse
     */
    updateFieldWithOptions(baseId: string, sheetIdOrName: string, fieldIdOrName: string, request: UpdateFieldRequest, headers: UpdateFieldHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateFieldResponse>;
    /**
     * 更新数据表字段
     *
     * @param request - UpdateFieldRequest
     * @returns UpdateFieldResponse
     */
    updateField(baseId: string, sheetIdOrName: string, fieldIdOrName: string, request: UpdateFieldRequest): Promise<UpdateFieldResponse>;
    /**
     * 更新数据表多行记录
     *
     * @param request - UpdateRecordsRequest
     * @param headers - UpdateRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRecordsResponse
     */
    updateRecordsWithOptions(baseId: string, sheetIdOrName: string, request: UpdateRecordsRequest, headers: UpdateRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRecordsResponse>;
    /**
     * 更新数据表多行记录
     *
     * @param request - UpdateRecordsRequest
     * @returns UpdateRecordsResponse
     */
    updateRecords(baseId: string, sheetIdOrName: string, request: UpdateRecordsRequest): Promise<UpdateRecordsResponse>;
    /**
     * 更新数据表
     *
     * @param request - UpdateSheetRequest
     * @param headers - UpdateSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateSheetResponse
     */
    updateSheetWithOptions(baseId: string, sheetIdOrName: string, request: UpdateSheetRequest, headers: UpdateSheetHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSheetResponse>;
    /**
     * 更新数据表
     *
     * @param request - UpdateSheetRequest
     * @returns UpdateSheetResponse
     */
    updateSheet(baseId: string, sheetIdOrName: string, request: UpdateSheetRequest): Promise<UpdateSheetResponse>;
}
