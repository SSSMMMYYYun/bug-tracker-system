/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class DentryAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResultItemsDentryAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentriesAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dentry_name
     */
    name?: string;
    option?: AddFolderRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponseBody extends $tea.Model {
    dentry?: AddFolderResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddFolderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: AddPermissionRequestMembers[];
    option?: AddPermissionRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * MANAGER
     */
    roleId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequest extends $tea.Model {
    option?: AddSpaceRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBody extends $tea.Model {
    space?: AddSpaceResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleBinResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ClearRecycleBinResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dentry_name
     */
    name?: string;
    option?: CommitFileRequestOption;
    /**
     * @example
     * dentry_id
     */
    overwriteDentryId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * upload_key
     */
    uploadKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBody extends $tea.Model {
    dentry?: CommitFileResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CommitFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    option?: CopyDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_folder_id
     */
    targetFolderId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_space_id
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentriesResponseBody extends $tea.Model {
    resultItems?: CopyDentriesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CopyDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequest extends $tea.Model {
    option?: CopyDentryRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_folder_id
     */
    targetFolderId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_space_id
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    dentry?: CopyDentryResponseBodyDentry;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CopyDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    option?: DeleteDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentriesResponseBody extends $tea.Model {
    resultItems?: DeleteDentriesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryRequest extends $tea.Model {
    /**
     * @example
     * true
     */
    toRecycleBin?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    propertyNames?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentryAppPropertiesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDentryAppPropertiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: DeletePermissionRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * MANAGER
     */
    roleId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeletePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRecycleItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    recycleItemIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleItemsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRecycleItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBody extends $tea.Model {
    app?: GetCurrentAppResponseBodyApp;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCurrentAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    option?: GetDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBody extends $tea.Model {
    resultItems?: GetDentriesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryRequest extends $tea.Model {
    option?: GetDentryRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBody extends $tea.Model {
    dentry?: GetDentryResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryOpenInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryOpenInfoRequest extends $tea.Model {
    option?: GetDentryOpenInfoRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryOpenInfoResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasWaterMark?: boolean;
    /**
     * @example
     * url
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryOpenInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentryOpenInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponseBody extends $tea.Model {
    resultItems?: GetDentryThumbnailsResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentryThumbnailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoRequest extends $tea.Model {
    option?: GetFileDownloadInfoRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponseBody extends $tea.Model {
    headerSignatureInfo?: GetFileDownloadInfoResponseBodyHeaderSignatureInfo;
    /**
     * @example
     * HEADER_SIGNATURE
     */
    protocol?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileDownloadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    multipart?: boolean;
    option?: GetFileUploadInfoRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * HEADER_SIGNATURE
     */
    protocol?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponseBody extends $tea.Model {
    headerSignatureInfo?: GetFileUploadInfoResponseBodyHeaderSignatureInfo;
    /**
     * @example
     * HEADER_SIGNATURE
     */
    protocol?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * upload_key
     */
    uploadKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileUploadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosRequest extends $tea.Model {
    option?: GetMultipartFileUploadInfosRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    partNumbers?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * upload_key
     */
    uploadKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosResponseBody extends $tea.Model {
    multipartHeaderSignatureInfos?: GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMultipartFileUploadInfosResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgResponseBody extends $tea.Model {
    org?: GetOrgResponseBodyOrg;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SPACE
     */
    recycleBinScope?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * scope_id
     */
    scopeId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinResponseBody extends $tea.Model {
    recycleBin?: GetRecycleBinResponseBodyRecycleBin;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecycleBinResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemResponseBody extends $tea.Model {
    item?: GetRecycleItemResponseBodyItem;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecycleItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBody extends $tea.Model {
    space?: GetSpaceResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskResponseBody extends $tea.Model {
    task?: GetTaskResponseBodyTask;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebOfficeUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebOfficeUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebOfficeUrlResponseBody extends $tea.Model {
    webOfficeAccessToken?: string;
    webOfficeRefreshToken?: string;
    webOfficeUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebOfficeUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWebOfficeUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitMultipartFileUploadHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitMultipartFileUploadRequest extends $tea.Model {
    option?: InitMultipartFileUploadRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitMultipartFileUploadResponseBody extends $tea.Model {
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * upload_key
     */
    uploadKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitMultipartFileUploadResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitMultipartFileUploadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesRequest extends $tea.Model {
    option?: ListAllDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBody extends $tea.Model {
    dentries?: ListAllDentriesResponseBodyDentries[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAllDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesRequest extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * DESC
     */
    order?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    orderBy?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBody extends $tea.Model {
    dentries?: ListDentriesResponseBodyDentries[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsRequest extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponseBody extends $tea.Model {
    dentries?: ListDentryVersionsResponseBodyDentries[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListDentryVersionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsRequest extends $tea.Model {
    option?: ListPermissionsRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    permissions?: ListPermissionsResponseBodyPermissions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsRequest extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    recycleItems?: ListRecycleItemsResponseBodyRecycleItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListRecycleItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    option?: MoveDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_folder_id
     */
    targetFolderId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_space_id
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentriesResponseBody extends $tea.Model {
    resultItems?: MoveDentriesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MoveDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequest extends $tea.Model {
    option?: MoveDentryRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_folder_id
     */
    targetFolderId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * target_space_id
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    dentry?: MoveDentryResponseBodyDentry;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MoveDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshWebOfficeTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshWebOfficeTokenRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    webOfficeAccessToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    webOfficeRefreshToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshWebOfficeTokenResponseBody extends $tea.Model {
    webOfficeAccessToken?: string;
    webOfficeRefreshToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefreshWebOfficeTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RefreshWebOfficeTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterOpenInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterOpenInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openInfos?: RegisterOpenInfoRequestOpenInfos[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DINGTALK
     */
    provider?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterOpenInfoResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterOpenInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RegisterOpenInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dentry_name
     */
    newName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponseBody extends $tea.Model {
    dentry?: RenameDentryResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RenameDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemRequest extends $tea.Model {
    option?: RestoreRecycleItemRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RestoreRecycleItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemsRequest extends $tea.Model {
    option?: RestoreRecycleItemsRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    recycleItemIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemsResponseBody extends $tea.Model {
    resultItems?: RestoreRecycleItemsResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RestoreRecycleItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertDentryVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RevertDentryVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SPACE
     */
    scope?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * scope_id
     */
    scopeId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubscribeEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SPACE
     */
    scope?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * scope_id
     */
    scopeId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnsubscribeEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appProperties?: UpdateDentryAppPropertiesRequestAppProperties[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateDentryAppPropertiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: UpdatePermissionRequestMembers[];
    option?: UpdatePermissionRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * MANAGER
     */
    roleId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdatePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderRequestOptionAppProperties extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_name
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_value
     */
    value?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderRequestOption extends $tea.Model {
    appProperties?: AddFolderRequestOptionAppProperties[];
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFolderResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: AddFolderResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequestMembers extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * member_id
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequestOption extends $tea.Model {
    /**
     * @example
     * 3600
     */
    duration?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequestOptionCapabilities extends $tea.Model {
    /**
     * @example
     * true
     */
    canRecordRecentFile?: boolean;
    /**
     * @example
     * true
     */
    canRename?: boolean;
    /**
     * @example
     * true
     */
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequestOption extends $tea.Model {
    capabilities?: AddSpaceRequestOptionCapabilities;
    /**
     * @example
     * space_name
     */
    name?: string;
    /**
     * @example
     * USER
     */
    ownerType?: string;
    quota?: number;
    /**
     * @example
     * scene
     */
    scene?: string;
    /**
     * @example
     * scene_id
     */
    sceneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBodySpaceCapabilities extends $tea.Model {
    /**
     * @example
     * true
     */
    canRecordRecentFile?: boolean;
    /**
     * @example
     * true
     */
    canRename?: boolean;
    /**
     * @example
     * true
     */
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBodySpacePartitionsQuota extends $tea.Model {
    /**
     * @example
     * 10000
     */
    max?: number;
    /**
     * @example
     * 1000
     */
    reserved?: number;
    /**
     * @example
     * SHARE
     */
    type?: string;
    /**
     * @example
     * 1024
     */
    used?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBodySpacePartitions extends $tea.Model {
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    quota?: AddSpaceResponseBodySpacePartitionsQuota;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBodySpace extends $tea.Model {
    /**
     * @example
     * app_id
     */
    appId?: string;
    capabilities?: AddSpaceResponseBodySpaceCapabilities;
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * space_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * space_name
     */
    name?: string;
    /**
     * @example
     * owner_id
     */
    ownerId?: string;
    /**
     * @example
     * USER
     */
    ownerType?: string;
    partitions?: AddSpaceResponseBodySpacePartitions[];
    /**
     * @example
     * 1048576
     */
    quota?: number;
    /**
     * @example
     * scene
     */
    scene?: string;
    /**
     * @example
     * scene_id
     */
    sceneId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * 1024
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequestOptionAppProperties extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_name
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_value
     */
    value?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequestOption extends $tea.Model {
    appProperties?: CommitFileRequestOptionAppProperties[];
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentryThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * DOCUMENT
     */
    category?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: CommitFileResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: CommitFileResponseBodyDentryThumbnail;
    /**
     * @example
     * FILE
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentriesRequestOption extends $tea.Model {
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentriesResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    /**
     * @example
     * target_dentry_id
     */
    targetDentryId?: string;
    /**
     * @example
     * target_space_id
     */
    targetSpaceId?: string;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequestOption extends $tea.Model {
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: CopyDentryResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentriesRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    toRecycleBin?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDentriesResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequestMembers extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * member_id
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBodyAppPartitionsQuota extends $tea.Model {
    /**
     * @example
     * 10000
     */
    max?: number;
    /**
     * @example
     * 1000
     */
    reserved?: number;
    /**
     * @example
     * SHARE
     */
    type?: string;
    /**
     * @example
     * 1024
     */
    used?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBodyAppPartitions extends $tea.Model {
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    quota?: GetCurrentAppResponseBodyAppPartitionsQuota;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCurrentAppResponseBodyApp extends $tea.Model {
    /**
     * @example
     * app_id
     */
    appId?: string;
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * app_name
     */
    name?: string;
    partitions?: GetCurrentAppResponseBodyAppPartitions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesRequestOption extends $tea.Model {
    appIdsForAppProperties?: string[];
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItemsDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItemsDentryThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItemsDentry extends $tea.Model {
    appProperties?: {
        [key: string]: ResultItemsDentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: GetDentriesResponseBodyResultItemsDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: GetDentriesResponseBodyResultItemsDentryThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItems extends $tea.Model {
    dentry?: GetDentriesResponseBodyResultItemsDentry;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryRequestOption extends $tea.Model {
    appIdsForAppProperties?: string[];
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentryThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: GetDentryResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: GetDentryResponseBodyDentryThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryOpenInfoRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    checkLogin?: boolean;
    /**
     * @example
     * PREVIEW
     */
    type?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    /**
     * @example
     * true
     */
    waterMark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponseBodyResultItemsThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    thumbnail?: GetDentryThumbnailsResponseBodyResultItemsThumbnail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    preferIntranet?: boolean;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    /**
     * @example
     * 900
     */
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    /**
     * @example
     * ZHANGJIAKOU
     */
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequestOptionPreCheckParam extends $tea.Model {
    /**
     * @example
     * md5
     */
    md5?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequestOption extends $tea.Model {
    preCheckParam?: GetFileUploadInfoRequestOptionPreCheckParam;
    /**
     * @example
     * true
     */
    preferIntranet?: boolean;
    /**
     * @example
     * ZHANGJIAKOU
     */
    preferRegion?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    /**
     * @example
     * 900
     */
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    /**
     * @example
     * ZHANGJIAKOU
     */
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    preferIntranet?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo extends $tea.Model {
    /**
     * @example
     * 900
     */
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    /**
     * @example
     * ZHANGJIAKOU
     */
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos extends $tea.Model {
    headerSignatureInfo?: GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo;
    partNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgResponseBodyOrgPartitionsQuota extends $tea.Model {
    /**
     * @example
     * 10000
     */
    max?: number;
    /**
     * @example
     * 1000
     */
    reserved?: number;
    /**
     * @example
     * SHARE
     */
    type?: string;
    /**
     * @example
     * 1024
     */
    used?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgResponseBodyOrgPartitions extends $tea.Model {
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    quota?: GetOrgResponseBodyOrgPartitionsQuota;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgResponseBodyOrg extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    partitions?: GetOrgResponseBodyOrgPartitions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleBinResponseBodyRecycleBin extends $tea.Model {
    /**
     * @example
     * recyclebin_id
     */
    id?: string;
    /**
     * @example
     * SPACE
     */
    scope?: string;
    /**
     * @example
     * scope_id
     */
    scopeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecycleItemResponseBodyItem extends $tea.Model {
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * recycle_item_id
     */
    id?: string;
    /**
     * @example
     * operator_id
     */
    operatorId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    operatorTime?: string;
    /**
     * @example
     * dentry_name
     */
    originalName?: string;
    /**
     * @example
     * dentry_path
     */
    originalPath?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * file
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpaceCapabilities extends $tea.Model {
    /**
     * @example
     * true
     */
    canRecordRecentFile?: boolean;
    /**
     * @example
     * true
     */
    canRename?: boolean;
    /**
     * @example
     * true
     */
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpacePartitionsQuota extends $tea.Model {
    /**
     * @example
     * 10000
     */
    max?: number;
    /**
     * @example
     * 1000
     */
    reserved?: number;
    /**
     * @example
     * SHARE
     */
    type?: string;
    /**
     * @example
     * 1024
     */
    used?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpacePartitions extends $tea.Model {
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    quota?: GetSpaceResponseBodySpacePartitionsQuota;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpace extends $tea.Model {
    /**
     * @example
     * app_id
     */
    appId?: string;
    capabilities?: GetSpaceResponseBodySpaceCapabilities;
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * space_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * space_name
     */
    name?: string;
    /**
     * @example
     * owner_id
     */
    ownerId?: string;
    /**
     * @example
     * USER
     */
    ownerType?: string;
    partitions?: GetSpaceResponseBodySpacePartitions[];
    /**
     * @example
     * 1048576
     */
    quota?: number;
    /**
     * @example
     * scene
     */
    scene?: string;
    /**
     * @example
     * scene_id
     */
    sceneId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * 1024
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskResponseBodyTask extends $tea.Model {
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    beginTime?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    endTime?: string;
    /**
     * @example
     * 1
     */
    failCount?: number;
    /**
     * @example
     * permissionDenied
     */
    failMessage?: string;
    /**
     * @example
     * task_id
     */
    id?: string;
    /**
     * @example
     * IN_PROGRESS
     */
    status?: string;
    /**
     * @example
     * 3
     */
    successCount?: number;
    /**
     * @example
     * 6
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitMultipartFileUploadRequestOptionPreCheckParam extends $tea.Model {
    /**
     * @example
     * md5
     */
    md5?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitMultipartFileUploadRequestOption extends $tea.Model {
    preCheckParam?: InitMultipartFileUploadRequestOptionPreCheckParam;
    /**
     * @example
     * ZHANGJIAKOU
     */
    preferRegion?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesRequestOption extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * DESC
     */
    order?: string;
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBodyDentriesProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBodyDentriesThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: ListAllDentriesResponseBodyDentriesProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: ListAllDentriesResponseBodyDentriesThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentriesProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentriesThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    /**
     * @example
     * DOCUMENT
     */
    category?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: ListDentriesResponseBodyDentriesProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: ListDentriesResponseBodyDentriesThumbnail;
    /**
     * @example
     * FILE
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponseBodyDentriesProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentryVersionsResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: ListDentryVersionsResponseBodyDentriesProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsRequestOption extends $tea.Model {
    filterRoleIds?: string[];
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyPermissionsMember extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @example
     * member_id
     */
    id?: string;
    /**
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyPermissionsRole extends $tea.Model {
    /**
     * @example
     * MANAGER
     */
    id?: string;
    /**
     * @example
     * MANAGER
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyPermissions extends $tea.Model {
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * 3600
     */
    duration?: number;
    member?: ListPermissionsResponseBodyPermissionsMember;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * operator_id
     */
    operatorId?: string;
    role?: ListPermissionsResponseBodyPermissionsRole;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleItemsResponseBodyRecycleItems extends $tea.Model {
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * recycle_item_id
     */
    id?: string;
    /**
     * @example
     * operator_id
     */
    operatorId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    operatorTime?: string;
    /**
     * @example
     * dentry_name
     */
    originalName?: string;
    /**
     * @example
     * dentry_path
     */
    originalPath?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * file
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentriesRequestOption extends $tea.Model {
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    /**
     * @example
     * true
     */
    preservePermissions?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentriesResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    /**
     * @example
     * target_dentry_id
     */
    targetDentryId?: string;
    /**
     * @example
     * target_space_id
     */
    targetSpaceId?: string;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequestOption extends $tea.Model {
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    /**
     * @example
     * true
     */
    presevePermissions?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: MoveDentryResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterOpenInfoRequestOpenInfos extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PREVIEW
     */
    openType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * url
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: RenameDentryResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemRequestOption extends $tea.Model {
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemsRequestOption extends $tea.Model {
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreRecycleItemsResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * true
     */
    async?: boolean;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * recyclebin_id
     */
    recycleBinId?: string;
    /**
     * @example
     * recycle_item_id
     */
    recycleItemId?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    /**
     * @example
     * task_id
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDentryAppPropertiesRequestAppProperties extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_name
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_value
     */
    value?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionRequestMembers extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * member_id
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionRequestOption extends $tea.Model {
    /**
     * @example
     * 3600
     */
    duration?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加文件夹
     *
     * @param request - AddFolderRequest
     * @param headers - AddFolderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddFolderResponse
     */
    addFolderWithOptions(spaceId: string, parentId: string, request: AddFolderRequest, headers: AddFolderHeaders, runtime: $Util.RuntimeOptions): Promise<AddFolderResponse>;
    /**
     * 添加文件夹
     *
     * @param request - AddFolderRequest
     * @returns AddFolderResponse
     */
    addFolder(spaceId: string, parentId: string, request: AddFolderRequest): Promise<AddFolderResponse>;
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @param headers - AddPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddPermissionResponse
     */
    addPermissionWithOptions(spaceId: string, dentryId: string, request: AddPermissionRequest, headers: AddPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<AddPermissionResponse>;
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @returns AddPermissionResponse
     */
    addPermission(spaceId: string, dentryId: string, request: AddPermissionRequest): Promise<AddPermissionResponse>;
    /**
     * 添加空间
     *
     * @param request - AddSpaceRequest
     * @param headers - AddSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddSpaceResponse
     */
    addSpaceWithOptions(request: AddSpaceRequest, headers: AddSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<AddSpaceResponse>;
    /**
     * 添加空间
     *
     * @param request - AddSpaceRequest
     * @returns AddSpaceResponse
     */
    addSpace(request: AddSpaceRequest): Promise<AddSpaceResponse>;
    /**
     * 清空回收站
     *
     * @param request - ClearRecycleBinRequest
     * @param headers - ClearRecycleBinHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ClearRecycleBinResponse
     */
    clearRecycleBinWithOptions(recycleBinId: string, request: ClearRecycleBinRequest, headers: ClearRecycleBinHeaders, runtime: $Util.RuntimeOptions): Promise<ClearRecycleBinResponse>;
    /**
     * 清空回收站
     *
     * @param request - ClearRecycleBinRequest
     * @returns ClearRecycleBinResponse
     */
    clearRecycleBin(recycleBinId: string, request: ClearRecycleBinRequest): Promise<ClearRecycleBinResponse>;
    /**
     * 提交文件
     *
     * @param request - CommitFileRequest
     * @param headers - CommitFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CommitFileResponse
     */
    commitFileWithOptions(spaceId: string, request: CommitFileRequest, headers: CommitFileHeaders, runtime: $Util.RuntimeOptions): Promise<CommitFileResponse>;
    /**
     * 提交文件
     *
     * @param request - CommitFileRequest
     * @returns CommitFileResponse
     */
    commitFile(spaceId: string, request: CommitFileRequest): Promise<CommitFileResponse>;
    /**
     * 批量拷贝文件或文件夹
     *
     * @param request - CopyDentriesRequest
     * @param headers - CopyDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyDentriesResponse
     */
    copyDentriesWithOptions(spaceId: string, request: CopyDentriesRequest, headers: CopyDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<CopyDentriesResponse>;
    /**
     * 批量拷贝文件或文件夹
     *
     * @param request - CopyDentriesRequest
     * @returns CopyDentriesResponse
     */
    copyDentries(spaceId: string, request: CopyDentriesRequest): Promise<CopyDentriesResponse>;
    /**
     * 拷贝文件或文件夹
     *
     * @param request - CopyDentryRequest
     * @param headers - CopyDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyDentryResponse
     */
    copyDentryWithOptions(spaceId: string, dentryId: string, request: CopyDentryRequest, headers: CopyDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CopyDentryResponse>;
    /**
     * 拷贝文件或文件夹
     *
     * @param request - CopyDentryRequest
     * @returns CopyDentryResponse
     */
    copyDentry(spaceId: string, dentryId: string, request: CopyDentryRequest): Promise<CopyDentryResponse>;
    /**
     * 批量删除文件或文件夹
     *
     * @param request - DeleteDentriesRequest
     * @param headers - DeleteDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDentriesResponse
     */
    deleteDentriesWithOptions(spaceId: string, request: DeleteDentriesRequest, headers: DeleteDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDentriesResponse>;
    /**
     * 批量删除文件或文件夹
     *
     * @param request - DeleteDentriesRequest
     * @returns DeleteDentriesResponse
     */
    deleteDentries(spaceId: string, request: DeleteDentriesRequest): Promise<DeleteDentriesResponse>;
    /**
     * 删除文件或文件夹
     *
     * @param request - DeleteDentryRequest
     * @param headers - DeleteDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDentryResponse
     */
    deleteDentryWithOptions(spaceId: string, dentryId: string, request: DeleteDentryRequest, headers: DeleteDentryHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDentryResponse>;
    /**
     * 删除文件或文件夹
     *
     * @param request - DeleteDentryRequest
     * @returns DeleteDentryResponse
     */
    deleteDentry(spaceId: string, dentryId: string, request: DeleteDentryRequest): Promise<DeleteDentryResponse>;
    /**
     * 删除文件上的App属性值
     *
     * @param request - DeleteDentryAppPropertiesRequest
     * @param headers - DeleteDentryAppPropertiesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDentryAppPropertiesResponse
     */
    deleteDentryAppPropertiesWithOptions(spaceId: string, dentryId: string, request: DeleteDentryAppPropertiesRequest, headers: DeleteDentryAppPropertiesHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDentryAppPropertiesResponse>;
    /**
     * 删除文件上的App属性值
     *
     * @param request - DeleteDentryAppPropertiesRequest
     * @returns DeleteDentryAppPropertiesResponse
     */
    deleteDentryAppProperties(spaceId: string, dentryId: string, request: DeleteDentryAppPropertiesRequest): Promise<DeleteDentryAppPropertiesResponse>;
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @param headers - DeletePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeletePermissionResponse
     */
    deletePermissionWithOptions(spaceId: string, dentryId: string, request: DeletePermissionRequest, headers: DeletePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePermissionResponse>;
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @returns DeletePermissionResponse
     */
    deletePermission(spaceId: string, dentryId: string, request: DeletePermissionRequest): Promise<DeletePermissionResponse>;
    /**
     * 删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemRequest
     * @param headers - DeleteRecycleItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRecycleItemResponse
     */
    deleteRecycleItemWithOptions(recycleBinId: string, recycleItemId: string, request: DeleteRecycleItemRequest, headers: DeleteRecycleItemHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRecycleItemResponse>;
    /**
     * 删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemRequest
     * @returns DeleteRecycleItemResponse
     */
    deleteRecycleItem(recycleBinId: string, recycleItemId: string, request: DeleteRecycleItemRequest): Promise<DeleteRecycleItemResponse>;
    /**
     * 批量删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemsRequest
     * @param headers - DeleteRecycleItemsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRecycleItemsResponse
     */
    deleteRecycleItemsWithOptions(recycleBinId: string, request: DeleteRecycleItemsRequest, headers: DeleteRecycleItemsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRecycleItemsResponse>;
    /**
     * 批量删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemsRequest
     * @returns DeleteRecycleItemsResponse
     */
    deleteRecycleItems(recycleBinId: string, request: DeleteRecycleItemsRequest): Promise<DeleteRecycleItemsResponse>;
    /**
     * 获取开放平台应用在企业存储中的相关应用信息
     *
     * @param request - GetCurrentAppRequest
     * @param headers - GetCurrentAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCurrentAppResponse
     */
    getCurrentAppWithOptions(request: GetCurrentAppRequest, headers: GetCurrentAppHeaders, runtime: $Util.RuntimeOptions): Promise<GetCurrentAppResponse>;
    /**
     * 获取开放平台应用在企业存储中的相关应用信息
     *
     * @param request - GetCurrentAppRequest
     * @returns GetCurrentAppResponse
     */
    getCurrentApp(request: GetCurrentAppRequest): Promise<GetCurrentAppResponse>;
    /**
     * 批量获取文件(夹)信息
     *
     * @param request - GetDentriesRequest
     * @param headers - GetDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentriesResponse
     */
    getDentriesWithOptions(spaceId: string, request: GetDentriesRequest, headers: GetDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentriesResponse>;
    /**
     * 批量获取文件(夹)信息
     *
     * @param request - GetDentriesRequest
     * @returns GetDentriesResponse
     */
    getDentries(spaceId: string, request: GetDentriesRequest): Promise<GetDentriesResponse>;
    /**
     * 获取文件(夹)信息
     *
     * @param request - GetDentryRequest
     * @param headers - GetDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryResponse
     */
    getDentryWithOptions(spaceId: string, dentryId: string, request: GetDentryRequest, headers: GetDentryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryResponse>;
    /**
     * 获取文件(夹)信息
     *
     * @param request - GetDentryRequest
     * @returns GetDentryResponse
     */
    getDentry(spaceId: string, dentryId: string, request: GetDentryRequest): Promise<GetDentryResponse>;
    /**
     * 获取文件打开链接
     *
     * @param request - GetDentryOpenInfoRequest
     * @param headers - GetDentryOpenInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryOpenInfoResponse
     */
    getDentryOpenInfoWithOptions(spaceId: string, dentryId: string, request: GetDentryOpenInfoRequest, headers: GetDentryOpenInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryOpenInfoResponse>;
    /**
     * 获取文件打开链接
     *
     * @param request - GetDentryOpenInfoRequest
     * @returns GetDentryOpenInfoResponse
     */
    getDentryOpenInfo(spaceId: string, dentryId: string, request: GetDentryOpenInfoRequest): Promise<GetDentryOpenInfoResponse>;
    /**
     * 批量获取文件缩略图
     *
     * @param request - GetDentryThumbnailsRequest
     * @param headers - GetDentryThumbnailsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryThumbnailsResponse
     */
    getDentryThumbnailsWithOptions(spaceId: string, request: GetDentryThumbnailsRequest, headers: GetDentryThumbnailsHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryThumbnailsResponse>;
    /**
     * 批量获取文件缩略图
     *
     * @param request - GetDentryThumbnailsRequest
     * @returns GetDentryThumbnailsResponse
     */
    getDentryThumbnails(spaceId: string, request: GetDentryThumbnailsRequest): Promise<GetDentryThumbnailsResponse>;
    /**
     * 获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @param headers - GetFileDownloadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileDownloadInfoResponse
     */
    getFileDownloadInfoWithOptions(spaceId: string, dentryId: string, request: GetFileDownloadInfoRequest, headers: GetFileDownloadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileDownloadInfoResponse>;
    /**
     * 获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @returns GetFileDownloadInfoResponse
     */
    getFileDownloadInfo(spaceId: string, dentryId: string, request: GetFileDownloadInfoRequest): Promise<GetFileDownloadInfoResponse>;
    /**
     * 获取文件上传信息
     *
     * @param request - GetFileUploadInfoRequest
     * @param headers - GetFileUploadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileUploadInfoResponse
     */
    getFileUploadInfoWithOptions(spaceId: string, request: GetFileUploadInfoRequest, headers: GetFileUploadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileUploadInfoResponse>;
    /**
     * 获取文件上传信息
     *
     * @param request - GetFileUploadInfoRequest
     * @returns GetFileUploadInfoResponse
     */
    getFileUploadInfo(spaceId: string, request: GetFileUploadInfoRequest): Promise<GetFileUploadInfoResponse>;
    /**
     * 获取文件上传信息(分片上传)
     *
     * @param request - GetMultipartFileUploadInfosRequest
     * @param headers - GetMultipartFileUploadInfosHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMultipartFileUploadInfosResponse
     */
    getMultipartFileUploadInfosWithOptions(request: GetMultipartFileUploadInfosRequest, headers: GetMultipartFileUploadInfosHeaders, runtime: $Util.RuntimeOptions): Promise<GetMultipartFileUploadInfosResponse>;
    /**
     * 获取文件上传信息(分片上传)
     *
     * @param request - GetMultipartFileUploadInfosRequest
     * @returns GetMultipartFileUploadInfosResponse
     */
    getMultipartFileUploadInfos(request: GetMultipartFileUploadInfosRequest): Promise<GetMultipartFileUploadInfosResponse>;
    /**
     * 获取企业存储中企业维度的信息
     *
     * @param request - GetOrgRequest
     * @param headers - GetOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrgResponse
     */
    getOrgWithOptions(corpId: string, request: GetOrgRequest, headers: GetOrgHeaders, runtime: $Util.RuntimeOptions): Promise<GetOrgResponse>;
    /**
     * 获取企业存储中企业维度的信息
     *
     * @param request - GetOrgRequest
     * @returns GetOrgResponse
     */
    getOrg(corpId: string, request: GetOrgRequest): Promise<GetOrgResponse>;
    /**
     * 获取回收站信息
     *
     * @param request - GetRecycleBinRequest
     * @param headers - GetRecycleBinHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecycleBinResponse
     */
    getRecycleBinWithOptions(request: GetRecycleBinRequest, headers: GetRecycleBinHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecycleBinResponse>;
    /**
     * 获取回收站信息
     *
     * @param request - GetRecycleBinRequest
     * @returns GetRecycleBinResponse
     */
    getRecycleBin(request: GetRecycleBinRequest): Promise<GetRecycleBinResponse>;
    /**
     * 获取回收项详情
     *
     * @param request - GetRecycleItemRequest
     * @param headers - GetRecycleItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecycleItemResponse
     */
    getRecycleItemWithOptions(recycleBinId: string, recycleItemId: string, request: GetRecycleItemRequest, headers: GetRecycleItemHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecycleItemResponse>;
    /**
     * 获取回收项详情
     *
     * @param request - GetRecycleItemRequest
     * @returns GetRecycleItemResponse
     */
    getRecycleItem(recycleBinId: string, recycleItemId: string, request: GetRecycleItemRequest): Promise<GetRecycleItemResponse>;
    /**
     * 获取空间信息
     *
     * @param request - GetSpaceRequest
     * @param headers - GetSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSpaceResponse
     */
    getSpaceWithOptions(spaceId: string, request: GetSpaceRequest, headers: GetSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceResponse>;
    /**
     * 获取空间信息
     *
     * @param request - GetSpaceRequest
     * @returns GetSpaceResponse
     */
    getSpace(spaceId: string, request: GetSpaceRequest): Promise<GetSpaceResponse>;
    /**
     * 获取异步任务信息
     *
     * @param request - GetTaskRequest
     * @param headers - GetTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskResponse
     */
    getTaskWithOptions(taskId: string, request: GetTaskRequest, headers: GetTaskHeaders, runtime: $Util.RuntimeOptions): Promise<GetTaskResponse>;
    /**
     * 获取异步任务信息
     *
     * @param request - GetTaskRequest
     * @returns GetTaskResponse
     */
    getTask(taskId: string, request: GetTaskRequest): Promise<GetTaskResponse>;
    /**
     * 获取 WebOfficeUrl 接口
     *
     * @param request - GetWebOfficeUrlRequest
     * @param headers - GetWebOfficeUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetWebOfficeUrlResponse
     */
    getWebOfficeUrlWithOptions(spaceId: string, dentryId: string, request: GetWebOfficeUrlRequest, headers: GetWebOfficeUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetWebOfficeUrlResponse>;
    /**
     * 获取 WebOfficeUrl 接口
     *
     * @param request - GetWebOfficeUrlRequest
     * @returns GetWebOfficeUrlResponse
     */
    getWebOfficeUrl(spaceId: string, dentryId: string, request: GetWebOfficeUrlRequest): Promise<GetWebOfficeUrlResponse>;
    /**
     * 初始化文件分片上传
     *
     * @param request - InitMultipartFileUploadRequest
     * @param headers - InitMultipartFileUploadHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InitMultipartFileUploadResponse
     */
    initMultipartFileUploadWithOptions(spaceId: string, request: InitMultipartFileUploadRequest, headers: InitMultipartFileUploadHeaders, runtime: $Util.RuntimeOptions): Promise<InitMultipartFileUploadResponse>;
    /**
     * 初始化文件分片上传
     *
     * @param request - InitMultipartFileUploadRequest
     * @returns InitMultipartFileUploadResponse
     */
    initMultipartFileUpload(spaceId: string, request: InitMultipartFileUploadRequest): Promise<InitMultipartFileUploadResponse>;
    /**
     * 获取文件列表
     *
     * @param request - ListAllDentriesRequest
     * @param headers - ListAllDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAllDentriesResponse
     */
    listAllDentriesWithOptions(spaceId: string, request: ListAllDentriesRequest, headers: ListAllDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<ListAllDentriesResponse>;
    /**
     * 获取文件列表
     *
     * @param request - ListAllDentriesRequest
     * @returns ListAllDentriesResponse
     */
    listAllDentries(spaceId: string, request: ListAllDentriesRequest): Promise<ListAllDentriesResponse>;
    /**
     * 获取文件列表
     *
     * @param request - ListDentriesRequest
     * @param headers - ListDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDentriesResponse
     */
    listDentriesWithOptions(spaceId: string, request: ListDentriesRequest, headers: ListDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<ListDentriesResponse>;
    /**
     * 获取文件列表
     *
     * @param request - ListDentriesRequest
     * @returns ListDentriesResponse
     */
    listDentries(spaceId: string, request: ListDentriesRequest): Promise<ListDentriesResponse>;
    /**
     * 获取文件历史版本
     *
     * @param request - ListDentryVersionsRequest
     * @param headers - ListDentryVersionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDentryVersionsResponse
     */
    listDentryVersionsWithOptions(spaceId: string, dentryId: string, request: ListDentryVersionsRequest, headers: ListDentryVersionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListDentryVersionsResponse>;
    /**
     * 获取文件历史版本
     *
     * @param request - ListDentryVersionsRequest
     * @returns ListDentryVersionsResponse
     */
    listDentryVersions(spaceId: string, dentryId: string, request: ListDentryVersionsRequest): Promise<ListDentryVersionsResponse>;
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @param headers - ListPermissionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPermissionsResponse
     */
    listPermissionsWithOptions(spaceId: string, dentryId: string, request: ListPermissionsRequest, headers: ListPermissionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListPermissionsResponse>;
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @returns ListPermissionsResponse
     */
    listPermissions(spaceId: string, dentryId: string, request: ListPermissionsRequest): Promise<ListPermissionsResponse>;
    /**
     * 获取回收项列表
     *
     * @param request - ListRecycleItemsRequest
     * @param headers - ListRecycleItemsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRecycleItemsResponse
     */
    listRecycleItemsWithOptions(recycleBinId: string, request: ListRecycleItemsRequest, headers: ListRecycleItemsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRecycleItemsResponse>;
    /**
     * 获取回收项列表
     *
     * @param request - ListRecycleItemsRequest
     * @returns ListRecycleItemsResponse
     */
    listRecycleItems(recycleBinId: string, request: ListRecycleItemsRequest): Promise<ListRecycleItemsResponse>;
    /**
     * 批量移动文件或文件夹
     *
     * @param request - MoveDentriesRequest
     * @param headers - MoveDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveDentriesResponse
     */
    moveDentriesWithOptions(spaceId: string, request: MoveDentriesRequest, headers: MoveDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<MoveDentriesResponse>;
    /**
     * 批量移动文件或文件夹
     *
     * @param request - MoveDentriesRequest
     * @returns MoveDentriesResponse
     */
    moveDentries(spaceId: string, request: MoveDentriesRequest): Promise<MoveDentriesResponse>;
    /**
     * 移动文件或文件夹
     *
     * @param request - MoveDentryRequest
     * @param headers - MoveDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveDentryResponse
     */
    moveDentryWithOptions(spaceId: string, dentryId: string, request: MoveDentryRequest, headers: MoveDentryHeaders, runtime: $Util.RuntimeOptions): Promise<MoveDentryResponse>;
    /**
     * 移动文件或文件夹
     *
     * @param request - MoveDentryRequest
     * @returns MoveDentryResponse
     */
    moveDentry(spaceId: string, dentryId: string, request: MoveDentryRequest): Promise<MoveDentryResponse>;
    /**
     * 获取 accessToken 接口
     *
     * @param request - RefreshWebOfficeTokenRequest
     * @param headers - RefreshWebOfficeTokenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RefreshWebOfficeTokenResponse
     */
    refreshWebOfficeTokenWithOptions(spaceId: string, dentryId: string, request: RefreshWebOfficeTokenRequest, headers: RefreshWebOfficeTokenHeaders, runtime: $Util.RuntimeOptions): Promise<RefreshWebOfficeTokenResponse>;
    /**
     * 获取 accessToken 接口
     *
     * @param request - RefreshWebOfficeTokenRequest
     * @returns RefreshWebOfficeTokenResponse
     */
    refreshWebOfficeToken(spaceId: string, dentryId: string, request: RefreshWebOfficeTokenRequest): Promise<RefreshWebOfficeTokenResponse>;
    /**
     * 注册文件预览或编辑链接
     *
     * @param request - RegisterOpenInfoRequest
     * @param headers - RegisterOpenInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterOpenInfoResponse
     */
    registerOpenInfoWithOptions(spaceId: string, dentryId: string, request: RegisterOpenInfoRequest, headers: RegisterOpenInfoHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterOpenInfoResponse>;
    /**
     * 注册文件预览或编辑链接
     *
     * @param request - RegisterOpenInfoRequest
     * @returns RegisterOpenInfoResponse
     */
    registerOpenInfo(spaceId: string, dentryId: string, request: RegisterOpenInfoRequest): Promise<RegisterOpenInfoResponse>;
    /**
     * 重命名文件或文件夹
     *
     * @param request - RenameDentryRequest
     * @param headers - RenameDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RenameDentryResponse
     */
    renameDentryWithOptions(spaceId: string, dentryId: string, request: RenameDentryRequest, headers: RenameDentryHeaders, runtime: $Util.RuntimeOptions): Promise<RenameDentryResponse>;
    /**
     * 重命名文件或文件夹
     *
     * @param request - RenameDentryRequest
     * @returns RenameDentryResponse
     */
    renameDentry(spaceId: string, dentryId: string, request: RenameDentryRequest): Promise<RenameDentryResponse>;
    /**
     * 还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemRequest
     * @param headers - RestoreRecycleItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RestoreRecycleItemResponse
     */
    restoreRecycleItemWithOptions(recycleBinId: string, recycleItemId: string, request: RestoreRecycleItemRequest, headers: RestoreRecycleItemHeaders, runtime: $Util.RuntimeOptions): Promise<RestoreRecycleItemResponse>;
    /**
     * 还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemRequest
     * @returns RestoreRecycleItemResponse
     */
    restoreRecycleItem(recycleBinId: string, recycleItemId: string, request: RestoreRecycleItemRequest): Promise<RestoreRecycleItemResponse>;
    /**
     * 批量还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemsRequest
     * @param headers - RestoreRecycleItemsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RestoreRecycleItemsResponse
     */
    restoreRecycleItemsWithOptions(recycleBinId: string, request: RestoreRecycleItemsRequest, headers: RestoreRecycleItemsHeaders, runtime: $Util.RuntimeOptions): Promise<RestoreRecycleItemsResponse>;
    /**
     * 批量还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemsRequest
     * @returns RestoreRecycleItemsResponse
     */
    restoreRecycleItems(recycleBinId: string, request: RestoreRecycleItemsRequest): Promise<RestoreRecycleItemsResponse>;
    /**
     * 恢复文件历史版本
     *
     * @param request - RevertDentryVersionRequest
     * @param headers - RevertDentryVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RevertDentryVersionResponse
     */
    revertDentryVersionWithOptions(spaceId: string, dentryId: string, version: string, request: RevertDentryVersionRequest, headers: RevertDentryVersionHeaders, runtime: $Util.RuntimeOptions): Promise<RevertDentryVersionResponse>;
    /**
     * 恢复文件历史版本
     *
     * @param request - RevertDentryVersionRequest
     * @returns RevertDentryVersionResponse
     */
    revertDentryVersion(spaceId: string, dentryId: string, version: string, request: RevertDentryVersionRequest): Promise<RevertDentryVersionResponse>;
    /**
     * 订阅文件变更事件
     *
     * @param request - SubscribeEventRequest
     * @param headers - SubscribeEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubscribeEventResponse
     */
    subscribeEventWithOptions(request: SubscribeEventRequest, headers: SubscribeEventHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeEventResponse>;
    /**
     * 订阅文件变更事件
     *
     * @param request - SubscribeEventRequest
     * @returns SubscribeEventResponse
     */
    subscribeEvent(request: SubscribeEventRequest): Promise<SubscribeEventResponse>;
    /**
     * 取消订阅文件变更事件
     *
     * @param request - UnsubscribeEventRequest
     * @param headers - UnsubscribeEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnsubscribeEventResponse
     */
    unsubscribeEventWithOptions(request: UnsubscribeEventRequest, headers: UnsubscribeEventHeaders, runtime: $Util.RuntimeOptions): Promise<UnsubscribeEventResponse>;
    /**
     * 取消订阅文件变更事件
     *
     * @param request - UnsubscribeEventRequest
     * @returns UnsubscribeEventResponse
     */
    unsubscribeEvent(request: UnsubscribeEventRequest): Promise<UnsubscribeEventResponse>;
    /**
     * 修改文件上的App属性值
     *
     * @param request - UpdateDentryAppPropertiesRequest
     * @param headers - UpdateDentryAppPropertiesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateDentryAppPropertiesResponse
     */
    updateDentryAppPropertiesWithOptions(spaceId: string, dentryId: string, request: UpdateDentryAppPropertiesRequest, headers: UpdateDentryAppPropertiesHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateDentryAppPropertiesResponse>;
    /**
     * 修改文件上的App属性值
     *
     * @param request - UpdateDentryAppPropertiesRequest
     * @returns UpdateDentryAppPropertiesResponse
     */
    updateDentryAppProperties(spaceId: string, dentryId: string, request: UpdateDentryAppPropertiesRequest): Promise<UpdateDentryAppPropertiesResponse>;
    /**
     * 修改权限
     *
     * @param request - UpdatePermissionRequest
     * @param headers - UpdatePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePermissionResponse
     */
    updatePermissionWithOptions(spaceId: string, dentryId: string, request: UpdatePermissionRequest, headers: UpdatePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePermissionResponse>;
    /**
     * 修改权限
     *
     * @param request - UpdatePermissionRequest
     * @returns UpdatePermissionResponse
     */
    updatePermission(spaceId: string, dentryId: string, request: UpdatePermissionRequest): Promise<UpdatePermissionResponse>;
}
