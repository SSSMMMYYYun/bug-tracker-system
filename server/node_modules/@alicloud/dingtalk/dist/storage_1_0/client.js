"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteRecycleItemResponseBody = exports.DeleteRecycleItemRequest = exports.DeleteRecycleItemHeaders = exports.DeletePermissionResponse = exports.DeletePermissionResponseBody = exports.DeletePermissionRequest = exports.DeletePermissionHeaders = exports.DeleteDentryAppPropertiesResponse = exports.DeleteDentryAppPropertiesResponseBody = exports.DeleteDentryAppPropertiesRequest = exports.DeleteDentryAppPropertiesHeaders = exports.DeleteDentryResponse = exports.DeleteDentryResponseBody = exports.DeleteDentryRequest = exports.DeleteDentryHeaders = exports.DeleteDentriesResponse = exports.DeleteDentriesResponseBody = exports.DeleteDentriesRequest = exports.DeleteDentriesHeaders = exports.CopyDentryResponse = exports.CopyDentryResponseBody = exports.CopyDentryRequest = exports.CopyDentryHeaders = exports.CopyDentriesResponse = exports.CopyDentriesResponseBody = exports.CopyDentriesRequest = exports.CopyDentriesHeaders = exports.CommitFileResponse = exports.CommitFileResponseBody = exports.CommitFileRequest = exports.CommitFileHeaders = exports.ClearRecycleBinResponse = exports.ClearRecycleBinResponseBody = exports.ClearRecycleBinRequest = exports.ClearRecycleBinHeaders = exports.AddSpaceResponse = exports.AddSpaceResponseBody = exports.AddSpaceRequest = exports.AddSpaceHeaders = exports.AddPermissionResponse = exports.AddPermissionResponseBody = exports.AddPermissionRequest = exports.AddPermissionHeaders = exports.AddFolderResponse = exports.AddFolderResponseBody = exports.AddFolderRequest = exports.AddFolderHeaders = exports.DentriesAppPropertiesValue = exports.ResultItemsDentryAppPropertiesValue = exports.DentryAppPropertiesValue = void 0;
exports.GetSpaceHeaders = exports.GetRecycleItemResponse = exports.GetRecycleItemResponseBody = exports.GetRecycleItemRequest = exports.GetRecycleItemHeaders = exports.GetRecycleBinResponse = exports.GetRecycleBinResponseBody = exports.GetRecycleBinRequest = exports.GetRecycleBinHeaders = exports.GetOrgResponse = exports.GetOrgResponseBody = exports.GetOrgRequest = exports.GetOrgHeaders = exports.GetMultipartFileUploadInfosResponse = exports.GetMultipartFileUploadInfosResponseBody = exports.GetMultipartFileUploadInfosRequest = exports.GetMultipartFileUploadInfosHeaders = exports.GetFileUploadInfoResponse = exports.GetFileUploadInfoResponseBody = exports.GetFileUploadInfoRequest = exports.GetFileUploadInfoHeaders = exports.GetFileDownloadInfoResponse = exports.GetFileDownloadInfoResponseBody = exports.GetFileDownloadInfoRequest = exports.GetFileDownloadInfoHeaders = exports.GetDentryThumbnailsResponse = exports.GetDentryThumbnailsResponseBody = exports.GetDentryThumbnailsRequest = exports.GetDentryThumbnailsHeaders = exports.GetDentryOpenInfoResponse = exports.GetDentryOpenInfoResponseBody = exports.GetDentryOpenInfoRequest = exports.GetDentryOpenInfoHeaders = exports.GetDentryResponse = exports.GetDentryResponseBody = exports.GetDentryRequest = exports.GetDentryHeaders = exports.GetDentriesResponse = exports.GetDentriesResponseBody = exports.GetDentriesRequest = exports.GetDentriesHeaders = exports.GetCurrentAppResponse = exports.GetCurrentAppResponseBody = exports.GetCurrentAppRequest = exports.GetCurrentAppHeaders = exports.DeleteRecycleItemsResponse = exports.DeleteRecycleItemsResponseBody = exports.DeleteRecycleItemsRequest = exports.DeleteRecycleItemsHeaders = exports.DeleteRecycleItemResponse = void 0;
exports.RegisterOpenInfoResponseBody = exports.RegisterOpenInfoRequest = exports.RegisterOpenInfoHeaders = exports.RefreshWebOfficeTokenResponse = exports.RefreshWebOfficeTokenResponseBody = exports.RefreshWebOfficeTokenRequest = exports.RefreshWebOfficeTokenHeaders = exports.MoveDentryResponse = exports.MoveDentryResponseBody = exports.MoveDentryRequest = exports.MoveDentryHeaders = exports.MoveDentriesResponse = exports.MoveDentriesResponseBody = exports.MoveDentriesRequest = exports.MoveDentriesHeaders = exports.ListRecycleItemsResponse = exports.ListRecycleItemsResponseBody = exports.ListRecycleItemsRequest = exports.ListRecycleItemsHeaders = exports.ListPermissionsResponse = exports.ListPermissionsResponseBody = exports.ListPermissionsRequest = exports.ListPermissionsHeaders = exports.ListDentryVersionsResponse = exports.ListDentryVersionsResponseBody = exports.ListDentryVersionsRequest = exports.ListDentryVersionsHeaders = exports.ListDentriesResponse = exports.ListDentriesResponseBody = exports.ListDentriesRequest = exports.ListDentriesHeaders = exports.ListAllDentriesResponse = exports.ListAllDentriesResponseBody = exports.ListAllDentriesRequest = exports.ListAllDentriesHeaders = exports.InitMultipartFileUploadResponse = exports.InitMultipartFileUploadResponseBody = exports.InitMultipartFileUploadRequest = exports.InitMultipartFileUploadHeaders = exports.GetWebOfficeUrlResponse = exports.GetWebOfficeUrlResponseBody = exports.GetWebOfficeUrlRequest = exports.GetWebOfficeUrlHeaders = exports.GetTaskResponse = exports.GetTaskResponseBody = exports.GetTaskRequest = exports.GetTaskHeaders = exports.GetSpaceResponse = exports.GetSpaceResponseBody = exports.GetSpaceRequest = void 0;
exports.CommitFileResponseBodyDentry = exports.CommitFileResponseBodyDentryThumbnail = exports.CommitFileResponseBodyDentryProperties = exports.CommitFileRequestOption = exports.CommitFileRequestOptionAppProperties = exports.AddSpaceResponseBodySpace = exports.AddSpaceResponseBodySpacePartitions = exports.AddSpaceResponseBodySpacePartitionsQuota = exports.AddSpaceResponseBodySpaceCapabilities = exports.AddSpaceRequestOption = exports.AddSpaceRequestOptionCapabilities = exports.AddPermissionRequestOption = exports.AddPermissionRequestMembers = exports.AddFolderResponseBodyDentry = exports.AddFolderResponseBodyDentryProperties = exports.AddFolderRequestOption = exports.AddFolderRequestOptionAppProperties = exports.UpdatePermissionResponse = exports.UpdatePermissionResponseBody = exports.UpdatePermissionRequest = exports.UpdatePermissionHeaders = exports.UpdateDentryAppPropertiesResponse = exports.UpdateDentryAppPropertiesResponseBody = exports.UpdateDentryAppPropertiesRequest = exports.UpdateDentryAppPropertiesHeaders = exports.UnsubscribeEventResponse = exports.UnsubscribeEventResponseBody = exports.UnsubscribeEventRequest = exports.UnsubscribeEventHeaders = exports.SubscribeEventResponse = exports.SubscribeEventResponseBody = exports.SubscribeEventRequest = exports.SubscribeEventHeaders = exports.RevertDentryVersionResponse = exports.RevertDentryVersionResponseBody = exports.RevertDentryVersionRequest = exports.RevertDentryVersionHeaders = exports.RestoreRecycleItemsResponse = exports.RestoreRecycleItemsResponseBody = exports.RestoreRecycleItemsRequest = exports.RestoreRecycleItemsHeaders = exports.RestoreRecycleItemResponse = exports.RestoreRecycleItemResponseBody = exports.RestoreRecycleItemRequest = exports.RestoreRecycleItemHeaders = exports.RenameDentryResponse = exports.RenameDentryResponseBody = exports.RenameDentryRequest = exports.RenameDentryHeaders = exports.RegisterOpenInfoResponse = void 0;
exports.ListDentriesResponseBodyDentries = exports.ListDentriesResponseBodyDentriesThumbnail = exports.ListDentriesResponseBodyDentriesProperties = exports.ListAllDentriesResponseBodyDentries = exports.ListAllDentriesResponseBodyDentriesThumbnail = exports.ListAllDentriesResponseBodyDentriesProperties = exports.ListAllDentriesRequestOption = exports.InitMultipartFileUploadRequestOption = exports.InitMultipartFileUploadRequestOptionPreCheckParam = exports.GetTaskResponseBodyTask = exports.GetSpaceResponseBodySpace = exports.GetSpaceResponseBodySpacePartitions = exports.GetSpaceResponseBodySpacePartitionsQuota = exports.GetSpaceResponseBodySpaceCapabilities = exports.GetRecycleItemResponseBodyItem = exports.GetRecycleBinResponseBodyRecycleBin = exports.GetOrgResponseBodyOrg = exports.GetOrgResponseBodyOrgPartitions = exports.GetOrgResponseBodyOrgPartitionsQuota = exports.GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos = exports.GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo = exports.GetMultipartFileUploadInfosRequestOption = exports.GetFileUploadInfoResponseBodyHeaderSignatureInfo = exports.GetFileUploadInfoRequestOption = exports.GetFileUploadInfoRequestOptionPreCheckParam = exports.GetFileDownloadInfoResponseBodyHeaderSignatureInfo = exports.GetFileDownloadInfoRequestOption = exports.GetDentryThumbnailsResponseBodyResultItems = exports.GetDentryThumbnailsResponseBodyResultItemsThumbnail = exports.GetDentryOpenInfoRequestOption = exports.GetDentryResponseBodyDentry = exports.GetDentryResponseBodyDentryThumbnail = exports.GetDentryResponseBodyDentryProperties = exports.GetDentryRequestOption = exports.GetDentriesResponseBodyResultItems = exports.GetDentriesResponseBodyResultItemsDentry = exports.GetDentriesResponseBodyResultItemsDentryThumbnail = exports.GetDentriesResponseBodyResultItemsDentryProperties = exports.GetDentriesRequestOption = exports.GetCurrentAppResponseBodyApp = exports.GetCurrentAppResponseBodyAppPartitions = exports.GetCurrentAppResponseBodyAppPartitionsQuota = exports.DeletePermissionRequestMembers = exports.DeleteDentriesResponseBodyResultItems = exports.DeleteDentriesRequestOption = exports.CopyDentryResponseBodyDentry = exports.CopyDentryResponseBodyDentryProperties = exports.CopyDentryRequestOption = exports.CopyDentriesResponseBodyResultItems = exports.CopyDentriesRequestOption = void 0;
exports.UpdatePermissionRequestOption = exports.UpdatePermissionRequestMembers = exports.UpdateDentryAppPropertiesRequestAppProperties = exports.RestoreRecycleItemsResponseBodyResultItems = exports.RestoreRecycleItemsRequestOption = exports.RestoreRecycleItemRequestOption = exports.RenameDentryResponseBodyDentry = exports.RenameDentryResponseBodyDentryProperties = exports.RegisterOpenInfoRequestOpenInfos = exports.MoveDentryResponseBodyDentry = exports.MoveDentryResponseBodyDentryProperties = exports.MoveDentryRequestOption = exports.MoveDentriesResponseBodyResultItems = exports.MoveDentriesRequestOption = exports.ListRecycleItemsResponseBodyRecycleItems = exports.ListPermissionsResponseBodyPermissions = exports.ListPermissionsResponseBodyPermissionsRole = exports.ListPermissionsResponseBodyPermissionsMember = exports.ListPermissionsRequestOption = exports.ListDentryVersionsResponseBodyDentries = exports.ListDentryVersionsResponseBodyDentriesProperties = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class DentryAppPropertiesValue extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryAppPropertiesValue = DentryAppPropertiesValue;
class ResultItemsDentryAppPropertiesValue extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ResultItemsDentryAppPropertiesValue = ResultItemsDentryAppPropertiesValue;
class DentriesAppPropertiesValue extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentriesAppPropertiesValue = DentriesAppPropertiesValue;
class AddFolderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderHeaders = AddFolderHeaders;
class AddFolderRequest extends $tea.Model {
    static names() {
        return {
            name: 'name',
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            option: AddFolderRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderRequest = AddFolderRequest;
class AddFolderResponseBody extends $tea.Model {
    static names() {
        return {
            dentry: 'dentry',
        };
    }
    static types() {
        return {
            dentry: AddFolderResponseBodyDentry,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderResponseBody = AddFolderResponseBody;
class AddFolderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddFolderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderResponse = AddFolderResponse;
class AddPermissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddPermissionHeaders = AddPermissionHeaders;
class AddPermissionRequest extends $tea.Model {
    static names() {
        return {
            members: 'members',
            option: 'option',
            roleId: 'roleId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': AddPermissionRequestMembers },
            option: AddPermissionRequestOption,
            roleId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddPermissionRequest = AddPermissionRequest;
class AddPermissionResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddPermissionResponseBody = AddPermissionResponseBody;
class AddPermissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddPermissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddPermissionResponse = AddPermissionResponse;
class AddSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceHeaders = AddSpaceHeaders;
class AddSpaceRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: AddSpaceRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceRequest = AddSpaceRequest;
class AddSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            space: 'space',
        };
    }
    static types() {
        return {
            space: AddSpaceResponseBodySpace,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceResponseBody = AddSpaceResponseBody;
class AddSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceResponse = AddSpaceResponse;
class ClearRecycleBinHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ClearRecycleBinHeaders = ClearRecycleBinHeaders;
class ClearRecycleBinRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ClearRecycleBinRequest = ClearRecycleBinRequest;
class ClearRecycleBinResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ClearRecycleBinResponseBody = ClearRecycleBinResponseBody;
class ClearRecycleBinResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ClearRecycleBinResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ClearRecycleBinResponse = ClearRecycleBinResponse;
class CommitFileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileHeaders = CommitFileHeaders;
class CommitFileRequest extends $tea.Model {
    static names() {
        return {
            name: 'name',
            option: 'option',
            overwriteDentryId: 'overwriteDentryId',
            parentId: 'parentId',
            uploadKey: 'uploadKey',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            option: CommitFileRequestOption,
            overwriteDentryId: 'string',
            parentId: 'string',
            uploadKey: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileRequest = CommitFileRequest;
class CommitFileResponseBody extends $tea.Model {
    static names() {
        return {
            dentry: 'dentry',
        };
    }
    static types() {
        return {
            dentry: CommitFileResponseBodyDentry,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileResponseBody = CommitFileResponseBody;
class CommitFileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CommitFileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileResponse = CommitFileResponse;
class CopyDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentriesHeaders = CopyDentriesHeaders;
class CopyDentriesRequest extends $tea.Model {
    static names() {
        return {
            dentryIds: 'dentryIds',
            option: 'option',
            targetFolderId: 'targetFolderId',
            targetSpaceId: 'targetSpaceId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            dentryIds: { 'type': 'array', 'itemType': 'string' },
            option: CopyDentriesRequestOption,
            targetFolderId: 'string',
            targetSpaceId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentriesRequest = CopyDentriesRequest;
class CopyDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            resultItems: { 'type': 'array', 'itemType': CopyDentriesResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentriesResponseBody = CopyDentriesResponseBody;
class CopyDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CopyDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentriesResponse = CopyDentriesResponse;
class CopyDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryHeaders = CopyDentryHeaders;
class CopyDentryRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            targetFolderId: 'targetFolderId',
            targetSpaceId: 'targetSpaceId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: CopyDentryRequestOption,
            targetFolderId: 'string',
            targetSpaceId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryRequest = CopyDentryRequest;
class CopyDentryResponseBody extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentry: 'dentry',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentry: CopyDentryResponseBodyDentry,
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryResponseBody = CopyDentryResponseBody;
class CopyDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CopyDentryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryResponse = CopyDentryResponse;
class DeleteDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentriesHeaders = DeleteDentriesHeaders;
class DeleteDentriesRequest extends $tea.Model {
    static names() {
        return {
            dentryIds: 'dentryIds',
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            dentryIds: { 'type': 'array', 'itemType': 'string' },
            option: DeleteDentriesRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentriesRequest = DeleteDentriesRequest;
class DeleteDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            resultItems: { 'type': 'array', 'itemType': DeleteDentriesResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentriesResponseBody = DeleteDentriesResponseBody;
class DeleteDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentriesResponse = DeleteDentriesResponse;
class DeleteDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryHeaders = DeleteDentryHeaders;
class DeleteDentryRequest extends $tea.Model {
    static names() {
        return {
            toRecycleBin: 'toRecycleBin',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            toRecycleBin: 'boolean',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryRequest = DeleteDentryRequest;
class DeleteDentryResponseBody extends $tea.Model {
    static names() {
        return {
            async: 'async',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryResponseBody = DeleteDentryResponseBody;
class DeleteDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDentryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryResponse = DeleteDentryResponse;
class DeleteDentryAppPropertiesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryAppPropertiesHeaders = DeleteDentryAppPropertiesHeaders;
class DeleteDentryAppPropertiesRequest extends $tea.Model {
    static names() {
        return {
            propertyNames: 'propertyNames',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            propertyNames: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryAppPropertiesRequest = DeleteDentryAppPropertiesRequest;
class DeleteDentryAppPropertiesResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryAppPropertiesResponseBody = DeleteDentryAppPropertiesResponseBody;
class DeleteDentryAppPropertiesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDentryAppPropertiesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentryAppPropertiesResponse = DeleteDentryAppPropertiesResponse;
class DeletePermissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePermissionHeaders = DeletePermissionHeaders;
class DeletePermissionRequest extends $tea.Model {
    static names() {
        return {
            members: 'members',
            roleId: 'roleId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': DeletePermissionRequestMembers },
            roleId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePermissionRequest = DeletePermissionRequest;
class DeletePermissionResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePermissionResponseBody = DeletePermissionResponseBody;
class DeletePermissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePermissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePermissionResponse = DeletePermissionResponse;
class DeleteRecycleItemHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemHeaders = DeleteRecycleItemHeaders;
class DeleteRecycleItemRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemRequest = DeleteRecycleItemRequest;
class DeleteRecycleItemResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemResponseBody = DeleteRecycleItemResponseBody;
class DeleteRecycleItemResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteRecycleItemResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemResponse = DeleteRecycleItemResponse;
class DeleteRecycleItemsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemsHeaders = DeleteRecycleItemsHeaders;
class DeleteRecycleItemsRequest extends $tea.Model {
    static names() {
        return {
            recycleItemIds: 'recycleItemIds',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            recycleItemIds: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemsRequest = DeleteRecycleItemsRequest;
class DeleteRecycleItemsResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemsResponseBody = DeleteRecycleItemsResponseBody;
class DeleteRecycleItemsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteRecycleItemsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRecycleItemsResponse = DeleteRecycleItemsResponse;
class GetCurrentAppHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppHeaders = GetCurrentAppHeaders;
class GetCurrentAppRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppRequest = GetCurrentAppRequest;
class GetCurrentAppResponseBody extends $tea.Model {
    static names() {
        return {
            app: 'app',
        };
    }
    static types() {
        return {
            app: GetCurrentAppResponseBodyApp,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppResponseBody = GetCurrentAppResponseBody;
class GetCurrentAppResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCurrentAppResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppResponse = GetCurrentAppResponse;
class GetDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesHeaders = GetDentriesHeaders;
class GetDentriesRequest extends $tea.Model {
    static names() {
        return {
            dentryIds: 'dentryIds',
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            dentryIds: { 'type': 'array', 'itemType': 'string' },
            option: GetDentriesRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesRequest = GetDentriesRequest;
class GetDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            resultItems: { 'type': 'array', 'itemType': GetDentriesResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesResponseBody = GetDentriesResponseBody;
class GetDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesResponse = GetDentriesResponse;
class GetDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryHeaders = GetDentryHeaders;
class GetDentryRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: GetDentryRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryRequest = GetDentryRequest;
class GetDentryResponseBody extends $tea.Model {
    static names() {
        return {
            dentry: 'dentry',
        };
    }
    static types() {
        return {
            dentry: GetDentryResponseBodyDentry,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryResponseBody = GetDentryResponseBody;
class GetDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDentryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryResponse = GetDentryResponse;
class GetDentryOpenInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryOpenInfoHeaders = GetDentryOpenInfoHeaders;
class GetDentryOpenInfoRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: GetDentryOpenInfoRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryOpenInfoRequest = GetDentryOpenInfoRequest;
class GetDentryOpenInfoResponseBody extends $tea.Model {
    static names() {
        return {
            hasWaterMark: 'hasWaterMark',
            url: 'url',
        };
    }
    static types() {
        return {
            hasWaterMark: 'boolean',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryOpenInfoResponseBody = GetDentryOpenInfoResponseBody;
class GetDentryOpenInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDentryOpenInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryOpenInfoResponse = GetDentryOpenInfoResponse;
class GetDentryThumbnailsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryThumbnailsHeaders = GetDentryThumbnailsHeaders;
class GetDentryThumbnailsRequest extends $tea.Model {
    static names() {
        return {
            dentryIds: 'dentryIds',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            dentryIds: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryThumbnailsRequest = GetDentryThumbnailsRequest;
class GetDentryThumbnailsResponseBody extends $tea.Model {
    static names() {
        return {
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            resultItems: { 'type': 'array', 'itemType': GetDentryThumbnailsResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryThumbnailsResponseBody = GetDentryThumbnailsResponseBody;
class GetDentryThumbnailsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDentryThumbnailsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryThumbnailsResponse = GetDentryThumbnailsResponse;
class GetFileDownloadInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoHeaders = GetFileDownloadInfoHeaders;
class GetFileDownloadInfoRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: GetFileDownloadInfoRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoRequest = GetFileDownloadInfoRequest;
class GetFileDownloadInfoResponseBody extends $tea.Model {
    static names() {
        return {
            headerSignatureInfo: 'headerSignatureInfo',
            protocol: 'protocol',
        };
    }
    static types() {
        return {
            headerSignatureInfo: GetFileDownloadInfoResponseBodyHeaderSignatureInfo,
            protocol: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoResponseBody = GetFileDownloadInfoResponseBody;
class GetFileDownloadInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFileDownloadInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoResponse = GetFileDownloadInfoResponse;
class GetFileUploadInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoHeaders = GetFileUploadInfoHeaders;
class GetFileUploadInfoRequest extends $tea.Model {
    static names() {
        return {
            multipart: 'multipart',
            option: 'option',
            protocol: 'protocol',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            multipart: 'boolean',
            option: GetFileUploadInfoRequestOption,
            protocol: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoRequest = GetFileUploadInfoRequest;
class GetFileUploadInfoResponseBody extends $tea.Model {
    static names() {
        return {
            headerSignatureInfo: 'headerSignatureInfo',
            protocol: 'protocol',
            storageDriver: 'storageDriver',
            uploadKey: 'uploadKey',
        };
    }
    static types() {
        return {
            headerSignatureInfo: GetFileUploadInfoResponseBodyHeaderSignatureInfo,
            protocol: 'string',
            storageDriver: 'string',
            uploadKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoResponseBody = GetFileUploadInfoResponseBody;
class GetFileUploadInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFileUploadInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoResponse = GetFileUploadInfoResponse;
class GetMultipartFileUploadInfosHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosHeaders = GetMultipartFileUploadInfosHeaders;
class GetMultipartFileUploadInfosRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            partNumbers: 'partNumbers',
            uploadKey: 'uploadKey',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: GetMultipartFileUploadInfosRequestOption,
            partNumbers: { 'type': 'array', 'itemType': 'number' },
            uploadKey: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosRequest = GetMultipartFileUploadInfosRequest;
class GetMultipartFileUploadInfosResponseBody extends $tea.Model {
    static names() {
        return {
            multipartHeaderSignatureInfos: 'multipartHeaderSignatureInfos',
        };
    }
    static types() {
        return {
            multipartHeaderSignatureInfos: { 'type': 'array', 'itemType': GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosResponseBody = GetMultipartFileUploadInfosResponseBody;
class GetMultipartFileUploadInfosResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMultipartFileUploadInfosResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosResponse = GetMultipartFileUploadInfosResponse;
class GetOrgHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgHeaders = GetOrgHeaders;
class GetOrgRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgRequest = GetOrgRequest;
class GetOrgResponseBody extends $tea.Model {
    static names() {
        return {
            org: 'org',
        };
    }
    static types() {
        return {
            org: GetOrgResponseBodyOrg,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgResponseBody = GetOrgResponseBody;
class GetOrgResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOrgResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgResponse = GetOrgResponse;
class GetRecycleBinHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleBinHeaders = GetRecycleBinHeaders;
class GetRecycleBinRequest extends $tea.Model {
    static names() {
        return {
            recycleBinScope: 'recycleBinScope',
            scopeId: 'scopeId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            recycleBinScope: 'string',
            scopeId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleBinRequest = GetRecycleBinRequest;
class GetRecycleBinResponseBody extends $tea.Model {
    static names() {
        return {
            recycleBin: 'recycleBin',
        };
    }
    static types() {
        return {
            recycleBin: GetRecycleBinResponseBodyRecycleBin,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleBinResponseBody = GetRecycleBinResponseBody;
class GetRecycleBinResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecycleBinResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleBinResponse = GetRecycleBinResponse;
class GetRecycleItemHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleItemHeaders = GetRecycleItemHeaders;
class GetRecycleItemRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleItemRequest = GetRecycleItemRequest;
class GetRecycleItemResponseBody extends $tea.Model {
    static names() {
        return {
            item: 'item',
        };
    }
    static types() {
        return {
            item: GetRecycleItemResponseBodyItem,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleItemResponseBody = GetRecycleItemResponseBody;
class GetRecycleItemResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecycleItemResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleItemResponse = GetRecycleItemResponse;
class GetSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceHeaders = GetSpaceHeaders;
class GetSpaceRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceRequest = GetSpaceRequest;
class GetSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            space: 'space',
        };
    }
    static types() {
        return {
            space: GetSpaceResponseBodySpace,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceResponseBody = GetSpaceResponseBody;
class GetSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceResponse = GetSpaceResponse;
class GetTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskHeaders = GetTaskHeaders;
class GetTaskRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskRequest = GetTaskRequest;
class GetTaskResponseBody extends $tea.Model {
    static names() {
        return {
            task: 'task',
        };
    }
    static types() {
        return {
            task: GetTaskResponseBodyTask,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskResponseBody = GetTaskResponseBody;
class GetTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskResponse = GetTaskResponse;
class GetWebOfficeUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWebOfficeUrlHeaders = GetWebOfficeUrlHeaders;
class GetWebOfficeUrlRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWebOfficeUrlRequest = GetWebOfficeUrlRequest;
class GetWebOfficeUrlResponseBody extends $tea.Model {
    static names() {
        return {
            webOfficeAccessToken: 'webOfficeAccessToken',
            webOfficeRefreshToken: 'webOfficeRefreshToken',
            webOfficeUrl: 'webOfficeUrl',
        };
    }
    static types() {
        return {
            webOfficeAccessToken: 'string',
            webOfficeRefreshToken: 'string',
            webOfficeUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWebOfficeUrlResponseBody = GetWebOfficeUrlResponseBody;
class GetWebOfficeUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWebOfficeUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWebOfficeUrlResponse = GetWebOfficeUrlResponse;
class InitMultipartFileUploadHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitMultipartFileUploadHeaders = InitMultipartFileUploadHeaders;
class InitMultipartFileUploadRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: InitMultipartFileUploadRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitMultipartFileUploadRequest = InitMultipartFileUploadRequest;
class InitMultipartFileUploadResponseBody extends $tea.Model {
    static names() {
        return {
            storageDriver: 'storageDriver',
            uploadKey: 'uploadKey',
        };
    }
    static types() {
        return {
            storageDriver: 'string',
            uploadKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitMultipartFileUploadResponseBody = InitMultipartFileUploadResponseBody;
class InitMultipartFileUploadResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InitMultipartFileUploadResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitMultipartFileUploadResponse = InitMultipartFileUploadResponse;
class ListAllDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesHeaders = ListAllDentriesHeaders;
class ListAllDentriesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: ListAllDentriesRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesRequest = ListAllDentriesRequest;
class ListAllDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            dentries: 'dentries',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            dentries: { 'type': 'array', 'itemType': ListAllDentriesResponseBodyDentries },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesResponseBody = ListAllDentriesResponseBody;
class ListAllDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAllDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesResponse = ListAllDentriesResponse;
class ListDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesHeaders = ListDentriesHeaders;
class ListDentriesRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            order: 'order',
            orderBy: 'orderBy',
            parentId: 'parentId',
            unionId: 'unionId',
            withThumbnail: 'withThumbnail',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            order: 'string',
            orderBy: 'string',
            parentId: 'string',
            unionId: 'string',
            withThumbnail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesRequest = ListDentriesRequest;
class ListDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            dentries: 'dentries',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            dentries: { 'type': 'array', 'itemType': ListDentriesResponseBodyDentries },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesResponseBody = ListDentriesResponseBody;
class ListDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesResponse = ListDentriesResponse;
class ListDentryVersionsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentryVersionsHeaders = ListDentryVersionsHeaders;
class ListDentryVersionsRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentryVersionsRequest = ListDentryVersionsRequest;
class ListDentryVersionsResponseBody extends $tea.Model {
    static names() {
        return {
            dentries: 'dentries',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            dentries: { 'type': 'array', 'itemType': ListDentryVersionsResponseBodyDentries },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentryVersionsResponseBody = ListDentryVersionsResponseBody;
class ListDentryVersionsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListDentryVersionsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentryVersionsResponse = ListDentryVersionsResponse;
class ListPermissionsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsHeaders = ListPermissionsHeaders;
class ListPermissionsRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: ListPermissionsRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsRequest = ListPermissionsRequest;
class ListPermissionsResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            permissions: 'permissions',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            permissions: { 'type': 'array', 'itemType': ListPermissionsResponseBodyPermissions },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsResponseBody = ListPermissionsResponseBody;
class ListPermissionsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPermissionsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsResponse = ListPermissionsResponse;
class ListRecycleItemsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecycleItemsHeaders = ListRecycleItemsHeaders;
class ListRecycleItemsRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecycleItemsRequest = ListRecycleItemsRequest;
class ListRecycleItemsResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            recycleItems: 'recycleItems',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            recycleItems: { 'type': 'array', 'itemType': ListRecycleItemsResponseBodyRecycleItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecycleItemsResponseBody = ListRecycleItemsResponseBody;
class ListRecycleItemsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRecycleItemsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecycleItemsResponse = ListRecycleItemsResponse;
class MoveDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentriesHeaders = MoveDentriesHeaders;
class MoveDentriesRequest extends $tea.Model {
    static names() {
        return {
            dentryIds: 'dentryIds',
            option: 'option',
            targetFolderId: 'targetFolderId',
            targetSpaceId: 'targetSpaceId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            dentryIds: { 'type': 'array', 'itemType': 'string' },
            option: MoveDentriesRequestOption,
            targetFolderId: 'string',
            targetSpaceId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentriesRequest = MoveDentriesRequest;
class MoveDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            resultItems: { 'type': 'array', 'itemType': MoveDentriesResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentriesResponseBody = MoveDentriesResponseBody;
class MoveDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: MoveDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentriesResponse = MoveDentriesResponse;
class MoveDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryHeaders = MoveDentryHeaders;
class MoveDentryRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            targetFolderId: 'targetFolderId',
            targetSpaceId: 'targetSpaceId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: MoveDentryRequestOption,
            targetFolderId: 'string',
            targetSpaceId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryRequest = MoveDentryRequest;
class MoveDentryResponseBody extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentry: 'dentry',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentry: MoveDentryResponseBodyDentry,
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryResponseBody = MoveDentryResponseBody;
class MoveDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: MoveDentryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryResponse = MoveDentryResponse;
class RefreshWebOfficeTokenHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RefreshWebOfficeTokenHeaders = RefreshWebOfficeTokenHeaders;
class RefreshWebOfficeTokenRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
            webOfficeAccessToken: 'webOfficeAccessToken',
            webOfficeRefreshToken: 'webOfficeRefreshToken',
        };
    }
    static types() {
        return {
            unionId: 'string',
            webOfficeAccessToken: 'string',
            webOfficeRefreshToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RefreshWebOfficeTokenRequest = RefreshWebOfficeTokenRequest;
class RefreshWebOfficeTokenResponseBody extends $tea.Model {
    static names() {
        return {
            webOfficeAccessToken: 'webOfficeAccessToken',
            webOfficeRefreshToken: 'webOfficeRefreshToken',
        };
    }
    static types() {
        return {
            webOfficeAccessToken: 'string',
            webOfficeRefreshToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RefreshWebOfficeTokenResponseBody = RefreshWebOfficeTokenResponseBody;
class RefreshWebOfficeTokenResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RefreshWebOfficeTokenResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RefreshWebOfficeTokenResponse = RefreshWebOfficeTokenResponse;
class RegisterOpenInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterOpenInfoHeaders = RegisterOpenInfoHeaders;
class RegisterOpenInfoRequest extends $tea.Model {
    static names() {
        return {
            openInfos: 'openInfos',
            provider: 'provider',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            openInfos: { 'type': 'array', 'itemType': RegisterOpenInfoRequestOpenInfos },
            provider: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterOpenInfoRequest = RegisterOpenInfoRequest;
class RegisterOpenInfoResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterOpenInfoResponseBody = RegisterOpenInfoResponseBody;
class RegisterOpenInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RegisterOpenInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterOpenInfoResponse = RegisterOpenInfoResponse;
class RenameDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryHeaders = RenameDentryHeaders;
class RenameDentryRequest extends $tea.Model {
    static names() {
        return {
            newName: 'newName',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            newName: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryRequest = RenameDentryRequest;
class RenameDentryResponseBody extends $tea.Model {
    static names() {
        return {
            dentry: 'dentry',
        };
    }
    static types() {
        return {
            dentry: RenameDentryResponseBodyDentry,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryResponseBody = RenameDentryResponseBody;
class RenameDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RenameDentryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryResponse = RenameDentryResponse;
class RestoreRecycleItemHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemHeaders = RestoreRecycleItemHeaders;
class RestoreRecycleItemRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: RestoreRecycleItemRequestOption,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemRequest = RestoreRecycleItemRequest;
class RestoreRecycleItemResponseBody extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentryId: 'dentryId',
            spaceId: 'spaceId',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentryId: 'string',
            spaceId: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemResponseBody = RestoreRecycleItemResponseBody;
class RestoreRecycleItemResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RestoreRecycleItemResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemResponse = RestoreRecycleItemResponse;
class RestoreRecycleItemsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemsHeaders = RestoreRecycleItemsHeaders;
class RestoreRecycleItemsRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            recycleItemIds: 'recycleItemIds',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: RestoreRecycleItemsRequestOption,
            recycleItemIds: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemsRequest = RestoreRecycleItemsRequest;
class RestoreRecycleItemsResponseBody extends $tea.Model {
    static names() {
        return {
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            resultItems: { 'type': 'array', 'itemType': RestoreRecycleItemsResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemsResponseBody = RestoreRecycleItemsResponseBody;
class RestoreRecycleItemsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RestoreRecycleItemsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemsResponse = RestoreRecycleItemsResponse;
class RevertDentryVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RevertDentryVersionHeaders = RevertDentryVersionHeaders;
class RevertDentryVersionRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RevertDentryVersionRequest = RevertDentryVersionRequest;
class RevertDentryVersionResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RevertDentryVersionResponseBody = RevertDentryVersionResponseBody;
class RevertDentryVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RevertDentryVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RevertDentryVersionResponse = RevertDentryVersionResponse;
class SubscribeEventHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeEventHeaders = SubscribeEventHeaders;
class SubscribeEventRequest extends $tea.Model {
    static names() {
        return {
            scope: 'scope',
            scopeId: 'scopeId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            scope: 'string',
            scopeId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeEventRequest = SubscribeEventRequest;
class SubscribeEventResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeEventResponseBody = SubscribeEventResponseBody;
class SubscribeEventResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubscribeEventResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeEventResponse = SubscribeEventResponse;
class UnsubscribeEventHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeEventHeaders = UnsubscribeEventHeaders;
class UnsubscribeEventRequest extends $tea.Model {
    static names() {
        return {
            scope: 'scope',
            scopeId: 'scopeId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            scope: 'string',
            scopeId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeEventRequest = UnsubscribeEventRequest;
class UnsubscribeEventResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeEventResponseBody = UnsubscribeEventResponseBody;
class UnsubscribeEventResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnsubscribeEventResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeEventResponse = UnsubscribeEventResponse;
class UpdateDentryAppPropertiesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateDentryAppPropertiesHeaders = UpdateDentryAppPropertiesHeaders;
class UpdateDentryAppPropertiesRequest extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'array', 'itemType': UpdateDentryAppPropertiesRequestAppProperties },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateDentryAppPropertiesRequest = UpdateDentryAppPropertiesRequest;
class UpdateDentryAppPropertiesResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateDentryAppPropertiesResponseBody = UpdateDentryAppPropertiesResponseBody;
class UpdateDentryAppPropertiesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateDentryAppPropertiesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateDentryAppPropertiesResponse = UpdateDentryAppPropertiesResponse;
class UpdatePermissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePermissionHeaders = UpdatePermissionHeaders;
class UpdatePermissionRequest extends $tea.Model {
    static names() {
        return {
            members: 'members',
            option: 'option',
            roleId: 'roleId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': UpdatePermissionRequestMembers },
            option: UpdatePermissionRequestOption,
            roleId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePermissionRequest = UpdatePermissionRequest;
class UpdatePermissionResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePermissionResponseBody = UpdatePermissionResponseBody;
class UpdatePermissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdatePermissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePermissionResponse = UpdatePermissionResponse;
class AddFolderRequestOptionAppProperties extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderRequestOptionAppProperties = AddFolderRequestOptionAppProperties;
class AddFolderRequestOption extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            conflictStrategy: 'conflictStrategy',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'array', 'itemType': AddFolderRequestOptionAppProperties },
            conflictStrategy: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderRequestOption = AddFolderRequestOption;
class AddFolderResponseBodyDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderResponseBodyDentryProperties = AddFolderResponseBodyDentryProperties;
class AddFolderResponseBodyDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: AddFolderResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddFolderResponseBodyDentry = AddFolderResponseBodyDentry;
class AddPermissionRequestMembers extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddPermissionRequestMembers = AddPermissionRequestMembers;
class AddPermissionRequestOption extends $tea.Model {
    static names() {
        return {
            duration: 'duration',
        };
    }
    static types() {
        return {
            duration: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddPermissionRequestOption = AddPermissionRequestOption;
class AddSpaceRequestOptionCapabilities extends $tea.Model {
    static names() {
        return {
            canRecordRecentFile: 'canRecordRecentFile',
            canRename: 'canRename',
            canSearch: 'canSearch',
        };
    }
    static types() {
        return {
            canRecordRecentFile: 'boolean',
            canRename: 'boolean',
            canSearch: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceRequestOptionCapabilities = AddSpaceRequestOptionCapabilities;
class AddSpaceRequestOption extends $tea.Model {
    static names() {
        return {
            capabilities: 'capabilities',
            name: 'name',
            ownerType: 'ownerType',
            quota: 'quota',
            scene: 'scene',
            sceneId: 'sceneId',
        };
    }
    static types() {
        return {
            capabilities: AddSpaceRequestOptionCapabilities,
            name: 'string',
            ownerType: 'string',
            quota: 'number',
            scene: 'string',
            sceneId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceRequestOption = AddSpaceRequestOption;
class AddSpaceResponseBodySpaceCapabilities extends $tea.Model {
    static names() {
        return {
            canRecordRecentFile: 'canRecordRecentFile',
            canRename: 'canRename',
            canSearch: 'canSearch',
        };
    }
    static types() {
        return {
            canRecordRecentFile: 'boolean',
            canRename: 'boolean',
            canSearch: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceResponseBodySpaceCapabilities = AddSpaceResponseBodySpaceCapabilities;
class AddSpaceResponseBodySpacePartitionsQuota extends $tea.Model {
    static names() {
        return {
            max: 'max',
            reserved: 'reserved',
            type: 'type',
            used: 'used',
        };
    }
    static types() {
        return {
            max: 'number',
            reserved: 'number',
            type: 'string',
            used: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceResponseBodySpacePartitionsQuota = AddSpaceResponseBodySpacePartitionsQuota;
class AddSpaceResponseBodySpacePartitions extends $tea.Model {
    static names() {
        return {
            partitionType: 'partitionType',
            quota: 'quota',
        };
    }
    static types() {
        return {
            partitionType: 'string',
            quota: AddSpaceResponseBodySpacePartitionsQuota,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceResponseBodySpacePartitions = AddSpaceResponseBodySpacePartitions;
class AddSpaceResponseBodySpace extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            capabilities: 'capabilities',
            corpId: 'corpId',
            createTime: 'createTime',
            creatorId: 'creatorId',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            ownerId: 'ownerId',
            ownerType: 'ownerType',
            partitions: 'partitions',
            quota: 'quota',
            scene: 'scene',
            sceneId: 'sceneId',
            status: 'status',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            appId: 'string',
            capabilities: AddSpaceResponseBodySpaceCapabilities,
            corpId: 'string',
            createTime: 'string',
            creatorId: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            ownerId: 'string',
            ownerType: 'string',
            partitions: { 'type': 'array', 'itemType': AddSpaceResponseBodySpacePartitions },
            quota: 'number',
            scene: 'string',
            sceneId: 'string',
            status: 'string',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSpaceResponseBodySpace = AddSpaceResponseBodySpace;
class CommitFileRequestOptionAppProperties extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileRequestOptionAppProperties = CommitFileRequestOptionAppProperties;
class CommitFileRequestOption extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            conflictStrategy: 'conflictStrategy',
            size: 'size',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'array', 'itemType': CommitFileRequestOptionAppProperties },
            conflictStrategy: 'string',
            size: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileRequestOption = CommitFileRequestOption;
class CommitFileResponseBodyDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileResponseBodyDentryProperties = CommitFileResponseBodyDentryProperties;
class CommitFileResponseBodyDentryThumbnail extends $tea.Model {
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileResponseBodyDentryThumbnail = CommitFileResponseBodyDentryThumbnail;
class CommitFileResponseBodyDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            category: 'category',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            thumbnail: 'thumbnail',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            category: 'string',
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: CommitFileResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            thumbnail: CommitFileResponseBodyDentryThumbnail,
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CommitFileResponseBodyDentry = CommitFileResponseBodyDentry;
class CopyDentriesRequestOption extends $tea.Model {
    static names() {
        return {
            conflictStrategy: 'conflictStrategy',
        };
    }
    static types() {
        return {
            conflictStrategy: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentriesRequestOption = CopyDentriesRequestOption;
class CopyDentriesResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentryId: 'dentryId',
            errorCode: 'errorCode',
            spaceId: 'spaceId',
            success: 'success',
            targetDentryId: 'targetDentryId',
            targetSpaceId: 'targetSpaceId',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentryId: 'string',
            errorCode: 'string',
            spaceId: 'string',
            success: 'boolean',
            targetDentryId: 'string',
            targetSpaceId: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentriesResponseBodyResultItems = CopyDentriesResponseBodyResultItems;
class CopyDentryRequestOption extends $tea.Model {
    static names() {
        return {
            conflictStrategy: 'conflictStrategy',
        };
    }
    static types() {
        return {
            conflictStrategy: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryRequestOption = CopyDentryRequestOption;
class CopyDentryResponseBodyDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryResponseBodyDentryProperties = CopyDentryResponseBodyDentryProperties;
class CopyDentryResponseBodyDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: CopyDentryResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryResponseBodyDentry = CopyDentryResponseBodyDentry;
class DeleteDentriesRequestOption extends $tea.Model {
    static names() {
        return {
            toRecycleBin: 'toRecycleBin',
        };
    }
    static types() {
        return {
            toRecycleBin: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentriesRequestOption = DeleteDentriesRequestOption;
class DeleteDentriesResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentryId: 'dentryId',
            errorCode: 'errorCode',
            spaceId: 'spaceId',
            success: 'success',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentryId: 'string',
            errorCode: 'string',
            spaceId: 'string',
            success: 'boolean',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDentriesResponseBodyResultItems = DeleteDentriesResponseBodyResultItems;
class DeletePermissionRequestMembers extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePermissionRequestMembers = DeletePermissionRequestMembers;
class GetCurrentAppResponseBodyAppPartitionsQuota extends $tea.Model {
    static names() {
        return {
            max: 'max',
            reserved: 'reserved',
            type: 'type',
            used: 'used',
        };
    }
    static types() {
        return {
            max: 'number',
            reserved: 'number',
            type: 'string',
            used: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppResponseBodyAppPartitionsQuota = GetCurrentAppResponseBodyAppPartitionsQuota;
class GetCurrentAppResponseBodyAppPartitions extends $tea.Model {
    static names() {
        return {
            partitionType: 'partitionType',
            quota: 'quota',
        };
    }
    static types() {
        return {
            partitionType: 'string',
            quota: GetCurrentAppResponseBodyAppPartitionsQuota,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppResponseBodyAppPartitions = GetCurrentAppResponseBodyAppPartitions;
class GetCurrentAppResponseBodyApp extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            corpId: 'corpId',
            createTime: 'createTime',
            modifiedTime: 'modifiedTime',
            name: 'name',
            partitions: 'partitions',
        };
    }
    static types() {
        return {
            appId: 'string',
            corpId: 'string',
            createTime: 'string',
            modifiedTime: 'string',
            name: 'string',
            partitions: { 'type': 'array', 'itemType': GetCurrentAppResponseBodyAppPartitions },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCurrentAppResponseBodyApp = GetCurrentAppResponseBodyApp;
class GetDentriesRequestOption extends $tea.Model {
    static names() {
        return {
            appIdsForAppProperties: 'appIdsForAppProperties',
            withThumbnail: 'withThumbnail',
        };
    }
    static types() {
        return {
            appIdsForAppProperties: { 'type': 'array', 'itemType': 'string' },
            withThumbnail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesRequestOption = GetDentriesRequestOption;
class GetDentriesResponseBodyResultItemsDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesResponseBodyResultItemsDentryProperties = GetDentriesResponseBodyResultItemsDentryProperties;
class GetDentriesResponseBodyResultItemsDentryThumbnail extends $tea.Model {
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesResponseBodyResultItemsDentryThumbnail = GetDentriesResponseBodyResultItemsDentryThumbnail;
class GetDentriesResponseBodyResultItemsDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            thumbnail: 'thumbnail',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': ResultItemsDentryAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: GetDentriesResponseBodyResultItemsDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            thumbnail: GetDentriesResponseBodyResultItemsDentryThumbnail,
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesResponseBodyResultItemsDentry = GetDentriesResponseBodyResultItemsDentry;
class GetDentriesResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            dentry: 'dentry',
            dentryId: 'dentryId',
            errorCode: 'errorCode',
            spaceId: 'spaceId',
            success: 'success',
        };
    }
    static types() {
        return {
            dentry: GetDentriesResponseBodyResultItemsDentry,
            dentryId: 'string',
            errorCode: 'string',
            spaceId: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentriesResponseBodyResultItems = GetDentriesResponseBodyResultItems;
class GetDentryRequestOption extends $tea.Model {
    static names() {
        return {
            appIdsForAppProperties: 'appIdsForAppProperties',
            withThumbnail: 'withThumbnail',
        };
    }
    static types() {
        return {
            appIdsForAppProperties: { 'type': 'array', 'itemType': 'string' },
            withThumbnail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryRequestOption = GetDentryRequestOption;
class GetDentryResponseBodyDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryResponseBodyDentryProperties = GetDentryResponseBodyDentryProperties;
class GetDentryResponseBodyDentryThumbnail extends $tea.Model {
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryResponseBodyDentryThumbnail = GetDentryResponseBodyDentryThumbnail;
class GetDentryResponseBodyDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            thumbnail: 'thumbnail',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: GetDentryResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            thumbnail: GetDentryResponseBodyDentryThumbnail,
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryResponseBodyDentry = GetDentryResponseBodyDentry;
class GetDentryOpenInfoRequestOption extends $tea.Model {
    static names() {
        return {
            checkLogin: 'checkLogin',
            type: 'type',
            version: 'version',
            waterMark: 'waterMark',
        };
    }
    static types() {
        return {
            checkLogin: 'boolean',
            type: 'string',
            version: 'number',
            waterMark: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryOpenInfoRequestOption = GetDentryOpenInfoRequestOption;
class GetDentryThumbnailsResponseBodyResultItemsThumbnail extends $tea.Model {
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryThumbnailsResponseBodyResultItemsThumbnail = GetDentryThumbnailsResponseBodyResultItemsThumbnail;
class GetDentryThumbnailsResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            errorCode: 'errorCode',
            spaceId: 'spaceId',
            success: 'success',
            thumbnail: 'thumbnail',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            errorCode: 'string',
            spaceId: 'string',
            success: 'boolean',
            thumbnail: GetDentryThumbnailsResponseBodyResultItemsThumbnail,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryThumbnailsResponseBodyResultItems = GetDentryThumbnailsResponseBodyResultItems;
class GetFileDownloadInfoRequestOption extends $tea.Model {
    static names() {
        return {
            preferIntranet: 'preferIntranet',
            version: 'version',
        };
    }
    static types() {
        return {
            preferIntranet: 'boolean',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoRequestOption = GetFileDownloadInfoRequestOption;
class GetFileDownloadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    static names() {
        return {
            expirationSeconds: 'expirationSeconds',
            headers: 'headers',
            internalResourceUrls: 'internalResourceUrls',
            region: 'region',
            resourceUrls: 'resourceUrls',
        };
    }
    static types() {
        return {
            expirationSeconds: 'number',
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            internalResourceUrls: { 'type': 'array', 'itemType': 'string' },
            region: 'string',
            resourceUrls: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoResponseBodyHeaderSignatureInfo = GetFileDownloadInfoResponseBodyHeaderSignatureInfo;
class GetFileUploadInfoRequestOptionPreCheckParam extends $tea.Model {
    static names() {
        return {
            md5: 'md5',
            name: 'name',
            parentId: 'parentId',
            size: 'size',
        };
    }
    static types() {
        return {
            md5: 'string',
            name: 'string',
            parentId: 'string',
            size: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoRequestOptionPreCheckParam = GetFileUploadInfoRequestOptionPreCheckParam;
class GetFileUploadInfoRequestOption extends $tea.Model {
    static names() {
        return {
            preCheckParam: 'preCheckParam',
            preferIntranet: 'preferIntranet',
            preferRegion: 'preferRegion',
            storageDriver: 'storageDriver',
        };
    }
    static types() {
        return {
            preCheckParam: GetFileUploadInfoRequestOptionPreCheckParam,
            preferIntranet: 'boolean',
            preferRegion: 'string',
            storageDriver: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoRequestOption = GetFileUploadInfoRequestOption;
class GetFileUploadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    static names() {
        return {
            expirationSeconds: 'expirationSeconds',
            headers: 'headers',
            internalResourceUrls: 'internalResourceUrls',
            region: 'region',
            resourceUrls: 'resourceUrls',
        };
    }
    static types() {
        return {
            expirationSeconds: 'number',
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            internalResourceUrls: { 'type': 'array', 'itemType': 'string' },
            region: 'string',
            resourceUrls: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileUploadInfoResponseBodyHeaderSignatureInfo = GetFileUploadInfoResponseBodyHeaderSignatureInfo;
class GetMultipartFileUploadInfosRequestOption extends $tea.Model {
    static names() {
        return {
            preferIntranet: 'preferIntranet',
        };
    }
    static types() {
        return {
            preferIntranet: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosRequestOption = GetMultipartFileUploadInfosRequestOption;
class GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo extends $tea.Model {
    static names() {
        return {
            expirationSeconds: 'expirationSeconds',
            headers: 'headers',
            internalResourceUrls: 'internalResourceUrls',
            region: 'region',
            resourceUrls: 'resourceUrls',
        };
    }
    static types() {
        return {
            expirationSeconds: 'number',
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            internalResourceUrls: { 'type': 'array', 'itemType': 'string' },
            region: 'string',
            resourceUrls: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo = GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo;
class GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos extends $tea.Model {
    static names() {
        return {
            headerSignatureInfo: 'headerSignatureInfo',
            partNumber: 'partNumber',
        };
    }
    static types() {
        return {
            headerSignatureInfo: GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo,
            partNumber: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos = GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos;
class GetOrgResponseBodyOrgPartitionsQuota extends $tea.Model {
    static names() {
        return {
            max: 'max',
            reserved: 'reserved',
            type: 'type',
            used: 'used',
        };
    }
    static types() {
        return {
            max: 'number',
            reserved: 'number',
            type: 'string',
            used: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgResponseBodyOrgPartitionsQuota = GetOrgResponseBodyOrgPartitionsQuota;
class GetOrgResponseBodyOrgPartitions extends $tea.Model {
    static names() {
        return {
            partitionType: 'partitionType',
            quota: 'quota',
        };
    }
    static types() {
        return {
            partitionType: 'string',
            quota: GetOrgResponseBodyOrgPartitionsQuota,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgResponseBodyOrgPartitions = GetOrgResponseBodyOrgPartitions;
class GetOrgResponseBodyOrg extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            partitions: 'partitions',
        };
    }
    static types() {
        return {
            corpId: 'string',
            partitions: { 'type': 'array', 'itemType': GetOrgResponseBodyOrgPartitions },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOrgResponseBodyOrg = GetOrgResponseBodyOrg;
class GetRecycleBinResponseBodyRecycleBin extends $tea.Model {
    static names() {
        return {
            id: 'id',
            scope: 'scope',
            scopeId: 'scopeId',
        };
    }
    static types() {
        return {
            id: 'string',
            scope: 'string',
            scopeId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleBinResponseBodyRecycleBin = GetRecycleBinResponseBodyRecycleBin;
class GetRecycleItemResponseBodyItem extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            id: 'id',
            operatorId: 'operatorId',
            operatorTime: 'operatorTime',
            originalName: 'originalName',
            originalPath: 'originalPath',
            size: 'size',
            spaceId: 'spaceId',
            type: 'type',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            id: 'string',
            operatorId: 'string',
            operatorTime: 'string',
            originalName: 'string',
            originalPath: 'string',
            size: 'number',
            spaceId: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecycleItemResponseBodyItem = GetRecycleItemResponseBodyItem;
class GetSpaceResponseBodySpaceCapabilities extends $tea.Model {
    static names() {
        return {
            canRecordRecentFile: 'canRecordRecentFile',
            canRename: 'canRename',
            canSearch: 'canSearch',
        };
    }
    static types() {
        return {
            canRecordRecentFile: 'boolean',
            canRename: 'boolean',
            canSearch: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceResponseBodySpaceCapabilities = GetSpaceResponseBodySpaceCapabilities;
class GetSpaceResponseBodySpacePartitionsQuota extends $tea.Model {
    static names() {
        return {
            max: 'max',
            reserved: 'reserved',
            type: 'type',
            used: 'used',
        };
    }
    static types() {
        return {
            max: 'number',
            reserved: 'number',
            type: 'string',
            used: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceResponseBodySpacePartitionsQuota = GetSpaceResponseBodySpacePartitionsQuota;
class GetSpaceResponseBodySpacePartitions extends $tea.Model {
    static names() {
        return {
            partitionType: 'partitionType',
            quota: 'quota',
        };
    }
    static types() {
        return {
            partitionType: 'string',
            quota: GetSpaceResponseBodySpacePartitionsQuota,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceResponseBodySpacePartitions = GetSpaceResponseBodySpacePartitions;
class GetSpaceResponseBodySpace extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            capabilities: 'capabilities',
            corpId: 'corpId',
            createTime: 'createTime',
            creatorId: 'creatorId',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            ownerId: 'ownerId',
            ownerType: 'ownerType',
            partitions: 'partitions',
            quota: 'quota',
            scene: 'scene',
            sceneId: 'sceneId',
            status: 'status',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            appId: 'string',
            capabilities: GetSpaceResponseBodySpaceCapabilities,
            corpId: 'string',
            createTime: 'string',
            creatorId: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            ownerId: 'string',
            ownerType: 'string',
            partitions: { 'type': 'array', 'itemType': GetSpaceResponseBodySpacePartitions },
            quota: 'number',
            scene: 'string',
            sceneId: 'string',
            status: 'string',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceResponseBodySpace = GetSpaceResponseBodySpace;
class GetTaskResponseBodyTask extends $tea.Model {
    static names() {
        return {
            beginTime: 'beginTime',
            endTime: 'endTime',
            failCount: 'failCount',
            failMessage: 'failMessage',
            id: 'id',
            status: 'status',
            successCount: 'successCount',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            beginTime: 'string',
            endTime: 'string',
            failCount: 'number',
            failMessage: 'string',
            id: 'string',
            status: 'string',
            successCount: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskResponseBodyTask = GetTaskResponseBodyTask;
class InitMultipartFileUploadRequestOptionPreCheckParam extends $tea.Model {
    static names() {
        return {
            md5: 'md5',
            name: 'name',
            parentId: 'parentId',
            size: 'size',
        };
    }
    static types() {
        return {
            md5: 'string',
            name: 'string',
            parentId: 'string',
            size: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitMultipartFileUploadRequestOptionPreCheckParam = InitMultipartFileUploadRequestOptionPreCheckParam;
class InitMultipartFileUploadRequestOption extends $tea.Model {
    static names() {
        return {
            preCheckParam: 'preCheckParam',
            preferRegion: 'preferRegion',
            storageDriver: 'storageDriver',
        };
    }
    static types() {
        return {
            preCheckParam: InitMultipartFileUploadRequestOptionPreCheckParam,
            preferRegion: 'string',
            storageDriver: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitMultipartFileUploadRequestOption = InitMultipartFileUploadRequestOption;
class ListAllDentriesRequestOption extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            order: 'order',
            withThumbnail: 'withThumbnail',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            order: 'string',
            withThumbnail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesRequestOption = ListAllDentriesRequestOption;
class ListAllDentriesResponseBodyDentriesProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesResponseBodyDentriesProperties = ListAllDentriesResponseBodyDentriesProperties;
class ListAllDentriesResponseBodyDentriesThumbnail extends $tea.Model {
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesResponseBodyDentriesThumbnail = ListAllDentriesResponseBodyDentriesThumbnail;
class ListAllDentriesResponseBodyDentries extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            thumbnail: 'thumbnail',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentriesAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: ListAllDentriesResponseBodyDentriesProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            thumbnail: ListAllDentriesResponseBodyDentriesThumbnail,
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAllDentriesResponseBodyDentries = ListAllDentriesResponseBodyDentries;
class ListDentriesResponseBodyDentriesProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesResponseBodyDentriesProperties = ListDentriesResponseBodyDentriesProperties;
class ListDentriesResponseBodyDentriesThumbnail extends $tea.Model {
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesResponseBodyDentriesThumbnail = ListDentriesResponseBodyDentriesThumbnail;
class ListDentriesResponseBodyDentries extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            category: 'category',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            thumbnail: 'thumbnail',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentriesAppPropertiesValue } },
            category: 'string',
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: ListDentriesResponseBodyDentriesProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            thumbnail: ListDentriesResponseBodyDentriesThumbnail,
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentriesResponseBodyDentries = ListDentriesResponseBodyDentries;
class ListDentryVersionsResponseBodyDentriesProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentryVersionsResponseBodyDentriesProperties = ListDentryVersionsResponseBodyDentriesProperties;
class ListDentryVersionsResponseBodyDentries extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentriesAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: ListDentryVersionsResponseBodyDentriesProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListDentryVersionsResponseBodyDentries = ListDentryVersionsResponseBodyDentries;
class ListPermissionsRequestOption extends $tea.Model {
    static names() {
        return {
            filterRoleIds: 'filterRoleIds',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            filterRoleIds: { 'type': 'array', 'itemType': 'string' },
            maxResults: 'number',
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsRequestOption = ListPermissionsRequestOption;
class ListPermissionsResponseBodyPermissionsMember extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsResponseBodyPermissionsMember = ListPermissionsResponseBodyPermissionsMember;
class ListPermissionsResponseBodyPermissionsRole extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsResponseBodyPermissionsRole = ListPermissionsResponseBodyPermissionsRole;
class ListPermissionsResponseBodyPermissions extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            dentryId: 'dentryId',
            duration: 'duration',
            member: 'member',
            modifiedTime: 'modifiedTime',
            operatorId: 'operatorId',
            role: 'role',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            createTime: 'string',
            dentryId: 'string',
            duration: 'number',
            member: ListPermissionsResponseBodyPermissionsMember,
            modifiedTime: 'string',
            operatorId: 'string',
            role: ListPermissionsResponseBodyPermissionsRole,
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPermissionsResponseBodyPermissions = ListPermissionsResponseBodyPermissions;
class ListRecycleItemsResponseBodyRecycleItems extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            id: 'id',
            operatorId: 'operatorId',
            operatorTime: 'operatorTime',
            originalName: 'originalName',
            originalPath: 'originalPath',
            size: 'size',
            spaceId: 'spaceId',
            type: 'type',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            id: 'string',
            operatorId: 'string',
            operatorTime: 'string',
            originalName: 'string',
            originalPath: 'string',
            size: 'number',
            spaceId: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecycleItemsResponseBodyRecycleItems = ListRecycleItemsResponseBodyRecycleItems;
class MoveDentriesRequestOption extends $tea.Model {
    static names() {
        return {
            conflictStrategy: 'conflictStrategy',
            preservePermissions: 'preservePermissions',
        };
    }
    static types() {
        return {
            conflictStrategy: 'string',
            preservePermissions: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentriesRequestOption = MoveDentriesRequestOption;
class MoveDentriesResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentryId: 'dentryId',
            errorCode: 'errorCode',
            spaceId: 'spaceId',
            success: 'success',
            targetDentryId: 'targetDentryId',
            targetSpaceId: 'targetSpaceId',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentryId: 'string',
            errorCode: 'string',
            spaceId: 'string',
            success: 'boolean',
            targetDentryId: 'string',
            targetSpaceId: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentriesResponseBodyResultItems = MoveDentriesResponseBodyResultItems;
class MoveDentryRequestOption extends $tea.Model {
    static names() {
        return {
            conflictStrategy: 'conflictStrategy',
            presevePermissions: 'presevePermissions',
        };
    }
    static types() {
        return {
            conflictStrategy: 'string',
            presevePermissions: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryRequestOption = MoveDentryRequestOption;
class MoveDentryResponseBodyDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryResponseBodyDentryProperties = MoveDentryResponseBodyDentryProperties;
class MoveDentryResponseBodyDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: MoveDentryResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryResponseBodyDentry = MoveDentryResponseBodyDentry;
class RegisterOpenInfoRequestOpenInfos extends $tea.Model {
    static names() {
        return {
            openType: 'openType',
            url: 'url',
        };
    }
    static types() {
        return {
            openType: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterOpenInfoRequestOpenInfos = RegisterOpenInfoRequestOpenInfos;
class RenameDentryResponseBodyDentryProperties extends $tea.Model {
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryResponseBodyDentryProperties = RenameDentryResponseBodyDentryProperties;
class RenameDentryResponseBodyDentry extends $tea.Model {
    static names() {
        return {
            appProperties: 'appProperties',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: RenameDentryResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryResponseBodyDentry = RenameDentryResponseBodyDentry;
class RestoreRecycleItemRequestOption extends $tea.Model {
    static names() {
        return {
            conflictStrategy: 'conflictStrategy',
        };
    }
    static types() {
        return {
            conflictStrategy: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemRequestOption = RestoreRecycleItemRequestOption;
class RestoreRecycleItemsRequestOption extends $tea.Model {
    static names() {
        return {
            conflictStrategy: 'conflictStrategy',
        };
    }
    static types() {
        return {
            conflictStrategy: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemsRequestOption = RestoreRecycleItemsRequestOption;
class RestoreRecycleItemsResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            async: 'async',
            dentryId: 'dentryId',
            errorCode: 'errorCode',
            recycleBinId: 'recycleBinId',
            recycleItemId: 'recycleItemId',
            spaceId: 'spaceId',
            success: 'success',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            async: 'boolean',
            dentryId: 'string',
            errorCode: 'string',
            recycleBinId: 'string',
            recycleItemId: 'string',
            spaceId: 'string',
            success: 'boolean',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RestoreRecycleItemsResponseBodyResultItems = RestoreRecycleItemsResponseBodyResultItems;
class UpdateDentryAppPropertiesRequestAppProperties extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateDentryAppPropertiesRequestAppProperties = UpdateDentryAppPropertiesRequestAppProperties;
class UpdatePermissionRequestMembers extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePermissionRequestMembers = UpdatePermissionRequestMembers;
class UpdatePermissionRequestOption extends $tea.Model {
    static names() {
        return {
            duration: 'duration',
        };
    }
    static types() {
        return {
            duration: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePermissionRequestOption = UpdatePermissionRequestOption;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 添加文件夹
     *
     * @param request - AddFolderRequest
     * @param headers - AddFolderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddFolderResponse
     */
    async addFolderWithOptions(spaceId, parentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddFolder",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${parentId}/folders`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddFolderResponse({}));
    }
    /**
     * 添加文件夹
     *
     * @param request - AddFolderRequest
     * @returns AddFolderResponse
     */
    async addFolder(spaceId, parentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddFolderHeaders({});
        return await this.addFolderWithOptions(spaceId, parentId, request, headers, runtime);
    }
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @param headers - AddPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddPermissionResponse
     */
    async addPermissionWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            body["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddPermission",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/permissions`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddPermissionResponse({}));
    }
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @returns AddPermissionResponse
     */
    async addPermission(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddPermissionHeaders({});
        return await this.addPermissionWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 添加空间
     *
     * @param request - AddSpaceRequest
     * @param headers - AddSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddSpaceResponse
     */
    async addSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddSpace",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddSpaceResponse({}));
    }
    /**
     * 添加空间
     *
     * @param request - AddSpaceRequest
     * @returns AddSpaceResponse
     */
    async addSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddSpaceHeaders({});
        return await this.addSpaceWithOptions(request, headers, runtime);
    }
    /**
     * 清空回收站
     *
     * @param request - ClearRecycleBinRequest
     * @param headers - ClearRecycleBinHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ClearRecycleBinResponse
     */
    async clearRecycleBinWithOptions(recycleBinId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ClearRecycleBin",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/clear`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ClearRecycleBinResponse({}));
    }
    /**
     * 清空回收站
     *
     * @param request - ClearRecycleBinRequest
     * @returns ClearRecycleBinResponse
     */
    async clearRecycleBin(recycleBinId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ClearRecycleBinHeaders({});
        return await this.clearRecycleBinWithOptions(recycleBinId, request, headers, runtime);
    }
    /**
     * 提交文件
     *
     * @param request - CommitFileRequest
     * @param headers - CommitFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CommitFileResponse
     */
    async commitFileWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.overwriteDentryId)) {
            body["overwriteDentryId"] = request.overwriteDentryId;
        }
        if (!tea_util_1.default.isUnset(request.parentId)) {
            body["parentId"] = request.parentId;
        }
        if (!tea_util_1.default.isUnset(request.uploadKey)) {
            body["uploadKey"] = request.uploadKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CommitFile",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/files/commit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CommitFileResponse({}));
    }
    /**
     * 提交文件
     *
     * @param request - CommitFileRequest
     * @returns CommitFileResponse
     */
    async commitFile(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CommitFileHeaders({});
        return await this.commitFileWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 批量拷贝文件或文件夹
     *
     * @param request - CopyDentriesRequest
     * @param headers - CopyDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyDentriesResponse
     */
    async copyDentriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryIds)) {
            body["dentryIds"] = request.dentryIds;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.targetFolderId)) {
            body["targetFolderId"] = request.targetFolderId;
        }
        if (!tea_util_1.default.isUnset(request.targetSpaceId)) {
            body["targetSpaceId"] = request.targetSpaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CopyDentries",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/batchCopy`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CopyDentriesResponse({}));
    }
    /**
     * 批量拷贝文件或文件夹
     *
     * @param request - CopyDentriesRequest
     * @returns CopyDentriesResponse
     */
    async copyDentries(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CopyDentriesHeaders({});
        return await this.copyDentriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 拷贝文件或文件夹
     *
     * @param request - CopyDentryRequest
     * @param headers - CopyDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyDentryResponse
     */
    async copyDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.targetFolderId)) {
            body["targetFolderId"] = request.targetFolderId;
        }
        if (!tea_util_1.default.isUnset(request.targetSpaceId)) {
            body["targetSpaceId"] = request.targetSpaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CopyDentry",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/copy`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CopyDentryResponse({}));
    }
    /**
     * 拷贝文件或文件夹
     *
     * @param request - CopyDentryRequest
     * @returns CopyDentryResponse
     */
    async copyDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CopyDentryHeaders({});
        return await this.copyDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 批量删除文件或文件夹
     *
     * @param request - DeleteDentriesRequest
     * @param headers - DeleteDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDentriesResponse
     */
    async deleteDentriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryIds)) {
            body["dentryIds"] = request.dentryIds;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDentries",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDentriesResponse({}));
    }
    /**
     * 批量删除文件或文件夹
     *
     * @param request - DeleteDentriesRequest
     * @returns DeleteDentriesResponse
     */
    async deleteDentries(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDentriesHeaders({});
        return await this.deleteDentriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 删除文件或文件夹
     *
     * @param request - DeleteDentryRequest
     * @param headers - DeleteDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDentryResponse
     */
    async deleteDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.toRecycleBin)) {
            query["toRecycleBin"] = request.toRecycleBin;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDentry",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDentryResponse({}));
    }
    /**
     * 删除文件或文件夹
     *
     * @param request - DeleteDentryRequest
     * @returns DeleteDentryResponse
     */
    async deleteDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDentryHeaders({});
        return await this.deleteDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 删除文件上的App属性值
     *
     * @param request - DeleteDentryAppPropertiesRequest
     * @param headers - DeleteDentryAppPropertiesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDentryAppPropertiesResponse
     */
    async deleteDentryAppPropertiesWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.propertyNames)) {
            body["propertyNames"] = request.propertyNames;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDentryAppProperties",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/appProperties/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDentryAppPropertiesResponse({}));
    }
    /**
     * 删除文件上的App属性值
     *
     * @param request - DeleteDentryAppPropertiesRequest
     * @returns DeleteDentryAppPropertiesResponse
     */
    async deleteDentryAppProperties(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDentryAppPropertiesHeaders({});
        return await this.deleteDentryAppPropertiesWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @param headers - DeletePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeletePermissionResponse
     */
    async deletePermissionWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            body["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeletePermission",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/permissions/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeletePermissionResponse({}));
    }
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @returns DeletePermissionResponse
     */
    async deletePermission(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeletePermissionHeaders({});
        return await this.deletePermissionWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemRequest
     * @param headers - DeleteRecycleItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRecycleItemResponse
     */
    async deleteRecycleItemWithOptions(recycleBinId, recycleItemId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRecycleItem",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/recycleItems/${recycleItemId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteRecycleItemResponse({}));
    }
    /**
     * 删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemRequest
     * @returns DeleteRecycleItemResponse
     */
    async deleteRecycleItem(recycleBinId, recycleItemId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteRecycleItemHeaders({});
        return await this.deleteRecycleItemWithOptions(recycleBinId, recycleItemId, request, headers, runtime);
    }
    /**
     * 批量删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemsRequest
     * @param headers - DeleteRecycleItemsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRecycleItemsResponse
     */
    async deleteRecycleItemsWithOptions(recycleBinId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.recycleItemIds)) {
            body["recycleItemIds"] = request.recycleItemIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRecycleItems",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/recycleItems/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteRecycleItemsResponse({}));
    }
    /**
     * 批量删除回收项, 删除之后该记录从回收站删除, 后续文件就无法恢复了
     *
     * @param request - DeleteRecycleItemsRequest
     * @returns DeleteRecycleItemsResponse
     */
    async deleteRecycleItems(recycleBinId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteRecycleItemsHeaders({});
        return await this.deleteRecycleItemsWithOptions(recycleBinId, request, headers, runtime);
    }
    /**
     * 获取开放平台应用在企业存储中的相关应用信息
     *
     * @param request - GetCurrentAppRequest
     * @param headers - GetCurrentAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCurrentAppResponse
     */
    async getCurrentAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCurrentApp",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/currentApps/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCurrentAppResponse({}));
    }
    /**
     * 获取开放平台应用在企业存储中的相关应用信息
     *
     * @param request - GetCurrentAppRequest
     * @returns GetCurrentAppResponse
     */
    async getCurrentApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCurrentAppHeaders({});
        return await this.getCurrentAppWithOptions(request, headers, runtime);
    }
    /**
     * 批量获取文件(夹)信息
     *
     * @param request - GetDentriesRequest
     * @param headers - GetDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentriesResponse
     */
    async getDentriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryIds)) {
            body["dentryIds"] = request.dentryIds;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDentries",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDentriesResponse({}));
    }
    /**
     * 批量获取文件(夹)信息
     *
     * @param request - GetDentriesRequest
     * @returns GetDentriesResponse
     */
    async getDentries(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDentriesHeaders({});
        return await this.getDentriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取文件(夹)信息
     *
     * @param request - GetDentryRequest
     * @param headers - GetDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryResponse
     */
    async getDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDentry",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDentryResponse({}));
    }
    /**
     * 获取文件(夹)信息
     *
     * @param request - GetDentryRequest
     * @returns GetDentryResponse
     */
    async getDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDentryHeaders({});
        return await this.getDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 获取文件打开链接
     *
     * @param request - GetDentryOpenInfoRequest
     * @param headers - GetDentryOpenInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryOpenInfoResponse
     */
    async getDentryOpenInfoWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDentryOpenInfo",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/openInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDentryOpenInfoResponse({}));
    }
    /**
     * 获取文件打开链接
     *
     * @param request - GetDentryOpenInfoRequest
     * @returns GetDentryOpenInfoResponse
     */
    async getDentryOpenInfo(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDentryOpenInfoHeaders({});
        return await this.getDentryOpenInfoWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 批量获取文件缩略图
     *
     * @param request - GetDentryThumbnailsRequest
     * @param headers - GetDentryThumbnailsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryThumbnailsResponse
     */
    async getDentryThumbnailsWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryIds)) {
            body["dentryIds"] = request.dentryIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetDentryThumbnails",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/thumbnails/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDentryThumbnailsResponse({}));
    }
    /**
     * 批量获取文件缩略图
     *
     * @param request - GetDentryThumbnailsRequest
     * @returns GetDentryThumbnailsResponse
     */
    async getDentryThumbnails(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDentryThumbnailsHeaders({});
        return await this.getDentryThumbnailsWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @param headers - GetFileDownloadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileDownloadInfoResponse
     */
    async getFileDownloadInfoWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFileDownloadInfo",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/downloadInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFileDownloadInfoResponse({}));
    }
    /**
     * 获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @returns GetFileDownloadInfoResponse
     */
    async getFileDownloadInfo(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFileDownloadInfoHeaders({});
        return await this.getFileDownloadInfoWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 获取文件上传信息
     *
     * @param request - GetFileUploadInfoRequest
     * @param headers - GetFileUploadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileUploadInfoResponse
     */
    async getFileUploadInfoWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.multipart)) {
            body["multipart"] = request.multipart;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.protocol)) {
            body["protocol"] = request.protocol;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFileUploadInfo",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/files/uploadInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFileUploadInfoResponse({}));
    }
    /**
     * 获取文件上传信息
     *
     * @param request - GetFileUploadInfoRequest
     * @returns GetFileUploadInfoResponse
     */
    async getFileUploadInfo(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFileUploadInfoHeaders({});
        return await this.getFileUploadInfoWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取文件上传信息(分片上传)
     *
     * @param request - GetMultipartFileUploadInfosRequest
     * @param headers - GetMultipartFileUploadInfosHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMultipartFileUploadInfosResponse
     */
    async getMultipartFileUploadInfosWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.partNumbers)) {
            body["partNumbers"] = request.partNumbers;
        }
        if (!tea_util_1.default.isUnset(request.uploadKey)) {
            body["uploadKey"] = request.uploadKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetMultipartFileUploadInfos",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/files/multiPartUploadInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMultipartFileUploadInfosResponse({}));
    }
    /**
     * 获取文件上传信息(分片上传)
     *
     * @param request - GetMultipartFileUploadInfosRequest
     * @returns GetMultipartFileUploadInfosResponse
     */
    async getMultipartFileUploadInfos(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMultipartFileUploadInfosHeaders({});
        return await this.getMultipartFileUploadInfosWithOptions(request, headers, runtime);
    }
    /**
     * 获取企业存储中企业维度的信息
     *
     * @param request - GetOrgRequest
     * @param headers - GetOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrgResponse
     */
    async getOrgWithOptions(corpId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOrg",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/orgs/${corpId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOrgResponse({}));
    }
    /**
     * 获取企业存储中企业维度的信息
     *
     * @param request - GetOrgRequest
     * @returns GetOrgResponse
     */
    async getOrg(corpId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrgHeaders({});
        return await this.getOrgWithOptions(corpId, request, headers, runtime);
    }
    /**
     * 获取回收站信息
     *
     * @param request - GetRecycleBinRequest
     * @param headers - GetRecycleBinHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecycleBinResponse
     */
    async getRecycleBinWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.recycleBinScope)) {
            query["recycleBinScope"] = request.recycleBinScope;
        }
        if (!tea_util_1.default.isUnset(request.scopeId)) {
            query["scopeId"] = request.scopeId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRecycleBin",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRecycleBinResponse({}));
    }
    /**
     * 获取回收站信息
     *
     * @param request - GetRecycleBinRequest
     * @returns GetRecycleBinResponse
     */
    async getRecycleBin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecycleBinHeaders({});
        return await this.getRecycleBinWithOptions(request, headers, runtime);
    }
    /**
     * 获取回收项详情
     *
     * @param request - GetRecycleItemRequest
     * @param headers - GetRecycleItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecycleItemResponse
     */
    async getRecycleItemWithOptions(recycleBinId, recycleItemId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRecycleItem",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/recycleItems/${recycleItemId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRecycleItemResponse({}));
    }
    /**
     * 获取回收项详情
     *
     * @param request - GetRecycleItemRequest
     * @returns GetRecycleItemResponse
     */
    async getRecycleItem(recycleBinId, recycleItemId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecycleItemHeaders({});
        return await this.getRecycleItemWithOptions(recycleBinId, recycleItemId, request, headers, runtime);
    }
    /**
     * 获取空间信息
     *
     * @param request - GetSpaceRequest
     * @param headers - GetSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSpaceResponse
     */
    async getSpaceWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSpace",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSpaceResponse({}));
    }
    /**
     * 获取空间信息
     *
     * @param request - GetSpaceRequest
     * @returns GetSpaceResponse
     */
    async getSpace(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSpaceHeaders({});
        return await this.getSpaceWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取异步任务信息
     *
     * @param request - GetTaskRequest
     * @param headers - GetTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskResponse
     */
    async getTaskWithOptions(taskId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTask",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/tasks/${taskId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTaskResponse({}));
    }
    /**
     * 获取异步任务信息
     *
     * @param request - GetTaskRequest
     * @returns GetTaskResponse
     */
    async getTask(taskId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTaskHeaders({});
        return await this.getTaskWithOptions(taskId, request, headers, runtime);
    }
    /**
     * 获取 WebOfficeUrl 接口
     *
     * @param request - GetWebOfficeUrlRequest
     * @param headers - GetWebOfficeUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetWebOfficeUrlResponse
     */
    async getWebOfficeUrlWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetWebOfficeUrl",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/webOfficeUrls`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetWebOfficeUrlResponse({}));
    }
    /**
     * 获取 WebOfficeUrl 接口
     *
     * @param request - GetWebOfficeUrlRequest
     * @returns GetWebOfficeUrlResponse
     */
    async getWebOfficeUrl(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWebOfficeUrlHeaders({});
        return await this.getWebOfficeUrlWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 初始化文件分片上传
     *
     * @param request - InitMultipartFileUploadRequest
     * @param headers - InitMultipartFileUploadHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InitMultipartFileUploadResponse
     */
    async initMultipartFileUploadWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InitMultipartFileUpload",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/files/multiPartUploadInfos/init`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InitMultipartFileUploadResponse({}));
    }
    /**
     * 初始化文件分片上传
     *
     * @param request - InitMultipartFileUploadRequest
     * @returns InitMultipartFileUploadResponse
     */
    async initMultipartFileUpload(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitMultipartFileUploadHeaders({});
        return await this.initMultipartFileUploadWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取文件列表
     *
     * @param request - ListAllDentriesRequest
     * @param headers - ListAllDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAllDentriesResponse
     */
    async listAllDentriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListAllDentries",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/listAll`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAllDentriesResponse({}));
    }
    /**
     * 获取文件列表
     *
     * @param request - ListAllDentriesRequest
     * @returns ListAllDentriesResponse
     */
    async listAllDentries(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAllDentriesHeaders({});
        return await this.listAllDentriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取文件列表
     *
     * @param request - ListDentriesRequest
     * @param headers - ListDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDentriesResponse
     */
    async listDentriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            query["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.orderBy)) {
            query["orderBy"] = request.orderBy;
        }
        if (!tea_util_1.default.isUnset(request.parentId)) {
            query["parentId"] = request.parentId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.withThumbnail)) {
            query["withThumbnail"] = request.withThumbnail;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDentries",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListDentriesResponse({}));
    }
    /**
     * 获取文件列表
     *
     * @param request - ListDentriesRequest
     * @returns ListDentriesResponse
     */
    async listDentries(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListDentriesHeaders({});
        return await this.listDentriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 获取文件历史版本
     *
     * @param request - ListDentryVersionsRequest
     * @param headers - ListDentryVersionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDentryVersionsResponse
     */
    async listDentryVersionsWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListDentryVersions",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/versions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListDentryVersionsResponse({}));
    }
    /**
     * 获取文件历史版本
     *
     * @param request - ListDentryVersionsRequest
     * @returns ListDentryVersionsResponse
     */
    async listDentryVersions(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListDentryVersionsHeaders({});
        return await this.listDentryVersionsWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @param headers - ListPermissionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPermissionsResponse
     */
    async listPermissionsWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListPermissions",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/permissions/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPermissionsResponse({}));
    }
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @returns ListPermissionsResponse
     */
    async listPermissions(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPermissionsHeaders({});
        return await this.listPermissionsWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 获取回收项列表
     *
     * @param request - ListRecycleItemsRequest
     * @param headers - ListRecycleItemsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRecycleItemsResponse
     */
    async listRecycleItemsWithOptions(recycleBinId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRecycleItems",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/recycleItems`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRecycleItemsResponse({}));
    }
    /**
     * 获取回收项列表
     *
     * @param request - ListRecycleItemsRequest
     * @returns ListRecycleItemsResponse
     */
    async listRecycleItems(recycleBinId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRecycleItemsHeaders({});
        return await this.listRecycleItemsWithOptions(recycleBinId, request, headers, runtime);
    }
    /**
     * 批量移动文件或文件夹
     *
     * @param request - MoveDentriesRequest
     * @param headers - MoveDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveDentriesResponse
     */
    async moveDentriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryIds)) {
            body["dentryIds"] = request.dentryIds;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.targetFolderId)) {
            body["targetFolderId"] = request.targetFolderId;
        }
        if (!tea_util_1.default.isUnset(request.targetSpaceId)) {
            body["targetSpaceId"] = request.targetSpaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "MoveDentries",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/batchMove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MoveDentriesResponse({}));
    }
    /**
     * 批量移动文件或文件夹
     *
     * @param request - MoveDentriesRequest
     * @returns MoveDentriesResponse
     */
    async moveDentries(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MoveDentriesHeaders({});
        return await this.moveDentriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * 移动文件或文件夹
     *
     * @param request - MoveDentryRequest
     * @param headers - MoveDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveDentryResponse
     */
    async moveDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.targetFolderId)) {
            body["targetFolderId"] = request.targetFolderId;
        }
        if (!tea_util_1.default.isUnset(request.targetSpaceId)) {
            body["targetSpaceId"] = request.targetSpaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "MoveDentry",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/move`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MoveDentryResponse({}));
    }
    /**
     * 移动文件或文件夹
     *
     * @param request - MoveDentryRequest
     * @returns MoveDentryResponse
     */
    async moveDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MoveDentryHeaders({});
        return await this.moveDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 获取 accessToken 接口
     *
     * @param request - RefreshWebOfficeTokenRequest
     * @param headers - RefreshWebOfficeTokenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RefreshWebOfficeTokenResponse
     */
    async refreshWebOfficeTokenWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.webOfficeAccessToken)) {
            query["webOfficeAccessToken"] = request.webOfficeAccessToken;
        }
        if (!tea_util_1.default.isUnset(request.webOfficeRefreshToken)) {
            query["webOfficeRefreshToken"] = request.webOfficeRefreshToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RefreshWebOfficeToken",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/refreshWebOfficeToken`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RefreshWebOfficeTokenResponse({}));
    }
    /**
     * 获取 accessToken 接口
     *
     * @param request - RefreshWebOfficeTokenRequest
     * @returns RefreshWebOfficeTokenResponse
     */
    async refreshWebOfficeToken(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RefreshWebOfficeTokenHeaders({});
        return await this.refreshWebOfficeTokenWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 注册文件预览或编辑链接
     *
     * @param request - RegisterOpenInfoRequest
     * @param headers - RegisterOpenInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterOpenInfoResponse
     */
    async registerOpenInfoWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.openInfos)) {
            body["openInfos"] = request.openInfos;
        }
        if (!tea_util_1.default.isUnset(request.provider)) {
            body["provider"] = request.provider;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RegisterOpenInfo",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/openInfos/register`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RegisterOpenInfoResponse({}));
    }
    /**
     * 注册文件预览或编辑链接
     *
     * @param request - RegisterOpenInfoRequest
     * @returns RegisterOpenInfoResponse
     */
    async registerOpenInfo(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterOpenInfoHeaders({});
        return await this.registerOpenInfoWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 重命名文件或文件夹
     *
     * @param request - RenameDentryRequest
     * @param headers - RenameDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RenameDentryResponse
     */
    async renameDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.newName)) {
            body["newName"] = request.newName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RenameDentry",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/rename`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RenameDentryResponse({}));
    }
    /**
     * 重命名文件或文件夹
     *
     * @param request - RenameDentryRequest
     * @returns RenameDentryResponse
     */
    async renameDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RenameDentryHeaders({});
        return await this.renameDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemRequest
     * @param headers - RestoreRecycleItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RestoreRecycleItemResponse
     */
    async restoreRecycleItemWithOptions(recycleBinId, recycleItemId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RestoreRecycleItem",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/recycleItems/${recycleItemId}/restore`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RestoreRecycleItemResponse({}));
    }
    /**
     * 还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemRequest
     * @returns RestoreRecycleItemResponse
     */
    async restoreRecycleItem(recycleBinId, recycleItemId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RestoreRecycleItemHeaders({});
        return await this.restoreRecycleItemWithOptions(recycleBinId, recycleItemId, request, headers, runtime);
    }
    /**
     * 批量还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemsRequest
     * @param headers - RestoreRecycleItemsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RestoreRecycleItemsResponse
     */
    async restoreRecycleItemsWithOptions(recycleBinId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.recycleItemIds)) {
            body["recycleItemIds"] = request.recycleItemIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RestoreRecycleItems",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/recycleBins/${recycleBinId}/recycleItems/batchRestore`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RestoreRecycleItemsResponse({}));
    }
    /**
     * 批量还原回收站中的回收项
     *
     * @param request - RestoreRecycleItemsRequest
     * @returns RestoreRecycleItemsResponse
     */
    async restoreRecycleItems(recycleBinId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RestoreRecycleItemsHeaders({});
        return await this.restoreRecycleItemsWithOptions(recycleBinId, request, headers, runtime);
    }
    /**
     * 恢复文件历史版本
     *
     * @param request - RevertDentryVersionRequest
     * @param headers - RevertDentryVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RevertDentryVersionResponse
     */
    async revertDentryVersionWithOptions(spaceId, dentryId, version, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RevertDentryVersion",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/versions/${version}/revert`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RevertDentryVersionResponse({}));
    }
    /**
     * 恢复文件历史版本
     *
     * @param request - RevertDentryVersionRequest
     * @returns RevertDentryVersionResponse
     */
    async revertDentryVersion(spaceId, dentryId, version, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RevertDentryVersionHeaders({});
        return await this.revertDentryVersionWithOptions(spaceId, dentryId, version, request, headers, runtime);
    }
    /**
     * 订阅文件变更事件
     *
     * @param request - SubscribeEventRequest
     * @param headers - SubscribeEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubscribeEventResponse
     */
    async subscribeEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.scope)) {
            body["scope"] = request.scope;
        }
        if (!tea_util_1.default.isUnset(request.scopeId)) {
            body["scopeId"] = request.scopeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SubscribeEvent",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/events/subscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubscribeEventResponse({}));
    }
    /**
     * 订阅文件变更事件
     *
     * @param request - SubscribeEventRequest
     * @returns SubscribeEventResponse
     */
    async subscribeEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubscribeEventHeaders({});
        return await this.subscribeEventWithOptions(request, headers, runtime);
    }
    /**
     * 取消订阅文件变更事件
     *
     * @param request - UnsubscribeEventRequest
     * @param headers - UnsubscribeEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnsubscribeEventResponse
     */
    async unsubscribeEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.scope)) {
            body["scope"] = request.scope;
        }
        if (!tea_util_1.default.isUnset(request.scopeId)) {
            body["scopeId"] = request.scopeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UnsubscribeEvent",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/events/unsubscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnsubscribeEventResponse({}));
    }
    /**
     * 取消订阅文件变更事件
     *
     * @param request - UnsubscribeEventRequest
     * @returns UnsubscribeEventResponse
     */
    async unsubscribeEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnsubscribeEventHeaders({});
        return await this.unsubscribeEventWithOptions(request, headers, runtime);
    }
    /**
     * 修改文件上的App属性值
     *
     * @param request - UpdateDentryAppPropertiesRequest
     * @param headers - UpdateDentryAppPropertiesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateDentryAppPropertiesResponse
     */
    async updateDentryAppPropertiesWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.appProperties)) {
            body["appProperties"] = request.appProperties;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDentryAppProperties",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/appProperties`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateDentryAppPropertiesResponse({}));
    }
    /**
     * 修改文件上的App属性值
     *
     * @param request - UpdateDentryAppPropertiesRequest
     * @returns UpdateDentryAppPropertiesResponse
     */
    async updateDentryAppProperties(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateDentryAppPropertiesHeaders({});
        return await this.updateDentryAppPropertiesWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * 修改权限
     *
     * @param request - UpdatePermissionRequest
     * @param headers - UpdatePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePermissionResponse
     */
    async updatePermissionWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            body["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePermission",
            version: "storage_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/storage/spaces/${spaceId}/dentries/${dentryId}/permissions`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePermissionResponse({}));
    }
    /**
     * 修改权限
     *
     * @param request - UpdatePermissionRequest
     * @returns UpdatePermissionResponse
     */
    async updatePermission(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePermissionHeaders({});
        return await this.updatePermissionWithOptions(spaceId, dentryId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map