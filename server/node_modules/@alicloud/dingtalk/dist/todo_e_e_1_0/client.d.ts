/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AppCreateEnterpriseTodoTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskRequest extends $tea.Model {
    bizCategoryId?: string;
    bizCreatedTime?: number;
    customFields?: AppCreateEnterpriseTodoTaskRequestCustomFields[];
    description?: string;
    detailUrl?: AppCreateEnterpriseTodoTaskRequestDetailUrl;
    dueTime?: number;
    executorIds?: string[];
    notifyConfigs?: AppCreateEnterpriseTodoTaskRequestNotifyConfigs;
    operatorId?: string;
    priority?: number;
    sourceId?: string;
    sourceTitle?: string;
    subject?: string;
    toolbarTemplateKey?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskResponseBody extends $tea.Model {
    bizCategoryId?: string;
    createdTime?: number;
    creatorId?: string;
    description?: string;
    detailUrl?: AppCreateEnterpriseTodoTaskResponseBodyDetailUrl;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    modifiedTime?: number;
    priority?: number;
    sourceId?: string;
    subject?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AppCreateEnterpriseTodoTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppDeleteTodoEETaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppDeleteTodoEETaskRequest extends $tea.Model {
    operatorId?: string;
    taskIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppDeleteTodoEETaskResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppDeleteTodoEETaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AppDeleteTodoEETaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppGetUserTaskListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppGetUserTaskListRequest extends $tea.Model {
    done?: boolean;
    operatorId?: string;
    pageNumber?: number;
    pageSize?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppGetUserTaskListResponseBody extends $tea.Model {
    data?: AppGetUserTaskListResponseBodyData[];
    hasMore?: boolean;
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppGetUserTaskListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AppGetUserTaskListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateTaskRequest extends $tea.Model {
    bizCreatedTime?: number;
    description?: string;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    operatorId?: string;
    subject?: string;
    taskId?: number;
    toolbarTemplateKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateTaskResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AppUpdateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateUserTaskStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateUserTaskStatusRequest extends $tea.Model {
    operatorId?: string;
    userTaskStatuses?: AppUpdateUserTaskStatusRequestUserTaskStatuses[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateUserTaskStatusResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateUserTaskStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AppUpdateUserTaskStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskRequest extends $tea.Model {
    bizCategoryId?: string;
    customFields?: CreateEnterpriseTodoTaskRequestCustomFields[];
    description?: string;
    detailUrl?: CreateEnterpriseTodoTaskRequestDetailUrl;
    dueTime?: number;
    executorIds?: string[];
    notifyConfigs?: CreateEnterpriseTodoTaskRequestNotifyConfigs;
    operatorId?: string;
    priority?: number;
    sourceId?: string;
    sourceTitle?: string;
    subject?: string;
    trackerIds?: string[];
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskResponseBody extends $tea.Model {
    bizCategoryId?: string;
    createdTime?: number;
    creatorId?: string;
    description?: string;
    detailUrl?: CreateEnterpriseTodoTaskResponseBodyDetailUrl;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    modifiedTime?: number;
    sourceId?: string;
    subject?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateEnterpriseTodoTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateRequest extends $tea.Model {
    actions?: CreateStandardTemplateRequestActions[];
    description?: string;
    name?: string;
    operatorId?: string;
    service?: CreateStandardTemplateRequestService;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateResponseBody extends $tea.Model {
    actions?: CreateStandardTemplateResponseBodyActions[];
    description?: string;
    name?: string;
    templateKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateStandardTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCategorySourceConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCategorySourceConfigRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1001
     */
    bizCategoryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCategorySourceConfigResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCategorySourceConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteCategorySourceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoEETaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoEETaskRequest extends $tea.Model {
    taskIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoEETaskResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoEETaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteTodoEETaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategorySourceConfigListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategorySourceConfigListRequest extends $tea.Model {
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategorySourceConfigListResponseBody extends $tea.Model {
    configs?: GetCategorySourceConfigListResponseBodyConfigs[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategorySourceConfigListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCategorySourceConfigListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateListRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateListResponseBody extends $tea.Model {
    data?: GetTemplateListResponseBodyData[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTemplateListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTaskListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTaskListRequest extends $tea.Model {
    done?: boolean;
    pageNumber?: number;
    pageSize?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTaskListResponseBody extends $tea.Model {
    data?: GetUserTaskListResponseBodyData[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTaskListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserTaskListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskExecutionStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskExecutionStatusRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskExecutionStatusResponseBody extends $tea.Model {
    data?: QueryTaskExecutionStatusResponseBodyData[];
    hasMore?: boolean;
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskExecutionStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTaskExecutionStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCategorySourceConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCategorySourceConfigRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1001
     */
    bizCategoryId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 财务_审批_考勤
     */
    bizCategoryName?: string;
    /**
     * @example
     * 张三
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCategorySourceConfigResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCategorySourceConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RegisterCategorySourceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategorySourceConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategorySourceConfigRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1001
     */
    bizCategoryId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 考勤_财务
     */
    bizCategoryName?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategorySourceConfigResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategorySourceConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateCategorySourceConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStandardTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStandardTemplateRequest extends $tea.Model {
    actions?: UpdateStandardTemplateRequestActions[];
    operatorId?: string;
    service?: UpdateStandardTemplateRequestService;
    templateKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStandardTemplateResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStandardTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateStandardTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTaskRequest extends $tea.Model {
    description?: string;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    subject?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTaskResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserTaskStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserTaskStatusRequest extends $tea.Model {
    operatorId?: string;
    userTaskStatuses?: UpdateUserTaskStatusRequestUserTaskStatuses[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserTaskStatusResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserTaskStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateUserTaskStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskRequestCustomFields extends $tea.Model {
    fieldKey?: string;
    fieldLink?: string;
    fieldType?: string;
    fieldValue?: string;
    icon?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskRequestDetailUrl extends $tea.Model {
    appUrl?: string;
    webUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskRequestNotifyConfigs extends $tea.Model {
    assistance?: string;
    dingNotify?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppCreateEnterpriseTodoTaskResponseBodyDetailUrl extends $tea.Model {
    appUrl?: string;
    webUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppGetUserTaskListResponseBodyDataDetailUrl extends $tea.Model {
    appUrl?: string;
    webUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppGetUserTaskListResponseBodyData extends $tea.Model {
    bizCategoryId?: string;
    createdTime?: number;
    description?: string;
    detailUrl?: AppGetUserTaskListResponseBodyDataDetailUrl;
    done?: boolean;
    dueTime?: number;
    modifiedTime?: number;
    operatorId?: string;
    priority?: number;
    subject?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppUpdateUserTaskStatusRequestUserTaskStatuses extends $tea.Model {
    done?: boolean;
    /**
     * **if can be null:**
     * false
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskRequestCustomFields extends $tea.Model {
    fieldKey?: string;
    fieldLink?: string;
    fieldType?: string;
    fieldValue?: string;
    icon?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskRequestDetailUrl extends $tea.Model {
    appUrl?: string;
    webUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskRequestNotifyConfigs extends $tea.Model {
    dingNotify?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEnterpriseTodoTaskResponseBodyDetailUrl extends $tea.Model {
    appUrl?: string;
    webUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateRequestActions extends $tea.Model {
    actionGroup?: string;
    name?: string;
    needReason?: boolean;
    needReasonRequired?: boolean;
    order?: number;
    styleType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateRequestService extends $tea.Model {
    callbackUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStandardTemplateResponseBodyActions extends $tea.Model {
    actionKey?: string;
    name?: string;
    needReason?: boolean;
    needReasonRequired?: boolean;
    order?: number;
    styleType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategorySourceConfigListResponseBodyConfigs extends $tea.Model {
    bizCategoryId?: string;
    bizCategoryName?: string;
    configId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateListResponseBodyDataActions extends $tea.Model {
    actionKey?: string;
    description?: string;
    name?: string;
    needReason?: boolean;
    needReasonRequired?: boolean;
    order?: number;
    styleType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateListResponseBodyData extends $tea.Model {
    actions?: GetTemplateListResponseBodyDataActions[];
    createTime?: number;
    creatorId?: string;
    description?: string;
    modifiedTime?: number;
    modifierId?: string;
    name?: string;
    templateKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTaskListResponseBodyData extends $tea.Model {
    createdTime?: number;
    description?: string;
    done?: boolean;
    dueTime?: number;
    subject?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskExecutionStatusResponseBodyData extends $tea.Model {
    done?: boolean;
    executorId?: string;
    finishDate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStandardTemplateRequestActions extends $tea.Model {
    actionGroup?: string;
    name?: string;
    needReason?: boolean;
    needReasonRequired?: boolean;
    order?: number;
    styleType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStandardTemplateRequestService extends $tea.Model {
    callbackUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserTaskStatusRequestUserTaskStatuses extends $tea.Model {
    done?: boolean;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 创建专属待办
     *
     * @param request - AppCreateEnterpriseTodoTaskRequest
     * @param headers - AppCreateEnterpriseTodoTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AppCreateEnterpriseTodoTaskResponse
     */
    appCreateEnterpriseTodoTaskWithOptions(request: AppCreateEnterpriseTodoTaskRequest, headers: AppCreateEnterpriseTodoTaskHeaders, runtime: $Util.RuntimeOptions): Promise<AppCreateEnterpriseTodoTaskResponse>;
    /**
     * 创建专属待办
     *
     * @param request - AppCreateEnterpriseTodoTaskRequest
     * @returns AppCreateEnterpriseTodoTaskResponse
     */
    appCreateEnterpriseTodoTask(request: AppCreateEnterpriseTodoTaskRequest): Promise<AppCreateEnterpriseTodoTaskResponse>;
    /**
     * 删除专属待办
     *
     * @param request - AppDeleteTodoEETaskRequest
     * @param headers - AppDeleteTodoEETaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AppDeleteTodoEETaskResponse
     */
    appDeleteTodoEETaskWithOptions(request: AppDeleteTodoEETaskRequest, headers: AppDeleteTodoEETaskHeaders, runtime: $Util.RuntimeOptions): Promise<AppDeleteTodoEETaskResponse>;
    /**
     * 删除专属待办
     *
     * @param request - AppDeleteTodoEETaskRequest
     * @returns AppDeleteTodoEETaskResponse
     */
    appDeleteTodoEETask(request: AppDeleteTodoEETaskRequest): Promise<AppDeleteTodoEETaskResponse>;
    /**
     * 查询用户待办列表
     *
     * @param request - AppGetUserTaskListRequest
     * @param headers - AppGetUserTaskListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AppGetUserTaskListResponse
     */
    appGetUserTaskListWithOptions(request: AppGetUserTaskListRequest, headers: AppGetUserTaskListHeaders, runtime: $Util.RuntimeOptions): Promise<AppGetUserTaskListResponse>;
    /**
     * 查询用户待办列表
     *
     * @param request - AppGetUserTaskListRequest
     * @returns AppGetUserTaskListResponse
     */
    appGetUserTaskList(request: AppGetUserTaskListRequest): Promise<AppGetUserTaskListResponse>;
    /**
     * 更新专属待办信息
     *
     * @param request - AppUpdateTaskRequest
     * @param headers - AppUpdateTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AppUpdateTaskResponse
     */
    appUpdateTaskWithOptions(request: AppUpdateTaskRequest, headers: AppUpdateTaskHeaders, runtime: $Util.RuntimeOptions): Promise<AppUpdateTaskResponse>;
    /**
     * 更新专属待办信息
     *
     * @param request - AppUpdateTaskRequest
     * @returns AppUpdateTaskResponse
     */
    appUpdateTask(request: AppUpdateTaskRequest): Promise<AppUpdateTaskResponse>;
    /**
     * 更新用户的待办状态
     *
     * @param request - AppUpdateUserTaskStatusRequest
     * @param headers - AppUpdateUserTaskStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AppUpdateUserTaskStatusResponse
     */
    appUpdateUserTaskStatusWithOptions(request: AppUpdateUserTaskStatusRequest, headers: AppUpdateUserTaskStatusHeaders, runtime: $Util.RuntimeOptions): Promise<AppUpdateUserTaskStatusResponse>;
    /**
     * 更新用户的待办状态
     *
     * @param request - AppUpdateUserTaskStatusRequest
     * @returns AppUpdateUserTaskStatusResponse
     */
    appUpdateUserTaskStatus(request: AppUpdateUserTaskStatusRequest): Promise<AppUpdateUserTaskStatusResponse>;
    /**
     * 创建企业待办
     *
     * @param request - CreateEnterpriseTodoTaskRequest
     * @param headers - CreateEnterpriseTodoTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateEnterpriseTodoTaskResponse
     */
    createEnterpriseTodoTaskWithOptions(request: CreateEnterpriseTodoTaskRequest, headers: CreateEnterpriseTodoTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateEnterpriseTodoTaskResponse>;
    /**
     * 创建企业待办
     *
     * @param request - CreateEnterpriseTodoTaskRequest
     * @returns CreateEnterpriseTodoTaskResponse
     */
    createEnterpriseTodoTask(request: CreateEnterpriseTodoTaskRequest): Promise<CreateEnterpriseTodoTaskResponse>;
    /**
     * 创建专属待办模板实例
     *
     * @param request - CreateStandardTemplateRequest
     * @param headers - CreateStandardTemplateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateStandardTemplateResponse
     */
    createStandardTemplateWithOptions(request: CreateStandardTemplateRequest, headers: CreateStandardTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<CreateStandardTemplateResponse>;
    /**
     * 创建专属待办模板实例
     *
     * @param request - CreateStandardTemplateRequest
     * @returns CreateStandardTemplateResponse
     */
    createStandardTemplate(request: CreateStandardTemplateRequest): Promise<CreateStandardTemplateResponse>;
    /**
     * 删除应用类目信息
     *
     * @param request - DeleteCategorySourceConfigRequest
     * @param headers - DeleteCategorySourceConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteCategorySourceConfigResponse
     */
    deleteCategorySourceConfigWithOptions(request: DeleteCategorySourceConfigRequest, headers: DeleteCategorySourceConfigHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteCategorySourceConfigResponse>;
    /**
     * 删除应用类目信息
     *
     * @param request - DeleteCategorySourceConfigRequest
     * @returns DeleteCategorySourceConfigResponse
     */
    deleteCategorySourceConfig(request: DeleteCategorySourceConfigRequest): Promise<DeleteCategorySourceConfigResponse>;
    /**
     * 删除待办
     *
     * @param request - DeleteTodoEETaskRequest
     * @param headers - DeleteTodoEETaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTodoEETaskResponse
     */
    deleteTodoEETaskWithOptions(request: DeleteTodoEETaskRequest, headers: DeleteTodoEETaskHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTodoEETaskResponse>;
    /**
     * 删除待办
     *
     * @param request - DeleteTodoEETaskRequest
     * @returns DeleteTodoEETaskResponse
     */
    deleteTodoEETask(request: DeleteTodoEETaskRequest): Promise<DeleteTodoEETaskResponse>;
    /**
     * 查询应用注册类目信息列表
     *
     * @param request - GetCategorySourceConfigListRequest
     * @param headers - GetCategorySourceConfigListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCategorySourceConfigListResponse
     */
    getCategorySourceConfigListWithOptions(request: GetCategorySourceConfigListRequest, headers: GetCategorySourceConfigListHeaders, runtime: $Util.RuntimeOptions): Promise<GetCategorySourceConfigListResponse>;
    /**
     * 查询应用注册类目信息列表
     *
     * @param request - GetCategorySourceConfigListRequest
     * @returns GetCategorySourceConfigListResponse
     */
    getCategorySourceConfigList(request: GetCategorySourceConfigListRequest): Promise<GetCategorySourceConfigListResponse>;
    /**
     * 查询创建的Template列表
     *
     * @param request - GetTemplateListRequest
     * @param headers - GetTemplateListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTemplateListResponse
     */
    getTemplateListWithOptions(request: GetTemplateListRequest, headers: GetTemplateListHeaders, runtime: $Util.RuntimeOptions): Promise<GetTemplateListResponse>;
    /**
     * 查询创建的Template列表
     *
     * @param request - GetTemplateListRequest
     * @returns GetTemplateListResponse
     */
    getTemplateList(request: GetTemplateListRequest): Promise<GetTemplateListResponse>;
    /**
     * 查询用户待办列表
     *
     * @param request - GetUserTaskListRequest
     * @param headers - GetUserTaskListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserTaskListResponse
     */
    getUserTaskListWithOptions(request: GetUserTaskListRequest, headers: GetUserTaskListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserTaskListResponse>;
    /**
     * 查询用户待办列表
     *
     * @param request - GetUserTaskListRequest
     * @returns GetUserTaskListResponse
     */
    getUserTaskList(request: GetUserTaskListRequest): Promise<GetUserTaskListResponse>;
    /**
     * 查询任务所有执行人的完成状态
     *
     * @param request - QueryTaskExecutionStatusRequest
     * @param headers - QueryTaskExecutionStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTaskExecutionStatusResponse
     */
    queryTaskExecutionStatusWithOptions(request: QueryTaskExecutionStatusRequest, headers: QueryTaskExecutionStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTaskExecutionStatusResponse>;
    /**
     * 查询任务所有执行人的完成状态
     *
     * @param request - QueryTaskExecutionStatusRequest
     * @returns QueryTaskExecutionStatusResponse
     */
    queryTaskExecutionStatus(request: QueryTaskExecutionStatusRequest): Promise<QueryTaskExecutionStatusResponse>;
    /**
     * 注册应用类目信息
     *
     * @param request - RegisterCategorySourceConfigRequest
     * @param headers - RegisterCategorySourceConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterCategorySourceConfigResponse
     */
    registerCategorySourceConfigWithOptions(request: RegisterCategorySourceConfigRequest, headers: RegisterCategorySourceConfigHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterCategorySourceConfigResponse>;
    /**
     * 注册应用类目信息
     *
     * @param request - RegisterCategorySourceConfigRequest
     * @returns RegisterCategorySourceConfigResponse
     */
    registerCategorySourceConfig(request: RegisterCategorySourceConfigRequest): Promise<RegisterCategorySourceConfigResponse>;
    /**
     * 修改应用类目注册信息
     *
     * @param request - UpdateCategorySourceConfigRequest
     * @param headers - UpdateCategorySourceConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCategorySourceConfigResponse
     */
    updateCategorySourceConfigWithOptions(request: UpdateCategorySourceConfigRequest, headers: UpdateCategorySourceConfigHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCategorySourceConfigResponse>;
    /**
     * 修改应用类目注册信息
     *
     * @param request - UpdateCategorySourceConfigRequest
     * @returns UpdateCategorySourceConfigResponse
     */
    updateCategorySourceConfig(request: UpdateCategorySourceConfigRequest): Promise<UpdateCategorySourceConfigResponse>;
    /**
     * 更新标准模板
     *
     * @param request - UpdateStandardTemplateRequest
     * @param headers - UpdateStandardTemplateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateStandardTemplateResponse
     */
    updateStandardTemplateWithOptions(request: UpdateStandardTemplateRequest, headers: UpdateStandardTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateStandardTemplateResponse>;
    /**
     * 更新标准模板
     *
     * @param request - UpdateStandardTemplateRequest
     * @returns UpdateStandardTemplateResponse
     */
    updateStandardTemplate(request: UpdateStandardTemplateRequest): Promise<UpdateStandardTemplateResponse>;
    /**
     * 更新待办信息
     *
     * @param request - UpdateTaskRequest
     * @param headers - UpdateTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskResponse
     */
    updateTaskWithOptions(request: UpdateTaskRequest, headers: UpdateTaskHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTaskResponse>;
    /**
     * 更新待办信息
     *
     * @param request - UpdateTaskRequest
     * @returns UpdateTaskResponse
     */
    updateTask(request: UpdateTaskRequest): Promise<UpdateTaskResponse>;
    /**
     * 更新用户的待办状态
     *
     * @param request - UpdateUserTaskStatusRequest
     * @param headers - UpdateUserTaskStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUserTaskStatusResponse
     */
    updateUserTaskStatusWithOptions(request: UpdateUserTaskStatusRequest, headers: UpdateUserTaskStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUserTaskStatusResponse>;
    /**
     * 更新用户的待办状态
     *
     * @param request - UpdateUserTaskStatusRequest
     * @returns UpdateUserTaskStatusResponse
     */
    updateUserTaskStatus(request: UpdateUserTaskStatusRequest): Promise<UpdateUserTaskStatusResponse>;
}
