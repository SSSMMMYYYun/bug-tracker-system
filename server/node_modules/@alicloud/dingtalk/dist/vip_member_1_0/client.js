"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryVipMemberInfoResponse = exports.QueryVipMemberInfoResponseBody = exports.QueryVipMemberInfoRequest = exports.QueryVipMemberInfoHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class QueryVipMemberInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVipMemberInfoHeaders = QueryVipMemberInfoHeaders;
class QueryVipMemberInfoRequest extends $tea.Model {
    static names() {
        return {
            channelCode: 'channelCode',
        };
    }
    static types() {
        return {
            channelCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVipMemberInfoRequest = QueryVipMemberInfoRequest;
class QueryVipMemberInfoResponseBody extends $tea.Model {
    static names() {
        return {
            expireTime: 'expireTime',
            isVip: 'isVip',
        };
    }
    static types() {
        return {
            expireTime: 'string',
            isVip: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVipMemberInfoResponseBody = QueryVipMemberInfoResponseBody;
class QueryVipMemberInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryVipMemberInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVipMemberInfoResponse = QueryVipMemberInfoResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 查询365会员信息
     *
     * @param request - QueryVipMemberInfoRequest
     * @param headers - QueryVipMemberInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryVipMemberInfoResponse
     */
    async queryVipMemberInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.channelCode)) {
            body["channelCode"] = request.channelCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryVipMemberInfo",
            version: "vipMember_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/vipMember/users/memberInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryVipMemberInfoResponse({}));
    }
    /**
     * 查询365会员信息
     *
     * @param request - QueryVipMemberInfoRequest
     * @returns QueryVipMemberInfoResponse
     */
    async queryVipMemberInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryVipMemberInfoHeaders({});
        return await this.queryVipMemberInfoWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map