"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFormDataByIDResponseBodyOriginator = exports.GetFormDataByIDResponseBodyOriginatorName = exports.GetFormComponentAliasListResponseBodyResult = exports.UpdateFormDataResponse = exports.UpdateFormDataRequest = exports.UpdateFormDataHeaders = exports.StartInstanceResponse = exports.StartInstanceResponseBody = exports.StartInstanceRequest = exports.StartInstanceHeaders = exports.SearchFormDatasResponse = exports.SearchFormDatasResponseBody = exports.SearchFormDatasRequest = exports.SearchFormDatasHeaders = exports.SearchFormDataSecondGenerationResponse = exports.SearchFormDataSecondGenerationResponseBody = exports.SearchFormDataSecondGenerationRequest = exports.SearchFormDataSecondGenerationHeaders = exports.SearchFormDataIdListResponse = exports.SearchFormDataIdListResponseBody = exports.SearchFormDataIdListRequest = exports.SearchFormDataIdListHeaders = exports.SaveFormDataResponse = exports.SaveFormDataResponseBody = exports.SaveFormDataRequest = exports.SaveFormDataHeaders = exports.GetInstancesResponse = exports.GetInstancesResponseBody = exports.GetInstancesRequest = exports.GetInstancesHeaders = exports.GetInstanceIdListResponse = exports.GetInstanceIdListResponseBody = exports.GetInstanceIdListRequest = exports.GetInstanceIdListHeaders = exports.GetInstanceByIdResponse = exports.GetInstanceByIdResponseBody = exports.GetInstanceByIdRequest = exports.GetInstanceByIdHeaders = exports.GetFormDataByIDResponse = exports.GetFormDataByIDResponseBody = exports.GetFormDataByIDRequest = exports.GetFormDataByIDHeaders = exports.GetFormComponentAliasListResponse = exports.GetFormComponentAliasListResponseBody = exports.GetFormComponentAliasListRequest = exports.GetFormComponentAliasListHeaders = exports.CreateOrUpdateFormDataResponse = exports.CreateOrUpdateFormDataResponseBody = exports.CreateOrUpdateFormDataRequest = exports.CreateOrUpdateFormDataHeaders = void 0;
exports.SearchFormDatasResponseBodyData = exports.SearchFormDatasResponseBodyDataOriginator = exports.SearchFormDatasResponseBodyDataOriginatorUserName = exports.SearchFormDatasResponseBodyDataModifyUser = exports.SearchFormDatasResponseBodyDataModifyUserUserName = exports.SearchFormDataSecondGenerationResponseBodyData = exports.SearchFormDataSecondGenerationResponseBodyDataOriginator = exports.SearchFormDataSecondGenerationResponseBodyDataOriginatorName = exports.SearchFormDataSecondGenerationResponseBodyDataModifyUser = exports.SearchFormDataSecondGenerationResponseBodyDataModifyUserName = exports.GetInstancesResponseBodyData = exports.GetInstancesResponseBodyDataOriginator = exports.GetInstancesResponseBodyDataOriginatorName = exports.GetInstancesResponseBodyDataActionExecutor = exports.GetInstancesResponseBodyDataActionExecutorName = exports.GetInstanceByIdResponseBodyOriginator = exports.GetInstanceByIdResponseBodyOriginatorName = exports.GetInstanceByIdResponseBodyActionExecutor = exports.GetInstanceByIdResponseBodyActionExecutorName = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateOrUpdateFormDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrUpdateFormDataHeaders = CreateOrUpdateFormDataHeaders;
class CreateOrUpdateFormDataRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            formDataJson: 'formDataJson',
            formUuid: 'formUuid',
            noExecuteExpression: 'noExecuteExpression',
            searchCondition: 'searchCondition',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formDataJson: 'string',
            formUuid: 'string',
            noExecuteExpression: 'boolean',
            searchCondition: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrUpdateFormDataRequest = CreateOrUpdateFormDataRequest;
class CreateOrUpdateFormDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrUpdateFormDataResponseBody = CreateOrUpdateFormDataResponseBody;
class CreateOrUpdateFormDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateFormDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrUpdateFormDataResponse = CreateOrUpdateFormDataResponse;
class GetFormComponentAliasListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormComponentAliasListHeaders = GetFormComponentAliasListHeaders;
class GetFormComponentAliasListRequest extends $tea.Model {
    static names() {
        return {
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            language: 'string',
            systemToken: 'string',
            userId: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormComponentAliasListRequest = GetFormComponentAliasListRequest;
class GetFormComponentAliasListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetFormComponentAliasListResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormComponentAliasListResponseBody = GetFormComponentAliasListResponseBody;
class GetFormComponentAliasListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFormComponentAliasListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormComponentAliasListResponse = GetFormComponentAliasListResponse;
class GetFormDataByIDHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormDataByIDHeaders = GetFormDataByIDHeaders;
class GetFormDataByIDRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            formUuid: 'formUuid',
            language: 'language',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formUuid: 'string',
            language: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormDataByIDRequest = GetFormDataByIDRequest;
class GetFormDataByIDResponseBody extends $tea.Model {
    static names() {
        return {
            formData: 'formData',
            formInstId: 'formInstId',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originator: 'originator',
        };
    }
    static types() {
        return {
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstId: 'string',
            modifiedTimeGMT: 'string',
            originator: GetFormDataByIDResponseBodyOriginator,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormDataByIDResponseBody = GetFormDataByIDResponseBody;
class GetFormDataByIDResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFormDataByIDResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormDataByIDResponse = GetFormDataByIDResponse;
class GetInstanceByIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdHeaders = GetInstanceByIdHeaders;
class GetInstanceByIdRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            formUuid: 'formUuid',
            language: 'language',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formUuid: 'string',
            language: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdRequest = GetInstanceByIdRequest;
class GetInstanceByIdResponseBody extends $tea.Model {
    static names() {
        return {
            actionExecutor: 'actionExecutor',
            approvedResult: 'approvedResult',
            createTimeGMT: 'createTimeGMT',
            data: 'data',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originator: 'originator',
            processCode: 'processCode',
            processInstanceId: 'processInstanceId',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            actionExecutor: { 'type': 'array', 'itemType': GetInstanceByIdResponseBodyActionExecutor },
            approvedResult: 'string',
            createTimeGMT: 'string',
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formUuid: 'string',
            instanceStatus: 'string',
            modifiedTimeGMT: 'string',
            originator: GetInstanceByIdResponseBodyOriginator,
            processCode: 'string',
            processInstanceId: 'string',
            title: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdResponseBody = GetInstanceByIdResponseBody;
class GetInstanceByIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstanceByIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdResponse = GetInstanceByIdResponse;
class GetInstanceIdListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceIdListHeaders = GetInstanceIdListHeaders;
class GetInstanceIdListRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            approvedResult: 'approvedResult',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            taskId: 'taskId',
            useAlias: 'useAlias',
            userId: 'userId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            appType: 'string',
            approvedResult: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            instanceStatus: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            taskId: 'string',
            useAlias: 'boolean',
            userId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceIdListRequest = GetInstanceIdListRequest;
class GetInstanceIdListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': 'string' },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceIdListResponseBody = GetInstanceIdListResponseBody;
class GetInstanceIdListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstanceIdListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceIdListResponse = GetInstanceIdListResponse;
class GetInstancesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesHeaders = GetInstancesHeaders;
class GetInstancesRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            approvedResult: 'approvedResult',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            orderConfigJson: 'orderConfigJson',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            taskId: 'taskId',
            useAlias: 'useAlias',
            userId: 'userId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            appType: 'string',
            approvedResult: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            instanceStatus: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            orderConfigJson: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            taskId: 'string',
            useAlias: 'boolean',
            userId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesRequest = GetInstancesRequest;
class GetInstancesResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetInstancesResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponseBody = GetInstancesResponseBody;
class GetInstancesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstancesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponse = GetInstancesResponse;
class SaveFormDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveFormDataHeaders = SaveFormDataHeaders;
class SaveFormDataRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            formDataJson: 'formDataJson',
            formUuid: 'formUuid',
            language: 'language',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formDataJson: 'string',
            formUuid: 'string',
            language: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveFormDataRequest = SaveFormDataRequest;
class SaveFormDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveFormDataResponseBody = SaveFormDataResponseBody;
class SaveFormDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveFormDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveFormDataResponse = SaveFormDataResponse;
class SearchFormDataIdListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataIdListHeaders = SearchFormDataIdListHeaders;
class SearchFormDataIdListRequest extends $tea.Model {
    static names() {
        return {
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataIdListRequest = SearchFormDataIdListRequest;
class SearchFormDataIdListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': 'string' },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataIdListResponseBody = SearchFormDataIdListResponseBody;
class SearchFormDataIdListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDataIdListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataIdListResponse = SearchFormDataIdListResponse;
class SearchFormDataSecondGenerationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationHeaders = SearchFormDataSecondGenerationHeaders;
class SearchFormDataSecondGenerationRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            orderConfigJson: 'orderConfigJson',
            originatorId: 'originatorId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchCondition: 'searchCondition',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            orderConfigJson: 'string',
            originatorId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            searchCondition: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationRequest = SearchFormDataSecondGenerationRequest;
class SearchFormDataSecondGenerationResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': SearchFormDataSecondGenerationResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponseBody = SearchFormDataSecondGenerationResponseBody;
class SearchFormDataSecondGenerationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDataSecondGenerationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponse = SearchFormDataSecondGenerationResponse;
class SearchFormDatasHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasHeaders = SearchFormDatasHeaders;
class SearchFormDatasRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            currentPage: 'currentPage',
            dynamicOrder: 'dynamicOrder',
            formUuid: 'formUuid',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            pageSize: 'pageSize',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            currentPage: 'number',
            dynamicOrder: 'string',
            formUuid: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            pageSize: 'number',
            searchFieldJson: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasRequest = SearchFormDatasRequest;
class SearchFormDatasResponseBody extends $tea.Model {
    static names() {
        return {
            currentPage: 'currentPage',
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            data: { 'type': 'array', 'itemType': SearchFormDatasResponseBodyData },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponseBody = SearchFormDatasResponseBody;
class SearchFormDatasResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDatasResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponse = SearchFormDatasResponse;
class StartInstanceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartInstanceHeaders = StartInstanceHeaders;
class StartInstanceRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            departmentId: 'departmentId',
            formDataJson: 'formDataJson',
            formUuid: 'formUuid',
            language: 'language',
            processCode: 'processCode',
            processData: 'processData',
            systemToken: 'systemToken',
            useAlias: 'useAlias',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            departmentId: 'string',
            formDataJson: 'string',
            formUuid: 'string',
            language: 'string',
            processCode: 'string',
            processData: 'string',
            systemToken: 'string',
            useAlias: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartInstanceRequest = StartInstanceRequest;
class StartInstanceResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartInstanceResponseBody = StartInstanceResponseBody;
class StartInstanceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StartInstanceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartInstanceResponse = StartInstanceResponse;
class UpdateFormDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFormDataHeaders = UpdateFormDataHeaders;
class UpdateFormDataRequest extends $tea.Model {
    static names() {
        return {
            appType: 'appType',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            language: 'language',
            systemToken: 'systemToken',
            updateFormDataJson: 'updateFormDataJson',
            useAlias: 'useAlias',
            useLatestVersion: 'useLatestVersion',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formInstanceId: 'string',
            formUuid: 'string',
            language: 'string',
            systemToken: 'string',
            updateFormDataJson: 'string',
            useAlias: 'boolean',
            useLatestVersion: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFormDataRequest = UpdateFormDataRequest;
class UpdateFormDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFormDataResponse = UpdateFormDataResponse;
class GetFormComponentAliasListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            alias: 'alias',
            fieldId: 'fieldId',
        };
    }
    static types() {
        return {
            alias: 'string',
            fieldId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormComponentAliasListResponseBodyResult = GetFormComponentAliasListResponseBodyResult;
class GetFormDataByIDResponseBodyOriginatorName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormDataByIDResponseBodyOriginatorName = GetFormDataByIDResponseBodyOriginatorName;
class GetFormDataByIDResponseBodyOriginator extends $tea.Model {
    static names() {
        return {
            departmentName: 'departmentName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            email: 'string',
            name: GetFormDataByIDResponseBodyOriginatorName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFormDataByIDResponseBodyOriginator = GetFormDataByIDResponseBodyOriginator;
class GetInstanceByIdResponseBodyActionExecutorName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdResponseBodyActionExecutorName = GetInstanceByIdResponseBodyActionExecutorName;
class GetInstanceByIdResponseBodyActionExecutor extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstanceByIdResponseBodyActionExecutorName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdResponseBodyActionExecutor = GetInstanceByIdResponseBodyActionExecutor;
class GetInstanceByIdResponseBodyOriginatorName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdResponseBodyOriginatorName = GetInstanceByIdResponseBodyOriginatorName;
class GetInstanceByIdResponseBodyOriginator extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstanceByIdResponseBodyOriginatorName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstanceByIdResponseBodyOriginator = GetInstanceByIdResponseBodyOriginator;
class GetInstancesResponseBodyDataActionExecutorName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponseBodyDataActionExecutorName = GetInstancesResponseBodyDataActionExecutorName;
class GetInstancesResponseBodyDataActionExecutor extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstancesResponseBodyDataActionExecutorName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponseBodyDataActionExecutor = GetInstancesResponseBodyDataActionExecutor;
class GetInstancesResponseBodyDataOriginatorName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponseBodyDataOriginatorName = GetInstancesResponseBodyDataOriginatorName;
class GetInstancesResponseBodyDataOriginator extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstancesResponseBodyDataOriginatorName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponseBodyDataOriginator = GetInstancesResponseBodyDataOriginator;
class GetInstancesResponseBodyData extends $tea.Model {
    static names() {
        return {
            actionExecutor: 'actionExecutor',
            approvedResult: 'approvedResult',
            createTimeGMT: 'createTimeGMT',
            data: 'data',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originator: 'originator',
            processCode: 'processCode',
            processInstanceId: 'processInstanceId',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            actionExecutor: { 'type': 'array', 'itemType': GetInstancesResponseBodyDataActionExecutor },
            approvedResult: 'string',
            createTimeGMT: 'string',
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formUuid: 'string',
            instanceStatus: 'string',
            modifiedTimeGMT: 'string',
            originator: GetInstancesResponseBodyDataOriginator,
            processCode: 'string',
            processInstanceId: 'string',
            title: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInstancesResponseBodyData = GetInstancesResponseBodyData;
class SearchFormDataSecondGenerationResponseBodyDataModifyUserName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataModifyUserName = SearchFormDataSecondGenerationResponseBodyDataModifyUserName;
class SearchFormDataSecondGenerationResponseBodyDataModifyUser extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: SearchFormDataSecondGenerationResponseBodyDataModifyUserName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataModifyUser = SearchFormDataSecondGenerationResponseBodyDataModifyUser;
class SearchFormDataSecondGenerationResponseBodyDataOriginatorName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataOriginatorName = SearchFormDataSecondGenerationResponseBodyDataOriginatorName;
class SearchFormDataSecondGenerationResponseBodyDataOriginator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: SearchFormDataSecondGenerationResponseBodyDataOriginatorName,
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataOriginator = SearchFormDataSecondGenerationResponseBodyDataOriginator;
class SearchFormDataSecondGenerationResponseBodyData extends $tea.Model {
    static names() {
        return {
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            id: 'id',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNumber: 'serialNumber',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createTimeGMT: 'string',
            creatorUserId: 'string',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            id: 'number',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            modifyUser: SearchFormDataSecondGenerationResponseBodyDataModifyUser,
            originator: SearchFormDataSecondGenerationResponseBodyDataOriginator,
            sequence: 'string',
            serialNumber: 'string',
            title: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDataSecondGenerationResponseBodyData = SearchFormDataSecondGenerationResponseBodyData;
class SearchFormDatasResponseBodyDataModifyUserUserName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponseBodyDataModifyUserUserName = SearchFormDatasResponseBodyDataModifyUserUserName;
class SearchFormDatasResponseBodyDataModifyUser extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            userId: 'string',
            userName: SearchFormDatasResponseBodyDataModifyUserUserName,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponseBodyDataModifyUser = SearchFormDatasResponseBodyDataModifyUser;
class SearchFormDatasResponseBodyDataOriginatorUserName extends $tea.Model {
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponseBodyDataOriginatorUserName = SearchFormDatasResponseBodyDataOriginatorUserName;
class SearchFormDatasResponseBodyDataOriginator extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            userId: 'string',
            userName: SearchFormDatasResponseBodyDataOriginatorUserName,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponseBodyDataOriginator = SearchFormDatasResponseBodyDataOriginator;
class SearchFormDatasResponseBodyData extends $tea.Model {
    static names() {
        return {
            createdTimeGMT: 'createdTimeGMT',
            creatorUserId: 'creatorUserId',
            dataId: 'dataId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            instanceValue: 'instanceValue',
            modelUuid: 'modelUuid',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifierUserId: 'modifierUserId',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNo: 'serialNo',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createdTimeGMT: 'string',
            creatorUserId: 'string',
            dataId: 'number',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            instanceValue: 'string',
            modelUuid: 'string',
            modifiedTimeGMT: 'string',
            modifierUserId: 'string',
            modifyUser: SearchFormDatasResponseBodyDataModifyUser,
            originator: SearchFormDatasResponseBodyDataOriginator,
            sequence: 'string',
            serialNo: 'string',
            title: 'string',
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchFormDatasResponseBodyData = SearchFormDatasResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 新增或更新表单实例
     *
     * @param request - CreateOrUpdateFormDataRequest
     * @param headers - CreateOrUpdateFormDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateOrUpdateFormDataResponse
     */
    async createOrUpdateFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpression)) {
            body["noExecuteExpression"] = request.noExecuteExpression;
        }
        if (!tea_util_1.default.isUnset(request.searchCondition)) {
            body["searchCondition"] = request.searchCondition;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateFormData",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances/insertOrUpdate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateOrUpdateFormDataResponse({}));
    }
    /**
     * 新增或更新表单实例
     *
     * @param request - CreateOrUpdateFormDataRequest
     * @returns CreateOrUpdateFormDataResponse
     */
    async createOrUpdateFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrUpdateFormDataHeaders({});
        return await this.createOrUpdateFormDataWithOptions(request, headers, runtime);
    }
    /**
     * 获取表单组件别名列表
     *
     * @param request - GetFormComponentAliasListRequest
     * @param headers - GetFormComponentAliasListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFormComponentAliasListResponse
     */
    async getFormComponentAliasListWithOptions(appType, formUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFormComponentAliasList",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/component/alias/${appType}/${formUuid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFormComponentAliasListResponse({}));
    }
    /**
     * 获取表单组件别名列表
     *
     * @param request - GetFormComponentAliasListRequest
     * @returns GetFormComponentAliasListResponse
     */
    async getFormComponentAliasList(appType, formUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFormComponentAliasListHeaders({});
        return await this.getFormComponentAliasListWithOptions(appType, formUuid, request, headers, runtime);
    }
    /**
     * 根据表单 ID 查询实例详情
     *
     * @param request - GetFormDataByIDRequest
     * @param headers - GetFormDataByIDHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFormDataByIDResponse
     */
    async getFormDataByIDWithOptions(id, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            query["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            query["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFormDataByID",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances/${id}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFormDataByIDResponse({}));
    }
    /**
     * 根据表单 ID 查询实例详情
     *
     * @param request - GetFormDataByIDRequest
     * @returns GetFormDataByIDResponse
     */
    async getFormDataByID(id, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFormDataByIDHeaders({});
        return await this.getFormDataByIDWithOptions(id, request, headers, runtime);
    }
    /**
     * 根据实例 ID 获取流程实例详情
     *
     * @param request - GetInstanceByIdRequest
     * @param headers - GetInstanceByIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInstanceByIdResponse
     */
    async getInstanceByIdWithOptions(id, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            query["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            query["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetInstanceById",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/processes/instancesInfos/${id}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstanceByIdResponse({}));
    }
    /**
     * 根据实例 ID 获取流程实例详情
     *
     * @param request - GetInstanceByIdRequest
     * @returns GetInstanceByIdResponse
     */
    async getInstanceById(id, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstanceByIdHeaders({});
        return await this.getInstanceByIdWithOptions(id, request, headers, runtime);
    }
    /**
     * 根据条件搜索流程实例 ID
     *
     * @param request - GetInstanceIdListRequest
     * @param headers - GetInstanceIdListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInstanceIdListResponse
     */
    async getInstanceIdListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.approvedResult)) {
            body["approvedResult"] = request.approvedResult;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.instanceStatus)) {
            body["instanceStatus"] = request.instanceStatus;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInstanceIdList",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/processes/instanceIds`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstanceIdListResponse({}));
    }
    /**
     * 根据条件搜索流程实例 ID
     *
     * @param request - GetInstanceIdListRequest
     * @returns GetInstanceIdListResponse
     */
    async getInstanceIdList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstanceIdListHeaders({});
        return await this.getInstanceIdListWithOptions(request, headers, runtime);
    }
    /**
     * 根据搜索条件获取流程表单实例详情
     *
     * @param request - GetInstancesRequest
     * @param headers - GetInstancesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInstancesResponse
     */
    async getInstancesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.approvedResult)) {
            body["approvedResult"] = request.approvedResult;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.instanceStatus)) {
            body["instanceStatus"] = request.instanceStatus;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.orderConfigJson)) {
            body["orderConfigJson"] = request.orderConfigJson;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInstances",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/processes/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstancesResponse({}));
    }
    /**
     * 根据搜索条件获取流程表单实例详情
     *
     * @param request - GetInstancesRequest
     * @returns GetInstancesResponse
     */
    async getInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstancesHeaders({});
        return await this.getInstancesWithOptions(request, headers, runtime);
    }
    /**
     * 新增表单实例
     *
     * @param request - SaveFormDataRequest
     * @param headers - SaveFormDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveFormDataResponse
     */
    async saveFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveFormData",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveFormDataResponse({}));
    }
    /**
     * 新增表单实例
     *
     * @param request - SaveFormDataRequest
     * @returns SaveFormDataResponse
     */
    async saveFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveFormDataHeaders({});
        return await this.saveFormDataWithOptions(request, headers, runtime);
    }
    /**
     * 根据条件搜索表单实例 ID 列表
     *
     * @param request - SearchFormDataIdListRequest
     * @param headers - SearchFormDataIdListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchFormDataIdListResponse
     */
    async searchFormDataIdListWithOptions(appType, formUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDataIdList",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances/ids/${appType}/${formUuid}`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDataIdListResponse({}));
    }
    /**
     * 根据条件搜索表单实例 ID 列表
     *
     * @param request - SearchFormDataIdListRequest
     * @returns SearchFormDataIdListResponse
     */
    async searchFormDataIdList(appType, formUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDataIdListHeaders({});
        return await this.searchFormDataIdListWithOptions(appType, formUuid, request, headers, runtime);
    }
    /**
     * 通过高级检索条件查询表单实例
     *
     * @param request - SearchFormDataSecondGenerationRequest
     * @param headers - SearchFormDataSecondGenerationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchFormDataSecondGenerationResponse
     */
    async searchFormDataSecondGenerationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.orderConfigJson)) {
            body["orderConfigJson"] = request.orderConfigJson;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchCondition)) {
            body["searchCondition"] = request.searchCondition;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDataSecondGeneration",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances/advances/queryAll`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDataSecondGenerationResponse({}));
    }
    /**
     * 通过高级检索条件查询表单实例
     *
     * @param request - SearchFormDataSecondGenerationRequest
     * @returns SearchFormDataSecondGenerationResponse
     */
    async searchFormDataSecondGeneration(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDataSecondGenerationHeaders({});
        return await this.searchFormDataSecondGenerationWithOptions(request, headers, runtime);
    }
    /**
     * 根据条件搜索表单实例详情列表
     *
     * @param request - SearchFormDatasRequest
     * @param headers - SearchFormDatasHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchFormDatasResponse
     */
    async searchFormDatasWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            body["currentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.dynamicOrder)) {
            body["dynamicOrder"] = request.dynamicOrder;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDatas",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDatasResponse({}));
    }
    /**
     * 根据条件搜索表单实例详情列表
     *
     * @param request - SearchFormDatasRequest
     * @returns SearchFormDatasResponse
     */
    async searchFormDatas(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDatasHeaders({});
        return await this.searchFormDatasWithOptions(request, headers, runtime);
    }
    /**
     * 发起新的流程实例
     *
     * @param request - StartInstanceRequest
     * @param headers - StartInstanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StartInstanceResponse
     */
    async startInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            body["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            body["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset(request.processData)) {
            body["processData"] = request.processData;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StartInstance",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/processes/instances/start`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StartInstanceResponse({}));
    }
    /**
     * 发起新的流程实例
     *
     * @param request - StartInstanceRequest
     * @returns StartInstanceResponse
     */
    async startInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartInstanceHeaders({});
        return await this.startInstanceWithOptions(request, headers, runtime);
    }
    /**
     * 更新表单实例
     *
     * @param request - UpdateFormDataRequest
     * @param headers - UpdateFormDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateFormDataResponse
     */
    async updateFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceId)) {
            body["formInstanceId"] = request.formInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.updateFormDataJson)) {
            body["updateFormDataJson"] = request.updateFormDataJson;
        }
        if (!tea_util_1.default.isUnset(request.useAlias)) {
            body["useAlias"] = request.useAlias;
        }
        if (!tea_util_1.default.isUnset(request.useLatestVersion)) {
            body["useLatestVersion"] = request.useLatestVersion;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateFormData",
            version: "yida_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/yida/forms/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateFormDataResponse({}));
    }
    /**
     * 更新表单实例
     *
     * @param request - UpdateFormDataRequest
     * @returns UpdateFormDataResponse
     */
    async updateFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateFormDataHeaders({});
        return await this.updateFormDataWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map