/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddLiveInteractionPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveInteractionPluginRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    anchorJumpUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginIconUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginName?: string;
    pluginNameEn?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    viewerJumpUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveInteractionPluginResponseBody extends $tea.Model {
    result?: AddLiveInteractionPluginResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveInteractionPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddLiveInteractionPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveNoticeWidgetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveNoticeWidgetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    iconUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    jumpUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    noticeText?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveNoticeWidgetResponseBody extends $tea.Model {
    result?: AddLiveNoticeWidgetResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveNoticeWidgetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddLiveNoticeWidgetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    groupIdType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    groupIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 214675
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasShareSuccess?: boolean;
    shareSuccessGroupList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddShareCidListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedRequest extends $tea.Model {
    /**
     * @example
     * https://img.alicdn.com/tfs/TB1A7cBtYr1gK0jSZR0XXbP8XXa-750-422.png
     */
    coverUrl?: string;
    /**
     * @example
     * 这是一场云导播课程
     */
    intro?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1615260061000
     */
    startTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 课程一
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 214675
     */
    userId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * http/https:/xxx.mp4
     */
    videoUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedResponseBody extends $tea.Model {
    /**
     * @example
     * 创建好的云导播课程id
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCloudFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveRequest extends $tea.Model {
    /**
     * @example
     * https://gw.alicdn.com/tfs/TB1thlYyAT2gK0jSZPcXXcKkpXa-1125-633.png
     */
    coverUrl?: string;
    /**
     * @example
     * 测试直播简介
     */
    introduction?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1659653648000
     */
    preEndTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1659613648000
     */
    preStartTime?: number;
    /**
     * @example
     * 2
     */
    publicType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试直播
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveResponseBody extends $tea.Model {
    result?: CreateLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveInteractionPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveInteractionPluginRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveInteractionPluginResponseBody extends $tea.Model {
    result?: DelLiveInteractionPluginResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveInteractionPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DelLiveInteractionPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveNoticeWidgetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveNoticeWidgetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveNoticeWidgetResponseBody extends $tea.Model {
    result?: DelLiveNoticeWidgetResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveNoticeWidgetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DelLiveNoticeWidgetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 4d383876-1ff9-4b73-a057-a8f47b346ecb
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveResponseBody extends $tea.Model {
    result?: DeleteLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1206186351746728
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasDelete?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteLiveFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1617356058000
     */
    editEndTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1617336058000
     */
    editStartTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1206186351746728
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EditFeedReplayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListRequest extends $tea.Model {
    requestBody?: GetGroupLiveListRequestRequestBody;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListShrinkRequest extends $tea.Model {
    requestBodyShrink?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListResponseBody extends $tea.Model {
    result?: GetGroupLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGroupLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 4d383876-1ff9-4b73-a057-a8f47b346ecb
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlResponseBody extends $tea.Model {
    result?: GetLiveReplayUrlResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetLiveReplayUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    requestBody?: GetOrgLiveListRequestRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    requestBodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponseBody extends $tea.Model {
    result?: GetOrgLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOrgLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListRequest extends $tea.Model {
    endTime?: number;
    startTime?: number;
    statuses?: number[];
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 30
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 6crtQT2XOgPHviiPvXhhiP6gdhiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBody extends $tea.Model {
    result?: GetUserAllLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserAllLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListRequest extends $tea.Model {
    endTime?: number;
    startTime?: number;
    statuses?: number[];
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * ""
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 5yAiiJDWiiCJpd3Thhx7P5fgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBody extends $tea.Model {
    result?: GetUserCreateLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserCreateLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    filterType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * preOrStartTime_desc_1658804913000
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 6crtQT2XOgPHviiPvXhhiP6gdhiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBody extends $tea.Model {
    result?: GetUserWatchLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserWatchLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    action?: number;
    modifyUserList?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1206186351746728
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    action?: number;
    modifyUserListShrink?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1206186351746728
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyFeedWhiteListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1206186351746728
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryFeedWhiteListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 4d383876-1ff9-4b73-a057-a8f47b346ecb
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponseBody extends $tea.Model {
    result?: QueryLiveInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInteractionPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInteractionPluginRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInteractionPluginResponseBody extends $tea.Model {
    result?: QueryLiveInteractionPluginResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInteractionPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveInteractionPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1a353547-040d-4095-bb93-404bc5d47920
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailResponseBody extends $tea.Model {
    result?: QueryLiveWatchDetailResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveWatchDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1a353547-040d-4095-bb93-404bc5d47920
     */
    liveId?: string;
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBody extends $tea.Model {
    result?: QueryLiveWatchUserListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveWatchUserListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusRequest extends $tea.Model {
    body?: QuerySubscribeStatusRequestBody;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusShrinkRequest extends $tea.Model {
    bodyShrink?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponseBody extends $tea.Model {
    result?: QuerySubscribeStatusResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySubscribeStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveInteractionPluginEffectsMsgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveInteractionPluginEffectsMsgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    count?: number;
    lottieFileUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgIconUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgText?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginSubId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    senderUnionId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveInteractionPluginEffectsMsgResponseBody extends $tea.Model {
    result?: SendLiveInteractionPluginEffectsMsgResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveInteractionPluginEffectsMsgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendLiveInteractionPluginEffectsMsgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLivePluginUserActionMsgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLivePluginUserActionMsgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginEffectsMessage?: SendLivePluginUserActionMsgRequestPluginEffectsMessage;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLivePluginUserActionMsgShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginEffectsMessageShrink?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLivePluginUserActionMsgResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLivePluginUserActionMsgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendLivePluginUserActionMsgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 214675
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StartCloudFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 214675
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StopCloudFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3dd295eb-17a1-4dfg-ae1b-aa165c5007eb
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    subscribe?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 6crtQT2XOgPHviiPvXhhiP6gdhiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveResponseBody extends $tea.Model {
    result?: SubscribeLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubscribeLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveRequest extends $tea.Model {
    /**
     * @example
     * https://gw.alicdn.com/tfs/TB1thlYyAT2gK0jSZPcXXcKkpXa-1125-633.png
     */
    coverUrl?: string;
    /**
     * @example
     * 测试直播简介
     */
    introduction?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 4d383876-1ff9-4b73-a057-a8f47b346ecb
     */
    liveId?: string;
    /**
     * @example
     * 1659653648000
     */
    preEndTime?: number;
    /**
     * @example
     * 1659613648000
     */
    preStartTime?: number;
    /**
     * @example
     * 测试直播
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveResponseBody extends $tea.Model {
    result?: UpdateLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedRequest extends $tea.Model {
    /**
     * @example
     * http:xxx.png
     */
    coverUrl?: string;
    /**
     * @example
     * 简介
     */
    introduction?: string;
    /**
     * @example
     * 1617436058000
     */
    startTime?: number;
    /**
     * @example
     * 标题
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1206186351746728
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasUpdate?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateLiveFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveInteractionPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveInteractionPluginRequest extends $tea.Model {
    anchorJumpUrl?: string;
    pluginIconUrl?: string;
    pluginName?: string;
    pluginNameEn?: string;
    viewerJumpUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    liveId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveInteractionPluginResponseBody extends $tea.Model {
    result?: UpdateLiveInteractionPluginResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveInteractionPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateLiveInteractionPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveInteractionPluginResponseBodyResult extends $tea.Model {
    pluginId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLiveNoticeWidgetResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 1a353547-040d-4095-bb93-404bc5d47920
     */
    liveId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveInteractionPluginResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelLiveNoticeWidgetResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListRequestRequestBody extends $tea.Model {
    endTime?: number;
    openConversationId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListResponseBodyResultGroupLiveList extends $tea.Model {
    anchorNickname?: string;
    anchorUnionId?: string;
    liveEndTime?: number;
    liveStartTime?: number;
    liveUuid?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupLiveListResponseBodyResult extends $tea.Model {
    groupLiveList?: GetGroupLiveListResponseBodyResultGroupLiveList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlResponseBodyResult extends $tea.Model {
    /**
     * @example
     * http://xxx.dingtalk.com/live_hp/7c7ba32a-c92d-4524-b71e-33a72575c5a9_normal.m3u8?auth_key=xxx
     */
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListRequestRequestBody extends $tea.Model {
    endTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    startTime?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponseBodyResultNewLiveLiveList extends $tea.Model {
    anchorNickname?: string;
    anchorUnionId?: string;
    liveEndTime?: number;
    liveStartTime?: number;
    liveUuid?: string;
    shareOpenConversationIds?: string[];
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponseBodyResultNewLive extends $tea.Model {
    hasMore?: boolean;
    liveList?: GetOrgLiveListResponseBodyResultNewLiveLiveList[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponseBodyResultUpdateLiveLiveList extends $tea.Model {
    anchorNickname?: string;
    anchorUnionId?: string;
    liveEndTime?: number;
    liveStartTime?: number;
    liveUuid?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponseBodyResultUpdateLive extends $tea.Model {
    hasMore?: boolean;
    liveList?: GetOrgLiveListResponseBodyResultUpdateLiveLiveList[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgLiveListResponseBodyResult extends $tea.Model {
    newLive?: GetOrgLiveListResponseBodyResultNewLive;
    updateLive?: GetOrgLiveListResponseBodyResultUpdateLive;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo extends $tea.Model {
    hasSubscribed?: boolean;
    isForecastExpired?: boolean;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    extraInfo?: GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo;
    liveBasicInfo?: GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResult extends $tea.Model {
    hasFinish?: boolean;
    liveInfoPopModelList?: GetUserAllLiveListResponseBodyResultLiveInfoPopModelList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed extends $tea.Model {
    hasSubscribed?: boolean;
    isForecastExpired?: boolean;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    hasSubscribed?: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed;
    liveBasicInfo?: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResult extends $tea.Model {
    hasFinish?: boolean;
    liveInfoPopModelList?: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList[];
    nextToken?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo extends $tea.Model {
    hasSubscribed?: boolean;
    isForecastExpired?: boolean;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    extraInfo?: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo;
    liveBasicInfo?: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResult extends $tea.Model {
    hasFinish?: boolean;
    liveInfoPopModelList?: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList[];
    nextToken?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponseBodyResultLiveInfo extends $tea.Model {
    /**
     * @example
     * https://gw.alicdn.com/tfs/TB1thlYyAT2gK0jSZPcXXcKkpXa-1125-633.png
     */
    coverUrl?: string;
    /**
     * @example
     * 18450
     */
    duration?: number;
    /**
     * @example
     * 1659653648000
     */
    endTime?: number;
    /**
     * @example
     * 测试直播简介
     */
    introduction?: string;
    /**
     * @example
     * 1a353547-040d-4095-bb93-404bc5d47920
     */
    liveId?: string;
    /**
     * @example
     * https://h5.dingtalk.com/group-live-share/index.htm?type=2&liveFromType=6&liveUuid=1a353547-040d-4095-bb93-404bc5d47920&dd_nav_bgcolor=FF2C2D2F#/union
     */
    livePlayUrl?: string;
    /**
     * @example
     * 3
     */
    liveStatus?: number;
    /**
     * @example
     * 18430
     */
    playbackDuration?: number;
    /**
     * @example
     * 1659613648000
     */
    startTime?: number;
    /**
     * @example
     * 2
     */
    subscribeCount?: number;
    /**
     * @example
     * 测试直播
     */
    title?: string;
    /**
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    /**
     * @example
     * 3
     */
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponseBodyResult extends $tea.Model {
    liveInfo?: QueryLiveInfoResponseBodyResultLiveInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInteractionPluginResponseBodyResultLivePluginList extends $tea.Model {
    anchorJumpUrl?: string;
    pluginIconUrl?: string;
    pluginId?: string;
    pluginName?: string;
    pluginNameEn?: string;
    viewerJumpUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInteractionPluginResponseBodyResult extends $tea.Model {
    livePluginList?: QueryLiveInteractionPluginResponseBodyResultLivePluginList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 3560
     */
    avgWatchTime?: number;
    /**
     * @example
     * 55
     */
    liveUv?: number;
    /**
     * @example
     * 252
     */
    msgCount?: number;
    /**
     * @example
     * 72
     */
    playbackUv?: number;
    /**
     * @example
     * 500
     */
    praiseCount?: number;
    /**
     * @example
     * 120
     */
    pv?: number;
    /**
     * @example
     * 1903640
     */
    totalWatchTime?: number;
    /**
     * @example
     * 90
     */
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBodyResultOrgUsesList extends $tea.Model {
    /**
     * @example
     * xxx.设计部
     */
    deptName?: string;
    /**
     * @example
     * 李四
     */
    name?: string;
    /**
     * @example
     * DC7wZGOSueEEIGOf3WKwWgiEiE
     */
    unionId?: string;
    /**
     * @example
     * 214675
     */
    userId?: string;
    /**
     * @example
     * 189930
     */
    watchLiveTime?: number;
    /**
     * @example
     * 23667
     */
    watchPlaybackTime?: number;
    /**
     * @example
     * 2330
     */
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBodyResultOutOrgUserList extends $tea.Model {
    /**
     * @example
     * 张三
     */
    name?: string;
    /**
     * @example
     * 23440
     */
    watchLiveTime?: number;
    /**
     * @example
     * 2330
     */
    watchPlaybackTime?: number;
    /**
     * @example
     * 150
     */
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBodyResult extends $tea.Model {
    orgUsesList?: QueryLiveWatchUserListResponseBodyResultOrgUsesList[];
    outOrgUserList?: QueryLiveWatchUserListResponseBodyResultOutOrgUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusRequestBody extends $tea.Model {
    liveIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS extends $tea.Model {
    liveId?: string;
    subscribe?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponseBodyResult extends $tea.Model {
    subscribeStatusDTOS?: QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveInteractionPluginEffectsMsgResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLivePluginUserActionMsgRequestPluginEffectsMessage extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    count?: number;
    lottieFileUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgIconUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgText?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pluginSubId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    senderUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveInteractionPluginResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 增加直播间互动插件
     *
     * @param request - AddLiveInteractionPluginRequest
     * @param headers - AddLiveInteractionPluginHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddLiveInteractionPluginResponse
     */
    addLiveInteractionPluginWithOptions(request: AddLiveInteractionPluginRequest, headers: AddLiveInteractionPluginHeaders, runtime: $Util.RuntimeOptions): Promise<AddLiveInteractionPluginResponse>;
    /**
     * 增加直播间互动插件
     *
     * @param request - AddLiveInteractionPluginRequest
     * @returns AddLiveInteractionPluginResponse
     */
    addLiveInteractionPlugin(request: AddLiveInteractionPluginRequest): Promise<AddLiveInteractionPluginResponse>;
    /**
     * 增加直播间的公告槽位信息
     *
     * @param request - AddLiveNoticeWidgetRequest
     * @param headers - AddLiveNoticeWidgetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddLiveNoticeWidgetResponse
     */
    addLiveNoticeWidgetWithOptions(request: AddLiveNoticeWidgetRequest, headers: AddLiveNoticeWidgetHeaders, runtime: $Util.RuntimeOptions): Promise<AddLiveNoticeWidgetResponse>;
    /**
     * 增加直播间的公告槽位信息
     *
     * @param request - AddLiveNoticeWidgetRequest
     * @returns AddLiveNoticeWidgetResponse
     */
    addLiveNoticeWidget(request: AddLiveNoticeWidgetRequest): Promise<AddLiveNoticeWidgetResponse>;
    /**
     * 添加云导播联播群列表
     *
     * @param request - AddShareCidListRequest
     * @param headers - AddShareCidListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddShareCidListResponse
     */
    addShareCidListWithOptions(feedId: string, request: AddShareCidListRequest, headers: AddShareCidListHeaders, runtime: $Util.RuntimeOptions): Promise<AddShareCidListResponse>;
    /**
     * 添加云导播联播群列表
     *
     * @param request - AddShareCidListRequest
     * @returns AddShareCidListResponse
     */
    addShareCidList(feedId: string, request: AddShareCidListRequest): Promise<AddShareCidListResponse>;
    /**
     * 创建云导播课程
     *
     * @param request - CreateCloudFeedRequest
     * @param headers - CreateCloudFeedHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCloudFeedResponse
     */
    createCloudFeedWithOptions(request: CreateCloudFeedRequest, headers: CreateCloudFeedHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCloudFeedResponse>;
    /**
     * 创建云导播课程
     *
     * @param request - CreateCloudFeedRequest
     * @returns CreateCloudFeedResponse
     */
    createCloudFeed(request: CreateCloudFeedRequest): Promise<CreateCloudFeedResponse>;
    /**
     * 创建直播
     *
     * @param request - CreateLiveRequest
     * @param headers - CreateLiveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateLiveResponse
     */
    createLiveWithOptions(request: CreateLiveRequest, headers: CreateLiveHeaders, runtime: $Util.RuntimeOptions): Promise<CreateLiveResponse>;
    /**
     * 创建直播
     *
     * @param request - CreateLiveRequest
     * @returns CreateLiveResponse
     */
    createLive(request: CreateLiveRequest): Promise<CreateLiveResponse>;
    /**
     * 删除直播间内某一互动插件
     *
     * @param request - DelLiveInteractionPluginRequest
     * @param headers - DelLiveInteractionPluginHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DelLiveInteractionPluginResponse
     */
    delLiveInteractionPluginWithOptions(request: DelLiveInteractionPluginRequest, headers: DelLiveInteractionPluginHeaders, runtime: $Util.RuntimeOptions): Promise<DelLiveInteractionPluginResponse>;
    /**
     * 删除直播间内某一互动插件
     *
     * @param request - DelLiveInteractionPluginRequest
     * @returns DelLiveInteractionPluginResponse
     */
    delLiveInteractionPlugin(request: DelLiveInteractionPluginRequest): Promise<DelLiveInteractionPluginResponse>;
    /**
     * 删除直播间的公告槽位信息
     *
     * @param request - DelLiveNoticeWidgetRequest
     * @param headers - DelLiveNoticeWidgetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DelLiveNoticeWidgetResponse
     */
    delLiveNoticeWidgetWithOptions(request: DelLiveNoticeWidgetRequest, headers: DelLiveNoticeWidgetHeaders, runtime: $Util.RuntimeOptions): Promise<DelLiveNoticeWidgetResponse>;
    /**
     * 删除直播间的公告槽位信息
     *
     * @param request - DelLiveNoticeWidgetRequest
     * @returns DelLiveNoticeWidgetResponse
     */
    delLiveNoticeWidget(request: DelLiveNoticeWidgetRequest): Promise<DelLiveNoticeWidgetResponse>;
    /**
     * 删除直播
     *
     * @param request - DeleteLiveRequest
     * @param headers - DeleteLiveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteLiveResponse
     */
    deleteLiveWithOptions(request: DeleteLiveRequest, headers: DeleteLiveHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteLiveResponse>;
    /**
     * 删除直播
     *
     * @param request - DeleteLiveRequest
     * @returns DeleteLiveResponse
     */
    deleteLive(request: DeleteLiveRequest): Promise<DeleteLiveResponse>;
    /**
     * 删除直播培训课程
     *
     * @param request - DeleteLiveFeedRequest
     * @param headers - DeleteLiveFeedHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteLiveFeedResponse
     */
    deleteLiveFeedWithOptions(feedId: string, request: DeleteLiveFeedRequest, headers: DeleteLiveFeedHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteLiveFeedResponse>;
    /**
     * 删除直播培训课程
     *
     * @param request - DeleteLiveFeedRequest
     * @returns DeleteLiveFeedResponse
     */
    deleteLiveFeed(feedId: string, request: DeleteLiveFeedRequest): Promise<DeleteLiveFeedResponse>;
    /**
     * 剪辑直播课程的回放
     *
     * @param request - EditFeedReplayRequest
     * @param headers - EditFeedReplayHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EditFeedReplayResponse
     */
    editFeedReplayWithOptions(feedId: string, request: EditFeedReplayRequest, headers: EditFeedReplayHeaders, runtime: $Util.RuntimeOptions): Promise<EditFeedReplayResponse>;
    /**
     * 剪辑直播课程的回放
     *
     * @param request - EditFeedReplayRequest
     * @returns EditFeedReplayResponse
     */
    editFeedReplay(feedId: string, request: EditFeedReplayRequest): Promise<EditFeedReplayResponse>;
    /**
     * 获取群内的直播列表
     *
     * @param tmpReq - GetGroupLiveListRequest
     * @param headers - GetGroupLiveListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupLiveListResponse
     */
    getGroupLiveListWithOptions(tmpReq: GetGroupLiveListRequest, headers: GetGroupLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetGroupLiveListResponse>;
    /**
     * 获取群内的直播列表
     *
     * @param request - GetGroupLiveListRequest
     * @returns GetGroupLiveListResponse
     */
    getGroupLiveList(request: GetGroupLiveListRequest): Promise<GetGroupLiveListResponse>;
    /**
     * 获取直播的可下载回放地址
     *
     * @param request - GetLiveReplayUrlRequest
     * @param headers - GetLiveReplayUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetLiveReplayUrlResponse
     */
    getLiveReplayUrlWithOptions(request: GetLiveReplayUrlRequest, headers: GetLiveReplayUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetLiveReplayUrlResponse>;
    /**
     * 获取直播的可下载回放地址
     *
     * @param request - GetLiveReplayUrlRequest
     * @returns GetLiveReplayUrlResponse
     */
    getLiveReplayUrl(request: GetLiveReplayUrlRequest): Promise<GetLiveReplayUrlResponse>;
    /**
     * 获取某组织内的直播列表
     *
     * @param tmpReq - GetOrgLiveListRequest
     * @param headers - GetOrgLiveListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrgLiveListResponse
     */
    getOrgLiveListWithOptions(tmpReq: GetOrgLiveListRequest, headers: GetOrgLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetOrgLiveListResponse>;
    /**
     * 获取某组织内的直播列表
     *
     * @param request - GetOrgLiveListRequest
     * @returns GetOrgLiveListResponse
     */
    getOrgLiveList(request: GetOrgLiveListRequest): Promise<GetOrgLiveListResponse>;
    /**
     * 根据状态拉我相关的直播
     *
     * @param request - GetUserAllLiveListRequest
     * @param headers - GetUserAllLiveListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserAllLiveListResponse
     */
    getUserAllLiveListWithOptions(request: GetUserAllLiveListRequest, headers: GetUserAllLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserAllLiveListResponse>;
    /**
     * 根据状态拉我相关的直播
     *
     * @param request - GetUserAllLiveListRequest
     * @returns GetUserAllLiveListResponse
     */
    getUserAllLiveList(request: GetUserAllLiveListRequest): Promise<GetUserAllLiveListResponse>;
    /**
     * 根据状态获取用户创建的直播
     *
     * @param request - GetUserCreateLiveListRequest
     * @param headers - GetUserCreateLiveListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserCreateLiveListResponse
     */
    getUserCreateLiveListWithOptions(request: GetUserCreateLiveListRequest, headers: GetUserCreateLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserCreateLiveListResponse>;
    /**
     * 根据状态获取用户创建的直播
     *
     * @param request - GetUserCreateLiveListRequest
     * @returns GetUserCreateLiveListResponse
     */
    getUserCreateLiveList(request: GetUserCreateLiveListRequest): Promise<GetUserCreateLiveListResponse>;
    /**
     * 获取用户观看直播记录
     *
     * @param request - GetUserWatchLiveListRequest
     * @param headers - GetUserWatchLiveListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserWatchLiveListResponse
     */
    getUserWatchLiveListWithOptions(request: GetUserWatchLiveListRequest, headers: GetUserWatchLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserWatchLiveListResponse>;
    /**
     * 获取用户观看直播记录
     *
     * @param request - GetUserWatchLiveListRequest
     * @returns GetUserWatchLiveListResponse
     */
    getUserWatchLiveList(request: GetUserWatchLiveListRequest): Promise<GetUserWatchLiveListResponse>;
    /**
     * 修改直播课程可见白名单
     *
     * @param tmpReq - ModifyFeedWhiteListRequest
     * @param headers - ModifyFeedWhiteListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ModifyFeedWhiteListResponse
     */
    modifyFeedWhiteListWithOptions(feedId: string, tmpReq: ModifyFeedWhiteListRequest, headers: ModifyFeedWhiteListHeaders, runtime: $Util.RuntimeOptions): Promise<ModifyFeedWhiteListResponse>;
    /**
     * 修改直播课程可见白名单
     *
     * @param request - ModifyFeedWhiteListRequest
     * @returns ModifyFeedWhiteListResponse
     */
    modifyFeedWhiteList(feedId: string, request: ModifyFeedWhiteListRequest): Promise<ModifyFeedWhiteListResponse>;
    /**
     * 查询直播课程的观看白名单
     *
     * @param request - QueryFeedWhiteListRequest
     * @param headers - QueryFeedWhiteListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryFeedWhiteListResponse
     */
    queryFeedWhiteListWithOptions(feedId: string, request: QueryFeedWhiteListRequest, headers: QueryFeedWhiteListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryFeedWhiteListResponse>;
    /**
     * 查询直播课程的观看白名单
     *
     * @param request - QueryFeedWhiteListRequest
     * @returns QueryFeedWhiteListResponse
     */
    queryFeedWhiteList(feedId: string, request: QueryFeedWhiteListRequest): Promise<QueryFeedWhiteListResponse>;
    /**
     * 查询直播详情
     *
     * @param request - QueryLiveInfoRequest
     * @param headers - QueryLiveInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryLiveInfoResponse
     */
    queryLiveInfoWithOptions(request: QueryLiveInfoRequest, headers: QueryLiveInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveInfoResponse>;
    /**
     * 查询直播详情
     *
     * @param request - QueryLiveInfoRequest
     * @returns QueryLiveInfoResponse
     */
    queryLiveInfo(request: QueryLiveInfoRequest): Promise<QueryLiveInfoResponse>;
    /**
     * 查询直播间内某一互动插件的信息
     *
     * @param request - QueryLiveInteractionPluginRequest
     * @param headers - QueryLiveInteractionPluginHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryLiveInteractionPluginResponse
     */
    queryLiveInteractionPluginWithOptions(request: QueryLiveInteractionPluginRequest, headers: QueryLiveInteractionPluginHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveInteractionPluginResponse>;
    /**
     * 查询直播间内某一互动插件的信息
     *
     * @param request - QueryLiveInteractionPluginRequest
     * @returns QueryLiveInteractionPluginResponse
     */
    queryLiveInteractionPlugin(request: QueryLiveInteractionPluginRequest): Promise<QueryLiveInteractionPluginResponse>;
    /**
     * 获取直播的观看数据
     *
     * @param request - QueryLiveWatchDetailRequest
     * @param headers - QueryLiveWatchDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryLiveWatchDetailResponse
     */
    queryLiveWatchDetailWithOptions(request: QueryLiveWatchDetailRequest, headers: QueryLiveWatchDetailHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveWatchDetailResponse>;
    /**
     * 获取直播的观看数据
     *
     * @param request - QueryLiveWatchDetailRequest
     * @returns QueryLiveWatchDetailResponse
     */
    queryLiveWatchDetail(request: QueryLiveWatchDetailRequest): Promise<QueryLiveWatchDetailResponse>;
    /**
     * 获取直播观看用户列表
     *
     * @param request - QueryLiveWatchUserListRequest
     * @param headers - QueryLiveWatchUserListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryLiveWatchUserListResponse
     */
    queryLiveWatchUserListWithOptions(request: QueryLiveWatchUserListRequest, headers: QueryLiveWatchUserListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveWatchUserListResponse>;
    /**
     * 获取直播观看用户列表
     *
     * @param request - QueryLiveWatchUserListRequest
     * @returns QueryLiveWatchUserListResponse
     */
    queryLiveWatchUserList(request: QueryLiveWatchUserListRequest): Promise<QueryLiveWatchUserListResponse>;
    /**
     * 批量查询直播是否订阅
     *
     * @param tmpReq - QuerySubscribeStatusRequest
     * @param headers - QuerySubscribeStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySubscribeStatusResponse
     */
    querySubscribeStatusWithOptions(tmpReq: QuerySubscribeStatusRequest, headers: QuerySubscribeStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySubscribeStatusResponse>;
    /**
     * 批量查询直播是否订阅
     *
     * @param request - QuerySubscribeStatusRequest
     * @returns QuerySubscribeStatusResponse
     */
    querySubscribeStatus(request: QuerySubscribeStatusRequest): Promise<QuerySubscribeStatusResponse>;
    /**
     * 用户推送互动插件特效消息到直播间
     *
     * @param request - SendLiveInteractionPluginEffectsMsgRequest
     * @param headers - SendLiveInteractionPluginEffectsMsgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendLiveInteractionPluginEffectsMsgResponse
     */
    sendLiveInteractionPluginEffectsMsgWithOptions(request: SendLiveInteractionPluginEffectsMsgRequest, headers: SendLiveInteractionPluginEffectsMsgHeaders, runtime: $Util.RuntimeOptions): Promise<SendLiveInteractionPluginEffectsMsgResponse>;
    /**
     * 用户推送互动插件特效消息到直播间
     *
     * @param request - SendLiveInteractionPluginEffectsMsgRequest
     * @returns SendLiveInteractionPluginEffectsMsgResponse
     */
    sendLiveInteractionPluginEffectsMsg(request: SendLiveInteractionPluginEffectsMsgRequest): Promise<SendLiveInteractionPluginEffectsMsgResponse>;
    /**
     * 用户对互动插件进行操作广播到直播间
     *
     * @param tmpReq - SendLivePluginUserActionMsgRequest
     * @param headers - SendLivePluginUserActionMsgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendLivePluginUserActionMsgResponse
     */
    sendLivePluginUserActionMsgWithOptions(tmpReq: SendLivePluginUserActionMsgRequest, headers: SendLivePluginUserActionMsgHeaders, runtime: $Util.RuntimeOptions): Promise<SendLivePluginUserActionMsgResponse>;
    /**
     * 用户对互动插件进行操作广播到直播间
     *
     * @param request - SendLivePluginUserActionMsgRequest
     * @returns SendLivePluginUserActionMsgResponse
     */
    sendLivePluginUserActionMsg(request: SendLivePluginUserActionMsgRequest): Promise<SendLivePluginUserActionMsgResponse>;
    /**
     * 开始一场云导播
     *
     * @param request - StartCloudFeedRequest
     * @param headers - StartCloudFeedHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StartCloudFeedResponse
     */
    startCloudFeedWithOptions(feedId: string, request: StartCloudFeedRequest, headers: StartCloudFeedHeaders, runtime: $Util.RuntimeOptions): Promise<StartCloudFeedResponse>;
    /**
     * 开始一场云导播
     *
     * @param request - StartCloudFeedRequest
     * @returns StartCloudFeedResponse
     */
    startCloudFeed(feedId: string, request: StartCloudFeedRequest): Promise<StartCloudFeedResponse>;
    /**
     * 结束一场云导播
     *
     * @param request - StopCloudFeedRequest
     * @param headers - StopCloudFeedHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StopCloudFeedResponse
     */
    stopCloudFeedWithOptions(feedId: string, request: StopCloudFeedRequest, headers: StopCloudFeedHeaders, runtime: $Util.RuntimeOptions): Promise<StopCloudFeedResponse>;
    /**
     * 结束一场云导播
     *
     * @param request - StopCloudFeedRequest
     * @returns StopCloudFeedResponse
     */
    stopCloudFeed(feedId: string, request: StopCloudFeedRequest): Promise<StopCloudFeedResponse>;
    /**
     * 预约直播
     *
     * @param request - SubscribeLiveRequest
     * @param headers - SubscribeLiveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubscribeLiveResponse
     */
    subscribeLiveWithOptions(request: SubscribeLiveRequest, headers: SubscribeLiveHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeLiveResponse>;
    /**
     * 预约直播
     *
     * @param request - SubscribeLiveRequest
     * @returns SubscribeLiveResponse
     */
    subscribeLive(request: SubscribeLiveRequest): Promise<SubscribeLiveResponse>;
    /**
     * 修改直播
     *
     * @param request - UpdateLiveRequest
     * @param headers - UpdateLiveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateLiveResponse
     */
    updateLiveWithOptions(request: UpdateLiveRequest, headers: UpdateLiveHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLiveResponse>;
    /**
     * 修改直播
     *
     * @param request - UpdateLiveRequest
     * @returns UpdateLiveResponse
     */
    updateLive(request: UpdateLiveRequest): Promise<UpdateLiveResponse>;
    /**
     * 修改培训课程信息
     *
     * @param request - UpdateLiveFeedRequest
     * @param headers - UpdateLiveFeedHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateLiveFeedResponse
     */
    updateLiveFeedWithOptions(feedId: string, request: UpdateLiveFeedRequest, headers: UpdateLiveFeedHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLiveFeedResponse>;
    /**
     * 修改培训课程信息
     *
     * @param request - UpdateLiveFeedRequest
     * @returns UpdateLiveFeedResponse
     */
    updateLiveFeed(feedId: string, request: UpdateLiveFeedRequest): Promise<UpdateLiveFeedResponse>;
    /**
     * 修改直播间内某一互动插件的信息
     *
     * @param request - UpdateLiveInteractionPluginRequest
     * @param headers - UpdateLiveInteractionPluginHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateLiveInteractionPluginResponse
     */
    updateLiveInteractionPluginWithOptions(request: UpdateLiveInteractionPluginRequest, headers: UpdateLiveInteractionPluginHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLiveInteractionPluginResponse>;
    /**
     * 修改直播间内某一互动插件的信息
     *
     * @param request - UpdateLiveInteractionPluginRequest
     * @returns UpdateLiveInteractionPluginResponse
     */
    updateLiveInteractionPlugin(request: UpdateLiveInteractionPluginRequest): Promise<UpdateLiveInteractionPluginResponse>;
}
