/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    foreignId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    foreignName?: string;
    openInstanceId?: string;
    /**
     * @example
     * 1
     */
    productionType?: number;
    properties?: CreateTicketRequestProperties[];
    /**
     * @remarks
     * This parameter is required.
     */
    sourceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    templateId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketResponseBody extends $tea.Model {
    ticketId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteActivityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteActivityRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    activityCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    foreignId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    foreignName?: string;
    /**
     * @example
     * default
     */
    openInstanceId?: string;
    /**
     * @example
     * 1
     */
    productionType?: number;
    properties?: ExecuteActivityRequestProperties[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dcd6cb6b-b537-493c-8953-3507700e9c4b
     */
    sourceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteActivityResponseBody extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteActivityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExecuteActivityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserSourceListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserSourceListRequest extends $tea.Model {
    corpId?: string;
    description?: string;
    openInstanceId?: string;
    orgId?: number;
    orgName?: string;
    productionType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserSourceListResponseBody extends $tea.Model {
    result?: GetUserSourceListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserSourceListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserSourceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListActionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListActionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: string;
    /**
     * @example
     * default
     */
    openInstanceId?: string;
    /**
     * @example
     * 1
     */
    productionType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListActionResponseBody extends $tea.Model {
    list?: PageListActionResponseBodyList[];
    nextCursor?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListActionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PageListActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListRobotRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 50
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    /**
     * @example
     * default
     */
    openInstanceId?: string;
    /**
     * @example
     * 1
     */
    productionType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListRobotResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasMore?: boolean;
    list?: PageListRobotResponseBodyList[];
    /**
     * @example
     * 50
     */
    nextCursor?: number;
    /**
     * @example
     * 90
     */
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PageListRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListTicketRequest extends $tea.Model {
    endTime?: number;
    foreignId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: string;
    /**
     * @example
     * default
     */
    openInstanceId?: string;
    /**
     * @example
     * 1
     */
    productionType?: number;
    sourceId?: string;
    startTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 42
     */
    templateId?: string;
    ticketId?: string;
    ticketStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListTicketResponseBody extends $tea.Model {
    list?: PageListTicketResponseBodyList[];
    nextCursor?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListTicketResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PageListTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTicketRequestProperties extends $tea.Model {
    /**
     * @example
     * 字段名称
     */
    name?: string;
    /**
     * @example
     * 字段取值
     */
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteActivityRequestProperties extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserSourceListResponseBodyResult extends $tea.Model {
    config?: string;
    description?: string;
    id?: number;
    name?: string;
    status?: number;
    vendor?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListActionResponseBodyListActionContent extends $tea.Model {
    displayName?: string;
    displayValue?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListActionResponseBodyList extends $tea.Model {
    actionCode?: string;
    actionContent?: PageListActionResponseBodyListActionContent[];
    operator?: string;
    operatorId?: string;
    operatorRole?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListRobotResponseBodyList extends $tea.Model {
    /**
     * @example
     * 32001
     */
    accountId?: number;
    /**
     * @example
     * U1xup2nKKQ9zwXynjpAHVDOD
     */
    appKey?: string;
    /**
     * @example
     * 62703378
     */
    id?: number;
    /**
     * @example
     * 测试的机器人
     */
    name?: string;
    /**
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageListTicketResponseBodyList extends $tea.Model {
    bizDataMap?: {
        [key: string]: any;
    };
    foreignId?: string;
    foreignName?: string;
    gmtCreate?: string;
    gmtModified?: string;
    openInstanceId?: string;
    productionType?: number;
    sourceId?: string;
    templateId?: string;
    ticketId?: string;
    ticketStatus?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 创建工单
     *
     * @param request - CreateTicketRequest
     * @param headers - CreateTicketHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTicketResponse
     */
    createTicketWithOptions(request: CreateTicketRequest, headers: CreateTicketHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTicketResponse>;
    /**
     * 创建工单
     *
     * @param request - CreateTicketRequest
     * @returns CreateTicketResponse
     */
    createTicket(request: CreateTicketRequest): Promise<CreateTicketResponse>;
    /**
     * 执行工单活动
     *
     * @param request - ExecuteActivityRequest
     * @param headers - ExecuteActivityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExecuteActivityResponse
     */
    executeActivityWithOptions(ticketId: string, request: ExecuteActivityRequest, headers: ExecuteActivityHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteActivityResponse>;
    /**
     * 执行工单活动
     *
     * @param request - ExecuteActivityRequest
     * @returns ExecuteActivityResponse
     */
    executeActivity(ticketId: string, request: ExecuteActivityRequest): Promise<ExecuteActivityResponse>;
    /**
     * 获取source列表
     *
     * @param request - GetUserSourceListRequest
     * @param headers - GetUserSourceListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserSourceListResponse
     */
    getUserSourceListWithOptions(request: GetUserSourceListRequest, headers: GetUserSourceListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserSourceListResponse>;
    /**
     * 获取source列表
     *
     * @param request - GetUserSourceListRequest
     * @returns GetUserSourceListResponse
     */
    getUserSourceList(request: GetUserSourceListRequest): Promise<GetUserSourceListResponse>;
    /**
     * 查询动作记录
     *
     * @param request - PageListActionRequest
     * @param headers - PageListActionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PageListActionResponse
     */
    pageListActionWithOptions(ticketId: string, request: PageListActionRequest, headers: PageListActionHeaders, runtime: $Util.RuntimeOptions): Promise<PageListActionResponse>;
    /**
     * 查询动作记录
     *
     * @param request - PageListActionRequest
     * @returns PageListActionResponse
     */
    pageListAction(ticketId: string, request: PageListActionRequest): Promise<PageListActionResponse>;
    /**
     * 分页查询机器人信息
     *
     * @param request - PageListRobotRequest
     * @param headers - PageListRobotHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PageListRobotResponse
     */
    pageListRobotWithOptions(request: PageListRobotRequest, headers: PageListRobotHeaders, runtime: $Util.RuntimeOptions): Promise<PageListRobotResponse>;
    /**
     * 分页查询机器人信息
     *
     * @param request - PageListRobotRequest
     * @returns PageListRobotResponse
     */
    pageListRobot(request: PageListRobotRequest): Promise<PageListRobotResponse>;
    /**
     * 分页查询工单
     *
     * @param request - PageListTicketRequest
     * @param headers - PageListTicketHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PageListTicketResponse
     */
    pageListTicketWithOptions(request: PageListTicketRequest, headers: PageListTicketHeaders, runtime: $Util.RuntimeOptions): Promise<PageListTicketResponse>;
    /**
     * 分页查询工单
     *
     * @param request - PageListTicketRequest
     * @returns PageListTicketResponse
     */
    pageListTicket(request: PageListTicketRequest): Promise<PageListTicketResponse>;
}
