/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddAttendeeToEventGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAttendeeToEventGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEventGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSingleInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSingleInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 在项目事件会话中加人
     *
     * @param headers - AddAttendeeToEventGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddAttendeeToEventGroupResponse
     */
    addAttendeeToEventGroupWithOptions(userId: string, groupId: string, headers: AddAttendeeToEventGroupHeaders, runtime: $Util.RuntimeOptions): Promise<AddAttendeeToEventGroupResponse>;
    /**
     * 在项目事件会话中加人
     * @returns AddAttendeeToEventGroupResponse
     */
    addAttendeeToEventGroup(userId: string, groupId: string): Promise<AddAttendeeToEventGroupResponse>;
    /**
     * 创建项目事件会话
     *
     * @param headers - CreateEventGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateEventGroupResponse
     */
    createEventGroupWithOptions(userId: string, headers: CreateEventGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateEventGroupResponse>;
    /**
     * 创建项目事件会话
     * @returns CreateEventGroupResponse
     */
    createEventGroup(userId: string): Promise<CreateEventGroupResponse>;
    /**
     * 在群会话发送项目卡片消息
     *
     * @param headers - SendInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendInteractiveCardResponse
     */
    sendInteractiveCardWithOptions(userId: string, headers: SendInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendInteractiveCardResponse>;
    /**
     * 在群会话发送项目卡片消息
     * @returns SendInteractiveCardResponse
     */
    sendInteractiveCard(userId: string): Promise<SendInteractiveCardResponse>;
    /**
     * 单聊会话发送项目卡片消息
     *
     * @param headers - SendSingleInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendSingleInteractiveCardResponse
     */
    sendSingleInteractiveCardWithOptions(userId: string, headers: SendSingleInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendSingleInteractiveCardResponse>;
    /**
     * 单聊会话发送项目卡片消息
     * @returns SendSingleInteractiveCardResponse
     */
    sendSingleInteractiveCard(userId: string): Promise<SendSingleInteractiveCardResponse>;
    /**
     * 更新项目卡片消息
     *
     * @param headers - UpdateInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateInteractiveCardResponse
     */
    updateInteractiveCardWithOptions(userId: string, headers: UpdateInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInteractiveCardResponse>;
    /**
     * 更新项目卡片消息
     * @returns UpdateInteractiveCardResponse
     */
    updateInteractiveCard(userId: string): Promise<UpdateInteractiveCardResponse>;
}
