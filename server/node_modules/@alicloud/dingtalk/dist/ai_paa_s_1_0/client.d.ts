/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ExecuteAgentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    agentCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    inputs?: ExecuteAgentRequestInputs;
    scenarioCode?: string;
    scenarioInstanceId?: string;
    skillId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentResponseBody extends $tea.Model {
    result?: ExecuteAgentResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExecuteAgentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * IMAGE
     */
    module?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    taskId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetResponseBody extends $tea.Model {
    result?: {
        [key: string]: any;
    }[];
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LiandanTextImageGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * maas1234
     */
    modelId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * GENERAL
     */
    module?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * OKR是什么
     */
    prompt?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 使用该功能的用户id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelResponseBody extends $tea.Model {
    /**
     * @example
     * requestId_123
     */
    requestId?: string;
    /**
     * @example
     * {        "content":"OKR 全称为 Objective and Key Results，即目标与关键结果法，是一套明确和跟踪目标及其完成情况的管理工具和方法。"   }
     */
    result?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LiandanluExclusiveModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * IMAGE
     */
    module?: string;
    /**
     * @example
     * 1
     */
    number?: number;
    parameters?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 画一副风景画
     */
    prompt?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: LiandanluTextToImageModelResponseBodyResult;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LiandanluTextToImageModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NLToFrameServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NLToFrameServiceRequest extends $tea.Model {
    extensionStr?: string;
    isNewModel?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    modelId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    modelName?: string;
    userId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NLToFrameServiceResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NLToFrameServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NLToFrameServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogRequest extends $tea.Model {
    from?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    logLevel?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    skillExecuteId?: string;
    to?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBaymaxSkillLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIRequest extends $tea.Model {
    openMsgIds?: string[];
    recentDays?: number;
    recentHours?: number;
    recentN?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIShrinkRequest extends $tea.Model {
    openMsgIdsShrink?: string;
    recentDays?: number;
    recentHours?: number;
    recentN?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBody extends $tea.Model {
    messages?: QueryConversationMessageForAIResponseBodyMessages[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryConversationMessageForAIResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    agentCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    learningCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskResponseBody extends $tea.Model {
    result?: QueryMemoryLearningTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMemoryLearningTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaResultServiceRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaResultServiceResponseBody extends $tea.Model {
    result?: SmartFormulaResultServiceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaResultServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartFormulaResultServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaTriggerServiceRequest extends $tea.Model {
    request?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaTriggerServiceResponseBody extends $tea.Model {
    result?: SmartFormulaTriggerServiceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaTriggerServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartFormulaTriggerServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryResultServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryResultServiceRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryResultServiceResponseBody extends $tea.Model {
    result?: SmartQuoteBatchQueryResultServiceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryResultServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartQuoteBatchQueryResultServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryServiceRequest extends $tea.Model {
    request?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryServiceResponseBody extends $tea.Model {
    result?: SmartQuoteBatchQueryServiceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartQuoteBatchQueryServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteDataServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteDataServiceRequest extends $tea.Model {
    request?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteDataServiceResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteDataServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartQuoteDataServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryResultServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryResultServiceRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryResultServiceResponseBody extends $tea.Model {
    result?: SmartQuoteQueryResultServiceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryResultServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartQuoteQueryResultServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryServiceRequest extends $tea.Model {
    request?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryServiceResponseBody extends $tea.Model {
    result?: SmartQuoteQueryServiceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SmartQuoteQueryServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    agentCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    content?: SubmitMemoryLearningTaskRequestContent;
    /**
     * @remarks
     * This parameter is required.
     */
    learningMode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memoryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    agentCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    contentShrink?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    learningMode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memoryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskResponseBody extends $tea.Model {
    result?: SubmitMemoryLearningTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubmitMemoryLearningTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentRequestInputs extends $tea.Model {
    cardData?: any;
    cardTemplateId?: string;
    input?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentResponseBodyResult extends $tea.Model {
    executeResult?: string;
    skillId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 0112_1222
     */
    requestId?: string;
    /**
     * @example
     * 123
     */
    taskId?: string;
    /**
     * @example
     * SUCCEEDED
     */
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBodyMessagesAtUsers extends $tea.Model {
    agentCode?: string;
    nick?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBodyMessagesSender extends $tea.Model {
    agentCode?: string;
    nick?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBodyMessages extends $tea.Model {
    atAll?: boolean;
    atUsers?: QueryConversationMessageForAIResponseBodyMessagesAtUsers[];
    msgContent?: string;
    msgType?: string;
    sendTime?: string;
    sender?: QueryConversationMessageForAIResponseBodyMessagesSender;
    summary?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskResponseBodyResult extends $tea.Model {
    status?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaResultServiceResponseBodyResult extends $tea.Model {
    response?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartFormulaTriggerServiceResponseBodyResult extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryResultServiceResponseBodyResult extends $tea.Model {
    response?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteBatchQueryServiceResponseBodyResult extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryResultServiceResponseBodyResult extends $tea.Model {
    response?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SmartQuoteQueryServiceResponseBodyResult extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskRequestContent extends $tea.Model {
    knowledgeBaseUrl?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskResponseBodyResult extends $tea.Model {
    learningCode?: string;
    status?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 执行AI技能
     *
     * @param request - ExecuteAgentRequest
     * @param headers - ExecuteAgentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExecuteAgentResponse
     */
    executeAgentWithOptions(request: ExecuteAgentRequest, headers: ExecuteAgentHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteAgentResponse>;
    /**
     * 执行AI技能
     *
     * @param request - ExecuteAgentRequest
     * @returns ExecuteAgentResponse
     */
    executeAgent(request: ExecuteAgentRequest): Promise<ExecuteAgentResponse>;
    /**
     * 炼丹炉文生图任务结果获取
     *
     * @param request - LiandanTextImageGetRequest
     * @param headers - LiandanTextImageGetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LiandanTextImageGetResponse
     */
    liandanTextImageGetWithOptions(request: LiandanTextImageGetRequest, headers: LiandanTextImageGetHeaders, runtime: $Util.RuntimeOptions): Promise<LiandanTextImageGetResponse>;
    /**
     * 炼丹炉文生图任务结果获取
     *
     * @param request - LiandanTextImageGetRequest
     * @returns LiandanTextImageGetResponse
     */
    liandanTextImageGet(request: LiandanTextImageGetRequest): Promise<LiandanTextImageGetResponse>;
    /**
     * 炼丹炉专属模型接口
     *
     * @param request - LiandanluExclusiveModelRequest
     * @param headers - LiandanluExclusiveModelHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LiandanluExclusiveModelResponse
     */
    liandanluExclusiveModelWithOptions(request: LiandanluExclusiveModelRequest, headers: LiandanluExclusiveModelHeaders, runtime: $Util.RuntimeOptions): Promise<LiandanluExclusiveModelResponse>;
    /**
     * 炼丹炉专属模型接口
     *
     * @param request - LiandanluExclusiveModelRequest
     * @returns LiandanluExclusiveModelResponse
     */
    liandanluExclusiveModel(request: LiandanluExclusiveModelRequest): Promise<LiandanluExclusiveModelResponse>;
    /**
     * 炼丹炉通过提示词生成图片
     *
     * @param request - LiandanluTextToImageModelRequest
     * @param headers - LiandanluTextToImageModelHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LiandanluTextToImageModelResponse
     */
    liandanluTextToImageModelWithOptions(request: LiandanluTextToImageModelRequest, headers: LiandanluTextToImageModelHeaders, runtime: $Util.RuntimeOptions): Promise<LiandanluTextToImageModelResponse>;
    /**
     * 炼丹炉通过提示词生成图片
     *
     * @param request - LiandanluTextToImageModelRequest
     * @returns LiandanluTextToImageModelResponse
     */
    liandanluTextToImageModel(request: LiandanluTextToImageModelRequest): Promise<LiandanluTextToImageModelResponse>;
    /**
     * 通过配置的指令，连接用户和系统，训练大模型
     *
     * @param request - NLToFrameServiceRequest
     * @param headers - NLToFrameServiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns NLToFrameServiceResponse
     */
    nLToFrameServiceWithOptions(request: NLToFrameServiceRequest, headers: NLToFrameServiceHeaders, runtime: $Util.RuntimeOptions): Promise<NLToFrameServiceResponse>;
    /**
     * 通过配置的指令，连接用户和系统，训练大模型
     *
     * @param request - NLToFrameServiceRequest
     * @returns NLToFrameServiceResponse
     */
    nLToFrameService(request: NLToFrameServiceRequest): Promise<NLToFrameServiceResponse>;
    /**
     * Baymax技能执行日志
     *
     * @param request - QueryBaymaxSkillLogRequest
     * @param headers - QueryBaymaxSkillLogHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryBaymaxSkillLogResponse
     */
    queryBaymaxSkillLogWithOptions(request: QueryBaymaxSkillLogRequest, headers: QueryBaymaxSkillLogHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBaymaxSkillLogResponse>;
    /**
     * Baymax技能执行日志
     *
     * @param request - QueryBaymaxSkillLogRequest
     * @returns QueryBaymaxSkillLogResponse
     */
    queryBaymaxSkillLog(request: QueryBaymaxSkillLogRequest): Promise<QueryBaymaxSkillLogResponse>;
    /**
     * 查询会话消息并以大模型友好的协议返回
     *
     * @param tmpReq - QueryConversationMessageForAIRequest
     * @param headers - QueryConversationMessageForAIHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryConversationMessageForAIResponse
     */
    queryConversationMessageForAIWithOptions(cid: string, tmpReq: QueryConversationMessageForAIRequest, headers: QueryConversationMessageForAIHeaders, runtime: $Util.RuntimeOptions): Promise<QueryConversationMessageForAIResponse>;
    /**
     * 查询会话消息并以大模型友好的协议返回
     *
     * @param request - QueryConversationMessageForAIRequest
     * @returns QueryConversationMessageForAIResponse
     */
    queryConversationMessageForAI(cid: string, request: QueryConversationMessageForAIRequest): Promise<QueryConversationMessageForAIResponse>;
    /**
     * 查询记忆学习进度
     *
     * @param request - QueryMemoryLearningTaskRequest
     * @param headers - QueryMemoryLearningTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMemoryLearningTaskResponse
     */
    queryMemoryLearningTaskWithOptions(request: QueryMemoryLearningTaskRequest, headers: QueryMemoryLearningTaskHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMemoryLearningTaskResponse>;
    /**
     * 查询记忆学习进度
     *
     * @param request - QueryMemoryLearningTaskRequest
     * @returns QueryMemoryLearningTaskResponse
     */
    queryMemoryLearningTask(request: QueryMemoryLearningTaskRequest): Promise<QueryMemoryLearningTaskResponse>;
    /**
     * 中信金属智能配料任务结果
     *
     * @param request - SmartFormulaResultServiceRequest
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartFormulaResultServiceResponse
     */
    smartFormulaResultServiceWithOptions(request: SmartFormulaResultServiceRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<SmartFormulaResultServiceResponse>;
    /**
     * 中信金属智能配料任务结果
     *
     * @param request - SmartFormulaResultServiceRequest
     * @returns SmartFormulaResultServiceResponse
     */
    smartFormulaResultService(request: SmartFormulaResultServiceRequest): Promise<SmartFormulaResultServiceResponse>;
    /**
     * 中信金属智能配料任务触发
     *
     * @param request - SmartFormulaTriggerServiceRequest
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartFormulaTriggerServiceResponse
     */
    smartFormulaTriggerServiceWithOptions(request: SmartFormulaTriggerServiceRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<SmartFormulaTriggerServiceResponse>;
    /**
     * 中信金属智能配料任务触发
     *
     * @param request - SmartFormulaTriggerServiceRequest
     * @returns SmartFormulaTriggerServiceResponse
     */
    smartFormulaTriggerService(request: SmartFormulaTriggerServiceRequest): Promise<SmartFormulaTriggerServiceResponse>;
    /**
     * 批量查询智能报价结果
     *
     * @param request - SmartQuoteBatchQueryResultServiceRequest
     * @param headers - SmartQuoteBatchQueryResultServiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartQuoteBatchQueryResultServiceResponse
     */
    smartQuoteBatchQueryResultServiceWithOptions(request: SmartQuoteBatchQueryResultServiceRequest, headers: SmartQuoteBatchQueryResultServiceHeaders, runtime: $Util.RuntimeOptions): Promise<SmartQuoteBatchQueryResultServiceResponse>;
    /**
     * 批量查询智能报价结果
     *
     * @param request - SmartQuoteBatchQueryResultServiceRequest
     * @returns SmartQuoteBatchQueryResultServiceResponse
     */
    smartQuoteBatchQueryResultService(request: SmartQuoteBatchQueryResultServiceRequest): Promise<SmartQuoteBatchQueryResultServiceResponse>;
    /**
     * 批量查询智能报价
     *
     * @param request - SmartQuoteBatchQueryServiceRequest
     * @param headers - SmartQuoteBatchQueryServiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartQuoteBatchQueryServiceResponse
     */
    smartQuoteBatchQueryServiceWithOptions(request: SmartQuoteBatchQueryServiceRequest, headers: SmartQuoteBatchQueryServiceHeaders, runtime: $Util.RuntimeOptions): Promise<SmartQuoteBatchQueryServiceResponse>;
    /**
     * 批量查询智能报价
     *
     * @param request - SmartQuoteBatchQueryServiceRequest
     * @returns SmartQuoteBatchQueryServiceResponse
     */
    smartQuoteBatchQueryService(request: SmartQuoteBatchQueryServiceRequest): Promise<SmartQuoteBatchQueryServiceResponse>;
    /**
     * 添加智能报价数据
     *
     * @param request - SmartQuoteDataServiceRequest
     * @param headers - SmartQuoteDataServiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartQuoteDataServiceResponse
     */
    smartQuoteDataServiceWithOptions(request: SmartQuoteDataServiceRequest, headers: SmartQuoteDataServiceHeaders, runtime: $Util.RuntimeOptions): Promise<SmartQuoteDataServiceResponse>;
    /**
     * 添加智能报价数据
     *
     * @param request - SmartQuoteDataServiceRequest
     * @returns SmartQuoteDataServiceResponse
     */
    smartQuoteDataService(request: SmartQuoteDataServiceRequest): Promise<SmartQuoteDataServiceResponse>;
    /**
     * 查询智能报价结果
     *
     * @param request - SmartQuoteQueryResultServiceRequest
     * @param headers - SmartQuoteQueryResultServiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartQuoteQueryResultServiceResponse
     */
    smartQuoteQueryResultServiceWithOptions(request: SmartQuoteQueryResultServiceRequest, headers: SmartQuoteQueryResultServiceHeaders, runtime: $Util.RuntimeOptions): Promise<SmartQuoteQueryResultServiceResponse>;
    /**
     * 查询智能报价结果
     *
     * @param request - SmartQuoteQueryResultServiceRequest
     * @returns SmartQuoteQueryResultServiceResponse
     */
    smartQuoteQueryResultService(request: SmartQuoteQueryResultServiceRequest): Promise<SmartQuoteQueryResultServiceResponse>;
    /**
     * 查询智能报价
     *
     * @param request - SmartQuoteQueryServiceRequest
     * @param headers - SmartQuoteQueryServiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SmartQuoteQueryServiceResponse
     */
    smartQuoteQueryServiceWithOptions(request: SmartQuoteQueryServiceRequest, headers: SmartQuoteQueryServiceHeaders, runtime: $Util.RuntimeOptions): Promise<SmartQuoteQueryServiceResponse>;
    /**
     * 查询智能报价
     *
     * @param request - SmartQuoteQueryServiceRequest
     * @returns SmartQuoteQueryServiceResponse
     */
    smartQuoteQueryService(request: SmartQuoteQueryServiceRequest): Promise<SmartQuoteQueryServiceResponse>;
    /**
     * 提交记忆学习任务
     *
     * @param tmpReq - SubmitMemoryLearningTaskRequest
     * @param headers - SubmitMemoryLearningTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubmitMemoryLearningTaskResponse
     */
    submitMemoryLearningTaskWithOptions(tmpReq: SubmitMemoryLearningTaskRequest, headers: SubmitMemoryLearningTaskHeaders, runtime: $Util.RuntimeOptions): Promise<SubmitMemoryLearningTaskResponse>;
    /**
     * 提交记忆学习任务
     *
     * @param request - SubmitMemoryLearningTaskRequest
     * @returns SubmitMemoryLearningTaskResponse
     */
    submitMemoryLearningTask(request: SubmitMemoryLearningTaskRequest): Promise<SubmitMemoryLearningTaskResponse>;
}
