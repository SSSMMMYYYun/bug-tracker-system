/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddDeviceVideoConferenceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceVideoConferenceMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceVideoConferenceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    code?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    conferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeviceVideoConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    mediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExtractFacialFeatureResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickDeviceVideoConferenceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickDeviceVideoConferenceMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickDeviceVideoConferenceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateRequest extends $tea.Model {
    atmManagerRightMap?: MachineManagerUpdateRequestAtmManagerRightMap;
    /**
     * @example
     * 165441111
     */
    deviceId?: number;
    scopeDeptIds?: number[];
    /**
     * @example
     * user01
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineUsersUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineUsersUpdateRequest extends $tea.Model {
    addDeptIds?: number[];
    addUserIds?: string[];
    delDeptIds?: number[];
    delUserIds?: string[];
    devIds?: number[];
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineUsersUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceVideoConferenceBookHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceVideoConferenceBookResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    code?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    conferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceVideoConferenceBookResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceVideoConferenceBookResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TextToImageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TextToImageRequest extends $tea.Model {
    modelId?: string;
    /**
     * @example
     * 1
     */
    pictureNum?: number;
    /**
     * @example
     * 1024*1024
     */
    pictureSize?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 帮我生成一个小猫在草坪上奔跑的图片
     */
    query?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TextToImageResponseBody extends $tea.Model {
    result?: TextToImageResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TextToImageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TextToImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VoiceCloneHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VoiceCloneRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 你好，我叫小智，是来自阿里云的超大规模语言模型。我是一个能够回答问题、创作文字，还能表达观点、撰写代码的全能型AI助手。如果您有任何问题或需要帮助，请随时告诉我，我会尽我所能为您提供帮助！
     */
    text?: string;
    /**
     * @example
     * manager4224
     */
    userId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * qhtestvoice-01
     */
    voiceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VoiceCloneResponseBody extends $tea.Model {
    result?: VoiceCloneResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VoiceCloneResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: VoiceCloneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateRequestAtmManagerRightMap extends $tea.Model {
    /**
     * @example
     * true
     */
    attendancePersonManage?: boolean;
    /**
     * @example
     * true
     */
    bluetoothPunchManage?: boolean;
    /**
     * @example
     * true
     */
    deviceReset?: boolean;
    /**
     * @example
     * true
     */
    deviceSettings?: boolean;
    /**
     * @example
     * true
     */
    facePunchManage?: boolean;
    /**
     * @example
     * true
     */
    fingerPunchManage?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TextToImageResponseBodyResult extends $tea.Model {
    requestId?: string;
    taskId?: string;
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VoiceCloneResponseBodyResult extends $tea.Model {
    /**
     * @example
     * https://xxxx
     */
    mediaUrl?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加硬件视频会议参会人
     *
     * @param request - AddDeviceVideoConferenceMembersRequest
     * @param headers - AddDeviceVideoConferenceMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddDeviceVideoConferenceMembersResponse
     */
    addDeviceVideoConferenceMembersWithOptions(deviceId: string, conferenceId: string, request: AddDeviceVideoConferenceMembersRequest, headers: AddDeviceVideoConferenceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddDeviceVideoConferenceMembersResponse>;
    /**
     * 添加硬件视频会议参会人
     *
     * @param request - AddDeviceVideoConferenceMembersRequest
     * @returns AddDeviceVideoConferenceMembersResponse
     */
    addDeviceVideoConferenceMembers(deviceId: string, conferenceId: string, request: AddDeviceVideoConferenceMembersRequest): Promise<AddDeviceVideoConferenceMembersResponse>;
    /**
     * 创建硬件视频会议
     *
     * @param request - CreateDeviceVideoConferenceRequest
     * @param headers - CreateDeviceVideoConferenceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDeviceVideoConferenceResponse
     */
    createDeviceVideoConferenceWithOptions(deviceId: string, request: CreateDeviceVideoConferenceRequest, headers: CreateDeviceVideoConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeviceVideoConferenceResponse>;
    /**
     * 创建硬件视频会议
     *
     * @param request - CreateDeviceVideoConferenceRequest
     * @returns CreateDeviceVideoConferenceResponse
     */
    createDeviceVideoConference(deviceId: string, request: CreateDeviceVideoConferenceRequest): Promise<CreateDeviceVideoConferenceResponse>;
    /**
     * 基于企业员工照片为终端提取人脸识别特征
     *
     * @param request - ExtractFacialFeatureRequest
     * @param headers - ExtractFacialFeatureHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExtractFacialFeatureResponse
     */
    extractFacialFeatureWithOptions(request: ExtractFacialFeatureRequest, headers: ExtractFacialFeatureHeaders, runtime: $Util.RuntimeOptions): Promise<ExtractFacialFeatureResponse>;
    /**
     * 基于企业员工照片为终端提取人脸识别特征
     *
     * @param request - ExtractFacialFeatureRequest
     * @returns ExtractFacialFeatureResponse
     */
    extractFacialFeature(request: ExtractFacialFeatureRequest): Promise<ExtractFacialFeatureResponse>;
    /**
     * 踢出硬件视频会议参会人
     *
     * @param request - KickDeviceVideoConferenceMembersRequest
     * @param headers - KickDeviceVideoConferenceMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns KickDeviceVideoConferenceMembersResponse
     */
    kickDeviceVideoConferenceMembersWithOptions(deviceId: string, conferenceId: string, request: KickDeviceVideoConferenceMembersRequest, headers: KickDeviceVideoConferenceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<KickDeviceVideoConferenceMembersResponse>;
    /**
     * 踢出硬件视频会议参会人
     *
     * @param request - KickDeviceVideoConferenceMembersRequest
     * @returns KickDeviceVideoConferenceMembersResponse
     */
    kickDeviceVideoConferenceMembers(deviceId: string, conferenceId: string, request: KickDeviceVideoConferenceMembersRequest): Promise<KickDeviceVideoConferenceMembersResponse>;
    /**
     * 变更智能考勤机设备管理员
     *
     * @param request - MachineManagerUpdateRequest
     * @param headers - MachineManagerUpdateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MachineManagerUpdateResponse
     */
    machineManagerUpdateWithOptions(request: MachineManagerUpdateRequest, headers: MachineManagerUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<MachineManagerUpdateResponse>;
    /**
     * 变更智能考勤机设备管理员
     *
     * @param request - MachineManagerUpdateRequest
     * @returns MachineManagerUpdateResponse
     */
    machineManagerUpdate(request: MachineManagerUpdateRequest): Promise<MachineManagerUpdateResponse>;
    /**
     * 变更智能考勤机员工
     *
     * @param request - MachineUsersUpdateRequest
     * @param headers - MachineUsersUpdateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MachineUsersUpdateResponse
     */
    machineUsersUpdateWithOptions(request: MachineUsersUpdateRequest, headers: MachineUsersUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<MachineUsersUpdateResponse>;
    /**
     * 变更智能考勤机员工
     *
     * @param request - MachineUsersUpdateRequest
     * @returns MachineUsersUpdateResponse
     */
    machineUsersUpdate(request: MachineUsersUpdateRequest): Promise<MachineUsersUpdateResponse>;
    /**
     * 查询硬件视频会议预约信息
     *
     * @param headers - QueryDeviceVideoConferenceBookHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDeviceVideoConferenceBookResponse
     */
    queryDeviceVideoConferenceBookWithOptions(deviceId: string, bookId: string, headers: QueryDeviceVideoConferenceBookHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceVideoConferenceBookResponse>;
    /**
     * 查询硬件视频会议预约信息
     * @returns QueryDeviceVideoConferenceBookResponse
     */
    queryDeviceVideoConferenceBook(deviceId: string, bookId: string): Promise<QueryDeviceVideoConferenceBookResponse>;
    /**
     * 文生图开放接口
     *
     * @param request - TextToImageRequest
     * @param headers - TextToImageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TextToImageResponse
     */
    textToImageWithOptions(request: TextToImageRequest, headers: TextToImageHeaders, runtime: $Util.RuntimeOptions): Promise<TextToImageResponse>;
    /**
     * 文生图开放接口
     *
     * @param request - TextToImageRequest
     * @returns TextToImageResponse
     */
    textToImage(request: TextToImageRequest): Promise<TextToImageResponse>;
    /**
     * 音频复刻
     *
     * @param request - VoiceCloneRequest
     * @param headers - VoiceCloneHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns VoiceCloneResponse
     */
    voiceCloneWithOptions(request: VoiceCloneRequest, headers: VoiceCloneHeaders, runtime: $Util.RuntimeOptions): Promise<VoiceCloneResponse>;
    /**
     * 音频复刻
     *
     * @param request - VoiceCloneRequest
     * @returns VoiceCloneResponse
     */
    voiceClone(request: VoiceCloneRequest): Promise<VoiceCloneResponse>;
}
