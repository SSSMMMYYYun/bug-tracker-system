"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchCreateCourseHeaders = exports.BatchCreateResponse = exports.BatchCreateResponseBody = exports.BatchCreateRequest = exports.BatchCreateHeaders = exports.AssignClassResponse = exports.AssignClassResponseBody = exports.AssignClassRequest = exports.AssignClassHeaders = exports.AdjustKitResponse = exports.AdjustKitResponseBody = exports.AdjustKitRequest = exports.AdjustKitHeaders = exports.AdjustCourseResponse = exports.AdjustCourseResponseBody = exports.AdjustCourseRequest = exports.AdjustCourseHeaders = exports.AddSchoolConfigResponse = exports.AddSchoolConfigResponseBody = exports.AddSchoolConfigRequest = exports.AddSchoolConfigHeaders = exports.AddDeviceResponse = exports.AddDeviceResponseBody = exports.AddDeviceRequest = exports.AddDeviceHeaders = exports.AddCompetitionRecordResponse = exports.AddCompetitionRecordResponseBody = exports.AddCompetitionRecordRequest = exports.AddCompetitionRecordHeaders = exports.AddCollegeContactUserResponse = exports.AddCollegeContactUserResponseBody = exports.AddCollegeContactUserRequest = exports.AddCollegeContactUserHeaders = exports.AddCollegeContactExclusiveResponse = exports.AddCollegeContactExclusiveResponseBody = exports.AddCollegeContactExclusiveRequest = exports.AddCollegeContactExclusiveHeaders = exports.AddCollegeAlumniUserInfoResponse = exports.AddCollegeAlumniUserInfoResponseBody = exports.AddCollegeAlumniUserInfoRequest = exports.AddCollegeAlumniUserInfoHeaders = exports.AddCollegeAlumniDeptsResponse = exports.AddCollegeAlumniDeptsResponseBody = exports.AddCollegeAlumniDeptsRequest = exports.AddCollegeAlumniDeptsHeaders = exports.ActivateDeviceResponse = exports.ActivateDeviceResponseBody = exports.ActivateDeviceRequest = exports.ActivateDeviceHeaders = exports.ResultValue = void 0;
exports.CardGetCardFinishProgressResponseBody = exports.CardGetCardFinishProgressRequest = exports.CardGetCardFinishProgressHeaders = exports.CardGetCardResponse = exports.CardGetCardResponseBody = exports.CardGetCardRequest = exports.CardGetCardHeaders = exports.CardEndCardResponse = exports.CardEndCardResponseBody = exports.CardEndCardRequest = exports.CardEndCardHeaders = exports.CardDeleteCardResponse = exports.CardDeleteCardResponseBody = exports.CardDeleteCardRequest = exports.CardDeleteCardHeaders = exports.CardBatchQueryCardsResponse = exports.CardBatchQueryCardsResponseBody = exports.CardBatchQueryCardsRequest = exports.CardBatchQueryCardsHeaders = exports.CancelUserOrderResponse = exports.CancelUserOrderResponseBody = exports.CancelUserOrderRequest = exports.CancelUserOrderHeaders = exports.CancelSnsOrderResponse = exports.CancelSnsOrderResponseBody = exports.CancelSnsOrderRequest = exports.CancelSnsOrderHeaders = exports.CancelOrderResponse = exports.CancelOrderResponseBody = exports.CancelOrderRequest = exports.CancelOrderHeaders = exports.BatchOrgCreateHWResponse = exports.BatchOrgCreateHWResponseBody = exports.BatchOrgCreateHWRequest = exports.BatchOrgCreateHWHeaders = exports.BatchInvalidCourseResponse = exports.BatchInvalidCourseResponseBody = exports.BatchInvalidCourseRequest = exports.BatchInvalidCourseHeaders = exports.BatchCreateTeacherCourseResponse = exports.BatchCreateTeacherCourseResponseBody = exports.BatchCreateTeacherCourseRequest = exports.BatchCreateTeacherCourseHeaders = exports.BatchCreateStudentClassResponse = exports.BatchCreateStudentClassResponseBody = exports.BatchCreateStudentClassRequest = exports.BatchCreateStudentClassHeaders = exports.BatchCreateCourseResponse = exports.BatchCreateCourseResponseBody = exports.BatchCreateCourseRequest = void 0;
exports.CreateInviteUrlHeaders = exports.CreateFulfilRecordResponse = exports.CreateFulfilRecordResponseBody = exports.CreateFulfilRecordRequest = exports.CreateFulfilRecordHeaders = exports.CreateEduAssetSpaceResponse = exports.CreateEduAssetSpaceResponseBody = exports.CreateEduAssetSpaceRequest = exports.CreateEduAssetSpaceHeaders = exports.CreateCustomDeptResponse = exports.CreateCustomDeptResponseBody = exports.CreateCustomDeptRequest = exports.CreateCustomDeptHeaders = exports.CreateCustomClassResponse = exports.CreateCustomClassResponseBody = exports.CreateCustomClassRequest = exports.CreateCustomClassHeaders = exports.CreateCourseResponse = exports.CreateCourseResponseBody = exports.CreateCourseRequest = exports.CreateCourseHeaders = exports.CreateCollegeContactSceneStruResponse = exports.CreateCollegeContactSceneStruResponseBody = exports.CreateCollegeContactSceneStruRequest = exports.CreateCollegeContactSceneStruHeaders = exports.CreateCollegeContactDeptResponse = exports.CreateCollegeContactDeptResponseBody = exports.CreateCollegeContactDeptRequest = exports.CreateCollegeContactDeptHeaders = exports.CreateAppOrderResponse = exports.CreateAppOrderResponseBody = exports.CreateAppOrderRequest = exports.CreateAppOrderHeaders = exports.CourseSchedulingComplimentNoticeResponse = exports.CourseSchedulingComplimentNoticeResponseBody = exports.CourseSchedulingComplimentNoticeRequest = exports.CourseSchedulingComplimentNoticeHeaders = exports.ConsumePointResponse = exports.ConsumePointResponseBody = exports.ConsumePointRequest = exports.ConsumePointHeaders = exports.CheckRestrictionResponse = exports.CheckRestrictionResponseBody = exports.CheckRestrictionRequest = exports.CheckRestrictionHeaders = exports.CardQueryCardFeedsResponse = exports.CardQueryCardFeedsResponseBody = exports.CardQueryCardFeedsRequest = exports.CardQueryCardFeedsHeaders = exports.CardGetCardFinishProgressResponse = void 0;
exports.CreateTimerCardResponseBody = exports.CreateTimerCardRequest = exports.CreateTimerCardHeaders = exports.CreateTeacherCourseResponse = exports.CreateTeacherCourseResponseBody = exports.CreateTeacherCourseRequest = exports.CreateTeacherCourseHeaders = exports.CreateStudentClassResponse = exports.CreateStudentClassResponseBody = exports.CreateStudentClassRequest = exports.CreateStudentClassHeaders = exports.CreateStsTokenResponse = exports.CreateStsTokenResponseBody = exports.CreateStsTokenRequest = exports.CreateStsTokenHeaders = exports.CreateSnsAppOrderResponse = exports.CreateSnsAppOrderResponseBody = exports.CreateSnsAppOrderRequest = exports.CreateSnsAppOrderHeaders = exports.CreateSectionConfigResponse = exports.CreateSectionConfigResponseBody = exports.CreateSectionConfigRequest = exports.CreateSectionConfigHeaders = exports.CreateRemoteClassCourseResponse = exports.CreateRemoteClassCourseResponseBody = exports.CreateRemoteClassCourseRequest = exports.CreateRemoteClassCourseHeaders = exports.CreateRefundFlowResponse = exports.CreateRefundFlowResponseBody = exports.CreateRefundFlowRequest = exports.CreateRefundFlowHeaders = exports.CreatePhysicalClassroomResponse = exports.CreatePhysicalClassroomResponseBody = exports.CreatePhysicalClassroomRequest = exports.CreatePhysicalClassroomHeaders = exports.CreateOrderFlowResponse = exports.CreateOrderFlowResponseBody = exports.CreateOrderFlowRequest = exports.CreateOrderFlowHeaders = exports.CreateOrderResponse = exports.CreateOrderResponseBody = exports.CreateOrderRequest = exports.CreateOrderHeaders = exports.CreateItemResponse = exports.CreateItemResponseBody = exports.CreateItemRequest = exports.CreateItemHeaders = exports.CreateInviteUrlResponse = exports.CreateInviteUrlResponseBody = exports.CreateInviteUrlRequest = void 0;
exports.DeleteDeviceOrgHeaders = exports.DeleteDeviceResponse = exports.DeleteDeviceResponseBody = exports.DeleteDeviceRequest = exports.DeleteDeviceHeaders = exports.DeleteDeptResponse = exports.DeleteDeptResponseBody = exports.DeleteDeptRequest = exports.DeleteDeptHeaders = exports.DeleteCollegeContactSceneStruResponse = exports.DeleteCollegeContactSceneStruResponseBody = exports.DeleteCollegeContactSceneStruRequest = exports.DeleteCollegeContactSceneStruHeaders = exports.DeleteCollegeAlumniUserInfoResponse = exports.DeleteCollegeAlumniUserInfoResponseBody = exports.DeleteCollegeAlumniUserInfoRequest = exports.DeleteCollegeAlumniUserInfoHeaders = exports.DeleteCollegeAlumniDeptResponse = exports.DeleteCollegeAlumniDeptResponseBody = exports.DeleteCollegeAlumniDeptRequest = exports.DeleteCollegeAlumniDeptHeaders = exports.DeductPointResponse = exports.DeductPointResponseBody = exports.DeductPointRequest = exports.DeductPointHeaders = exports.DeactivateDeviceResponse = exports.DeactivateDeviceResponseBody = exports.DeactivateDeviceRequest = exports.DeactivateDeviceHeaders = exports.CreateUniversityTeacherResponse = exports.CreateUniversityTeacherResponseBody = exports.CreateUniversityTeacherRequest = exports.CreateUniversityTeacherHeaders = exports.CreateUniversityStudentResponse = exports.CreateUniversityStudentResponseBody = exports.CreateUniversityStudentRequest = exports.CreateUniversityStudentHeaders = exports.CreateUniversityCourseGroupResponse = exports.CreateUniversityCourseGroupResponseBody = exports.CreateUniversityCourseGroupRequest = exports.CreateUniversityCourseGroupHeaders = exports.CreateTransferRecordResponse = exports.CreateTransferRecordResponseBody = exports.CreateTransferRecordRequest = exports.CreateTransferRecordHeaders = exports.CreateTokenResponse = exports.CreateTokenResponseBody = exports.CreateTokenRequest = exports.CreateTokenHeaders = exports.CreateTimerCardResponse = void 0;
exports.EduAIGCCallbackResponseBody = exports.EduAIGCCallbackRequest = exports.EduAIGCCallbackHeaders = exports.DisableCollegeContactSceneStruResponse = exports.DisableCollegeContactSceneStruResponseBody = exports.DisableCollegeContactSceneStruRequest = exports.DisableCollegeContactSceneStruHeaders = exports.DeviceHeartbeatResponse = exports.DeviceHeartbeatResponseBody = exports.DeviceHeartbeatRequest = exports.DeviceHeartbeatHeaders = exports.DeleteUniversityTeacherResponse = exports.DeleteUniversityTeacherResponseBody = exports.DeleteUniversityTeacherRequest = exports.DeleteUniversityTeacherHeaders = exports.DeleteUniversityStudentResponse = exports.DeleteUniversityStudentResponseBody = exports.DeleteUniversityStudentRequest = exports.DeleteUniversityStudentHeaders = exports.DeleteUniversityCourseGroupResponse = exports.DeleteUniversityCourseGroupResponseBody = exports.DeleteUniversityCourseGroupRequest = exports.DeleteUniversityCourseGroupHeaders = exports.DeleteTeacherResponse = exports.DeleteTeacherResponseBody = exports.DeleteTeacherRequest = exports.DeleteTeacherHeaders = exports.DeleteStudentResponse = exports.DeleteStudentResponseBody = exports.DeleteStudentRequest = exports.DeleteStudentHeaders = exports.DeleteRemoteClassCourseResponse = exports.DeleteRemoteClassCourseResponseBody = exports.DeleteRemoteClassCourseRequest = exports.DeleteRemoteClassCourseHeaders = exports.DeletePhysicalClassroomResponse = exports.DeletePhysicalClassroomResponseBody = exports.DeletePhysicalClassroomRequest = exports.DeletePhysicalClassroomHeaders = exports.DeleteOrgRelationResponse = exports.DeleteOrgRelationResponseBody = exports.DeleteOrgRelationRequest = exports.DeleteOrgRelationHeaders = exports.DeleteGuardianResponse = exports.DeleteGuardianResponseBody = exports.DeleteGuardianRequest = exports.DeleteGuardianHeaders = exports.DeleteDeviceOrgResponse = exports.DeleteDeviceOrgResponseBody = exports.DeleteDeviceOrgRequest = void 0;
exports.GetDefaultChildResponseBody = exports.GetDefaultChildHeaders = exports.GetCollegeContactStandardStruDeptDetailResponse = exports.GetCollegeContactStandardStruDeptDetailResponseBody = exports.GetCollegeContactStandardStruDeptDetailRequest = exports.GetCollegeContactStandardStruDeptDetailHeaders = exports.GetCollegeContactDeptDetailResponse = exports.GetCollegeContactDeptDetailResponseBody = exports.GetCollegeContactDeptDetailRequest = exports.GetCollegeContactDeptDetailHeaders = exports.GetCollegeAlumniUserInfoResponse = exports.GetCollegeAlumniUserInfoResponseBody = exports.GetCollegeAlumniUserInfoRequest = exports.GetCollegeAlumniUserInfoHeaders = exports.GetCollegeAlumniDeptsResponse = exports.GetCollegeAlumniDeptsResponseBody = exports.GetCollegeAlumniDeptsRequest = exports.GetCollegeAlumniDeptsHeaders = exports.GetChildrenResponse = exports.GetChildrenResponseBody = exports.GetChildrenHeaders = exports.GetBindChildInfoResponse = exports.GetBindChildInfoResponseBody = exports.GetBindChildInfoRequest = exports.GetBindChildInfoHeaders = exports.EndCourseResponse = exports.EndCourseResponseBody = exports.EndCourseRequest = exports.EndCourseHeaders = exports.EnableCollegeContactSceneStruResponse = exports.EnableCollegeContactSceneStruResponseBody = exports.EnableCollegeContactSceneStruRequest = exports.EnableCollegeContactSceneStruHeaders = exports.EduTeacherListResponse = exports.EduTeacherListResponseBody = exports.EduTeacherListRequest = exports.EduTeacherListHeaders = exports.EduListUserByFromUserIdsResponse = exports.EduListUserByFromUserIdsResponseBody = exports.EduListUserByFromUserIdsRequest = exports.EduListUserByFromUserIdsHeaders = exports.EduGetFileSpaceResponse = exports.EduGetFileSpaceResponseBody = exports.EduGetFileSpaceRequest = exports.EduGetFileSpaceHeaders = exports.EduFindUserRolesByUserIdResponse = exports.EduFindUserRolesByUserIdResponseBody = exports.EduFindUserRolesByUserIdRequest = exports.EduFindUserRolesByUserIdHeaders = exports.EduAIGCCallbackResponse = void 0;
exports.GetTaskStudentListResponseBody = exports.GetTaskStudentListRequest = exports.GetTaskStudentListHeaders = exports.GetTaskListResponse = exports.GetTaskListResponseBody = exports.GetTaskListRequest = exports.GetTaskListHeaders = exports.GetShareRolesResponse = exports.GetShareRolesResponseBody = exports.GetShareRolesHeaders = exports.GetShareRoleMembersResponse = exports.GetShareRoleMembersResponseBody = exports.GetShareRoleMembersHeaders = exports.GetRemoteClassCourseResponse = exports.GetRemoteClassCourseResponseBody = exports.GetRemoteClassCourseRequest = exports.GetRemoteClassCourseHeaders = exports.GetPointInfoResponse = exports.GetPointInfoResponseBody = exports.GetPointInfoRequest = exports.GetPointInfoHeaders = exports.GetPointActionRecordResponse = exports.GetPointActionRecordResponseBody = exports.GetPointActionRecordShrinkRequest = exports.GetPointActionRecordRequest = exports.GetPointActionRecordHeaders = exports.GetOpenCoursesResponse = exports.GetOpenCoursesResponseBody = exports.GetOpenCoursesRequest = exports.GetOpenCoursesHeaders = exports.GetOpenCourseDetailResponse = exports.GetOpenCourseDetailResponseBody = exports.GetOpenCourseDetailHeaders = exports.GetImageTempDownloadUrlResponse = exports.GetImageTempDownloadUrlResponseBody = exports.GetImageTempDownloadUrlRequest = exports.GetImageTempDownloadUrlHeaders = exports.GetFileDownloadInfoByPackageIdResponse = exports.GetFileDownloadInfoByPackageIdResponseBody = exports.GetFileDownloadInfoByPackageIdRequest = exports.GetFileDownloadInfoByPackageIdHeaders = exports.GetFileDownloadInfoResponse = exports.GetFileDownloadInfoResponseBody = exports.GetFileDownloadInfoRequest = exports.GetFileDownloadInfoHeaders = exports.GetEduUserIdentityResponse = exports.GetEduUserIdentityResponseBody = exports.GetEduUserIdentityRequest = exports.GetEduUserIdentityHeaders = exports.GetDefaultChildResponse = void 0;
exports.ListCollegeContactSubDeptsHeaders = exports.ListCollegeContactSceneStrusResponse = exports.ListCollegeContactSceneStrusResponseBody = exports.ListCollegeContactSceneStrusRequest = exports.ListCollegeContactSceneStrusHeaders = exports.ListCollegeContactDeptTypeConfigResponse = exports.ListCollegeContactDeptTypeConfigResponseBody = exports.ListCollegeContactDeptTypeConfigRequest = exports.ListCollegeContactDeptTypeConfigHeaders = exports.IsvMetadataQueryResponse = exports.IsvMetadataQueryResponseBody = exports.IsvMetadataQueryRequest = exports.IsvMetadataQueryHeaders = exports.IsvDataWriteResponse = exports.IsvDataWriteResponseBody = exports.IsvDataWriteRequest = exports.IsvDataWriteHeaders = exports.InvalidTeacherCourseResponse = exports.InvalidTeacherCourseResponseBody = exports.InvalidTeacherCourseRequest = exports.InvalidTeacherCourseHeaders = exports.InvalidStudentClassResponse = exports.InvalidStudentClassResponseBody = exports.InvalidStudentClassRequest = exports.InvalidStudentClassHeaders = exports.InvalidKitResponse = exports.InvalidKitResponseBody = exports.InvalidKitRequest = exports.InvalidKitHeaders = exports.InvalidCourseResponse = exports.InvalidCourseResponseBody = exports.InvalidCourseRequest = exports.InvalidCourseHeaders = exports.InsertSectionConfigResponse = exports.InsertSectionConfigResponseBody = exports.InsertSectionConfigRequest = exports.InsertSectionConfigHeaders = exports.InitVPaasDeviceResponse = exports.InitVPaasDeviceResponseBody = exports.InitVPaasDeviceRequest = exports.InitVPaasDeviceHeaders = exports.InitDeviceResponse = exports.InitDeviceResponseBody = exports.InitDeviceRequest = exports.InitDeviceHeaders = exports.InitCoursesOfClassResponse = exports.InitCoursesOfClassResponseBody = exports.InitCoursesOfClassRequest = exports.InitCoursesOfClassHeaders = exports.GetTaskStudentListResponse = void 0;
exports.QueryAllSubjectsFromClassScheduleShrinkRequest = exports.QueryAllSubjectsFromClassScheduleRequest = exports.QueryAllSubjectsFromClassScheduleHeaders = exports.ProvidePointResponse = exports.ProvidePointResponseBody = exports.ProvidePointRequest = exports.ProvidePointHeaders = exports.PreDialResponse = exports.PreDialResponseBody = exports.PreDialRequest = exports.PreDialHeaders = exports.PollingConfirmStatusResponse = exports.PollingConfirmStatusResponseBody = exports.PollingConfirmStatusRequest = exports.PollingConfirmStatusHeaders = exports.PayOrderResponse = exports.PayOrderResponseBody = exports.PayOrderRequest = exports.PayOrderHeaders = exports.PageQueryKitOpenRecordResponse = exports.PageQueryKitOpenRecordResponseBody = exports.PageQueryKitOpenRecordRequest = exports.PageQueryKitOpenRecordHeaders = exports.PageQueryDevicesResponse = exports.PageQueryDevicesResponseBody = exports.PageQueryDevicesRequest = exports.PageQueryDevicesHeaders = exports.PageQueryClassCourseResponse = exports.PageQueryClassCourseResponseBody = exports.PageQueryClassCourseRequest = exports.PageQueryClassCourseHeaders = exports.OrderInfoResponse = exports.OrderInfoResponseBody = exports.OrderInfoRequest = exports.OrderInfoHeaders = exports.OpenKitResponse = exports.OpenKitResponseBody = exports.OpenKitRequest = exports.OpenKitHeaders = exports.MoveStudentResponse = exports.MoveStudentResponseBody = exports.MoveStudentRequest = exports.MoveStudentHeaders = exports.ListOrderResponse = exports.ListOrderResponseBody = exports.ListOrderRequest = exports.ListOrderHeaders = exports.ListCollegeContactSubDeptsResponse = exports.ListCollegeContactSubDeptsResponseBody = exports.ListCollegeContactSubDeptsRequest = void 0;
exports.QueryOrgSecretKeyResponseBody = exports.QueryOrgSecretKeyRequest = exports.QueryOrgSecretKeyHeaders = exports.QueryOrgRelationListResponse = exports.QueryOrgRelationListResponseBody = exports.QueryOrgRelationListRequest = exports.QueryOrgRelationListHeaders = exports.QueryOrderResponse = exports.QueryOrderResponseBody = exports.QueryOrderRequest = exports.QueryOrderHeaders = exports.QueryKitOpenRecordResponse = exports.QueryKitOpenRecordResponseBody = exports.QueryKitOpenRecordRequest = exports.QueryKitOpenRecordHeaders = exports.QueryGroupIdResponse = exports.QueryGroupIdResponseBody = exports.QueryGroupIdRequest = exports.QueryGroupIdHeaders = exports.QueryEduAssetSpacesResponse = exports.QueryEduAssetSpacesResponseBody = exports.QueryEduAssetSpacesRequest = exports.QueryEduAssetSpacesHeaders = exports.QueryDeviceListByCorpIdResponse = exports.QueryDeviceListByCorpIdResponseBody = exports.QueryDeviceListByCorpIdRequest = exports.QueryDeviceListByCorpIdHeaders = exports.QueryDeviceResponse = exports.QueryDeviceResponseBody = exports.QueryDeviceRequest = exports.QueryDeviceHeaders = exports.QueryCollegeContactUserDetailResponse = exports.QueryCollegeContactUserDetailResponseBody = exports.QueryCollegeContactUserDetailRequest = exports.QueryCollegeContactUserDetailHeaders = exports.QueryClassScheduleConfigResponse = exports.QueryClassScheduleConfigResponseBody = exports.QueryClassScheduleConfigShrinkRequest = exports.QueryClassScheduleConfigRequest = exports.QueryClassScheduleConfigHeaders = exports.QueryClassScheduleByTimeSchoolResponse = exports.QueryClassScheduleByTimeSchoolResponseBody = exports.QueryClassScheduleByTimeSchoolRequest = exports.QueryClassScheduleByTimeSchoolHeaders = exports.QueryClassScheduleResponse = exports.QueryClassScheduleResponseBody = exports.QueryClassScheduleRequest = exports.QueryClassScheduleHeaders = exports.QueryAllSubjectsFromClassScheduleResponse = exports.QueryAllSubjectsFromClassScheduleResponseBody = void 0;
exports.QueryTransferCourseRequest = exports.QueryTransferCourseHeaders = exports.QueryTeacherCourseResponse = exports.QueryTeacherCourseResponseBody = exports.QueryTeacherCourseRequest = exports.QueryTeacherCourseHeaders = exports.QueryTeachSubjectsResponse = exports.QueryTeachSubjectsResponseBody = exports.QueryTeachSubjectsRequest = exports.QueryTeachSubjectsHeaders = exports.QuerySubjectTeachersResponse = exports.QuerySubjectTeachersResponseBody = exports.QuerySubjectTeachersRequest = exports.QuerySubjectTeachersHeaders = exports.QueryStudentClassResponse = exports.QueryStudentClassResponseBody = exports.QueryStudentClassRequest = exports.QueryStudentClassHeaders = exports.QueryStatisticsDataResponse = exports.QueryStatisticsDataResponseBody = exports.QueryStatisticsDataRequest = exports.QueryStatisticsDataHeaders = exports.QuerySnsOrderResponse = exports.QuerySnsOrderResponseBody = exports.QuerySnsOrderRequest = exports.QuerySnsOrderHeaders = exports.QuerySchoolUserFaceResponse = exports.QuerySchoolUserFaceResponseBody = exports.QuerySchoolUserFaceRequest = exports.QuerySchoolUserFaceHeaders = exports.QueryRemoteClassCourseResponse = exports.QueryRemoteClassCourseResponseBody = exports.QueryRemoteClassCourseRequest = exports.QueryRemoteClassCourseHeaders = exports.QueryPurchaseInfoResponse = exports.QueryPurchaseInfoResponseBody = exports.QueryPurchaseInfoRequest = exports.QueryPurchaseInfoHeaders = exports.QueryPhysicalClassroomResponse = exports.QueryPhysicalClassroomResponseBody = exports.QueryPhysicalClassroomRequest = exports.QueryPhysicalClassroomHeaders = exports.QueryPayResultResponse = exports.QueryPayResultResponseBody = exports.QueryPayResultRequest = exports.QueryPayResultHeaders = exports.QueryOrgTypeResponse = exports.QueryOrgTypeResponseBody = exports.QueryOrgTypeHeaders = exports.QueryOrgSecretKeyResponse = void 0;
exports.SendFileMessageResponse = exports.SendFileMessageResponseBody = exports.SendFileMessageRequest = exports.SendFileMessageHeaders = exports.SendAiCardResponse = exports.SendAiCardResponseBody = exports.SendAiCardRequest = exports.SendAiCardHeaders = exports.SearchTeachersResponse = exports.SearchTeachersResponseBody = exports.SearchTeachersRequest = exports.SearchTeachersHeaders = exports.SaveStudentLearningDataResponse = exports.SaveStudentLearningDataResponseBody = exports.SaveStudentLearningDataRequest = exports.SaveStudentLearningDataHeaders = exports.SaveClassLearningDataResponse = exports.SaveClassLearningDataResponseBody = exports.SaveClassLearningDataRequest = exports.SaveClassLearningDataHeaders = exports.RollbackDeductPointResponse = exports.RollbackDeductPointResponseBody = exports.RollbackDeductPointRequest = exports.RollbackDeductPointHeaders = exports.ReportDeviceUseLogResponse = exports.ReportDeviceUseLogResponseBody = exports.ReportDeviceUseLogRequest = exports.ReportDeviceUseLogHeaders = exports.ReportDeviceLogResponse = exports.ReportDeviceLogResponseBody = exports.ReportDeviceLogRequest = exports.ReportDeviceLogHeaders = exports.RemoveDeviceResponse = exports.RemoveDeviceResponseBody = exports.RemoveDeviceRequest = exports.RemoveDeviceHeaders = exports.QueryUserPayInfoResponse = exports.QueryUserPayInfoResponseBody = exports.QueryUserPayInfoRequest = exports.QueryUserPayInfoHeaders = exports.QueryUserFaceResponse = exports.QueryUserFaceResponseBody = exports.QueryUserFaceRequest = exports.QueryUserFaceHeaders = exports.QueryUniversityCourseGroupResponse = exports.QueryUniversityCourseGroupResponseBody = exports.QueryUniversityCourseGroupRequest = exports.QueryUniversityCourseGroupHeaders = exports.QueryTransferCourseResponse = exports.QueryTransferCourseResponseBody = void 0;
exports.UpdateCoursesOfClassRequest = exports.UpdateCoursesOfClassHeaders = exports.UpdateCollegeUserEmpTypeResponse = exports.UpdateCollegeUserEmpTypeResponseBody = exports.UpdateCollegeUserEmpTypeRequest = exports.UpdateCollegeUserEmpTypeHeaders = exports.UpdateCollegeContactUserResponse = exports.UpdateCollegeContactUserResponseBody = exports.UpdateCollegeContactUserRequest = exports.UpdateCollegeContactUserHeaders = exports.UpdateCollegeContactSceneStruResponse = exports.UpdateCollegeContactSceneStruResponseBody = exports.UpdateCollegeContactSceneStruRequest = exports.UpdateCollegeContactSceneStruHeaders = exports.UpdateCollegeContactExclusiveResponse = exports.UpdateCollegeContactExclusiveResponseBody = exports.UpdateCollegeContactExclusiveRequest = exports.UpdateCollegeContactExclusiveHeaders = exports.UpdateCollegeContactDeptResponse = exports.UpdateCollegeContactDeptResponseBody = exports.UpdateCollegeContactDeptRequest = exports.UpdateCollegeContactDeptHeaders = exports.UpdateCollegeAlumniUserInfoResponse = exports.UpdateCollegeAlumniUserInfoResponseBody = exports.UpdateCollegeAlumniUserInfoRequest = exports.UpdateCollegeAlumniUserInfoHeaders = exports.UnsubscribeUniversityCourseGroupResponse = exports.UnsubscribeUniversityCourseGroupResponseBody = exports.UnsubscribeUniversityCourseGroupRequest = exports.UnsubscribeUniversityCourseGroupHeaders = exports.SubscribeUniversityCourseGroupResponse = exports.SubscribeUniversityCourseGroupResponseBody = exports.SubscribeUniversityCourseGroupRequest = exports.SubscribeUniversityCourseGroupHeaders = exports.StartCoursePrepareResponse = exports.StartCoursePrepareResponseBody = exports.StartCoursePrepareRequest = exports.StartCoursePrepareHeaders = exports.StartCourseResponse = exports.StartCourseResponseBody = exports.StartCourseRequest = exports.StartCourseHeaders = exports.SendPrintOrderNoticeMsgResponse = exports.SendPrintOrderNoticeMsgResponseBody = exports.SendPrintOrderNoticeMsgRequest = exports.SendPrintOrderNoticeMsgHeaders = exports.SendMessageResponse = exports.SendMessageResponseBody = exports.SendMessageRequest = exports.SendMessageHeaders = void 0;
exports.BatchCreateRequestDataCardRuleItemParamList = exports.AddCollegeContactUserResponseBodyResult = exports.AddCollegeContactUserRequestDeptTitleList = exports.AddCollegeContactUserRequestDeptPositionSet = exports.AddCollegeContactUserRequestDeptOrderList = exports.AddCollegeContactExclusiveResponseBodyResult = exports.AddCollegeContactExclusiveRequestDeptTitleList = exports.AddCollegeContactExclusiveRequestDeptPositionSet = exports.AddCollegeContactExclusiveRequestDeptOrderList = exports.AddCollegeAlumniUserInfoResponseBodyResult = exports.AddCollegeAlumniDeptsResponseBodyResult = exports.AddCollegeAlumniDeptsRequestDepts = exports.QueryClassCourseResponse = exports.QueryClassCourseResponseBody = exports.QueryClassCourseRequest = exports.QueryClassCourseHeaders = exports.ValidateUserRoleResponse = exports.ValidateUserRoleResponseBody = exports.ValidateUserRoleRequest = exports.ValidateUserRoleHeaders = exports.ValidateNewGradeManagerResponse = exports.ValidateNewGradeManagerResponseBody = exports.ValidateNewGradeManagerRequest = exports.ValidateNewGradeManagerHeaders = exports.VPaasProxyResponse = exports.VPaasProxyResponseBody = exports.VPaasProxyRequest = exports.VPaasProxyHeaders = exports.UploadLearningDataCallbackResponse = exports.UploadLearningDataCallbackResponseBody = exports.UploadLearningDataCallbackRequest = exports.UploadLearningDataCallbackHeaders = exports.UpdateUniversityCourseGroupResponse = exports.UpdateUniversityCourseGroupResponseBody = exports.UpdateUniversityCourseGroupRequest = exports.UpdateUniversityCourseGroupHeaders = exports.UpdateRemoteClassDeviceResponse = exports.UpdateRemoteClassDeviceResponseBody = exports.UpdateRemoteClassDeviceRequest = exports.UpdateRemoteClassDeviceHeaders = exports.UpdateRemoteClassCourseResponse = exports.UpdateRemoteClassCourseResponseBody = exports.UpdateRemoteClassCourseRequest = exports.UpdateRemoteClassCourseHeaders = exports.UpdatePhysicalClassroomResponse = exports.UpdatePhysicalClassroomResponseBody = exports.UpdatePhysicalClassroomRequest = exports.UpdatePhysicalClassroomHeaders = exports.UpdateCoursesOfClassResponse = exports.UpdateCoursesOfClassResponseBody = void 0;
exports.CreateSnsAppOrderRequestDetailList = exports.CreateSectionConfigRequestSectionConfigs = exports.CreateSectionConfigRequestSectionConfigsSemesterStartDate = exports.CreateSectionConfigRequestSectionConfigsSemesterEndDate = exports.CreateSectionConfigRequestSectionConfigsSectionStartDate = exports.CreateSectionConfigRequestSectionConfigsSectionModels = exports.CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime = exports.CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime = exports.CreateSectionConfigRequestSectionConfigsSectionEndDate = exports.CreateRemoteClassCourseResponseBodyResult = exports.CreateRemoteClassCourseRequestTeachingParticipant = exports.CreateRemoteClassCourseRequestAttendParticipants = exports.CreateOrderFlowRequestDetailList = exports.CreateOrderRequestDetailList = exports.CreateInviteUrlResponseBodyResult = exports.CreateCustomDeptResponseBodyResult = exports.CreateCustomDeptRequestCustomDept = exports.CreateCustomClassResponseBodyResult = exports.CreateCustomClassRequestCustomClass = exports.CreateCourseRequestTeacherList = exports.CreateCollegeContactSceneStruResponseBodyResult = exports.CreateCollegeContactDeptResponseBodyResult = exports.CreateCollegeContactDeptRequestOuterSceneConfig = exports.CreateCollegeContactDeptRequestHideSceneConfig = exports.CreateAppOrderRequestDetailList = exports.CardQueryCardFeedsResponseBodyResult = exports.CardQueryCardFeedsResponseBodyResultPosts = exports.CardQueryCardFeedsResponseBodyResultPostsContent = exports.CardQueryCardFeedsResponseBodyResultPostsAuthor = exports.CardGetCardFinishProgressResponseBodyResult = exports.CardGetCardFinishProgressResponseBodyResultPatriarchStatistics = exports.CardGetCardFinishProgressResponseBodyResultClassStatistics = exports.CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess = exports.CardGetCardResponseBodyResult = exports.CardBatchQueryCardsResponseBodyResult = exports.CardBatchQueryCardsResponseBodyResultCards = exports.BatchOrgCreateHWResponseBodyResult = exports.BatchOrgCreateHWResponseBodyResultPublishList = exports.BatchOrgCreateHWRequestOpenSelectItemList = exports.BatchOrgCreateHWRequestOpenSelectItemListClassList = exports.BatchOrgCreateHWRequestOpenSelectItemListClassListStudents = exports.BatchCreateTeacherCourseRequestTeacherCourseDetailItemList = exports.BatchCreateStudentClassRequestStudentList = exports.BatchCreateCourseRequestCourseDetailItemList = exports.BatchCreateCourseRequestCourseDetailItemListTeacherList = exports.BatchCreateResponseBodyResult = exports.BatchCreateRequestData = exports.BatchCreateRequestDataOrgClassStudentGroupList = exports.BatchCreateRequestDataOrgClassStudentGroupListClassList = exports.BatchCreateRequestDataOrgClassStudentGroupListClassListStudents = void 0;
exports.InsertSectionConfigRequestSectionModels = exports.InsertSectionConfigRequestSectionModelsStart = exports.InsertSectionConfigRequestSectionModelsEnd = exports.InsertSectionConfigRequestEnd = exports.InitCoursesOfClassRequestSectionConfig = exports.InitCoursesOfClassRequestSectionConfigStart = exports.InitCoursesOfClassRequestSectionConfigSectionModels = exports.InitCoursesOfClassRequestSectionConfigSectionModelsStart = exports.InitCoursesOfClassRequestSectionConfigSectionModelsEnd = exports.InitCoursesOfClassRequestSectionConfigEnd = exports.InitCoursesOfClassRequestCourses = exports.InitCoursesOfClassRequestCoursesSectionModel = exports.InitCoursesOfClassRequestCoursesDateModel = exports.GetTaskStudentListResponseBodyStudentList = exports.GetTaskListResponseBodyTaskList = exports.GetShareRolesResponseBodyResult = exports.GetShareRoleMembersResponseBodyResult = exports.GetRemoteClassCourseResponseBodyResult = exports.GetRemoteClassCourseResponseBodyResultTeachingParticipant = exports.GetRemoteClassCourseResponseBodyResultRecordInfos = exports.GetRemoteClassCourseResponseBodyResultAttendParticipants = exports.GetPointInfoResponseBodyResult = exports.GetPointActionRecordResponseBodyResult = exports.GetPointActionRecordRequestBody = exports.GetOpenCoursesResponseBodyCourseList = exports.GetOpenCourseDetailResponseBodyPushModel = exports.GetImageTempDownloadUrlResponseBodyResult = exports.GetFileDownloadInfoByPackageIdResponseBodyResult = exports.GetEduUserIdentityResponseBodyData = exports.GetDefaultChildResponseBodyBindStudents = exports.GetCollegeContactStandardStruDeptDetailResponseBodyResult = exports.GetCollegeContactDeptDetailResponseBodyResult = exports.GetCollegeContactDeptDetailResponseBodyResultOuterSceneConfig = exports.GetCollegeContactDeptDetailResponseBodyResultHideSceneConfig = exports.GetCollegeAlumniUserInfoResponseBodyResult = exports.GetCollegeAlumniUserInfoResponseBodyResultDepts = exports.GetCollegeAlumniDeptsResponseBodyResult = exports.GetChildrenResponseBodyResult = exports.GetChildrenResponseBodyResultBindStudents = exports.EndCourseResponseBodyUniversityCourseCommonResponse = exports.EndCourseRequestLivePlayInfoList = exports.EduTeacherListResponseBodyResult = exports.EduTeacherListResponseBodyResultTeacherDetails = exports.EduListUserByFromUserIdsResponseBodyResult = exports.EduGetFileSpaceResponseBodyResult = exports.CreateUniversityCourseGroupResponseBodyCourseGroupInfo = exports.CreateUniversityCourseGroupRequestTeacherInfos = exports.CreateUniversityCourseGroupRequestCourserGroupItemModels = exports.CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate = exports.CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate = void 0;
exports.QueryKitOpenRecordResponseBodyResult = exports.QueryEduAssetSpacesResponseBodySpaces = exports.QueryDeviceListByCorpIdResponseBodyResult = exports.QueryDeviceListByCorpIdResponseBodyResultList = exports.QueryCollegeContactUserDetailResponseBodyResult = exports.QueryCollegeContactUserDetailResponseBodyResultUnionEmpExt = exports.QueryCollegeContactUserDetailResponseBodyResultUnionEmpExtUnionEmpMapList = exports.QueryCollegeContactUserDetailResponseBodyResultRoleList = exports.QueryCollegeContactUserDetailResponseBodyResultLeaderInDept = exports.QueryCollegeContactUserDetailResponseBodyResultDeptTypeSet = exports.QueryCollegeContactUserDetailResponseBodyResultDeptPositionSet = exports.QueryCollegeContactUserDetailResponseBodyResultDeptOrderList = exports.QueryClassScheduleConfigResponseBodyResult = exports.QueryClassScheduleConfigResponseBodyResultStart = exports.QueryClassScheduleConfigResponseBodyResultSectionModels = exports.QueryClassScheduleConfigResponseBodyResultSectionModelsStart = exports.QueryClassScheduleConfigResponseBodyResultSectionModelsEnd = exports.QueryClassScheduleConfigResponseBodyResultEnd = exports.QueryClassScheduleByTimeSchoolResponseBodyResult = exports.QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels = exports.QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms = exports.QueryClassScheduleResponseBodyCourseDTOS = exports.QueryClassScheduleResponseBodyCourseDTOSEduUserModels = exports.QueryClassScheduleResponseBodyCourseDTOSClassrooms = exports.QueryClassScheduleResponseBodyConfig = exports.QueryClassScheduleResponseBodyConfigStart = exports.QueryClassScheduleResponseBodyConfigSectionModels = exports.QueryClassScheduleResponseBodyConfigSectionModelsStart = exports.QueryClassScheduleResponseBodyConfigSectionModelsEnd = exports.QueryClassScheduleResponseBodyConfigEnd = exports.QueryAllSubjectsFromClassScheduleResponseBodyResult = exports.QueryAllSubjectsFromClassScheduleResponseBodyResultExt = exports.QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList = exports.ProvidePointResponseBodyResult = exports.PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse = exports.PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList = exports.PageQueryKitOpenRecordResponseBodyResult = exports.PageQueryDevicesResponseBodyList = exports.PageQueryClassCourseResponseBodyResult = exports.OrderInfoResponseBodyResult = exports.OrderInfoResponseBodyResultItemList = exports.ListOrderResponseBodyList = exports.ListCollegeContactSubDeptsResponseBodyResult = exports.ListCollegeContactSceneStrusResponseBodyResult = exports.ListCollegeContactDeptTypeConfigResponseBodyResult = exports.IsvMetadataQueryResponseBodyResult = exports.IsvMetadataQueryResponseBodyResultFields = exports.IsvDataWriteResponseBodyResult = exports.IsvDataWriteRequestRowValueList = exports.InsertSectionConfigRequestStart = void 0;
exports.QueryClassCourseResponseBodyResult = exports.UpdateUniversityCourseGroupRequestCourserGroupItemModels = exports.UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate = exports.UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate = exports.UpdateRemoteClassCourseRequestTeachingParticipant = exports.UpdateRemoteClassCourseRequestAttendParticipants = exports.UpdateCoursesOfClassRequestSectionConfig = exports.UpdateCoursesOfClassRequestSectionConfigSectionModels = exports.UpdateCoursesOfClassRequestSectionConfigSectionModelsStart = exports.UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd = exports.UpdateCoursesOfClassRequestCourses = exports.UpdateCoursesOfClassRequestCoursesSectionModel = exports.UpdateCoursesOfClassRequestCoursesDateModel = exports.UpdateCollegeContactUserRequestDeptTitleList = exports.UpdateCollegeContactUserRequestDeptPositionSet = exports.UpdateCollegeContactUserRequestDeptOrderList = exports.UpdateCollegeContactExclusiveRequestDeptTitleList = exports.UpdateCollegeContactExclusiveRequestDeptPositionSet = exports.UpdateCollegeContactExclusiveRequestDeptOrderList = exports.UpdateCollegeContactDeptRequestOuterSceneConfig = exports.UpdateCollegeContactDeptRequestHideSceneConfig = exports.StartCoursePrepareResponseBodyUniversityCourseCommonResponse = exports.StartCourseResponseBodyUniversityCourseCommonResponse = exports.StartCourseRequestLivePlayInfoList = exports.SearchTeachersResponseBodyUsers = exports.SaveStudentLearningDataResponseBodyResult = exports.SaveStudentLearningDataResponseBodyResultWrongQuestions = exports.SaveStudentLearningDataRequestWrongQuestions = exports.SaveClassLearningDataResponseBodyResult = exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo = exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels = exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate = exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate = exports.QueryTransferCourseResponseBodyResult = exports.QueryTeacherCourseResponseBodyResult = exports.QueryTeacherCourseResponseBodyResultTeacherCourseDetailItemList = exports.QueryTeachSubjectsResponseBodyResult = exports.QuerySubjectTeachersResponseBodyResult = exports.QueryStudentClassResponseBodyResult = exports.QueryStudentClassResponseBodyResultStudentList = exports.QueryStatisticsDataResponseBodyResult = exports.QuerySchoolUserFaceResponseBodyUserFaceList = exports.QueryRemoteClassCourseResponseBodyResult = exports.QueryRemoteClassCourseResponseBodyResultTeachingParticipant = exports.QueryRemoteClassCourseResponseBodyResultAttendParticipants = exports.QueryPhysicalClassroomResponseBodyResult = exports.QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo = exports.QueryOrgRelationListResponseBodyResult = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ResultValue extends $tea.Model {
    static names() {
        return {
            thumbnail: 'thumbnail',
            fileSize: 'fileSize',
            extension: 'extension',
            fileName: 'fileName',
            url: 'url',
        };
    }
    static types() {
        return {
            thumbnail: 'string',
            fileSize: 'number',
            extension: 'string',
            fileName: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ResultValue = ResultValue;
class ActivateDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ActivateDeviceHeaders = ActivateDeviceHeaders;
class ActivateDeviceRequest extends $tea.Model {
    static names() {
        return {
            licenseKey: 'licenseKey',
            model: 'model',
            name: 'name',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            licenseKey: 'string',
            model: 'string',
            name: 'string',
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ActivateDeviceRequest = ActivateDeviceRequest;
class ActivateDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ActivateDeviceResponseBody = ActivateDeviceResponseBody;
class ActivateDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ActivateDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ActivateDeviceResponse = ActivateDeviceResponse;
class AddCollegeAlumniDeptsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniDeptsHeaders = AddCollegeAlumniDeptsHeaders;
class AddCollegeAlumniDeptsRequest extends $tea.Model {
    static names() {
        return {
            depts: 'depts',
            operator: 'operator',
        };
    }
    static types() {
        return {
            depts: { 'type': 'array', 'itemType': AddCollegeAlumniDeptsRequestDepts },
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniDeptsRequest = AddCollegeAlumniDeptsRequest;
class AddCollegeAlumniDeptsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': AddCollegeAlumniDeptsResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniDeptsResponseBody = AddCollegeAlumniDeptsResponseBody;
class AddCollegeAlumniDeptsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCollegeAlumniDeptsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniDeptsResponse = AddCollegeAlumniDeptsResponse;
class AddCollegeAlumniUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniUserInfoHeaders = AddCollegeAlumniUserInfoHeaders;
class AddCollegeAlumniUserInfoRequest extends $tea.Model {
    static names() {
        return {
            address: 'address',
            deptIds: 'deptIds',
            email: 'email',
            intake: 'intake',
            mobile: 'mobile',
            name: 'name',
            operator: 'operator',
            outtake: 'outtake',
            studentNumber: 'studentNumber',
        };
    }
    static types() {
        return {
            address: 'string',
            deptIds: { 'type': 'array', 'itemType': 'number' },
            email: 'string',
            intake: 'string',
            mobile: 'string',
            name: 'string',
            operator: 'string',
            outtake: 'string',
            studentNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniUserInfoRequest = AddCollegeAlumniUserInfoRequest;
class AddCollegeAlumniUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: AddCollegeAlumniUserInfoResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniUserInfoResponseBody = AddCollegeAlumniUserInfoResponseBody;
class AddCollegeAlumniUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCollegeAlumniUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniUserInfoResponse = AddCollegeAlumniUserInfoResponse;
class AddCollegeContactExclusiveHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveHeaders = AddCollegeContactExclusiveHeaders;
class AddCollegeContactExclusiveRequest extends $tea.Model {
    static names() {
        return {
            avatarMediaId: 'avatarMediaId',
            deptIdList: 'deptIdList',
            deptOrderList: 'deptOrderList',
            deptPositionSet: 'deptPositionSet',
            deptTitleList: 'deptTitleList',
            email: 'email',
            empType: 'empType',
            exclusiveAccount: 'exclusiveAccount',
            exclusiveAccountType: 'exclusiveAccountType',
            extension: 'extension',
            hiredDate: 'hiredDate',
            initPassword: 'initPassword',
            jobNumber: 'jobNumber',
            loginIdType: 'loginIdType',
            mainDeptId: 'mainDeptId',
            managerUserid: 'managerUserid',
            mobile: 'mobile',
            name: 'name',
            nickname: 'nickname',
            orgEmail: 'orgEmail',
            orgEmailType: 'orgEmailType',
            remark: 'remark',
            sendActiveSms: 'sendActiveSms',
            seniorMode: 'seniorMode',
            telephone: 'telephone',
            title: 'title',
            userid: 'userid',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            avatarMediaId: 'string',
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            deptOrderList: { 'type': 'array', 'itemType': AddCollegeContactExclusiveRequestDeptOrderList },
            deptPositionSet: { 'type': 'array', 'itemType': AddCollegeContactExclusiveRequestDeptPositionSet },
            deptTitleList: { 'type': 'array', 'itemType': AddCollegeContactExclusiveRequestDeptTitleList },
            email: 'string',
            empType: 'string',
            exclusiveAccount: 'boolean',
            exclusiveAccountType: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            hiredDate: 'number',
            initPassword: 'string',
            jobNumber: 'string',
            loginIdType: 'string',
            mainDeptId: 'number',
            managerUserid: 'string',
            mobile: 'string',
            name: 'string',
            nickname: 'string',
            orgEmail: 'string',
            orgEmailType: 'string',
            remark: 'string',
            sendActiveSms: 'boolean',
            seniorMode: 'boolean',
            telephone: 'string',
            title: 'string',
            userid: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveRequest = AddCollegeContactExclusiveRequest;
class AddCollegeContactExclusiveResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: AddCollegeContactExclusiveResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveResponseBody = AddCollegeContactExclusiveResponseBody;
class AddCollegeContactExclusiveResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCollegeContactExclusiveResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveResponse = AddCollegeContactExclusiveResponse;
class AddCollegeContactUserHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserHeaders = AddCollegeContactUserHeaders;
class AddCollegeContactUserRequest extends $tea.Model {
    static names() {
        return {
            deptIdList: 'deptIdList',
            deptOrderList: 'deptOrderList',
            deptPositionSet: 'deptPositionSet',
            deptTitleList: 'deptTitleList',
            email: 'email',
            empType: 'empType',
            extension: 'extension',
            hideMobile: 'hideMobile',
            hiredDate: 'hiredDate',
            jobNumber: 'jobNumber',
            loginEmail: 'loginEmail',
            mainDeptId: 'mainDeptId',
            managerUserid: 'managerUserid',
            mobile: 'mobile',
            name: 'name',
            orgEmail: 'orgEmail',
            orgEmailType: 'orgEmailType',
            remark: 'remark',
            sendActiveSms: 'sendActiveSms',
            seniorMode: 'seniorMode',
            telephone: 'telephone',
            title: 'title',
            userid: 'userid',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            deptOrderList: { 'type': 'array', 'itemType': AddCollegeContactUserRequestDeptOrderList },
            deptPositionSet: { 'type': 'array', 'itemType': AddCollegeContactUserRequestDeptPositionSet },
            deptTitleList: { 'type': 'array', 'itemType': AddCollegeContactUserRequestDeptTitleList },
            email: 'string',
            empType: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            hideMobile: 'boolean',
            hiredDate: 'number',
            jobNumber: 'string',
            loginEmail: 'string',
            mainDeptId: 'number',
            managerUserid: 'string',
            mobile: 'string',
            name: 'string',
            orgEmail: 'string',
            orgEmailType: 'string',
            remark: 'string',
            sendActiveSms: 'boolean',
            seniorMode: 'boolean',
            telephone: 'string',
            title: 'string',
            userid: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserRequest = AddCollegeContactUserRequest;
class AddCollegeContactUserResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: AddCollegeContactUserResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserResponseBody = AddCollegeContactUserResponseBody;
class AddCollegeContactUserResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCollegeContactUserResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserResponse = AddCollegeContactUserResponse;
class AddCompetitionRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCompetitionRecordHeaders = AddCompetitionRecordHeaders;
class AddCompetitionRecordRequest extends $tea.Model {
    static names() {
        return {
            competitionCode: 'competitionCode',
            groupTemplateCode: 'groupTemplateCode',
            joinGroup: 'joinGroup',
            participantName: 'participantName',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            competitionCode: 'string',
            groupTemplateCode: 'string',
            joinGroup: 'boolean',
            participantName: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCompetitionRecordRequest = AddCompetitionRecordRequest;
class AddCompetitionRecordResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCompetitionRecordResponseBody = AddCompetitionRecordResponseBody;
class AddCompetitionRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCompetitionRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCompetitionRecordResponse = AddCompetitionRecordResponse;
class AddDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddDeviceHeaders = AddDeviceHeaders;
class AddDeviceRequest extends $tea.Model {
    static names() {
        return {
            merchantId: 'merchantId',
            model: 'model',
            name: 'name',
            scene: 'scene',
            sn: 'sn',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            merchantId: 'string',
            model: 'string',
            name: 'string',
            scene: 'number',
            sn: 'string',
            status: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddDeviceRequest = AddDeviceRequest;
class AddDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            merchantId: 'merchantId',
            sn: 'sn',
            status: 'status',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'number',
            merchantId: 'string',
            sn: 'string',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddDeviceResponseBody = AddDeviceResponseBody;
class AddDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddDeviceResponse = AddDeviceResponse;
class AddSchoolConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSchoolConfigHeaders = AddSchoolConfigHeaders;
class AddSchoolConfigRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
            operatorName: 'operatorName',
            temperatureUpLimit: 'temperatureUpLimit',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            operatorName: 'string',
            temperatureUpLimit: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSchoolConfigRequest = AddSchoolConfigRequest;
class AddSchoolConfigResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSchoolConfigResponseBody = AddSchoolConfigResponseBody;
class AddSchoolConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddSchoolConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddSchoolConfigResponse = AddSchoolConfigResponse;
class AdjustCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustCourseHeaders = AdjustCourseHeaders;
class AdjustCourseRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            className: 'className',
            classRoomId: 'classRoomId',
            classRoomName: 'classRoomName',
            classType: 'classType',
            corpId: 'corpId',
            courseCode: 'courseCode',
            courseDate: 'courseDate',
            courseName: 'courseName',
            courseWeek: 'courseWeek',
            endTime: 'endTime',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
            memo: 'memo',
            schoolYear: 'schoolYear',
            semester: 'semester',
            startTime: 'startTime',
            status: 'status',
            teachWeek: 'teachWeek',
            timeslotName: 'timeslotName',
            timeslotNum: 'timeslotNum',
            type: 'type',
        };
    }
    static types() {
        return {
            attributes: 'string',
            className: 'string',
            classRoomId: 'string',
            classRoomName: 'string',
            classType: 'number',
            corpId: 'string',
            courseCode: 'string',
            courseDate: 'number',
            courseName: 'string',
            courseWeek: 'number',
            endTime: 'number',
            isvCode: 'string',
            isvCourseId: 'string',
            memo: 'string',
            schoolYear: 'string',
            semester: 'number',
            startTime: 'number',
            status: 'number',
            teachWeek: 'number',
            timeslotName: 'string',
            timeslotNum: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustCourseRequest = AdjustCourseRequest;
class AdjustCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustCourseResponseBody = AdjustCourseResponseBody;
class AdjustCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AdjustCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustCourseResponse = AdjustCourseResponse;
class AdjustKitHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustKitHeaders = AdjustKitHeaders;
class AdjustKitRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
            openEndTime: 'openEndTime',
            openStartTime: 'openStartTime',
            openUserId: 'openUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvProductScene: 'string',
            openEndTime: 'number',
            openStartTime: 'number',
            openUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustKitRequest = AdjustKitRequest;
class AdjustKitResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustKitResponseBody = AdjustKitResponseBody;
class AdjustKitResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AdjustKitResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AdjustKitResponse = AdjustKitResponse;
class AssignClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AssignClassHeaders = AssignClassHeaders;
class AssignClassRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            isFinish: 'isFinish',
            operator: 'operator',
            studentId: 'studentId',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            classId: 'number',
            isFinish: 'boolean',
            operator: 'string',
            studentId: 'number',
            taskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AssignClassRequest = AssignClassRequest;
class AssignClassResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AssignClassResponseBody = AssignClassResponseBody;
class AssignClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AssignClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AssignClassResponse = AssignClassResponse;
class BatchCreateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateHeaders = BatchCreateHeaders;
class BatchCreateRequest extends $tea.Model {
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            data: 'data',
            identifier: 'identifier',
            jsVersion: 'jsVersion',
            sourceType: 'sourceType',
            userid: 'userid',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            data: BatchCreateRequestData,
            identifier: 'string',
            jsVersion: 'number',
            sourceType: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateRequest = BatchCreateRequest;
class BatchCreateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: BatchCreateResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateResponseBody = BatchCreateResponseBody;
class BatchCreateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateResponse = BatchCreateResponse;
class BatchCreateCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateCourseHeaders = BatchCreateCourseHeaders;
class BatchCreateCourseRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            className: 'className',
            classType: 'classType',
            corpId: 'corpId',
            courseDetailItemList: 'courseDetailItemList',
            isvCode: 'isvCode',
            schoolYear: 'schoolYear',
            semester: 'semester',
        };
    }
    static types() {
        return {
            classId: 'string',
            className: 'string',
            classType: 'number',
            corpId: 'string',
            courseDetailItemList: { 'type': 'array', 'itemType': BatchCreateCourseRequestCourseDetailItemList },
            isvCode: 'string',
            schoolYear: 'string',
            semester: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateCourseRequest = BatchCreateCourseRequest;
class BatchCreateCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateCourseResponseBody = BatchCreateCourseResponseBody;
class BatchCreateCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateCourseResponse = BatchCreateCourseResponse;
class BatchCreateStudentClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateStudentClassHeaders = BatchCreateStudentClassHeaders;
class BatchCreateStudentClassRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            className: 'className',
            classType: 'classType',
            corpId: 'corpId',
            isvCode: 'isvCode',
            studentList: 'studentList',
        };
    }
    static types() {
        return {
            classId: 'string',
            className: 'string',
            classType: 'number',
            corpId: 'string',
            isvCode: 'string',
            studentList: { 'type': 'array', 'itemType': BatchCreateStudentClassRequestStudentList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateStudentClassRequest = BatchCreateStudentClassRequest;
class BatchCreateStudentClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateStudentClassResponseBody = BatchCreateStudentClassResponseBody;
class BatchCreateStudentClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateStudentClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateStudentClassResponse = BatchCreateStudentClassResponse;
class BatchCreateTeacherCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeacherCourseHeaders = BatchCreateTeacherCourseHeaders;
class BatchCreateTeacherCourseRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            teacherCourseDetailItemList: 'teacherCourseDetailItemList',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            teacherCourseDetailItemList: { 'type': 'array', 'itemType': BatchCreateTeacherCourseRequestTeacherCourseDetailItemList },
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeacherCourseRequest = BatchCreateTeacherCourseRequest;
class BatchCreateTeacherCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeacherCourseResponseBody = BatchCreateTeacherCourseResponseBody;
class BatchCreateTeacherCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateTeacherCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeacherCourseResponse = BatchCreateTeacherCourseResponse;
class BatchInvalidCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchInvalidCourseHeaders = BatchInvalidCourseHeaders;
class BatchInvalidCourseRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
            isvCourseIds: 'isvCourseIds',
        };
    }
    static types() {
        return {
            classId: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvCourseId: 'string',
            isvCourseIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchInvalidCourseRequest = BatchInvalidCourseRequest;
class BatchInvalidCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchInvalidCourseResponseBody = BatchInvalidCourseResponseBody;
class BatchInvalidCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchInvalidCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchInvalidCourseResponse = BatchInvalidCourseResponse;
class BatchOrgCreateHWHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWHeaders = BatchOrgCreateHWHeaders;
class BatchOrgCreateHWRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            bizCode: 'bizCode',
            courseName: 'courseName',
            hwContent: 'hwContent',
            hwDeadline: 'hwDeadline',
            hwDeadlineOpen: 'hwDeadlineOpen',
            hwMedia: 'hwMedia',
            hwPhoto: 'hwPhoto',
            hwTitle: 'hwTitle',
            hwType: 'hwType',
            hwVideo: 'hwVideo',
            identifier: 'identifier',
            openSelectItemList: 'openSelectItemList',
            scheduledRelease: 'scheduledRelease',
            scheduledTime: 'scheduledTime',
            status: 'status',
            targetRole: 'targetRole',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            bizCode: 'string',
            courseName: 'string',
            hwContent: 'string',
            hwDeadline: 'number',
            hwDeadlineOpen: 'string',
            hwMedia: 'string',
            hwPhoto: 'string',
            hwTitle: 'string',
            hwType: 'string',
            hwVideo: 'string',
            identifier: 'string',
            openSelectItemList: { 'type': 'array', 'itemType': BatchOrgCreateHWRequestOpenSelectItemList },
            scheduledRelease: 'string',
            scheduledTime: 'string',
            status: 'string',
            targetRole: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWRequest = BatchOrgCreateHWRequest;
class BatchOrgCreateHWResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: BatchOrgCreateHWResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWResponseBody = BatchOrgCreateHWResponseBody;
class BatchOrgCreateHWResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchOrgCreateHWResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWResponse = BatchOrgCreateHWResponse;
class CancelOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelOrderHeaders = CancelOrderHeaders;
class CancelOrderRequest extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelOrderRequest = CancelOrderRequest;
class CancelOrderResponseBody extends $tea.Model {
    static names() {
        return {
            needRetry: 'needRetry',
            tradeAction: 'tradeAction',
        };
    }
    static types() {
        return {
            needRetry: 'boolean',
            tradeAction: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelOrderResponseBody = CancelOrderResponseBody;
class CancelOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CancelOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelOrderResponse = CancelOrderResponse;
class CancelSnsOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelSnsOrderHeaders = CancelSnsOrderHeaders;
class CancelSnsOrderRequest extends $tea.Model {
    static names() {
        return {
            alipayAppId: 'alipayAppId',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            signature: 'signature',
            timestamp: 'timestamp',
        };
    }
    static types() {
        return {
            alipayAppId: 'string',
            merchantId: 'string',
            orderNo: 'string',
            signature: 'string',
            timestamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelSnsOrderRequest = CancelSnsOrderRequest;
class CancelSnsOrderResponseBody extends $tea.Model {
    static names() {
        return {
            alipayAppId: 'alipayAppId',
            merchantId: 'merchantId',
            merchantOrderNo: 'merchantOrderNo',
            orderNo: 'orderNo',
            payStatus: 'payStatus',
            refundStatus: 'refundStatus',
            totalAmount: 'totalAmount',
        };
    }
    static types() {
        return {
            alipayAppId: 'string',
            merchantId: 'string',
            merchantOrderNo: 'string',
            orderNo: 'string',
            payStatus: 'number',
            refundStatus: 'number',
            totalAmount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelSnsOrderResponseBody = CancelSnsOrderResponseBody;
class CancelSnsOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CancelSnsOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelSnsOrderResponse = CancelSnsOrderResponse;
class CancelUserOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelUserOrderHeaders = CancelUserOrderHeaders;
class CancelUserOrderRequest extends $tea.Model {
    static names() {
        return {
            alipayAppId: 'alipayAppId',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            signature: 'signature',
            timestamp: 'timestamp',
        };
    }
    static types() {
        return {
            alipayAppId: 'string',
            merchantId: 'string',
            orderNo: 'string',
            signature: 'string',
            timestamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelUserOrderRequest = CancelUserOrderRequest;
class CancelUserOrderResponseBody extends $tea.Model {
    static names() {
        return {
            alipayAppId: 'alipayAppId',
            merchantId: 'merchantId',
            merchantOrderNo: 'merchantOrderNo',
            orderNo: 'orderNo',
            payStatus: 'payStatus',
            refundStatus: 'refundStatus',
            totalAmount: 'totalAmount',
        };
    }
    static types() {
        return {
            alipayAppId: 'string',
            merchantId: 'string',
            merchantOrderNo: 'string',
            orderNo: 'string',
            payStatus: 'number',
            refundStatus: 'number',
            totalAmount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelUserOrderResponseBody = CancelUserOrderResponseBody;
class CancelUserOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CancelUserOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelUserOrderResponse = CancelUserOrderResponse;
class CardBatchQueryCardsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardBatchQueryCardsHeaders = CardBatchQueryCardsHeaders;
class CardBatchQueryCardsRequest extends $tea.Model {
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            cardIds: 'cardIds',
            sourceType: 'sourceType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            cardIds: { 'type': 'array', 'itemType': 'number' },
            sourceType: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardBatchQueryCardsRequest = CardBatchQueryCardsRequest;
class CardBatchQueryCardsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CardBatchQueryCardsResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardBatchQueryCardsResponseBody = CardBatchQueryCardsResponseBody;
class CardBatchQueryCardsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardBatchQueryCardsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardBatchQueryCardsResponse = CardBatchQueryCardsResponse;
class CardDeleteCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardDeleteCardHeaders = CardDeleteCardHeaders;
class CardDeleteCardRequest extends $tea.Model {
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            cardBizId: 'cardBizId',
            cardId: 'cardId',
            sourceType: 'sourceType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            cardBizId: 'string',
            cardId: 'number',
            sourceType: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardDeleteCardRequest = CardDeleteCardRequest;
class CardDeleteCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardDeleteCardResponseBody = CardDeleteCardResponseBody;
class CardDeleteCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardDeleteCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardDeleteCardResponse = CardDeleteCardResponse;
class CardEndCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardEndCardHeaders = CardEndCardHeaders;
class CardEndCardRequest extends $tea.Model {
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            cardBizId: 'cardBizId',
            cardId: 'cardId',
            sourceType: 'sourceType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            cardBizId: 'string',
            cardId: 'number',
            sourceType: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardEndCardRequest = CardEndCardRequest;
class CardEndCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardEndCardResponseBody = CardEndCardResponseBody;
class CardEndCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardEndCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardEndCardResponse = CardEndCardResponse;
class CardGetCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardHeaders = CardGetCardHeaders;
class CardGetCardRequest extends $tea.Model {
    static names() {
        return {
            cardId: 'cardId',
            sourceType: 'sourceType',
        };
    }
    static types() {
        return {
            cardId: 'number',
            sourceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardRequest = CardGetCardRequest;
class CardGetCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CardGetCardResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardResponseBody = CardGetCardResponseBody;
class CardGetCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardGetCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardResponse = CardGetCardResponse;
class CardGetCardFinishProgressHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressHeaders = CardGetCardFinishProgressHeaders;
class CardGetCardFinishProgressRequest extends $tea.Model {
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            cardBizId: 'cardBizId',
            cardId: 'cardId',
            sourceType: 'sourceType',
            studentId: 'studentId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            cardBizId: 'string',
            cardId: 'number',
            sourceType: 'string',
            studentId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressRequest = CardGetCardFinishProgressRequest;
class CardGetCardFinishProgressResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CardGetCardFinishProgressResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressResponseBody = CardGetCardFinishProgressResponseBody;
class CardGetCardFinishProgressResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardGetCardFinishProgressResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressResponse = CardGetCardFinishProgressResponse;
class CardQueryCardFeedsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsHeaders = CardQueryCardFeedsHeaders;
class CardQueryCardFeedsRequest extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            cardBizCode: 'cardBizCode',
            cardBizId: 'cardBizId',
            cardId: 'cardId',
            count: 'count',
            cursor: 'cursor',
            feedType: 'feedType',
            needFinishProcess: 'needFinishProcess',
            sourceType: 'sourceType',
            studentId: 'studentId',
            subBizId: 'subBizId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizType: 'number',
            cardBizCode: 'string',
            cardBizId: 'string',
            cardId: 'number',
            count: 'number',
            cursor: 'number',
            feedType: 'number',
            needFinishProcess: 'boolean',
            sourceType: 'string',
            studentId: 'string',
            subBizId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsRequest = CardQueryCardFeedsRequest;
class CardQueryCardFeedsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CardQueryCardFeedsResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsResponseBody = CardQueryCardFeedsResponseBody;
class CardQueryCardFeedsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardQueryCardFeedsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsResponse = CardQueryCardFeedsResponse;
class CheckRestrictionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckRestrictionHeaders = CheckRestrictionHeaders;
class CheckRestrictionRequest extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            faceId: 'faceId',
            scene: 'scene',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            faceId: 'string',
            scene: 'number',
            sn: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckRestrictionRequest = CheckRestrictionRequest;
class CheckRestrictionResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckRestrictionResponseBody = CheckRestrictionResponseBody;
class CheckRestrictionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckRestrictionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckRestrictionResponse = CheckRestrictionResponse;
class ConsumePointHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ConsumePointHeaders = ConsumePointHeaders;
class ConsumePointRequest extends $tea.Model {
    static names() {
        return {
            amount: 'amount',
            bizId: 'bizId',
            description: 'description',
            productCode: 'productCode',
        };
    }
    static types() {
        return {
            amount: 'number',
            bizId: 'string',
            description: 'string',
            productCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ConsumePointRequest = ConsumePointRequest;
class ConsumePointResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ConsumePointResponseBody = ConsumePointResponseBody;
class ConsumePointResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ConsumePointResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ConsumePointResponse = ConsumePointResponse;
class CourseSchedulingComplimentNoticeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CourseSchedulingComplimentNoticeHeaders = CourseSchedulingComplimentNoticeHeaders;
class CourseSchedulingComplimentNoticeRequest extends $tea.Model {
    static names() {
        return {
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CourseSchedulingComplimentNoticeRequest = CourseSchedulingComplimentNoticeRequest;
class CourseSchedulingComplimentNoticeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CourseSchedulingComplimentNoticeResponseBody = CourseSchedulingComplimentNoticeResponseBody;
class CourseSchedulingComplimentNoticeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CourseSchedulingComplimentNoticeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CourseSchedulingComplimentNoticeResponse = CourseSchedulingComplimentNoticeResponse;
class CreateAppOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppOrderHeaders = CreateAppOrderHeaders;
class CreateAppOrderRequest extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayAppId: 'alipayAppId',
            bizCode: 'bizCode',
            detailList: 'detailList',
            labelAmount: 'labelAmount',
            merchantId: 'merchantId',
            merchantOrderNo: 'merchantOrderNo',
            outerUserId: 'outerUserId',
            signature: 'signature',
            subject: 'subject',
            timestamp: 'timestamp',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayAppId: 'string',
            bizCode: 'number',
            detailList: { 'type': 'array', 'itemType': CreateAppOrderRequestDetailList },
            labelAmount: 'number',
            merchantId: 'string',
            merchantOrderNo: 'string',
            outerUserId: 'string',
            signature: 'string',
            subject: 'string',
            timestamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppOrderRequest = CreateAppOrderRequest;
class CreateAppOrderResponseBody extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayAppId: 'alipayAppId',
            body: 'body',
            merchantId: 'merchantId',
            merchantOrderNo: 'merchantOrderNo',
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayAppId: 'string',
            body: 'string',
            merchantId: 'string',
            merchantOrderNo: 'string',
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppOrderResponseBody = CreateAppOrderResponseBody;
class CreateAppOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAppOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppOrderResponse = CreateAppOrderResponse;
class CreateCollegeContactDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptHeaders = CreateCollegeContactDeptHeaders;
class CreateCollegeContactDeptRequest extends $tea.Model {
    static names() {
        return {
            autoApproveApply: 'autoApproveApply',
            brief: 'brief',
            code: 'code',
            createDeptGroup: 'createDeptGroup',
            deptCode: 'deptCode',
            deptPermits: 'deptPermits',
            deptType: 'deptType',
            empApplyJoinDept: 'empApplyJoinDept',
            extension: 'extension',
            hideDept: 'hideDept',
            hideSceneConfig: 'hideSceneConfig',
            name: 'name',
            order: 'order',
            outerDept: 'outerDept',
            outerDeptOnlySelf: 'outerDeptOnlySelf',
            outerPermitDepts: 'outerPermitDepts',
            outerPermitUsers: 'outerPermitUsers',
            outerSceneConfig: 'outerSceneConfig',
            parentId: 'parentId',
            sourceIdentifier: 'sourceIdentifier',
            struId: 'struId',
            telephone: 'telephone',
            userPermits: 'userPermits',
        };
    }
    static types() {
        return {
            autoApproveApply: 'boolean',
            brief: 'string',
            code: 'string',
            createDeptGroup: 'boolean',
            deptCode: 'string',
            deptPermits: { 'type': 'array', 'itemType': 'number' },
            deptType: 'string',
            empApplyJoinDept: 'boolean',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            hideDept: 'boolean',
            hideSceneConfig: CreateCollegeContactDeptRequestHideSceneConfig,
            name: 'string',
            order: 'number',
            outerDept: 'boolean',
            outerDeptOnlySelf: 'boolean',
            outerPermitDepts: { 'type': 'array', 'itemType': 'number' },
            outerPermitUsers: { 'type': 'array', 'itemType': 'string' },
            outerSceneConfig: CreateCollegeContactDeptRequestOuterSceneConfig,
            parentId: 'number',
            sourceIdentifier: 'string',
            struId: 'number',
            telephone: 'string',
            userPermits: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptRequest = CreateCollegeContactDeptRequest;
class CreateCollegeContactDeptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateCollegeContactDeptResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptResponseBody = CreateCollegeContactDeptResponseBody;
class CreateCollegeContactDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCollegeContactDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptResponse = CreateCollegeContactDeptResponse;
class CreateCollegeContactSceneStruHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactSceneStruHeaders = CreateCollegeContactSceneStruHeaders;
class CreateCollegeContactSceneStruRequest extends $tea.Model {
    static names() {
        return {
            hasStruFixedDept: 'hasStruFixedDept',
            order: 'order',
            sourceIdentifier: 'sourceIdentifier',
            struBrief: 'struBrief',
            struName: 'struName',
            struType: 'struType',
        };
    }
    static types() {
        return {
            hasStruFixedDept: 'boolean',
            order: 'number',
            sourceIdentifier: 'string',
            struBrief: 'string',
            struName: 'string',
            struType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactSceneStruRequest = CreateCollegeContactSceneStruRequest;
class CreateCollegeContactSceneStruResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateCollegeContactSceneStruResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactSceneStruResponseBody = CreateCollegeContactSceneStruResponseBody;
class CreateCollegeContactSceneStruResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCollegeContactSceneStruResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactSceneStruResponse = CreateCollegeContactSceneStruResponse;
class CreateCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCourseHeaders = CreateCourseHeaders;
class CreateCourseRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classId: 'classId',
            className: 'className',
            classRoomId: 'classRoomId',
            classRoomName: 'classRoomName',
            classType: 'classType',
            corpId: 'corpId',
            courseCode: 'courseCode',
            courseDate: 'courseDate',
            courseName: 'courseName',
            courseWeek: 'courseWeek',
            endTime: 'endTime',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
            memo: 'memo',
            schoolYear: 'schoolYear',
            semester: 'semester',
            startTime: 'startTime',
            status: 'status',
            teachWeek: 'teachWeek',
            teacherList: 'teacherList',
            timeslotName: 'timeslotName',
            timeslotNum: 'timeslotNum',
            type: 'type',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classId: 'string',
            className: 'string',
            classRoomId: 'string',
            classRoomName: 'string',
            classType: 'number',
            corpId: 'string',
            courseCode: 'string',
            courseDate: 'number',
            courseName: 'string',
            courseWeek: 'number',
            endTime: 'number',
            isvCode: 'string',
            isvCourseId: 'string',
            memo: 'string',
            schoolYear: 'string',
            semester: 'number',
            startTime: 'number',
            status: 'number',
            teachWeek: 'number',
            teacherList: { 'type': 'array', 'itemType': CreateCourseRequestTeacherList },
            timeslotName: 'string',
            timeslotNum: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCourseRequest = CreateCourseRequest;
class CreateCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCourseResponseBody = CreateCourseResponseBody;
class CreateCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCourseResponse = CreateCourseResponse;
class CreateCustomClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomClassHeaders = CreateCustomClassHeaders;
class CreateCustomClassRequest extends $tea.Model {
    static names() {
        return {
            customClass: 'customClass',
            operator: 'operator',
            superId: 'superId',
        };
    }
    static types() {
        return {
            customClass: CreateCustomClassRequestCustomClass,
            operator: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomClassRequest = CreateCustomClassRequest;
class CreateCustomClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateCustomClassResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomClassResponseBody = CreateCustomClassResponseBody;
class CreateCustomClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCustomClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomClassResponse = CreateCustomClassResponse;
class CreateCustomDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomDeptHeaders = CreateCustomDeptHeaders;
class CreateCustomDeptRequest extends $tea.Model {
    static names() {
        return {
            customDept: 'customDept',
            operator: 'operator',
            superId: 'superId',
        };
    }
    static types() {
        return {
            customDept: CreateCustomDeptRequestCustomDept,
            operator: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomDeptRequest = CreateCustomDeptRequest;
class CreateCustomDeptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateCustomDeptResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomDeptResponseBody = CreateCustomDeptResponseBody;
class CreateCustomDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCustomDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomDeptResponse = CreateCustomDeptResponse;
class CreateEduAssetSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateEduAssetSpaceHeaders = CreateEduAssetSpaceHeaders;
class CreateEduAssetSpaceRequest extends $tea.Model {
    static names() {
        return {
            bizCode: 'bizCode',
            spaceDesc: 'spaceDesc',
            spaceIcon: 'spaceIcon',
            spaceName: 'spaceName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            spaceDesc: 'string',
            spaceIcon: 'string',
            spaceName: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateEduAssetSpaceRequest = CreateEduAssetSpaceRequest;
class CreateEduAssetSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            createTimeMillis: 'createTimeMillis',
            modifyTimeMillis: 'modifyTimeMillis',
            permissionMode: 'permissionMode',
            quota: 'quota',
            spaceId: 'spaceId',
            spaceName: 'spaceName',
            spaceType: 'spaceType',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createTimeMillis: 'number',
            modifyTimeMillis: 'number',
            permissionMode: 'string',
            quota: 'number',
            spaceId: 'string',
            spaceName: 'string',
            spaceType: 'string',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateEduAssetSpaceResponseBody = CreateEduAssetSpaceResponseBody;
class CreateEduAssetSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateEduAssetSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateEduAssetSpaceResponse = CreateEduAssetSpaceResponse;
class CreateFulfilRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateFulfilRecordHeaders = CreateFulfilRecordHeaders;
class CreateFulfilRecordRequest extends $tea.Model {
    static names() {
        return {
            bizTime: 'bizTime',
            extInfo: 'extInfo',
            faceId: 'faceId',
            scene: 'scene',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizTime: 'number',
            extInfo: 'string',
            faceId: 'string',
            scene: 'number',
            sn: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateFulfilRecordRequest = CreateFulfilRecordRequest;
class CreateFulfilRecordResponseBody extends $tea.Model {
    static names() {
        return {
            successInfo: 'successInfo',
        };
    }
    static types() {
        return {
            successInfo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateFulfilRecordResponseBody = CreateFulfilRecordResponseBody;
class CreateFulfilRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateFulfilRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateFulfilRecordResponse = CreateFulfilRecordResponse;
class CreateInviteUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateInviteUrlHeaders = CreateInviteUrlHeaders;
class CreateInviteUrlRequest extends $tea.Model {
    static names() {
        return {
            authCode: 'authCode',
            targetCorpId: 'targetCorpId',
            targetOperator: 'targetOperator',
        };
    }
    static types() {
        return {
            authCode: 'string',
            targetCorpId: 'string',
            targetOperator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateInviteUrlRequest = CreateInviteUrlRequest;
class CreateInviteUrlResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateInviteUrlResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateInviteUrlResponseBody = CreateInviteUrlResponseBody;
class CreateInviteUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateInviteUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateInviteUrlResponse = CreateInviteUrlResponse;
class CreateItemHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateItemHeaders = CreateItemHeaders;
class CreateItemRequest extends $tea.Model {
    static names() {
        return {
            description: 'description',
            effectType: 'effectType',
            endTime: 'endTime',
            merchantId: 'merchantId',
            name: 'name',
            optUser: 'optUser',
            periodType: 'periodType',
            price: 'price',
            scene: 'scene',
            startTime: 'startTime',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            description: 'string',
            effectType: 'number',
            endTime: 'number',
            merchantId: 'string',
            name: 'string',
            optUser: 'string',
            periodType: 'number',
            price: 'number',
            scene: 'number',
            startTime: 'number',
            status: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateItemRequest = CreateItemRequest;
class CreateItemResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            merchantId: 'merchantId',
            status: 'status',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'number',
            merchantId: 'string',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateItemResponseBody = CreateItemResponseBody;
class CreateItemResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateItemResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateItemResponse = CreateItemResponse;
class CreateOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderHeaders = CreateOrderHeaders;
class CreateOrderRequest extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            createTime: 'createTime',
            detailList: 'detailList',
            faceId: 'faceId',
            ftoken: 'ftoken',
            signature: 'signature',
            sn: 'sn',
            terminalParams: 'terminalParams',
            timestamp: 'timestamp',
            totalAmount: 'totalAmount',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            createTime: 'number',
            detailList: { 'type': 'array', 'itemType': CreateOrderRequestDetailList },
            faceId: 'string',
            ftoken: 'string',
            signature: 'string',
            sn: 'string',
            terminalParams: 'string',
            timestamp: 'number',
            totalAmount: 'number',
            userId: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderRequest = CreateOrderRequest;
class CreateOrderResponseBody extends $tea.Model {
    static names() {
        return {
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderResponseBody = CreateOrderResponseBody;
class CreateOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderResponse = CreateOrderResponse;
class CreateOrderFlowHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderFlowHeaders = CreateOrderFlowHeaders;
class CreateOrderFlowRequest extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayUid: 'alipayUid',
            createTime: 'createTime',
            detailList: 'detailList',
            faceId: 'faceId',
            guardianUserId: 'guardianUserId',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            totalAmount: 'totalAmount',
            userId: 'userId',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayUid: 'string',
            createTime: 'number',
            detailList: { 'type': 'array', 'itemType': CreateOrderFlowRequestDetailList },
            faceId: 'string',
            guardianUserId: 'string',
            merchantId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            totalAmount: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderFlowRequest = CreateOrderFlowRequest;
class CreateOrderFlowResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderFlowResponseBody = CreateOrderFlowResponseBody;
class CreateOrderFlowResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrderFlowResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderFlowResponse = CreateOrderFlowResponse;
class CreatePhysicalClassroomHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreatePhysicalClassroomHeaders = CreatePhysicalClassroomHeaders;
class CreatePhysicalClassroomRequest extends $tea.Model {
    static names() {
        return {
            classroomBuilding: 'classroomBuilding',
            classroomCampus: 'classroomCampus',
            classroomFloor: 'classroomFloor',
            classroomName: 'classroomName',
            classroomNumber: 'classroomNumber',
            directBroadcast: 'directBroadcast',
            ext: 'ext',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomBuilding: 'string',
            classroomCampus: 'string',
            classroomFloor: 'string',
            classroomName: 'string',
            classroomNumber: 'string',
            directBroadcast: 'string',
            ext: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreatePhysicalClassroomRequest = CreatePhysicalClassroomRequest;
class CreatePhysicalClassroomResponseBody extends $tea.Model {
    static names() {
        return {
            classroomId: 'classroomId',
        };
    }
    static types() {
        return {
            classroomId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreatePhysicalClassroomResponseBody = CreatePhysicalClassroomResponseBody;
class CreatePhysicalClassroomResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreatePhysicalClassroomResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreatePhysicalClassroomResponse = CreatePhysicalClassroomResponse;
class CreateRefundFlowHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRefundFlowHeaders = CreateRefundFlowHeaders;
class CreateRefundFlowRequest extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            operatorId: 'operatorId',
            operatorName: 'operatorName',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            operatorId: 'string',
            operatorName: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRefundFlowRequest = CreateRefundFlowRequest;
class CreateRefundFlowResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRefundFlowResponseBody = CreateRefundFlowResponseBody;
class CreateRefundFlowResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateRefundFlowResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRefundFlowResponse = CreateRefundFlowResponse;
class CreateRemoteClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseHeaders = CreateRemoteClassCourseHeaders;
class CreateRemoteClassCourseRequest extends $tea.Model {
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            authCode: 'authCode',
            courseName: 'courseName',
            endTime: 'endTime',
            startTime: 'startTime',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': CreateRemoteClassCourseRequestAttendParticipants },
            authCode: 'string',
            courseName: 'string',
            endTime: 'number',
            startTime: 'number',
            teachingParticipant: CreateRemoteClassCourseRequestTeachingParticipant,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseRequest = CreateRemoteClassCourseRequest;
class CreateRemoteClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateRemoteClassCourseResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseResponseBody = CreateRemoteClassCourseResponseBody;
class CreateRemoteClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateRemoteClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseResponse = CreateRemoteClassCourseResponse;
class CreateSectionConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigHeaders = CreateSectionConfigHeaders;
class CreateSectionConfigRequest extends $tea.Model {
    static names() {
        return {
            ext: 'ext',
            sectionConfigs: 'sectionConfigs',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            ext: 'string',
            sectionConfigs: { 'type': 'array', 'itemType': CreateSectionConfigRequestSectionConfigs },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequest = CreateSectionConfigRequest;
class CreateSectionConfigResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigResponseBody = CreateSectionConfigResponseBody;
class CreateSectionConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSectionConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigResponse = CreateSectionConfigResponse;
class CreateSnsAppOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSnsAppOrderHeaders = CreateSnsAppOrderHeaders;
class CreateSnsAppOrderRequest extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayAppId: 'alipayAppId',
            bizCode: 'bizCode',
            detailList: 'detailList',
            labelAmount: 'labelAmount',
            merchantId: 'merchantId',
            merchantOrderNo: 'merchantOrderNo',
            signature: 'signature',
            subject: 'subject',
            timestamp: 'timestamp',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayAppId: 'string',
            bizCode: 'number',
            detailList: { 'type': 'array', 'itemType': CreateSnsAppOrderRequestDetailList },
            labelAmount: 'number',
            merchantId: 'string',
            merchantOrderNo: 'string',
            signature: 'string',
            subject: 'string',
            timestamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSnsAppOrderRequest = CreateSnsAppOrderRequest;
class CreateSnsAppOrderResponseBody extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayAppId: 'alipayAppId',
            body: 'body',
            merchantId: 'merchantId',
            merchantOrderNo: 'merchantOrderNo',
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayAppId: 'string',
            body: 'string',
            merchantId: 'string',
            merchantOrderNo: 'string',
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSnsAppOrderResponseBody = CreateSnsAppOrderResponseBody;
class CreateSnsAppOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSnsAppOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSnsAppOrderResponse = CreateSnsAppOrderResponse;
class CreateStsTokenHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStsTokenHeaders = CreateStsTokenHeaders;
class CreateStsTokenRequest extends $tea.Model {
    static names() {
        return {
            deviceSn: 'deviceSn',
            stsType: 'stsType',
        };
    }
    static types() {
        return {
            deviceSn: 'string',
            stsType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStsTokenRequest = CreateStsTokenRequest;
class CreateStsTokenResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            expiration: 'expiration',
            extInfo: 'extInfo',
            securityToken: 'securityToken',
            status: 'status',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            expiration: 'string',
            extInfo: 'string',
            securityToken: 'string',
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStsTokenResponseBody = CreateStsTokenResponseBody;
class CreateStsTokenResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateStsTokenResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStsTokenResponse = CreateStsTokenResponse;
class CreateStudentClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStudentClassHeaders = CreateStudentClassHeaders;
class CreateStudentClassRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classId: 'classId',
            className: 'className',
            classType: 'classType',
            corpId: 'corpId',
            isvCode: 'isvCode',
            studentName: 'studentName',
            studentUserId: 'studentUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classId: 'string',
            className: 'string',
            classType: 'number',
            corpId: 'string',
            isvCode: 'string',
            studentName: 'string',
            studentUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStudentClassRequest = CreateStudentClassRequest;
class CreateStudentClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStudentClassResponseBody = CreateStudentClassResponseBody;
class CreateStudentClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateStudentClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateStudentClassResponse = CreateStudentClassResponse;
class CreateTeacherCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeacherCourseHeaders = CreateTeacherCourseHeaders;
class CreateTeacherCourseRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvCourseId: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeacherCourseRequest = CreateTeacherCourseRequest;
class CreateTeacherCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeacherCourseResponseBody = CreateTeacherCourseResponseBody;
class CreateTeacherCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTeacherCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeacherCourseResponse = CreateTeacherCourseResponse;
class CreateTimerCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTimerCardHeaders = CreateTimerCardHeaders;
class CreateTimerCardRequest extends $tea.Model {
    static names() {
        return {
            actionTime: 'actionTime',
            bizData: 'bizData',
            bizType: 'bizType',
            corpId: 'corpId',
            identifier: 'identifier',
            isvCode: 'isvCode',
            memo: 'memo',
        };
    }
    static types() {
        return {
            actionTime: 'number',
            bizData: 'string',
            bizType: 'string',
            corpId: 'string',
            identifier: 'string',
            isvCode: 'string',
            memo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTimerCardRequest = CreateTimerCardRequest;
class CreateTimerCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            sucess: 'sucess',
        };
    }
    static types() {
        return {
            result: 'boolean',
            sucess: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTimerCardResponseBody = CreateTimerCardResponseBody;
class CreateTimerCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTimerCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTimerCardResponse = CreateTimerCardResponse;
class CreateTokenHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTokenHeaders = CreateTokenHeaders;
class CreateTokenRequest extends $tea.Model {
    static names() {
        return {
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTokenRequest = CreateTokenRequest;
class CreateTokenResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            expiration: 'expiration',
            extInfo: 'extInfo',
            securityToken: 'securityToken',
            status: 'status',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            expiration: 'string',
            extInfo: 'string',
            securityToken: 'string',
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTokenResponseBody = CreateTokenResponseBody;
class CreateTokenResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTokenResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTokenResponse = CreateTokenResponse;
class CreateTransferRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTransferRecordHeaders = CreateTransferRecordHeaders;
class CreateTransferRecordRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classId: 'classId',
            className: 'className',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvRecordId: 'isvRecordId',
            srcCourseCode: 'srcCourseCode',
            srcCourseDate: 'srcCourseDate',
            srcCourseName: 'srcCourseName',
            srcIsvCourseId: 'srcIsvCourseId',
            srcTimeslotName: 'srcTimeslotName',
            srcTimeslotNum: 'srcTimeslotNum',
            tarCourseCode: 'tarCourseCode',
            tarCourseDate: 'tarCourseDate',
            tarCourseName: 'tarCourseName',
            tarIsvCourseId: 'tarIsvCourseId',
            tarTimeslotName: 'tarTimeslotName',
            tarTimeslotNum: 'tarTimeslotNum',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classId: 'string',
            className: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvRecordId: 'string',
            srcCourseCode: 'string',
            srcCourseDate: 'number',
            srcCourseName: 'string',
            srcIsvCourseId: 'string',
            srcTimeslotName: 'string',
            srcTimeslotNum: 'number',
            tarCourseCode: 'string',
            tarCourseDate: 'number',
            tarCourseName: 'string',
            tarIsvCourseId: 'string',
            tarTimeslotName: 'string',
            tarTimeslotNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTransferRecordRequest = CreateTransferRecordRequest;
class CreateTransferRecordResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTransferRecordResponseBody = CreateTransferRecordResponseBody;
class CreateTransferRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTransferRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTransferRecordResponse = CreateTransferRecordResponse;
class CreateUniversityCourseGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupHeaders = CreateUniversityCourseGroupHeaders;
class CreateUniversityCourseGroupRequest extends $tea.Model {
    static names() {
        return {
            courseGroupIntroduce: 'courseGroupIntroduce',
            courseGroupName: 'courseGroupName',
            courserGroupItemModels: 'courserGroupItemModels',
            ext: 'ext',
            isvCourseGroupCode: 'isvCourseGroupCode',
            periodCode: 'periodCode',
            schoolYear: 'schoolYear',
            semester: 'semester',
            subjectName: 'subjectName',
            teacherInfos: 'teacherInfos',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupIntroduce: 'string',
            courseGroupName: 'string',
            courserGroupItemModels: { 'type': 'array', 'itemType': CreateUniversityCourseGroupRequestCourserGroupItemModels },
            ext: 'string',
            isvCourseGroupCode: 'string',
            periodCode: 'string',
            schoolYear: 'string',
            semester: 'number',
            subjectName: 'string',
            teacherInfos: { 'type': 'array', 'itemType': CreateUniversityCourseGroupRequestTeacherInfos },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupRequest = CreateUniversityCourseGroupRequest;
class CreateUniversityCourseGroupResponseBody extends $tea.Model {
    static names() {
        return {
            courseGroupInfo: 'courseGroupInfo',
        };
    }
    static types() {
        return {
            courseGroupInfo: CreateUniversityCourseGroupResponseBodyCourseGroupInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupResponseBody = CreateUniversityCourseGroupResponseBody;
class CreateUniversityCourseGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateUniversityCourseGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupResponse = CreateUniversityCourseGroupResponse;
class CreateUniversityStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityStudentHeaders = CreateUniversityStudentHeaders;
class CreateUniversityStudentRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            gender: 'gender',
            identityNumber: 'identityNumber',
            mobile: 'mobile',
            name: 'name',
            studentNumber: 'studentNumber',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            gender: 'string',
            identityNumber: 'string',
            mobile: 'string',
            name: 'string',
            studentNumber: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityStudentRequest = CreateUniversityStudentRequest;
class CreateUniversityStudentResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityStudentResponseBody = CreateUniversityStudentResponseBody;
class CreateUniversityStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateUniversityStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityStudentResponse = CreateUniversityStudentResponse;
class CreateUniversityTeacherHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityTeacherHeaders = CreateUniversityTeacherHeaders;
class CreateUniversityTeacherRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            opUserId: 'opUserId',
            role: 'role',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            opUserId: 'string',
            role: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityTeacherRequest = CreateUniversityTeacherRequest;
class CreateUniversityTeacherResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityTeacherResponseBody = CreateUniversityTeacherResponseBody;
class CreateUniversityTeacherResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateUniversityTeacherResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityTeacherResponse = CreateUniversityTeacherResponse;
class DeactivateDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeactivateDeviceHeaders = DeactivateDeviceHeaders;
class DeactivateDeviceRequest extends $tea.Model {
    static names() {
        return {
            model: 'model',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            model: 'string',
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeactivateDeviceRequest = DeactivateDeviceRequest;
class DeactivateDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            activateTimes: 'activateTimes',
        };
    }
    static types() {
        return {
            activateTimes: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeactivateDeviceResponseBody = DeactivateDeviceResponseBody;
class DeactivateDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeactivateDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeactivateDeviceResponse = DeactivateDeviceResponse;
class DeductPointHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeductPointHeaders = DeductPointHeaders;
class DeductPointRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            deductDesc: 'deductDesc',
            deductDetailUrl: 'deductDetailUrl',
            deductNum: 'deductNum',
            pointType: 'pointType',
        };
    }
    static types() {
        return {
            bizId: 'string',
            deductDesc: 'string',
            deductDetailUrl: 'string',
            deductNum: 'number',
            pointType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeductPointRequest = DeductPointRequest;
class DeductPointResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeductPointResponseBody = DeductPointResponseBody;
class DeductPointResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeductPointResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeductPointResponse = DeductPointResponse;
class DeleteCollegeAlumniDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniDeptHeaders = DeleteCollegeAlumniDeptHeaders;
class DeleteCollegeAlumniDeptRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            operator: 'operator',
        };
    }
    static types() {
        return {
            deptId: 'number',
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniDeptRequest = DeleteCollegeAlumniDeptRequest;
class DeleteCollegeAlumniDeptResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniDeptResponseBody = DeleteCollegeAlumniDeptResponseBody;
class DeleteCollegeAlumniDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteCollegeAlumniDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniDeptResponse = DeleteCollegeAlumniDeptResponse;
class DeleteCollegeAlumniUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniUserInfoHeaders = DeleteCollegeAlumniUserInfoHeaders;
class DeleteCollegeAlumniUserInfoRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            operator: 'operator',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptId: 'number',
            operator: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniUserInfoRequest = DeleteCollegeAlumniUserInfoRequest;
class DeleteCollegeAlumniUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniUserInfoResponseBody = DeleteCollegeAlumniUserInfoResponseBody;
class DeleteCollegeAlumniUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteCollegeAlumniUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeAlumniUserInfoResponse = DeleteCollegeAlumniUserInfoResponse;
class DeleteCollegeContactSceneStruHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeContactSceneStruHeaders = DeleteCollegeContactSceneStruHeaders;
class DeleteCollegeContactSceneStruRequest extends $tea.Model {
    static names() {
        return {
            struId: 'struId',
        };
    }
    static types() {
        return {
            struId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeContactSceneStruRequest = DeleteCollegeContactSceneStruRequest;
class DeleteCollegeContactSceneStruResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeContactSceneStruResponseBody = DeleteCollegeContactSceneStruResponseBody;
class DeleteCollegeContactSceneStruResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteCollegeContactSceneStruResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCollegeContactSceneStruResponse = DeleteCollegeContactSceneStruResponse;
class DeleteDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeptHeaders = DeleteDeptHeaders;
class DeleteDeptRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeptRequest = DeleteDeptRequest;
class DeleteDeptResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeptResponseBody = DeleteDeptResponseBody;
class DeleteDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeptResponse = DeleteDeptResponse;
class DeleteDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceHeaders = DeleteDeviceHeaders;
class DeleteDeviceRequest extends $tea.Model {
    static names() {
        return {
            sn: 'sn',
        };
    }
    static types() {
        return {
            sn: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceRequest = DeleteDeviceRequest;
class DeleteDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceResponseBody = DeleteDeviceResponseBody;
class DeleteDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceResponse = DeleteDeviceResponse;
class DeleteDeviceOrgHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceOrgHeaders = DeleteDeviceOrgHeaders;
class DeleteDeviceOrgRequest extends $tea.Model {
    static names() {
        return {
            authCode: 'authCode',
            deviceCode: 'deviceCode',
        };
    }
    static types() {
        return {
            authCode: 'string',
            deviceCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceOrgRequest = DeleteDeviceOrgRequest;
class DeleteDeviceOrgResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceOrgResponseBody = DeleteDeviceOrgResponseBody;
class DeleteDeviceOrgResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDeviceOrgResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteDeviceOrgResponse = DeleteDeviceOrgResponse;
class DeleteGuardianHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteGuardianHeaders = DeleteGuardianHeaders;
class DeleteGuardianRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
            stuId: 'stuId',
        };
    }
    static types() {
        return {
            operator: 'string',
            stuId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteGuardianRequest = DeleteGuardianRequest;
class DeleteGuardianResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteGuardianResponseBody = DeleteGuardianResponseBody;
class DeleteGuardianResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteGuardianResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteGuardianResponse = DeleteGuardianResponse;
class DeleteOrgRelationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteOrgRelationHeaders = DeleteOrgRelationHeaders;
class DeleteOrgRelationRequest extends $tea.Model {
    static names() {
        return {
            authCode: 'authCode',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            authCode: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteOrgRelationRequest = DeleteOrgRelationRequest;
class DeleteOrgRelationResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteOrgRelationResponseBody = DeleteOrgRelationResponseBody;
class DeleteOrgRelationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteOrgRelationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteOrgRelationResponse = DeleteOrgRelationResponse;
class DeletePhysicalClassroomHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePhysicalClassroomHeaders = DeletePhysicalClassroomHeaders;
class DeletePhysicalClassroomRequest extends $tea.Model {
    static names() {
        return {
            classroomId: 'classroomId',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomId: 'number',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePhysicalClassroomRequest = DeletePhysicalClassroomRequest;
class DeletePhysicalClassroomResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePhysicalClassroomResponseBody = DeletePhysicalClassroomResponseBody;
class DeletePhysicalClassroomResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePhysicalClassroomResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeletePhysicalClassroomResponse = DeletePhysicalClassroomResponse;
class DeleteRemoteClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRemoteClassCourseHeaders = DeleteRemoteClassCourseHeaders;
class DeleteRemoteClassCourseRequest extends $tea.Model {
    static names() {
        return {
            authCode: 'authCode',
        };
    }
    static types() {
        return {
            authCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRemoteClassCourseRequest = DeleteRemoteClassCourseRequest;
class DeleteRemoteClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRemoteClassCourseResponseBody = DeleteRemoteClassCourseResponseBody;
class DeleteRemoteClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteRemoteClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteRemoteClassCourseResponse = DeleteRemoteClassCourseResponse;
class DeleteStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteStudentHeaders = DeleteStudentHeaders;
class DeleteStudentRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteStudentRequest = DeleteStudentRequest;
class DeleteStudentResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteStudentResponseBody = DeleteStudentResponseBody;
class DeleteStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteStudentResponse = DeleteStudentResponse;
class DeleteTeacherHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeacherHeaders = DeleteTeacherHeaders;
class DeleteTeacherRequest extends $tea.Model {
    static names() {
        return {
            adviser: 'adviser',
            operator: 'operator',
        };
    }
    static types() {
        return {
            adviser: 'number',
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeacherRequest = DeleteTeacherRequest;
class DeleteTeacherResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeacherResponseBody = DeleteTeacherResponseBody;
class DeleteTeacherResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteTeacherResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeacherResponse = DeleteTeacherResponse;
class DeleteUniversityCourseGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityCourseGroupHeaders = DeleteUniversityCourseGroupHeaders;
class DeleteUniversityCourseGroupRequest extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityCourseGroupRequest = DeleteUniversityCourseGroupRequest;
class DeleteUniversityCourseGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityCourseGroupResponseBody = DeleteUniversityCourseGroupResponseBody;
class DeleteUniversityCourseGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteUniversityCourseGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityCourseGroupResponse = DeleteUniversityCourseGroupResponse;
class DeleteUniversityStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityStudentHeaders = DeleteUniversityStudentHeaders;
class DeleteUniversityStudentRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            opUserId: 'opUserId',
            studentUserId: 'studentUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            opUserId: 'string',
            studentUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityStudentRequest = DeleteUniversityStudentRequest;
class DeleteUniversityStudentResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityStudentResponseBody = DeleteUniversityStudentResponseBody;
class DeleteUniversityStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteUniversityStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityStudentResponse = DeleteUniversityStudentResponse;
class DeleteUniversityTeacherHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityTeacherHeaders = DeleteUniversityTeacherHeaders;
class DeleteUniversityTeacherRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            opUserId: 'opUserId',
            role: 'role',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            opUserId: 'string',
            role: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityTeacherRequest = DeleteUniversityTeacherRequest;
class DeleteUniversityTeacherResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityTeacherResponseBody = DeleteUniversityTeacherResponseBody;
class DeleteUniversityTeacherResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteUniversityTeacherResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteUniversityTeacherResponse = DeleteUniversityTeacherResponse;
class DeviceHeartbeatHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeviceHeartbeatHeaders = DeviceHeartbeatHeaders;
class DeviceHeartbeatRequest extends $tea.Model {
    static names() {
        return {
            sn: 'sn',
        };
    }
    static types() {
        return {
            sn: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeviceHeartbeatRequest = DeviceHeartbeatRequest;
class DeviceHeartbeatResponseBody extends $tea.Model {
    static names() {
        return {
            command: 'command',
        };
    }
    static types() {
        return {
            command: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeviceHeartbeatResponseBody = DeviceHeartbeatResponseBody;
class DeviceHeartbeatResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeviceHeartbeatResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeviceHeartbeatResponse = DeviceHeartbeatResponse;
class DisableCollegeContactSceneStruHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DisableCollegeContactSceneStruHeaders = DisableCollegeContactSceneStruHeaders;
class DisableCollegeContactSceneStruRequest extends $tea.Model {
    static names() {
        return {
            struId: 'struId',
        };
    }
    static types() {
        return {
            struId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DisableCollegeContactSceneStruRequest = DisableCollegeContactSceneStruRequest;
class DisableCollegeContactSceneStruResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DisableCollegeContactSceneStruResponseBody = DisableCollegeContactSceneStruResponseBody;
class DisableCollegeContactSceneStruResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DisableCollegeContactSceneStruResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DisableCollegeContactSceneStruResponse = DisableCollegeContactSceneStruResponse;
class EduAIGCCallbackHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduAIGCCallbackHeaders = EduAIGCCallbackHeaders;
class EduAIGCCallbackRequest extends $tea.Model {
    static names() {
        return {
            channelCode: 'channelCode',
            commitTime: 'commitTime',
            completeTime: 'completeTime',
            content: 'content',
            contentSize: 'contentSize',
            contentType: 'contentType',
            ext: 'ext',
            prompt: 'prompt',
            remark: 'remark',
        };
    }
    static types() {
        return {
            channelCode: 'string',
            commitTime: 'number',
            completeTime: 'number',
            content: 'string',
            contentSize: 'number',
            contentType: 'string',
            ext: 'string',
            prompt: 'string',
            remark: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduAIGCCallbackRequest = EduAIGCCallbackRequest;
class EduAIGCCallbackResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduAIGCCallbackResponseBody = EduAIGCCallbackResponseBody;
class EduAIGCCallbackResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EduAIGCCallbackResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduAIGCCallbackResponse = EduAIGCCallbackResponse;
class EduFindUserRolesByUserIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduFindUserRolesByUserIdHeaders = EduFindUserRolesByUserIdHeaders;
class EduFindUserRolesByUserIdRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            hasOrgRole: 'hasOrgRole',
            userId: 'userId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            hasOrgRole: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduFindUserRolesByUserIdRequest = EduFindUserRolesByUserIdRequest;
class EduFindUserRolesByUserIdResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduFindUserRolesByUserIdResponseBody = EduFindUserRolesByUserIdResponseBody;
class EduFindUserRolesByUserIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EduFindUserRolesByUserIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduFindUserRolesByUserIdResponse = EduFindUserRolesByUserIdResponse;
class EduGetFileSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduGetFileSpaceHeaders = EduGetFileSpaceHeaders;
class EduGetFileSpaceRequest extends $tea.Model {
    static names() {
        return {
            channelCode: 'channelCode',
        };
    }
    static types() {
        return {
            channelCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduGetFileSpaceRequest = EduGetFileSpaceRequest;
class EduGetFileSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EduGetFileSpaceResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduGetFileSpaceResponseBody = EduGetFileSpaceResponseBody;
class EduGetFileSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EduGetFileSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduGetFileSpaceResponse = EduGetFileSpaceResponse;
class EduListUserByFromUserIdsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduListUserByFromUserIdsHeaders = EduListUserByFromUserIdsHeaders;
class EduListUserByFromUserIdsRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            guardianUserId: 'guardianUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            guardianUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduListUserByFromUserIdsRequest = EduListUserByFromUserIdsRequest;
class EduListUserByFromUserIdsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': EduListUserByFromUserIdsResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduListUserByFromUserIdsResponseBody = EduListUserByFromUserIdsResponseBody;
class EduListUserByFromUserIdsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EduListUserByFromUserIdsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduListUserByFromUserIdsResponse = EduListUserByFromUserIdsResponse;
class EduTeacherListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduTeacherListHeaders = EduTeacherListHeaders;
class EduTeacherListRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduTeacherListRequest = EduTeacherListRequest;
class EduTeacherListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: EduTeacherListResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduTeacherListResponseBody = EduTeacherListResponseBody;
class EduTeacherListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EduTeacherListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduTeacherListResponse = EduTeacherListResponse;
class EnableCollegeContactSceneStruHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EnableCollegeContactSceneStruHeaders = EnableCollegeContactSceneStruHeaders;
class EnableCollegeContactSceneStruRequest extends $tea.Model {
    static names() {
        return {
            struId: 'struId',
        };
    }
    static types() {
        return {
            struId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EnableCollegeContactSceneStruRequest = EnableCollegeContactSceneStruRequest;
class EnableCollegeContactSceneStruResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EnableCollegeContactSceneStruResponseBody = EnableCollegeContactSceneStruResponseBody;
class EnableCollegeContactSceneStruResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EnableCollegeContactSceneStruResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EnableCollegeContactSceneStruResponse = EnableCollegeContactSceneStruResponse;
class EndCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EndCourseHeaders = EndCourseHeaders;
class EndCourseRequest extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            ext: 'ext',
            isvCode: 'isvCode',
            livePlayInfoList: 'livePlayInfoList',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            ext: 'string',
            isvCode: 'string',
            livePlayInfoList: { 'type': 'array', 'itemType': EndCourseRequestLivePlayInfoList },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EndCourseRequest = EndCourseRequest;
class EndCourseResponseBody extends $tea.Model {
    static names() {
        return {
            universityCourseCommonResponse: 'universityCourseCommonResponse',
        };
    }
    static types() {
        return {
            universityCourseCommonResponse: EndCourseResponseBodyUniversityCourseCommonResponse,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EndCourseResponseBody = EndCourseResponseBody;
class EndCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EndCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EndCourseResponse = EndCourseResponse;
class GetBindChildInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBindChildInfoHeaders = GetBindChildInfoHeaders;
class GetBindChildInfoRequest extends $tea.Model {
    static names() {
        return {
            schoolCorpId: 'schoolCorpId',
            studentUserId: 'studentUserId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            schoolCorpId: 'string',
            studentUserId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBindChildInfoRequest = GetBindChildInfoRequest;
class GetBindChildInfoResponseBody extends $tea.Model {
    static names() {
        return {
            childUserId: 'childUserId',
            currentUserId: 'currentUserId',
            familyCorpId: 'familyCorpId',
        };
    }
    static types() {
        return {
            childUserId: 'string',
            currentUserId: 'string',
            familyCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBindChildInfoResponseBody = GetBindChildInfoResponseBody;
class GetBindChildInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBindChildInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBindChildInfoResponse = GetBindChildInfoResponse;
class GetChildrenHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChildrenHeaders = GetChildrenHeaders;
class GetChildrenResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetChildrenResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChildrenResponseBody = GetChildrenResponseBody;
class GetChildrenResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetChildrenResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChildrenResponse = GetChildrenResponse;
class GetCollegeAlumniDeptsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniDeptsHeaders = GetCollegeAlumniDeptsHeaders;
class GetCollegeAlumniDeptsRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            operator: 'operator',
        };
    }
    static types() {
        return {
            deptId: 'number',
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniDeptsRequest = GetCollegeAlumniDeptsRequest;
class GetCollegeAlumniDeptsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetCollegeAlumniDeptsResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniDeptsResponseBody = GetCollegeAlumniDeptsResponseBody;
class GetCollegeAlumniDeptsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCollegeAlumniDeptsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniDeptsResponse = GetCollegeAlumniDeptsResponse;
class GetCollegeAlumniUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniUserInfoHeaders = GetCollegeAlumniUserInfoHeaders;
class GetCollegeAlumniUserInfoRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
            userId: 'userId',
        };
    }
    static types() {
        return {
            operator: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniUserInfoRequest = GetCollegeAlumniUserInfoRequest;
class GetCollegeAlumniUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetCollegeAlumniUserInfoResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniUserInfoResponseBody = GetCollegeAlumniUserInfoResponseBody;
class GetCollegeAlumniUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCollegeAlumniUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniUserInfoResponse = GetCollegeAlumniUserInfoResponse;
class GetCollegeContactDeptDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailHeaders = GetCollegeContactDeptDetailHeaders;
class GetCollegeContactDeptDetailRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            language: 'language',
        };
    }
    static types() {
        return {
            deptId: 'number',
            language: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailRequest = GetCollegeContactDeptDetailRequest;
class GetCollegeContactDeptDetailResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetCollegeContactDeptDetailResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailResponseBody = GetCollegeContactDeptDetailResponseBody;
class GetCollegeContactDeptDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCollegeContactDeptDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailResponse = GetCollegeContactDeptDetailResponse;
class GetCollegeContactStandardStruDeptDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactStandardStruDeptDetailHeaders = GetCollegeContactStandardStruDeptDetailHeaders;
class GetCollegeContactStandardStruDeptDetailRequest extends $tea.Model {
    static names() {
        return {
            language: 'language',
        };
    }
    static types() {
        return {
            language: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactStandardStruDeptDetailRequest = GetCollegeContactStandardStruDeptDetailRequest;
class GetCollegeContactStandardStruDeptDetailResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetCollegeContactStandardStruDeptDetailResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactStandardStruDeptDetailResponseBody = GetCollegeContactStandardStruDeptDetailResponseBody;
class GetCollegeContactStandardStruDeptDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCollegeContactStandardStruDeptDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactStandardStruDeptDetailResponse = GetCollegeContactStandardStruDeptDetailResponse;
class GetDefaultChildHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDefaultChildHeaders = GetDefaultChildHeaders;
class GetDefaultChildResponseBody extends $tea.Model {
    static names() {
        return {
            avatar: 'avatar',
            bindStudents: 'bindStudents',
            grade: 'grade',
            name: 'name',
            nick: 'nick',
            period: 'period',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            avatar: 'string',
            bindStudents: { 'type': 'array', 'itemType': GetDefaultChildResponseBodyBindStudents },
            grade: 'number',
            name: 'string',
            nick: 'string',
            period: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDefaultChildResponseBody = GetDefaultChildResponseBody;
class GetDefaultChildResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDefaultChildResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDefaultChildResponse = GetDefaultChildResponse;
class GetEduUserIdentityHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEduUserIdentityHeaders = GetEduUserIdentityHeaders;
class GetEduUserIdentityRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEduUserIdentityRequest = GetEduUserIdentityRequest;
class GetEduUserIdentityResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: GetEduUserIdentityResponseBodyData,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEduUserIdentityResponseBody = GetEduUserIdentityResponseBody;
class GetEduUserIdentityResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEduUserIdentityResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEduUserIdentityResponse = GetEduUserIdentityResponse;
class GetFileDownloadInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoHeaders = GetFileDownloadInfoHeaders;
class GetFileDownloadInfoRequest extends $tea.Model {
    static names() {
        return {
            fileIdList: 'fileIdList',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileIdList: { 'type': 'array', 'itemType': 'string' },
            spaceId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoRequest = GetFileDownloadInfoRequest;
class GetFileDownloadInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'map', 'keyType': 'string', 'valueType': ResultValue },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoResponseBody = GetFileDownloadInfoResponseBody;
class GetFileDownloadInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFileDownloadInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoResponse = GetFileDownloadInfoResponse;
class GetFileDownloadInfoByPackageIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoByPackageIdHeaders = GetFileDownloadInfoByPackageIdHeaders;
class GetFileDownloadInfoByPackageIdRequest extends $tea.Model {
    static names() {
        return {
            packageId: 'packageId',
        };
    }
    static types() {
        return {
            packageId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoByPackageIdRequest = GetFileDownloadInfoByPackageIdRequest;
class GetFileDownloadInfoByPackageIdResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetFileDownloadInfoByPackageIdResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoByPackageIdResponseBody = GetFileDownloadInfoByPackageIdResponseBody;
class GetFileDownloadInfoByPackageIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFileDownloadInfoByPackageIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoByPackageIdResponse = GetFileDownloadInfoByPackageIdResponse;
class GetImageTempDownloadUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTempDownloadUrlHeaders = GetImageTempDownloadUrlHeaders;
class GetImageTempDownloadUrlRequest extends $tea.Model {
    static names() {
        return {
            mediaId: 'mediaId',
            sourceType: 'sourceType',
        };
    }
    static types() {
        return {
            mediaId: 'string',
            sourceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTempDownloadUrlRequest = GetImageTempDownloadUrlRequest;
class GetImageTempDownloadUrlResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetImageTempDownloadUrlResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTempDownloadUrlResponseBody = GetImageTempDownloadUrlResponseBody;
class GetImageTempDownloadUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetImageTempDownloadUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTempDownloadUrlResponse = GetImageTempDownloadUrlResponse;
class GetOpenCourseDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCourseDetailHeaders = GetOpenCourseDetailHeaders;
class GetOpenCourseDetailResponseBody extends $tea.Model {
    static names() {
        return {
            courseId: 'courseId',
            courseType: 'courseType',
            coverUrl: 'coverUrl',
            introduction: 'introduction',
            pushModel: 'pushModel',
            startTime: 'startTime',
            teacherId: 'teacherId',
            teacherName: 'teacherName',
            title: 'title',
        };
    }
    static types() {
        return {
            courseId: 'string',
            courseType: 'number',
            coverUrl: 'string',
            introduction: 'string',
            pushModel: GetOpenCourseDetailResponseBodyPushModel,
            startTime: 'number',
            teacherId: 'string',
            teacherName: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCourseDetailResponseBody = GetOpenCourseDetailResponseBody;
class GetOpenCourseDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOpenCourseDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCourseDetailResponse = GetOpenCourseDetailResponse;
class GetOpenCoursesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCoursesHeaders = GetOpenCoursesHeaders;
class GetOpenCoursesRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCoursesRequest = GetOpenCoursesRequest;
class GetOpenCoursesResponseBody extends $tea.Model {
    static names() {
        return {
            courseList: 'courseList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            courseList: { 'type': 'array', 'itemType': GetOpenCoursesResponseBodyCourseList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCoursesResponseBody = GetOpenCoursesResponseBody;
class GetOpenCoursesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOpenCoursesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCoursesResponse = GetOpenCoursesResponse;
class GetPointActionRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordHeaders = GetPointActionRecordHeaders;
class GetPointActionRecordRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: GetPointActionRecordRequestBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordRequest = GetPointActionRecordRequest;
class GetPointActionRecordShrinkRequest extends $tea.Model {
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordShrinkRequest = GetPointActionRecordShrinkRequest;
class GetPointActionRecordResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetPointActionRecordResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordResponseBody = GetPointActionRecordResponseBody;
class GetPointActionRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPointActionRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordResponse = GetPointActionRecordResponse;
class GetPointInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointInfoHeaders = GetPointInfoHeaders;
class GetPointInfoRequest extends $tea.Model {
    static names() {
        return {
            pointType: 'pointType',
        };
    }
    static types() {
        return {
            pointType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointInfoRequest = GetPointInfoRequest;
class GetPointInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetPointInfoResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointInfoResponseBody = GetPointInfoResponseBody;
class GetPointInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPointInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointInfoResponse = GetPointInfoResponse;
class GetRemoteClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseHeaders = GetRemoteClassCourseHeaders;
class GetRemoteClassCourseRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseRequest = GetRemoteClassCourseRequest;
class GetRemoteClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetRemoteClassCourseResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseResponseBody = GetRemoteClassCourseResponseBody;
class GetRemoteClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRemoteClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseResponse = GetRemoteClassCourseResponse;
class GetShareRoleMembersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRoleMembersHeaders = GetShareRoleMembersHeaders;
class GetShareRoleMembersResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetShareRoleMembersResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRoleMembersResponseBody = GetShareRoleMembersResponseBody;
class GetShareRoleMembersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetShareRoleMembersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRoleMembersResponse = GetShareRoleMembersResponse;
class GetShareRolesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRolesHeaders = GetShareRolesHeaders;
class GetShareRolesResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetShareRolesResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRolesResponseBody = GetShareRolesResponseBody;
class GetShareRolesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetShareRolesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRolesResponse = GetShareRolesResponse;
class GetTaskListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskListHeaders = GetTaskListHeaders;
class GetTaskListRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            taskYear: 'taskYear',
        };
    }
    static types() {
        return {
            operator: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            taskYear: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskListRequest = GetTaskListRequest;
class GetTaskListResponseBody extends $tea.Model {
    static names() {
        return {
            count: 'count',
            taskList: 'taskList',
        };
    }
    static types() {
        return {
            count: 'number',
            taskList: { 'type': 'array', 'itemType': GetTaskListResponseBodyTaskList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskListResponseBody = GetTaskListResponseBody;
class GetTaskListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTaskListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskListResponse = GetTaskListResponse;
class GetTaskStudentListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskStudentListHeaders = GetTaskStudentListHeaders;
class GetTaskStudentListRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            operator: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            taskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskStudentListRequest = GetTaskStudentListRequest;
class GetTaskStudentListResponseBody extends $tea.Model {
    static names() {
        return {
            count: 'count',
            studentList: 'studentList',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            count: 'number',
            studentList: { 'type': 'array', 'itemType': GetTaskStudentListResponseBodyStudentList },
            taskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskStudentListResponseBody = GetTaskStudentListResponseBody;
class GetTaskStudentListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTaskStudentListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskStudentListResponse = GetTaskStudentListResponse;
class InitCoursesOfClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassHeaders = InitCoursesOfClassHeaders;
class InitCoursesOfClassRequest extends $tea.Model {
    static names() {
        return {
            courses: 'courses',
            sectionConfig: 'sectionConfig',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courses: { 'type': 'array', 'itemType': InitCoursesOfClassRequestCourses },
            sectionConfig: InitCoursesOfClassRequestSectionConfig,
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequest = InitCoursesOfClassRequest;
class InitCoursesOfClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassResponseBody = InitCoursesOfClassResponseBody;
class InitCoursesOfClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InitCoursesOfClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassResponse = InitCoursesOfClassResponse;
class InitDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitDeviceHeaders = InitDeviceHeaders;
class InitDeviceRequest extends $tea.Model {
    static names() {
        return {
            encryptPubKey: 'encryptPubKey',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            version: 'version',
        };
    }
    static types() {
        return {
            encryptPubKey: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitDeviceRequest = InitDeviceRequest;
class InitDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            successInfo: 'successInfo',
        };
    }
    static types() {
        return {
            successInfo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitDeviceResponseBody = InitDeviceResponseBody;
class InitDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InitDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitDeviceResponse = InitDeviceResponse;
class InitVPaasDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitVPaasDeviceHeaders = InitVPaasDeviceHeaders;
class InitVPaasDeviceRequest extends $tea.Model {
    static names() {
        return {
            sn: 'sn',
            timestamp: 'timestamp',
            type: 'type',
        };
    }
    static types() {
        return {
            sn: 'string',
            timestamp: 'number',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitVPaasDeviceRequest = InitVPaasDeviceRequest;
class InitVPaasDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            pspk: 'pspk',
        };
    }
    static types() {
        return {
            pspk: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitVPaasDeviceResponseBody = InitVPaasDeviceResponseBody;
class InitVPaasDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InitVPaasDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitVPaasDeviceResponse = InitVPaasDeviceResponse;
class InsertSectionConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigHeaders = InsertSectionConfigHeaders;
class InsertSectionConfigRequest extends $tea.Model {
    static names() {
        return {
            end: 'end',
            scheduleName: 'scheduleName',
            sectionModels: 'sectionModels',
            start: 'start',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            end: InsertSectionConfigRequestEnd,
            scheduleName: 'string',
            sectionModels: { 'type': 'array', 'itemType': InsertSectionConfigRequestSectionModels },
            start: InsertSectionConfigRequestStart,
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigRequest = InsertSectionConfigRequest;
class InsertSectionConfigResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigResponseBody = InsertSectionConfigResponseBody;
class InsertSectionConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InsertSectionConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigResponse = InsertSectionConfigResponse;
class InvalidCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidCourseHeaders = InvalidCourseHeaders;
class InvalidCourseRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
        };
    }
    static types() {
        return {
            classId: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvCourseId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidCourseRequest = InvalidCourseRequest;
class InvalidCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidCourseResponseBody = InvalidCourseResponseBody;
class InvalidCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InvalidCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidCourseResponse = InvalidCourseResponse;
class InvalidKitHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidKitHeaders = InvalidKitHeaders;
class InvalidKitRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
            openUserId: 'openUserId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            isvProductScene: 'string',
            openUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidKitRequest = InvalidKitRequest;
class InvalidKitResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidKitResponseBody = InvalidKitResponseBody;
class InvalidKitResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InvalidKitResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidKitResponse = InvalidKitResponse;
class InvalidStudentClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidStudentClassHeaders = InvalidStudentClassHeaders;
class InvalidStudentClassRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            classType: 'classType',
            corpId: 'corpId',
            isvCode: 'isvCode',
            studentUserIds: 'studentUserIds',
        };
    }
    static types() {
        return {
            classId: 'string',
            classType: 'number',
            corpId: 'string',
            isvCode: 'string',
            studentUserIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidStudentClassRequest = InvalidStudentClassRequest;
class InvalidStudentClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidStudentClassResponseBody = InvalidStudentClassResponseBody;
class InvalidStudentClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InvalidStudentClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidStudentClassResponse = InvalidStudentClassResponse;
class InvalidTeacherCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidTeacherCourseHeaders = InvalidTeacherCourseHeaders;
class InvalidTeacherCourseRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            needDeleteCourseIdList: 'needDeleteCourseIdList',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            needDeleteCourseIdList: { 'type': 'array', 'itemType': 'string' },
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidTeacherCourseRequest = InvalidTeacherCourseRequest;
class InvalidTeacherCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidTeacherCourseResponseBody = InvalidTeacherCourseResponseBody;
class InvalidTeacherCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InvalidTeacherCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvalidTeacherCourseResponse = InvalidTeacherCourseResponse;
class IsvDataWriteHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvDataWriteHeaders = IsvDataWriteHeaders;
class IsvDataWriteRequest extends $tea.Model {
    static names() {
        return {
            objectCode: 'objectCode',
            rowValueList: 'rowValueList',
        };
    }
    static types() {
        return {
            objectCode: 'string',
            rowValueList: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': IsvDataWriteRequestRowValueList } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvDataWriteRequest = IsvDataWriteRequest;
class IsvDataWriteResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: IsvDataWriteResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvDataWriteResponseBody = IsvDataWriteResponseBody;
class IsvDataWriteResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IsvDataWriteResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvDataWriteResponse = IsvDataWriteResponse;
class IsvMetadataQueryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvMetadataQueryHeaders = IsvMetadataQueryHeaders;
class IsvMetadataQueryRequest extends $tea.Model {
    static names() {
        return {
            objectCode: 'objectCode',
        };
    }
    static types() {
        return {
            objectCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvMetadataQueryRequest = IsvMetadataQueryRequest;
class IsvMetadataQueryResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: IsvMetadataQueryResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvMetadataQueryResponseBody = IsvMetadataQueryResponseBody;
class IsvMetadataQueryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IsvMetadataQueryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvMetadataQueryResponse = IsvMetadataQueryResponse;
class ListCollegeContactDeptTypeConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactDeptTypeConfigHeaders = ListCollegeContactDeptTypeConfigHeaders;
class ListCollegeContactDeptTypeConfigRequest extends $tea.Model {
    static names() {
        return {
            language: 'language',
        };
    }
    static types() {
        return {
            language: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactDeptTypeConfigRequest = ListCollegeContactDeptTypeConfigRequest;
class ListCollegeContactDeptTypeConfigResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListCollegeContactDeptTypeConfigResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactDeptTypeConfigResponseBody = ListCollegeContactDeptTypeConfigResponseBody;
class ListCollegeContactDeptTypeConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCollegeContactDeptTypeConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactDeptTypeConfigResponse = ListCollegeContactDeptTypeConfigResponse;
class ListCollegeContactSceneStrusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSceneStrusHeaders = ListCollegeContactSceneStrusHeaders;
class ListCollegeContactSceneStrusRequest extends $tea.Model {
    static names() {
        return {
            language: 'language',
        };
    }
    static types() {
        return {
            language: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSceneStrusRequest = ListCollegeContactSceneStrusRequest;
class ListCollegeContactSceneStrusResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListCollegeContactSceneStrusResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSceneStrusResponseBody = ListCollegeContactSceneStrusResponseBody;
class ListCollegeContactSceneStrusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCollegeContactSceneStrusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSceneStrusResponse = ListCollegeContactSceneStrusResponse;
class ListCollegeContactSubDeptsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSubDeptsHeaders = ListCollegeContactSubDeptsHeaders;
class ListCollegeContactSubDeptsRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            language: 'language',
        };
    }
    static types() {
        return {
            deptId: 'number',
            language: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSubDeptsRequest = ListCollegeContactSubDeptsRequest;
class ListCollegeContactSubDeptsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListCollegeContactSubDeptsResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSubDeptsResponseBody = ListCollegeContactSubDeptsResponseBody;
class ListCollegeContactSubDeptsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCollegeContactSubDeptsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSubDeptsResponse = ListCollegeContactSubDeptsResponse;
class ListOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListOrderHeaders = ListOrderHeaders;
class ListOrderRequest extends $tea.Model {
    static names() {
        return {
            createTimeEnd: 'createTimeEnd',
            createTimeStart: 'createTimeStart',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            scene: 'scene',
            status: 'status',
            tradeNo: 'tradeNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            createTimeEnd: 'number',
            createTimeStart: 'number',
            merchantId: 'string',
            orderNo: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            scene: 'number',
            status: 'number',
            tradeNo: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListOrderRequest = ListOrderRequest;
class ListOrderResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
            total: 'total',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListOrderResponseBodyList },
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListOrderResponseBody = ListOrderResponseBody;
class ListOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListOrderResponse = ListOrderResponse;
class MoveStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveStudentHeaders = MoveStudentHeaders;
class MoveStudentRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
            originClassId: 'originClassId',
            targetClassId: 'targetClassId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            operator: 'string',
            originClassId: 'number',
            targetClassId: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveStudentRequest = MoveStudentRequest;
class MoveStudentResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveStudentResponseBody = MoveStudentResponseBody;
class MoveStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: MoveStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveStudentResponse = MoveStudentResponse;
class OpenKitHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenKitHeaders = OpenKitHeaders;
class OpenKitRequest extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
            openEndTime: 'openEndTime',
            openStartTime: 'openStartTime',
            openUserId: 'openUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvProductScene: 'string',
            openEndTime: 'number',
            openStartTime: 'number',
            openUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenKitRequest = OpenKitRequest;
class OpenKitResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenKitResponseBody = OpenKitResponseBody;
class OpenKitResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenKitResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenKitResponse = OpenKitResponse;
class OrderInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderInfoHeaders = OrderInfoHeaders;
class OrderInfoRequest extends $tea.Model {
    static names() {
        return {
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderInfoRequest = OrderInfoRequest;
class OrderInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: OrderInfoResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderInfoResponseBody = OrderInfoResponseBody;
class OrderInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OrderInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderInfoResponse = OrderInfoResponse;
class PageQueryClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryClassCourseHeaders = PageQueryClassCourseHeaders;
class PageQueryClassCourseRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            endCourseDate: 'endCourseDate',
            isvCode: 'isvCode',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startCourseDate: 'startCourseDate',
        };
    }
    static types() {
        return {
            classId: 'string',
            corpId: 'string',
            endCourseDate: 'number',
            isvCode: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startCourseDate: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryClassCourseRequest = PageQueryClassCourseRequest;
class PageQueryClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': PageQueryClassCourseResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryClassCourseResponseBody = PageQueryClassCourseResponseBody;
class PageQueryClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PageQueryClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryClassCourseResponse = PageQueryClassCourseResponse;
class PageQueryDevicesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryDevicesHeaders = PageQueryDevicesHeaders;
class PageQueryDevicesRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            type: 'type',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryDevicesRequest = PageQueryDevicesRequest;
class PageQueryDevicesResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
            nextToken: 'nextToken',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': PageQueryDevicesResponseBodyList },
            nextToken: 'string',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryDevicesResponseBody = PageQueryDevicesResponseBody;
class PageQueryDevicesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PageQueryDevicesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryDevicesResponse = PageQueryDevicesResponse;
class PageQueryKitOpenRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryKitOpenRecordHeaders = PageQueryKitOpenRecordHeaders;
class PageQueryKitOpenRecordRequest extends $tea.Model {
    static names() {
        return {
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            isvCode: 'string',
            isvProductScene: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryKitOpenRecordRequest = PageQueryKitOpenRecordRequest;
class PageQueryKitOpenRecordResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': PageQueryKitOpenRecordResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryKitOpenRecordResponseBody = PageQueryKitOpenRecordResponseBody;
class PageQueryKitOpenRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PageQueryKitOpenRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryKitOpenRecordResponse = PageQueryKitOpenRecordResponse;
class PayOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PayOrderHeaders = PayOrderHeaders;
class PayOrderRequest extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            faceId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PayOrderRequest = PayOrderRequest;
class PayOrderResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PayOrderResponseBody = PayOrderResponseBody;
class PayOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PayOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PayOrderResponse = PayOrderResponse;
class PollingConfirmStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PollingConfirmStatusHeaders = PollingConfirmStatusHeaders;
class PollingConfirmStatusRequest extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            ext: 'ext',
            isvCode: 'isvCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            ext: 'string',
            isvCode: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PollingConfirmStatusRequest = PollingConfirmStatusRequest;
class PollingConfirmStatusResponseBody extends $tea.Model {
    static names() {
        return {
            universityPollingCourseStatusResponse: 'universityPollingCourseStatusResponse',
        };
    }
    static types() {
        return {
            universityPollingCourseStatusResponse: PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PollingConfirmStatusResponseBody = PollingConfirmStatusResponseBody;
class PollingConfirmStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PollingConfirmStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PollingConfirmStatusResponse = PollingConfirmStatusResponse;
class PreDialHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreDialHeaders = PreDialHeaders;
class PreDialRequest extends $tea.Model {
    static names() {
        return {
            callerUserId: 'callerUserId',
            receiverUserId: 'receiverUserId',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            callerUserId: 'string',
            receiverUserId: 'string',
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreDialRequest = PreDialRequest;
class PreDialResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreDialResponseBody = PreDialResponseBody;
class PreDialResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PreDialResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreDialResponse = PreDialResponse;
class ProvidePointHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ProvidePointHeaders = ProvidePointHeaders;
class ProvidePointRequest extends $tea.Model {
    static names() {
        return {
            actionCode: 'actionCode',
            bizId: 'bizId',
            pointType: 'pointType',
        };
    }
    static types() {
        return {
            actionCode: 'string',
            bizId: 'string',
            pointType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ProvidePointRequest = ProvidePointRequest;
class ProvidePointResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: ProvidePointResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ProvidePointResponseBody = ProvidePointResponseBody;
class ProvidePointResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ProvidePointResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ProvidePointResponse = ProvidePointResponse;
class QueryAllSubjectsFromClassScheduleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleHeaders = QueryAllSubjectsFromClassScheduleHeaders;
class QueryAllSubjectsFromClassScheduleRequest extends $tea.Model {
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
            periodCode: 'periodCode',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            periodCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleRequest = QueryAllSubjectsFromClassScheduleRequest;
class QueryAllSubjectsFromClassScheduleShrinkRequest extends $tea.Model {
    static names() {
        return {
            classIdsShrink: 'classIds',
            opUserId: 'opUserId',
            periodCode: 'periodCode',
        };
    }
    static types() {
        return {
            classIdsShrink: 'string',
            opUserId: 'string',
            periodCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleShrinkRequest = QueryAllSubjectsFromClassScheduleShrinkRequest;
class QueryAllSubjectsFromClassScheduleResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryAllSubjectsFromClassScheduleResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBody = QueryAllSubjectsFromClassScheduleResponseBody;
class QueryAllSubjectsFromClassScheduleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllSubjectsFromClassScheduleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleResponse = QueryAllSubjectsFromClassScheduleResponse;
class QueryClassScheduleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleHeaders = QueryClassScheduleHeaders;
class QueryClassScheduleRequest extends $tea.Model {
    static names() {
        return {
            sectionIndexList: 'sectionIndexList',
            subscriberIds: 'subscriberIds',
            endTime: 'endTime',
            opUserId: 'opUserId',
            startTime: 'startTime',
            subscriberType: 'subscriberType',
        };
    }
    static types() {
        return {
            sectionIndexList: { 'type': 'array', 'itemType': 'number' },
            subscriberIds: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            opUserId: 'string',
            startTime: 'number',
            subscriberType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleRequest = QueryClassScheduleRequest;
class QueryClassScheduleResponseBody extends $tea.Model {
    static names() {
        return {
            config: 'config',
            courseDTOS: 'courseDTOS',
        };
    }
    static types() {
        return {
            config: QueryClassScheduleResponseBodyConfig,
            courseDTOS: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyCourseDTOS },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBody = QueryClassScheduleResponseBody;
class QueryClassScheduleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryClassScheduleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponse = QueryClassScheduleResponse;
class QueryClassScheduleByTimeSchoolHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolHeaders = QueryClassScheduleByTimeSchoolHeaders;
class QueryClassScheduleByTimeSchoolRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            opUserId: 'opUserId',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            opUserId: 'string',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolRequest = QueryClassScheduleByTimeSchoolRequest;
class QueryClassScheduleByTimeSchoolResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryClassScheduleByTimeSchoolResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBody = QueryClassScheduleByTimeSchoolResponseBody;
class QueryClassScheduleByTimeSchoolResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryClassScheduleByTimeSchoolResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolResponse = QueryClassScheduleByTimeSchoolResponse;
class QueryClassScheduleConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigHeaders = QueryClassScheduleConfigHeaders;
class QueryClassScheduleConfigRequest extends $tea.Model {
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigRequest = QueryClassScheduleConfigRequest;
class QueryClassScheduleConfigShrinkRequest extends $tea.Model {
    static names() {
        return {
            classIdsShrink: 'classIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classIdsShrink: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigShrinkRequest = QueryClassScheduleConfigShrinkRequest;
class QueryClassScheduleConfigResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryClassScheduleConfigResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBody = QueryClassScheduleConfigResponseBody;
class QueryClassScheduleConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryClassScheduleConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponse = QueryClassScheduleConfigResponse;
class QueryCollegeContactUserDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailHeaders = QueryCollegeContactUserDetailHeaders;
class QueryCollegeContactUserDetailRequest extends $tea.Model {
    static names() {
        return {
            jobNumber: 'jobNumber',
            language: 'language',
            userid: 'userid',
        };
    }
    static types() {
        return {
            jobNumber: 'string',
            language: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailRequest = QueryCollegeContactUserDetailRequest;
class QueryCollegeContactUserDetailResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryCollegeContactUserDetailResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBody = QueryCollegeContactUserDetailResponseBody;
class QueryCollegeContactUserDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCollegeContactUserDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponse = QueryCollegeContactUserDetailResponse;
class QueryDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceHeaders = QueryDeviceHeaders;
class QueryDeviceRequest extends $tea.Model {
    static names() {
        return {
            sn: 'sn',
        };
    }
    static types() {
        return {
            sn: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceRequest = QueryDeviceRequest;
class QueryDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            gmtExpiry: 'gmtExpiry',
            model: 'model',
            name: 'name',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            gmtExpiry: 'number',
            model: 'string',
            name: 'string',
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceResponseBody = QueryDeviceResponseBody;
class QueryDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceResponse = QueryDeviceResponse;
class QueryDeviceListByCorpIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceListByCorpIdHeaders = QueryDeviceListByCorpIdHeaders;
class QueryDeviceListByCorpIdRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            operator: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceListByCorpIdRequest = QueryDeviceListByCorpIdRequest;
class QueryDeviceListByCorpIdResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryDeviceListByCorpIdResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceListByCorpIdResponseBody = QueryDeviceListByCorpIdResponseBody;
class QueryDeviceListByCorpIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceListByCorpIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceListByCorpIdResponse = QueryDeviceListByCorpIdResponse;
class QueryEduAssetSpacesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEduAssetSpacesHeaders = QueryEduAssetSpacesHeaders;
class QueryEduAssetSpacesRequest extends $tea.Model {
    static names() {
        return {
            bizCode: 'bizCode',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEduAssetSpacesRequest = QueryEduAssetSpacesRequest;
class QueryEduAssetSpacesResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            spaces: 'spaces',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            spaces: { 'type': 'array', 'itemType': QueryEduAssetSpacesResponseBodySpaces },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEduAssetSpacesResponseBody = QueryEduAssetSpacesResponseBody;
class QueryEduAssetSpacesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryEduAssetSpacesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEduAssetSpacesResponse = QueryEduAssetSpacesResponse;
class QueryGroupIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupIdHeaders = QueryGroupIdHeaders;
class QueryGroupIdRequest extends $tea.Model {
    static names() {
        return {
            sn: 'sn',
        };
    }
    static types() {
        return {
            sn: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupIdRequest = QueryGroupIdRequest;
class QueryGroupIdResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            groupId: 'groupId',
            merchantId: 'merchantId',
            merchantName: 'merchantName',
            name: 'name',
            pid: 'pid',
        };
    }
    static types() {
        return {
            corpId: 'string',
            groupId: 'string',
            merchantId: 'string',
            merchantName: 'string',
            name: 'string',
            pid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupIdResponseBody = QueryGroupIdResponseBody;
class QueryGroupIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupIdResponse = QueryGroupIdResponse;
class QueryKitOpenRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryKitOpenRecordHeaders = QueryKitOpenRecordHeaders;
class QueryKitOpenRecordRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            isvProductScene: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryKitOpenRecordRequest = QueryKitOpenRecordRequest;
class QueryKitOpenRecordResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryKitOpenRecordResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryKitOpenRecordResponseBody = QueryKitOpenRecordResponseBody;
class QueryKitOpenRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryKitOpenRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryKitOpenRecordResponse = QueryKitOpenRecordResponse;
class QueryOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrderHeaders = QueryOrderHeaders;
class QueryOrderRequest extends $tea.Model {
    static names() {
        return {
            alipayAppId: 'alipayAppId',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            signature: 'signature',
        };
    }
    static types() {
        return {
            alipayAppId: 'string',
            merchantId: 'string',
            orderNo: 'string',
            signature: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrderRequest = QueryOrderRequest;
class QueryOrderResponseBody extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayAppId: 'alipayAppId',
            closeTime: 'closeTime',
            closeTimestamp: 'closeTimestamp',
            createTime: 'createTime',
            createTimestamp: 'createTimestamp',
            labelAmount: 'labelAmount',
            merchantId: 'merchantId',
            merchantMergeOrderNo: 'merchantMergeOrderNo',
            merchantOrderNo: 'merchantOrderNo',
            orderNo: 'orderNo',
            orderType: 'orderType',
            outerUserId: 'outerUserId',
            payLogonId: 'payLogonId',
            payStatus: 'payStatus',
            payTime: 'payTime',
            payTimestamp: 'payTimestamp',
            payType: 'payType',
            refundAmount: 'refundAmount',
            refundStatus: 'refundStatus',
            refundTime: 'refundTime',
            refundTimestamp: 'refundTimestamp',
            subject: 'subject',
            tradeNo: 'tradeNo',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayAppId: 'string',
            closeTime: 'string',
            closeTimestamp: 'number',
            createTime: 'string',
            createTimestamp: 'number',
            labelAmount: 'number',
            merchantId: 'string',
            merchantMergeOrderNo: 'string',
            merchantOrderNo: 'string',
            orderNo: 'string',
            orderType: 'string',
            outerUserId: 'string',
            payLogonId: 'string',
            payStatus: 'number',
            payTime: 'string',
            payTimestamp: 'number',
            payType: 'string',
            refundAmount: 'number',
            refundStatus: 'number',
            refundTime: 'string',
            refundTimestamp: 'number',
            subject: 'string',
            tradeNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrderResponseBody = QueryOrderResponseBody;
class QueryOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrderResponse = QueryOrderResponse;
class QueryOrgRelationListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgRelationListHeaders = QueryOrgRelationListHeaders;
class QueryOrgRelationListRequest extends $tea.Model {
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgRelationListRequest = QueryOrgRelationListRequest;
class QueryOrgRelationListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryOrgRelationListResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgRelationListResponseBody = QueryOrgRelationListResponseBody;
class QueryOrgRelationListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOrgRelationListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgRelationListResponse = QueryOrgRelationListResponse;
class QueryOrgSecretKeyHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgSecretKeyHeaders = QueryOrgSecretKeyHeaders;
class QueryOrgSecretKeyRequest extends $tea.Model {
    static names() {
        return {
            isvCode: 'isvCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            isvCode: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgSecretKeyRequest = QueryOrgSecretKeyRequest;
class QueryOrgSecretKeyResponseBody extends $tea.Model {
    static names() {
        return {
            universitySecretKeyInfo: 'universitySecretKeyInfo',
        };
    }
    static types() {
        return {
            universitySecretKeyInfo: QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgSecretKeyResponseBody = QueryOrgSecretKeyResponseBody;
class QueryOrgSecretKeyResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOrgSecretKeyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgSecretKeyResponse = QueryOrgSecretKeyResponse;
class QueryOrgTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgTypeHeaders = QueryOrgTypeHeaders;
class QueryOrgTypeResponseBody extends $tea.Model {
    static names() {
        return {
            orgType: 'orgType',
        };
    }
    static types() {
        return {
            orgType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgTypeResponseBody = QueryOrgTypeResponseBody;
class QueryOrgTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOrgTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgTypeResponse = QueryOrgTypeResponse;
class QueryPayResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPayResultHeaders = QueryPayResultHeaders;
class QueryPayResultRequest extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            orderNo: 'orderNo',
            signature: 'signature',
            sn: 'sn',
            timestamp: 'timestamp',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            faceId: 'string',
            orderNo: 'string',
            signature: 'string',
            sn: 'string',
            timestamp: 'number',
            userId: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPayResultRequest = QueryPayResultRequest;
class QueryPayResultResponseBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPayResultResponseBody = QueryPayResultResponseBody;
class QueryPayResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPayResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPayResultResponse = QueryPayResultResponse;
class QueryPhysicalClassroomHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPhysicalClassroomHeaders = QueryPhysicalClassroomHeaders;
class QueryPhysicalClassroomRequest extends $tea.Model {
    static names() {
        return {
            classroomId: 'classroomId',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomId: 'number',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPhysicalClassroomRequest = QueryPhysicalClassroomRequest;
class QueryPhysicalClassroomResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryPhysicalClassroomResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPhysicalClassroomResponseBody = QueryPhysicalClassroomResponseBody;
class QueryPhysicalClassroomResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPhysicalClassroomResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPhysicalClassroomResponse = QueryPhysicalClassroomResponse;
class QueryPurchaseInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPurchaseInfoHeaders = QueryPurchaseInfoHeaders;
class QueryPurchaseInfoRequest extends $tea.Model {
    static names() {
        return {
            merchantId: 'merchantId',
            scene: 'scene',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            merchantId: 'string',
            scene: 'number',
            sn: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPurchaseInfoRequest = QueryPurchaseInfoRequest;
class QueryPurchaseInfoResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            merchantId: 'merchantId',
            name: 'name',
            scene: 'scene',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            merchantId: 'string',
            name: 'string',
            scene: 'number',
            status: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPurchaseInfoResponseBody = QueryPurchaseInfoResponseBody;
class QueryPurchaseInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPurchaseInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPurchaseInfoResponse = QueryPurchaseInfoResponse;
class QueryRemoteClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseHeaders = QueryRemoteClassCourseHeaders;
class QueryRemoteClassCourseRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            operator: 'operator',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            operator: 'string',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseRequest = QueryRemoteClassCourseRequest;
class QueryRemoteClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryRemoteClassCourseResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseResponseBody = QueryRemoteClassCourseResponseBody;
class QueryRemoteClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRemoteClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseResponse = QueryRemoteClassCourseResponse;
class QuerySchoolUserFaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySchoolUserFaceHeaders = QuerySchoolUserFaceHeaders;
class QuerySchoolUserFaceRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            sn: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySchoolUserFaceRequest = QuerySchoolUserFaceRequest;
class QuerySchoolUserFaceResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            hasMore: 'hasMore',
            userFaceList: 'userFaceList',
        };
    }
    static types() {
        return {
            corpId: 'string',
            hasMore: 'boolean',
            userFaceList: { 'type': 'array', 'itemType': QuerySchoolUserFaceResponseBodyUserFaceList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySchoolUserFaceResponseBody = QuerySchoolUserFaceResponseBody;
class QuerySchoolUserFaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySchoolUserFaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySchoolUserFaceResponse = QuerySchoolUserFaceResponse;
class QuerySnsOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySnsOrderHeaders = QuerySnsOrderHeaders;
class QuerySnsOrderRequest extends $tea.Model {
    static names() {
        return {
            alipayAppId: 'alipayAppId',
            merchantId: 'merchantId',
            orderNo: 'orderNo',
            signature: 'signature',
        };
    }
    static types() {
        return {
            alipayAppId: 'string',
            merchantId: 'string',
            orderNo: 'string',
            signature: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySnsOrderRequest = QuerySnsOrderRequest;
class QuerySnsOrderResponseBody extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            alipayAppId: 'alipayAppId',
            closeTime: 'closeTime',
            closeTimestamp: 'closeTimestamp',
            createTime: 'createTime',
            createTimestamp: 'createTimestamp',
            labelAmount: 'labelAmount',
            merchantId: 'merchantId',
            merchantMergeOrderNo: 'merchantMergeOrderNo',
            merchantOrderNo: 'merchantOrderNo',
            orderNo: 'orderNo',
            orderType: 'orderType',
            outerUserId: 'outerUserId',
            payLogonId: 'payLogonId',
            payStatus: 'payStatus',
            payTime: 'payTime',
            payTimestamp: 'payTimestamp',
            payType: 'payType',
            refundAmount: 'refundAmount',
            refundStatus: 'refundStatus',
            refundTime: 'refundTime',
            refundTimestamp: 'refundTimestamp',
            subject: 'subject',
            tradeNo: 'tradeNo',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            alipayAppId: 'string',
            closeTime: 'string',
            closeTimestamp: 'number',
            createTime: 'string',
            createTimestamp: 'number',
            labelAmount: 'number',
            merchantId: 'string',
            merchantMergeOrderNo: 'string',
            merchantOrderNo: 'string',
            orderNo: 'string',
            orderType: 'string',
            outerUserId: 'string',
            payLogonId: 'string',
            payStatus: 'number',
            payTime: 'string',
            payTimestamp: 'number',
            payType: 'string',
            refundAmount: 'number',
            refundStatus: 'number',
            refundTime: 'string',
            refundTimestamp: 'number',
            subject: 'string',
            tradeNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySnsOrderResponseBody = QuerySnsOrderResponseBody;
class QuerySnsOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySnsOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySnsOrderResponse = QuerySnsOrderResponse;
class QueryStatisticsDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStatisticsDataHeaders = QueryStatisticsDataHeaders;
class QueryStatisticsDataRequest extends $tea.Model {
    static names() {
        return {
            sectionIndexList: 'sectionIndexList',
            teacherUserIds: 'teacherUserIds',
            endTime: 'endTime',
            opUserId: 'opUserId',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            sectionIndexList: { 'type': 'array', 'itemType': 'number' },
            teacherUserIds: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            opUserId: 'string',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStatisticsDataRequest = QueryStatisticsDataRequest;
class QueryStatisticsDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryStatisticsDataResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStatisticsDataResponseBody = QueryStatisticsDataResponseBody;
class QueryStatisticsDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryStatisticsDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStatisticsDataResponse = QueryStatisticsDataResponse;
class QueryStudentClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStudentClassHeaders = QueryStudentClassHeaders;
class QueryStudentClassRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            classType: 'classType',
            corpId: 'corpId',
            isvCode: 'isvCode',
            studentUserIds: 'studentUserIds',
        };
    }
    static types() {
        return {
            classId: 'string',
            classType: 'number',
            corpId: 'string',
            isvCode: 'string',
            studentUserIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStudentClassRequest = QueryStudentClassRequest;
class QueryStudentClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryStudentClassResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStudentClassResponseBody = QueryStudentClassResponseBody;
class QueryStudentClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryStudentClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStudentClassResponse = QueryStudentClassResponse;
class QuerySubjectTeachersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubjectTeachersHeaders = QuerySubjectTeachersHeaders;
class QuerySubjectTeachersRequest extends $tea.Model {
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
            subjectCode: 'subjectCode',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            subjectCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubjectTeachersRequest = QuerySubjectTeachersRequest;
class QuerySubjectTeachersResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QuerySubjectTeachersResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubjectTeachersResponseBody = QuerySubjectTeachersResponseBody;
class QuerySubjectTeachersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySubjectTeachersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubjectTeachersResponse = QuerySubjectTeachersResponse;
class QueryTeachSubjectsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeachSubjectsHeaders = QueryTeachSubjectsHeaders;
class QueryTeachSubjectsRequest extends $tea.Model {
    static names() {
        return {
            classIds: 'classIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classIds: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeachSubjectsRequest = QueryTeachSubjectsRequest;
class QueryTeachSubjectsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryTeachSubjectsResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeachSubjectsResponseBody = QueryTeachSubjectsResponseBody;
class QueryTeachSubjectsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTeachSubjectsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeachSubjectsResponse = QueryTeachSubjectsResponse;
class QueryTeacherCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeacherCourseHeaders = QueryTeacherCourseHeaders;
class QueryTeacherCourseRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvCourseIdList: 'isvCourseIdList',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            isvCourseIdList: { 'type': 'array', 'itemType': 'string' },
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeacherCourseRequest = QueryTeacherCourseRequest;
class QueryTeacherCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryTeacherCourseResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeacherCourseResponseBody = QueryTeacherCourseResponseBody;
class QueryTeacherCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTeacherCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeacherCourseResponse = QueryTeacherCourseResponse;
class QueryTransferCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTransferCourseHeaders = QueryTransferCourseHeaders;
class QueryTransferCourseRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvRecordId: 'isvRecordId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            isvRecordId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTransferCourseRequest = QueryTransferCourseRequest;
class QueryTransferCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryTransferCourseResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTransferCourseResponseBody = QueryTransferCourseResponseBody;
class QueryTransferCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTransferCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTransferCourseResponse = QueryTransferCourseResponse;
class QueryUniversityCourseGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupHeaders = QueryUniversityCourseGroupHeaders;
class QueryUniversityCourseGroupRequest extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupRequest = QueryUniversityCourseGroupRequest;
class QueryUniversityCourseGroupResponseBody extends $tea.Model {
    static names() {
        return {
            universityCourseGroupInfo: 'universityCourseGroupInfo',
        };
    }
    static types() {
        return {
            universityCourseGroupInfo: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupResponseBody = QueryUniversityCourseGroupResponseBody;
class QueryUniversityCourseGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUniversityCourseGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupResponse = QueryUniversityCourseGroupResponse;
class QueryUserFaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserFaceHeaders = QueryUserFaceHeaders;
class QueryUserFaceRequest extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            sn: 'sn',
        };
    }
    static types() {
        return {
            faceId: 'string',
            sn: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserFaceRequest = QueryUserFaceRequest;
class QueryUserFaceResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            faceId: 'faceId',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            faceId: 'string',
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserFaceResponseBody = QueryUserFaceResponseBody;
class QueryUserFaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserFaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserFaceResponse = QueryUserFaceResponse;
class QueryUserPayInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserPayInfoHeaders = QueryUserPayInfoHeaders;
class QueryUserPayInfoRequest extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            sn: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserPayInfoRequest = QueryUserPayInfoRequest;
class QueryUserPayInfoResponseBody extends $tea.Model {
    static names() {
        return {
            signNo: 'signNo',
        };
    }
    static types() {
        return {
            signNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserPayInfoResponseBody = QueryUserPayInfoResponseBody;
class QueryUserPayInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserPayInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserPayInfoResponse = QueryUserPayInfoResponse;
class RemoveDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveDeviceHeaders = RemoveDeviceHeaders;
class RemoveDeviceRequest extends $tea.Model {
    static names() {
        return {
            merchantId: 'merchantId',
            sn: 'sn',
        };
    }
    static types() {
        return {
            merchantId: 'string',
            sn: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveDeviceRequest = RemoveDeviceRequest;
class RemoveDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveDeviceResponseBody = RemoveDeviceResponseBody;
class RemoveDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveDeviceResponse = RemoveDeviceResponse;
class ReportDeviceLogHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceLogHeaders = ReportDeviceLogHeaders;
class ReportDeviceLogRequest extends $tea.Model {
    static names() {
        return {
            mediaId: 'mediaId',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            mediaId: 'string',
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceLogRequest = ReportDeviceLogRequest;
class ReportDeviceLogResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceLogResponseBody = ReportDeviceLogResponseBody;
class ReportDeviceLogResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ReportDeviceLogResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceLogResponse = ReportDeviceLogResponse;
class ReportDeviceUseLogHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceUseLogHeaders = ReportDeviceUseLogHeaders;
class ReportDeviceUseLogRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            orderNo: 'orderNo',
            sn: 'sn',
            userId: 'userId',
        };
    }
    static types() {
        return {
            action: 'string',
            orderNo: 'string',
            sn: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceUseLogRequest = ReportDeviceUseLogRequest;
class ReportDeviceUseLogResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceUseLogResponseBody = ReportDeviceUseLogResponseBody;
class ReportDeviceUseLogResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ReportDeviceUseLogResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReportDeviceUseLogResponse = ReportDeviceUseLogResponse;
class RollbackDeductPointHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackDeductPointHeaders = RollbackDeductPointHeaders;
class RollbackDeductPointRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            pointType: 'pointType',
        };
    }
    static types() {
        return {
            bizId: 'string',
            pointType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackDeductPointRequest = RollbackDeductPointRequest;
class RollbackDeductPointResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackDeductPointResponseBody = RollbackDeductPointResponseBody;
class RollbackDeductPointResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RollbackDeductPointResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackDeductPointResponse = RollbackDeductPointResponse;
class SaveClassLearningDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveClassLearningDataHeaders = SaveClassLearningDataHeaders;
class SaveClassLearningDataRequest extends $tea.Model {
    static names() {
        return {
            assignNum: 'assignNum',
            assignStudentUserIds: 'assignStudentUserIds',
            bizId: 'bizId',
            bizType: 'bizType',
            corpId: 'corpId',
            deptId: 'deptId',
            fileSuffix: 'fileSuffix',
            generatedTime: 'generatedTime',
            questionNum: 'questionNum',
            questionPictureNum: 'questionPictureNum',
            standardAnswerPictureNum: 'standardAnswerPictureNum',
            subjectCode: 'subjectCode',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            assignNum: 'number',
            assignStudentUserIds: { 'type': 'array', 'itemType': 'string' },
            bizId: 'string',
            bizType: 'string',
            corpId: 'string',
            deptId: 'number',
            fileSuffix: 'string',
            generatedTime: 'number',
            questionNum: 'number',
            questionPictureNum: 'number',
            standardAnswerPictureNum: 'number',
            subjectCode: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveClassLearningDataRequest = SaveClassLearningDataRequest;
class SaveClassLearningDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: SaveClassLearningDataResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveClassLearningDataResponseBody = SaveClassLearningDataResponseBody;
class SaveClassLearningDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveClassLearningDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveClassLearningDataResponse = SaveClassLearningDataResponse;
class SaveStudentLearningDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataHeaders = SaveStudentLearningDataHeaders;
class SaveStudentLearningDataRequest extends $tea.Model {
    static names() {
        return {
            assignNum: 'assignNum',
            bizId: 'bizId',
            bizType: 'bizType',
            corpId: 'corpId',
            correctNum: 'correctNum',
            deptId: 'deptId',
            fileSuffix: 'fileSuffix',
            generatedTime: 'generatedTime',
            questionNum: 'questionNum',
            studentUserId: 'studentUserId',
            subjectCode: 'subjectCode',
            submitNum: 'submitNum',
            wrongQuestions: 'wrongQuestions',
        };
    }
    static types() {
        return {
            assignNum: 'number',
            bizId: 'string',
            bizType: 'string',
            corpId: 'string',
            correctNum: 'number',
            deptId: 'number',
            fileSuffix: 'string',
            generatedTime: 'number',
            questionNum: 'number',
            studentUserId: 'string',
            subjectCode: 'string',
            submitNum: 'number',
            wrongQuestions: { 'type': 'array', 'itemType': SaveStudentLearningDataRequestWrongQuestions },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataRequest = SaveStudentLearningDataRequest;
class SaveStudentLearningDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: SaveStudentLearningDataResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataResponseBody = SaveStudentLearningDataResponseBody;
class SaveStudentLearningDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveStudentLearningDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataResponse = SaveStudentLearningDataResponse;
class SearchTeachersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTeachersHeaders = SearchTeachersHeaders;
class SearchTeachersRequest extends $tea.Model {
    static names() {
        return {
            nameKeyword: 'nameKeyword',
        };
    }
    static types() {
        return {
            nameKeyword: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTeachersRequest = SearchTeachersRequest;
class SearchTeachersResponseBody extends $tea.Model {
    static names() {
        return {
            users: 'users',
        };
    }
    static types() {
        return {
            users: { 'type': 'array', 'itemType': SearchTeachersResponseBodyUsers },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTeachersResponseBody = SearchTeachersResponseBody;
class SearchTeachersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchTeachersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTeachersResponse = SearchTeachersResponse;
class SendAiCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAiCardHeaders = SendAiCardHeaders;
class SendAiCardRequest extends $tea.Model {
    static names() {
        return {
            actionType: 'actionType',
            bizData: 'bizData',
            cardChannel: 'cardChannel',
            corpId: 'corpId',
            identifier: 'identifier',
            isvCode: 'isvCode',
        };
    }
    static types() {
        return {
            actionType: 'string',
            bizData: 'string',
            cardChannel: 'string',
            corpId: 'string',
            identifier: 'string',
            isvCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAiCardRequest = SendAiCardRequest;
class SendAiCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAiCardResponseBody = SendAiCardResponseBody;
class SendAiCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendAiCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAiCardResponse = SendAiCardResponse;
class SendFileMessageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendFileMessageHeaders = SendFileMessageHeaders;
class SendFileMessageRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            extension: 'extension',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileUrl: 'fileUrl',
            sendType: 'sendType',
        };
    }
    static types() {
        return {
            bizId: 'string',
            extension: 'string',
            fileName: 'string',
            fileSize: 'number',
            fileUrl: 'string',
            sendType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendFileMessageRequest = SendFileMessageRequest;
class SendFileMessageResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendFileMessageResponseBody = SendFileMessageResponseBody;
class SendFileMessageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendFileMessageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendFileMessageResponse = SendFileMessageResponse;
class SendMessageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendMessageHeaders = SendMessageHeaders;
class SendMessageRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            fromUserId: 'fromUserId',
            sn: 'sn',
            toUserIdList: 'toUserIdList',
            type: 'type',
        };
    }
    static types() {
        return {
            bizId: 'string',
            fromUserId: 'string',
            sn: 'string',
            toUserIdList: { 'type': 'array', 'itemType': 'string' },
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendMessageRequest = SendMessageRequest;
class SendMessageResponseBody extends $tea.Model {
    static names() {
        return {
            successInfo: 'successInfo',
        };
    }
    static types() {
        return {
            successInfo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendMessageResponseBody = SendMessageResponseBody;
class SendMessageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendMessageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendMessageResponse = SendMessageResponse;
class SendPrintOrderNoticeMsgHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPrintOrderNoticeMsgHeaders = SendPrintOrderNoticeMsgHeaders;
class SendPrintOrderNoticeMsgRequest extends $tea.Model {
    static names() {
        return {
            createOrderTime: 'createOrderTime',
            deliveryCompanyName: 'deliveryCompanyName',
            deliveryNumber: 'deliveryNumber',
            deliveryTime: 'deliveryTime',
            paymentTime: 'paymentTime',
            price: 'price',
            sceneCode: 'sceneCode',
        };
    }
    static types() {
        return {
            createOrderTime: 'string',
            deliveryCompanyName: 'string',
            deliveryNumber: 'string',
            deliveryTime: 'string',
            paymentTime: 'string',
            price: 'string',
            sceneCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPrintOrderNoticeMsgRequest = SendPrintOrderNoticeMsgRequest;
class SendPrintOrderNoticeMsgResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPrintOrderNoticeMsgResponseBody = SendPrintOrderNoticeMsgResponseBody;
class SendPrintOrderNoticeMsgResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendPrintOrderNoticeMsgResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPrintOrderNoticeMsgResponse = SendPrintOrderNoticeMsgResponse;
class StartCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCourseHeaders = StartCourseHeaders;
class StartCourseRequest extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            ext: 'ext',
            isvCode: 'isvCode',
            livePlayInfoList: 'livePlayInfoList',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            ext: 'string',
            isvCode: 'string',
            livePlayInfoList: { 'type': 'array', 'itemType': StartCourseRequestLivePlayInfoList },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCourseRequest = StartCourseRequest;
class StartCourseResponseBody extends $tea.Model {
    static names() {
        return {
            universityCourseCommonResponse: 'universityCourseCommonResponse',
        };
    }
    static types() {
        return {
            universityCourseCommonResponse: StartCourseResponseBodyUniversityCourseCommonResponse,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCourseResponseBody = StartCourseResponseBody;
class StartCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StartCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCourseResponse = StartCourseResponse;
class StartCoursePrepareHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCoursePrepareHeaders = StartCoursePrepareHeaders;
class StartCoursePrepareRequest extends $tea.Model {
    static names() {
        return {
            courseDate: 'courseDate',
            courseGroupCode: 'courseGroupCode',
            deviceId: 'deviceId',
            ext: 'ext',
            isvCode: 'isvCode',
            liveCoverImage: 'liveCoverImage',
            sectionIndex: 'sectionIndex',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseDate: 'string',
            courseGroupCode: 'string',
            deviceId: 'string',
            ext: 'string',
            isvCode: 'string',
            liveCoverImage: 'string',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCoursePrepareRequest = StartCoursePrepareRequest;
class StartCoursePrepareResponseBody extends $tea.Model {
    static names() {
        return {
            universityCourseCommonResponse: 'universityCourseCommonResponse',
        };
    }
    static types() {
        return {
            universityCourseCommonResponse: StartCoursePrepareResponseBodyUniversityCourseCommonResponse,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCoursePrepareResponseBody = StartCoursePrepareResponseBody;
class StartCoursePrepareResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StartCoursePrepareResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCoursePrepareResponse = StartCoursePrepareResponse;
class SubscribeUniversityCourseGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeUniversityCourseGroupHeaders = SubscribeUniversityCourseGroupHeaders;
class SubscribeUniversityCourseGroupRequest extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            studentUserIds: 'studentUserIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            studentUserIds: { 'type': 'array', 'itemType': 'string' },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeUniversityCourseGroupRequest = SubscribeUniversityCourseGroupRequest;
class SubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeUniversityCourseGroupResponseBody = SubscribeUniversityCourseGroupResponseBody;
class SubscribeUniversityCourseGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubscribeUniversityCourseGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeUniversityCourseGroupResponse = SubscribeUniversityCourseGroupResponse;
class UnsubscribeUniversityCourseGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeUniversityCourseGroupHeaders = UnsubscribeUniversityCourseGroupHeaders;
class UnsubscribeUniversityCourseGroupRequest extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            studentUserIds: 'studentUserIds',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            studentUserIds: { 'type': 'array', 'itemType': 'string' },
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeUniversityCourseGroupRequest = UnsubscribeUniversityCourseGroupRequest;
class UnsubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeUniversityCourseGroupResponseBody = UnsubscribeUniversityCourseGroupResponseBody;
class UnsubscribeUniversityCourseGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnsubscribeUniversityCourseGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnsubscribeUniversityCourseGroupResponse = UnsubscribeUniversityCourseGroupResponse;
class UpdateCollegeAlumniUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeAlumniUserInfoHeaders = UpdateCollegeAlumniUserInfoHeaders;
class UpdateCollegeAlumniUserInfoRequest extends $tea.Model {
    static names() {
        return {
            address: 'address',
            deptIds: 'deptIds',
            email: 'email',
            intake: 'intake',
            name: 'name',
            operator: 'operator',
            outtake: 'outtake',
            studentNumber: 'studentNumber',
            userId: 'userId',
        };
    }
    static types() {
        return {
            address: 'string',
            deptIds: { 'type': 'array', 'itemType': 'number' },
            email: 'string',
            intake: 'string',
            name: 'string',
            operator: 'string',
            outtake: 'string',
            studentNumber: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeAlumniUserInfoRequest = UpdateCollegeAlumniUserInfoRequest;
class UpdateCollegeAlumniUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeAlumniUserInfoResponseBody = UpdateCollegeAlumniUserInfoResponseBody;
class UpdateCollegeAlumniUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCollegeAlumniUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeAlumniUserInfoResponse = UpdateCollegeAlumniUserInfoResponse;
class UpdateCollegeContactDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactDeptHeaders = UpdateCollegeContactDeptHeaders;
class UpdateCollegeContactDeptRequest extends $tea.Model {
    static names() {
        return {
            autoAddUser: 'autoAddUser',
            autoApproveApply: 'autoApproveApply',
            brief: 'brief',
            code: 'code',
            createDeptGroup: 'createDeptGroup',
            deptCode: 'deptCode',
            deptId: 'deptId',
            deptManagerUseridList: 'deptManagerUseridList',
            deptPermits: 'deptPermits',
            deptType: 'deptType',
            empApplyJoinDept: 'empApplyJoinDept',
            extension: 'extension',
            forceUpdateFields: 'forceUpdateFields',
            groupContainHiddenDept: 'groupContainHiddenDept',
            groupContainOuterDept: 'groupContainOuterDept',
            groupContainSubDept: 'groupContainSubDept',
            hideDept: 'hideDept',
            hideSceneConfig: 'hideSceneConfig',
            language: 'language',
            name: 'name',
            order: 'order',
            orgDeptOwner: 'orgDeptOwner',
            outerDept: 'outerDept',
            outerDeptOnlySelf: 'outerDeptOnlySelf',
            outerPermitDepts: 'outerPermitDepts',
            outerPermitUsers: 'outerPermitUsers',
            outerSceneConfig: 'outerSceneConfig',
            parentId: 'parentId',
            sourceIdentifier: 'sourceIdentifier',
            telephone: 'telephone',
            userPermits: 'userPermits',
        };
    }
    static types() {
        return {
            autoAddUser: 'boolean',
            autoApproveApply: 'boolean',
            brief: 'string',
            code: 'string',
            createDeptGroup: 'boolean',
            deptCode: 'string',
            deptId: 'number',
            deptManagerUseridList: { 'type': 'array', 'itemType': 'string' },
            deptPermits: { 'type': 'array', 'itemType': 'number' },
            deptType: 'string',
            empApplyJoinDept: 'boolean',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            forceUpdateFields: { 'type': 'array', 'itemType': 'string' },
            groupContainHiddenDept: 'boolean',
            groupContainOuterDept: 'boolean',
            groupContainSubDept: 'boolean',
            hideDept: 'boolean',
            hideSceneConfig: UpdateCollegeContactDeptRequestHideSceneConfig,
            language: 'string',
            name: 'string',
            order: 'number',
            orgDeptOwner: 'string',
            outerDept: 'boolean',
            outerDeptOnlySelf: 'boolean',
            outerPermitDepts: { 'type': 'array', 'itemType': 'number' },
            outerPermitUsers: { 'type': 'array', 'itemType': 'string' },
            outerSceneConfig: UpdateCollegeContactDeptRequestOuterSceneConfig,
            parentId: 'number',
            sourceIdentifier: 'string',
            telephone: 'string',
            userPermits: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactDeptRequest = UpdateCollegeContactDeptRequest;
class UpdateCollegeContactDeptResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactDeptResponseBody = UpdateCollegeContactDeptResponseBody;
class UpdateCollegeContactDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCollegeContactDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactDeptResponse = UpdateCollegeContactDeptResponse;
class UpdateCollegeContactExclusiveHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveHeaders = UpdateCollegeContactExclusiveHeaders;
class UpdateCollegeContactExclusiveRequest extends $tea.Model {
    static names() {
        return {
            avatarMediaId: 'avatarMediaId',
            deptIdList: 'deptIdList',
            deptOrderList: 'deptOrderList',
            deptPositionSet: 'deptPositionSet',
            deptTitleList: 'deptTitleList',
            email: 'email',
            empType: 'empType',
            extension: 'extension',
            forceUpdateFields: 'forceUpdateFields',
            hideMobile: 'hideMobile',
            hiredDate: 'hiredDate',
            jobNumber: 'jobNumber',
            language: 'language',
            loginIdType: 'loginIdType',
            mainDeptId: 'mainDeptId',
            managerUserid: 'managerUserid',
            mobile: 'mobile',
            name: 'name',
            nickname: 'nickname',
            orgEmail: 'orgEmail',
            orgEmailType: 'orgEmailType',
            remark: 'remark',
            seniorMode: 'seniorMode',
            telephone: 'telephone',
            title: 'title',
            userid: 'userid',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            avatarMediaId: 'string',
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            deptOrderList: { 'type': 'array', 'itemType': UpdateCollegeContactExclusiveRequestDeptOrderList },
            deptPositionSet: { 'type': 'array', 'itemType': UpdateCollegeContactExclusiveRequestDeptPositionSet },
            deptTitleList: { 'type': 'array', 'itemType': UpdateCollegeContactExclusiveRequestDeptTitleList },
            email: 'string',
            empType: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            forceUpdateFields: 'string',
            hideMobile: 'boolean',
            hiredDate: 'number',
            jobNumber: 'string',
            language: 'string',
            loginIdType: 'string',
            mainDeptId: 'number',
            managerUserid: 'string',
            mobile: 'string',
            name: 'string',
            nickname: 'string',
            orgEmail: 'string',
            orgEmailType: 'string',
            remark: 'string',
            seniorMode: 'boolean',
            telephone: 'string',
            title: 'string',
            userid: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveRequest = UpdateCollegeContactExclusiveRequest;
class UpdateCollegeContactExclusiveResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveResponseBody = UpdateCollegeContactExclusiveResponseBody;
class UpdateCollegeContactExclusiveResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCollegeContactExclusiveResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveResponse = UpdateCollegeContactExclusiveResponse;
class UpdateCollegeContactSceneStruHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactSceneStruHeaders = UpdateCollegeContactSceneStruHeaders;
class UpdateCollegeContactSceneStruRequest extends $tea.Model {
    static names() {
        return {
            order: 'order',
            sourceIdentifier: 'sourceIdentifier',
            struBrief: 'struBrief',
            struId: 'struId',
            struName: 'struName',
            struType: 'struType',
        };
    }
    static types() {
        return {
            order: 'number',
            sourceIdentifier: 'string',
            struBrief: 'string',
            struId: 'number',
            struName: 'string',
            struType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactSceneStruRequest = UpdateCollegeContactSceneStruRequest;
class UpdateCollegeContactSceneStruResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactSceneStruResponseBody = UpdateCollegeContactSceneStruResponseBody;
class UpdateCollegeContactSceneStruResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCollegeContactSceneStruResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactSceneStruResponse = UpdateCollegeContactSceneStruResponse;
class UpdateCollegeContactUserHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserHeaders = UpdateCollegeContactUserHeaders;
class UpdateCollegeContactUserRequest extends $tea.Model {
    static names() {
        return {
            deptIdList: 'deptIdList',
            deptOrderList: 'deptOrderList',
            deptPositionSet: 'deptPositionSet',
            deptTitleList: 'deptTitleList',
            email: 'email',
            empType: 'empType',
            extension: 'extension',
            forceUpdateFields: 'forceUpdateFields',
            hideMobile: 'hideMobile',
            hiredDate: 'hiredDate',
            jobNumber: 'jobNumber',
            language: 'language',
            mainDeptId: 'mainDeptId',
            managerUserid: 'managerUserid',
            name: 'name',
            orgEmail: 'orgEmail',
            remark: 'remark',
            seniorMode: 'seniorMode',
            telephone: 'telephone',
            title: 'title',
            userid: 'userid',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            deptOrderList: { 'type': 'array', 'itemType': UpdateCollegeContactUserRequestDeptOrderList },
            deptPositionSet: { 'type': 'array', 'itemType': UpdateCollegeContactUserRequestDeptPositionSet },
            deptTitleList: { 'type': 'array', 'itemType': UpdateCollegeContactUserRequestDeptTitleList },
            email: 'string',
            empType: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            forceUpdateFields: 'string',
            hideMobile: 'boolean',
            hiredDate: 'number',
            jobNumber: 'string',
            language: 'string',
            mainDeptId: 'number',
            managerUserid: 'string',
            name: 'string',
            orgEmail: 'string',
            remark: 'string',
            seniorMode: 'boolean',
            telephone: 'string',
            title: 'string',
            userid: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserRequest = UpdateCollegeContactUserRequest;
class UpdateCollegeContactUserResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserResponseBody = UpdateCollegeContactUserResponseBody;
class UpdateCollegeContactUserResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCollegeContactUserResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserResponse = UpdateCollegeContactUserResponse;
class UpdateCollegeUserEmpTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeUserEmpTypeHeaders = UpdateCollegeUserEmpTypeHeaders;
class UpdateCollegeUserEmpTypeRequest extends $tea.Model {
    static names() {
        return {
            empType: 'empType',
            userid: 'userid',
        };
    }
    static types() {
        return {
            empType: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeUserEmpTypeRequest = UpdateCollegeUserEmpTypeRequest;
class UpdateCollegeUserEmpTypeResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeUserEmpTypeResponseBody = UpdateCollegeUserEmpTypeResponseBody;
class UpdateCollegeUserEmpTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCollegeUserEmpTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeUserEmpTypeResponse = UpdateCollegeUserEmpTypeResponse;
class UpdateCoursesOfClassHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassHeaders = UpdateCoursesOfClassHeaders;
class UpdateCoursesOfClassRequest extends $tea.Model {
    static names() {
        return {
            courses: 'courses',
            sectionConfig: 'sectionConfig',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courses: { 'type': 'array', 'itemType': UpdateCoursesOfClassRequestCourses },
            sectionConfig: UpdateCoursesOfClassRequestSectionConfig,
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequest = UpdateCoursesOfClassRequest;
class UpdateCoursesOfClassResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassResponseBody = UpdateCoursesOfClassResponseBody;
class UpdateCoursesOfClassResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCoursesOfClassResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassResponse = UpdateCoursesOfClassResponse;
class UpdatePhysicalClassroomHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePhysicalClassroomHeaders = UpdatePhysicalClassroomHeaders;
class UpdatePhysicalClassroomRequest extends $tea.Model {
    static names() {
        return {
            classroomBuilding: 'classroomBuilding',
            classroomCampus: 'classroomCampus',
            classroomFloor: 'classroomFloor',
            classroomId: 'classroomId',
            classroomName: 'classroomName',
            classroomNumber: 'classroomNumber',
            directBroadcast: 'directBroadcast',
            ext: 'ext',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            classroomBuilding: 'string',
            classroomCampus: 'string',
            classroomFloor: 'string',
            classroomId: 'number',
            classroomName: 'string',
            classroomNumber: 'string',
            directBroadcast: 'string',
            ext: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePhysicalClassroomRequest = UpdatePhysicalClassroomRequest;
class UpdatePhysicalClassroomResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePhysicalClassroomResponseBody = UpdatePhysicalClassroomResponseBody;
class UpdatePhysicalClassroomResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdatePhysicalClassroomResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePhysicalClassroomResponse = UpdatePhysicalClassroomResponse;
class UpdateRemoteClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassCourseHeaders = UpdateRemoteClassCourseHeaders;
class UpdateRemoteClassCourseRequest extends $tea.Model {
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            authCode: 'authCode',
            courseCode: 'courseCode',
            courseName: 'courseName',
            endTime: 'endTime',
            startTime: 'startTime',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': UpdateRemoteClassCourseRequestAttendParticipants },
            authCode: 'string',
            courseCode: 'string',
            courseName: 'string',
            endTime: 'number',
            startTime: 'number',
            teachingParticipant: UpdateRemoteClassCourseRequestTeachingParticipant,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassCourseRequest = UpdateRemoteClassCourseRequest;
class UpdateRemoteClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassCourseResponseBody = UpdateRemoteClassCourseResponseBody;
class UpdateRemoteClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateRemoteClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassCourseResponse = UpdateRemoteClassCourseResponse;
class UpdateRemoteClassDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassDeviceHeaders = UpdateRemoteClassDeviceHeaders;
class UpdateRemoteClassDeviceRequest extends $tea.Model {
    static names() {
        return {
            authCode: 'authCode',
            deviceCode: 'deviceCode',
            deviceName: 'deviceName',
        };
    }
    static types() {
        return {
            authCode: 'string',
            deviceCode: 'string',
            deviceName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassDeviceRequest = UpdateRemoteClassDeviceRequest;
class UpdateRemoteClassDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassDeviceResponseBody = UpdateRemoteClassDeviceResponseBody;
class UpdateRemoteClassDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateRemoteClassDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassDeviceResponse = UpdateRemoteClassDeviceResponse;
class UpdateUniversityCourseGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupHeaders = UpdateUniversityCourseGroupHeaders;
class UpdateUniversityCourseGroupRequest extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            courseGroupIntroduce: 'courseGroupIntroduce',
            courseGroupName: 'courseGroupName',
            courserGroupItemModels: 'courserGroupItemModels',
            ext: 'ext',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            courseGroupIntroduce: 'string',
            courseGroupName: 'string',
            courserGroupItemModels: { 'type': 'array', 'itemType': UpdateUniversityCourseGroupRequestCourserGroupItemModels },
            ext: 'string',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupRequest = UpdateUniversityCourseGroupRequest;
class UpdateUniversityCourseGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupResponseBody = UpdateUniversityCourseGroupResponseBody;
class UpdateUniversityCourseGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateUniversityCourseGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupResponse = UpdateUniversityCourseGroupResponse;
class UploadLearningDataCallbackHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UploadLearningDataCallbackHeaders = UploadLearningDataCallbackHeaders;
class UploadLearningDataCallbackRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            bizType: 'bizType',
            corpId: 'corpId',
            deptId: 'deptId',
            generatedTime: 'generatedTime',
            studentUserId: 'studentUserId',
            subjectCode: 'subjectCode',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'string',
            corpId: 'string',
            deptId: 'number',
            generatedTime: 'number',
            studentUserId: 'string',
            subjectCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UploadLearningDataCallbackRequest = UploadLearningDataCallbackRequest;
class UploadLearningDataCallbackResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UploadLearningDataCallbackResponseBody = UploadLearningDataCallbackResponseBody;
class UploadLearningDataCallbackResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UploadLearningDataCallbackResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UploadLearningDataCallbackResponse = UploadLearningDataCallbackResponse;
class VPaasProxyHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.VPaasProxyHeaders = VPaasProxyHeaders;
class VPaasProxyRequest extends $tea.Model {
    static names() {
        return {
            actionCode: 'actionCode',
            params: 'params',
            publicKey: 'publicKey',
        };
    }
    static types() {
        return {
            actionCode: 'string',
            params: 'string',
            publicKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.VPaasProxyRequest = VPaasProxyRequest;
class VPaasProxyResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            ticket: 'ticket',
        };
    }
    static types() {
        return {
            result: 'string',
            ticket: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.VPaasProxyResponseBody = VPaasProxyResponseBody;
class VPaasProxyResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: VPaasProxyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.VPaasProxyResponse = VPaasProxyResponse;
class ValidateNewGradeManagerHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateNewGradeManagerHeaders = ValidateNewGradeManagerHeaders;
class ValidateNewGradeManagerRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateNewGradeManagerRequest = ValidateNewGradeManagerRequest;
class ValidateNewGradeManagerResponseBody extends $tea.Model {
    static names() {
        return {
            matchRule: 'matchRule',
        };
    }
    static types() {
        return {
            matchRule: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateNewGradeManagerResponseBody = ValidateNewGradeManagerResponseBody;
class ValidateNewGradeManagerResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateNewGradeManagerResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateNewGradeManagerResponse = ValidateNewGradeManagerResponse;
class ValidateUserRoleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateUserRoleHeaders = ValidateUserRoleHeaders;
class ValidateUserRoleRequest extends $tea.Model {
    static names() {
        return {
            timeThreshold: 'timeThreshold',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            timeThreshold: 'number',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateUserRoleRequest = ValidateUserRoleRequest;
class ValidateUserRoleResponseBody extends $tea.Model {
    static names() {
        return {
            matchParentIdentity: 'matchParentIdentity',
            matchTeacherIdentity: 'matchTeacherIdentity',
        };
    }
    static types() {
        return {
            matchParentIdentity: 'boolean',
            matchTeacherIdentity: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateUserRoleResponseBody = ValidateUserRoleResponseBody;
class ValidateUserRoleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateUserRoleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ValidateUserRoleResponse = ValidateUserRoleResponse;
class QueryClassCourseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassCourseHeaders = QueryClassCourseHeaders;
class QueryClassCourseRequest extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
        };
    }
    static types() {
        return {
            classId: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvCourseId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassCourseRequest = QueryClassCourseRequest;
class QueryClassCourseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryClassCourseResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassCourseResponseBody = QueryClassCourseResponseBody;
class QueryClassCourseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryClassCourseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassCourseResponse = QueryClassCourseResponse;
class AddCollegeAlumniDeptsRequestDepts extends $tea.Model {
    static names() {
        return {
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniDeptsRequestDepts = AddCollegeAlumniDeptsRequestDepts;
class AddCollegeAlumniDeptsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            deptId: 'deptId',
            deptType: 'deptType',
            hasSubDept: 'hasSubDept',
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deptId: 'number',
            deptType: 'string',
            hasSubDept: 'boolean',
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniDeptsResponseBodyResult = AddCollegeAlumniDeptsResponseBodyResult;
class AddCollegeAlumniUserInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
            type: 'type',
        };
    }
    static types() {
        return {
            success: 'boolean',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeAlumniUserInfoResponseBodyResult = AddCollegeAlumniUserInfoResponseBodyResult;
class AddCollegeContactExclusiveRequestDeptOrderList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            order: 'order',
        };
    }
    static types() {
        return {
            deptId: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveRequestDeptOrderList = AddCollegeContactExclusiveRequestDeptOrderList;
class AddCollegeContactExclusiveRequestDeptPositionSet extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            managerUserId: 'managerUserId',
            title: 'title',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptId: 'number',
            managerUserId: 'string',
            title: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveRequestDeptPositionSet = AddCollegeContactExclusiveRequestDeptPositionSet;
class AddCollegeContactExclusiveRequestDeptTitleList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            title: 'title',
        };
    }
    static types() {
        return {
            deptId: 'number',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveRequestDeptTitleList = AddCollegeContactExclusiveRequestDeptTitleList;
class AddCollegeContactExclusiveResponseBodyResult extends $tea.Model {
    static names() {
        return {
            createResult: 'createResult',
            unionId: 'unionId',
            userid: 'userid',
        };
    }
    static types() {
        return {
            createResult: 'number',
            unionId: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactExclusiveResponseBodyResult = AddCollegeContactExclusiveResponseBodyResult;
class AddCollegeContactUserRequestDeptOrderList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            order: 'order',
        };
    }
    static types() {
        return {
            deptId: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserRequestDeptOrderList = AddCollegeContactUserRequestDeptOrderList;
class AddCollegeContactUserRequestDeptPositionSet extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            managerUserId: 'managerUserId',
            title: 'title',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptId: 'number',
            managerUserId: 'string',
            title: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserRequestDeptPositionSet = AddCollegeContactUserRequestDeptPositionSet;
class AddCollegeContactUserRequestDeptTitleList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            title: 'title',
        };
    }
    static types() {
        return {
            deptId: 'number',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserRequestDeptTitleList = AddCollegeContactUserRequestDeptTitleList;
class AddCollegeContactUserResponseBodyResult extends $tea.Model {
    static names() {
        return {
            createResult: 'createResult',
            unionId: 'unionId',
            userid: 'userid',
        };
    }
    static types() {
        return {
            createResult: 'number',
            unionId: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCollegeContactUserResponseBodyResult = AddCollegeContactUserResponseBodyResult;
class BatchCreateRequestDataCardRuleItemParamList extends $tea.Model {
    static names() {
        return {
            cardRuleAttr: 'cardRuleAttr',
            cardTaskCode: 'cardTaskCode',
            dailyDubbing: 'dailyDubbing',
            relationId: 'relationId',
            relationTitle: 'relationTitle',
            relationUrl: 'relationUrl',
        };
    }
    static types() {
        return {
            cardRuleAttr: 'string',
            cardTaskCode: 'string',
            dailyDubbing: 'number',
            relationId: 'string',
            relationTitle: 'string',
            relationUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateRequestDataCardRuleItemParamList = BatchCreateRequestDataCardRuleItemParamList;
class BatchCreateRequestDataOrgClassStudentGroupListClassListStudents extends $tea.Model {
    static names() {
        return {
            name: 'name',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            name: 'string',
            staffId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateRequestDataOrgClassStudentGroupListClassListStudents = BatchCreateRequestDataOrgClassStudentGroupListClassListStudents;
class BatchCreateRequestDataOrgClassStudentGroupListClassList extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            className: 'className',
            students: 'students',
        };
    }
    static types() {
        return {
            classId: 'number',
            className: 'string',
            students: { 'type': 'array', 'itemType': BatchCreateRequestDataOrgClassStudentGroupListClassListStudents },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateRequestDataOrgClassStudentGroupListClassList = BatchCreateRequestDataOrgClassStudentGroupListClassList;
class BatchCreateRequestDataOrgClassStudentGroupList extends $tea.Model {
    static names() {
        return {
            classList: 'classList',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            classList: { 'type': 'array', 'itemType': BatchCreateRequestDataOrgClassStudentGroupListClassList },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateRequestDataOrgClassStudentGroupList = BatchCreateRequestDataOrgClassStudentGroupList;
class BatchCreateRequestData extends $tea.Model {
    static names() {
        return {
            canReissueCard: 'canReissueCard',
            cardCycle: 'cardCycle',
            cardFrequency: 'cardFrequency',
            cardRuleItemParamList: 'cardRuleItemParamList',
            classIds: 'classIds',
            classNames: 'classNames',
            content: 'content',
            effectDate: 'effectDate',
            medias: 'medias',
            needMetering: 'needMetering',
            orgClassStudentGroupList: 'orgClassStudentGroupList',
            remindHour: 'remindHour',
            remindMinute: 'remindMinute',
            targetRole: 'targetRole',
            templateId: 'templateId',
            title: 'title',
            unitOfMeasurement: 'unitOfMeasurement',
        };
    }
    static types() {
        return {
            canReissueCard: 'boolean',
            cardCycle: 'number',
            cardFrequency: { 'type': 'array', 'itemType': 'number' },
            cardRuleItemParamList: { 'type': 'array', 'itemType': BatchCreateRequestDataCardRuleItemParamList },
            classIds: { 'type': 'array', 'itemType': 'string' },
            classNames: { 'type': 'array', 'itemType': 'string' },
            content: 'string',
            effectDate: 'number',
            medias: 'string',
            needMetering: 'string',
            orgClassStudentGroupList: { 'type': 'array', 'itemType': BatchCreateRequestDataOrgClassStudentGroupList },
            remindHour: 'number',
            remindMinute: 'number',
            targetRole: 'string',
            templateId: 'number',
            title: 'string',
            unitOfMeasurement: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateRequestData = BatchCreateRequestData;
class BatchCreateResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpIdCardIdMap: 'corpIdCardIdMap',
        };
    }
    static types() {
        return {
            corpIdCardIdMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateResponseBodyResult = BatchCreateResponseBodyResult;
class BatchCreateCourseRequestCourseDetailItemListTeacherList extends $tea.Model {
    static names() {
        return {
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateCourseRequestCourseDetailItemListTeacherList = BatchCreateCourseRequestCourseDetailItemListTeacherList;
class BatchCreateCourseRequestCourseDetailItemList extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classRoomId: 'classRoomId',
            classRoomName: 'classRoomName',
            courseCode: 'courseCode',
            courseDate: 'courseDate',
            courseName: 'courseName',
            courseWeek: 'courseWeek',
            endTime: 'endTime',
            isvCourseId: 'isvCourseId',
            memo: 'memo',
            startTime: 'startTime',
            status: 'status',
            teachWeek: 'teachWeek',
            teacherList: 'teacherList',
            timeslotName: 'timeslotName',
            timeslotNum: 'timeslotNum',
            type: 'type',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classRoomId: 'string',
            classRoomName: 'string',
            courseCode: 'string',
            courseDate: 'number',
            courseName: 'string',
            courseWeek: 'number',
            endTime: 'number',
            isvCourseId: 'string',
            memo: 'string',
            startTime: 'number',
            status: 'number',
            teachWeek: 'number',
            teacherList: { 'type': 'array', 'itemType': BatchCreateCourseRequestCourseDetailItemListTeacherList },
            timeslotName: 'string',
            timeslotNum: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateCourseRequestCourseDetailItemList = BatchCreateCourseRequestCourseDetailItemList;
class BatchCreateStudentClassRequestStudentList extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            studentName: 'studentName',
            studentUserId: 'studentUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            studentName: 'string',
            studentUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateStudentClassRequestStudentList = BatchCreateStudentClassRequestStudentList;
class BatchCreateTeacherCourseRequestTeacherCourseDetailItemList extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            isvCourseId: 'isvCourseId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            isvCourseId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeacherCourseRequestTeacherCourseDetailItemList = BatchCreateTeacherCourseRequestTeacherCourseDetailItemList;
class BatchOrgCreateHWRequestOpenSelectItemListClassListStudents extends $tea.Model {
    static names() {
        return {
            avatar: 'avatar',
            name: 'name',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            avatar: 'string',
            name: 'string',
            staffId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWRequestOpenSelectItemListClassListStudents = BatchOrgCreateHWRequestOpenSelectItemListClassListStudents;
class BatchOrgCreateHWRequestOpenSelectItemListClassList extends $tea.Model {
    static names() {
        return {
            all: 'all',
            classId: 'classId',
            className: 'className',
            students: 'students',
        };
    }
    static types() {
        return {
            all: 'boolean',
            classId: 'string',
            className: 'string',
            students: { 'type': 'array', 'itemType': BatchOrgCreateHWRequestOpenSelectItemListClassListStudents },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWRequestOpenSelectItemListClassList = BatchOrgCreateHWRequestOpenSelectItemListClassList;
class BatchOrgCreateHWRequestOpenSelectItemList extends $tea.Model {
    static names() {
        return {
            classList: 'classList',
            corpId: 'corpId',
            selectedClassesDesc: 'selectedClassesDesc',
        };
    }
    static types() {
        return {
            classList: { 'type': 'array', 'itemType': BatchOrgCreateHWRequestOpenSelectItemListClassList },
            corpId: 'string',
            selectedClassesDesc: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWRequestOpenSelectItemList = BatchOrgCreateHWRequestOpenSelectItemList;
class BatchOrgCreateHWResponseBodyResultPublishList extends $tea.Model {
    static names() {
        return {
            corpid: 'corpid',
            hwid: 'hwid',
        };
    }
    static types() {
        return {
            corpid: 'string',
            hwid: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWResponseBodyResultPublishList = BatchOrgCreateHWResponseBodyResultPublishList;
class BatchOrgCreateHWResponseBodyResult extends $tea.Model {
    static names() {
        return {
            publishList: 'publishList',
        };
    }
    static types() {
        return {
            publishList: { 'type': 'array', 'itemType': BatchOrgCreateHWResponseBodyResultPublishList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchOrgCreateHWResponseBodyResult = BatchOrgCreateHWResponseBodyResult;
class CardBatchQueryCardsResponseBodyResultCards extends $tea.Model {
    static names() {
        return {
            cardBizCode: 'cardBizCode',
            cardId: 'cardId',
            cardStatus: 'cardStatus',
            content: 'content',
            corpId: 'corpId',
            effectTime: 'effectTime',
            finished: 'finished',
            gmtCreate: 'gmtCreate',
            optEndTime: 'optEndTime',
            optEndUserId: 'optEndUserId',
            optEndUserName: 'optEndUserName',
            sendTime: 'sendTime',
            startTime: 'startTime',
            status: 'status',
            teacherId: 'teacherId',
            teacherName: 'teacherName',
            title: 'title',
            type: 'type',
        };
    }
    static types() {
        return {
            cardBizCode: 'string',
            cardId: 'number',
            cardStatus: 'number',
            content: 'string',
            corpId: 'string',
            effectTime: 'string',
            finished: 'boolean',
            gmtCreate: 'string',
            optEndTime: 'string',
            optEndUserId: 'string',
            optEndUserName: 'string',
            sendTime: 'string',
            startTime: 'string',
            status: 'number',
            teacherId: 'string',
            teacherName: 'string',
            title: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardBatchQueryCardsResponseBodyResultCards = CardBatchQueryCardsResponseBodyResultCards;
class CardBatchQueryCardsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            cards: 'cards',
        };
    }
    static types() {
        return {
            cards: { 'type': 'array', 'itemType': CardBatchQueryCardsResponseBodyResultCards },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardBatchQueryCardsResponseBodyResult = CardBatchQueryCardsResponseBodyResult;
class CardGetCardResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attr: 'attr',
            cardBizCode: 'cardBizCode',
            cardBizId: 'cardBizId',
            cardContentCount: 'cardContentCount',
            cardCycle: 'cardCycle',
            cardFrequency: 'cardFrequency',
            cardId: 'cardId',
            cardStatus: 'cardStatus',
            cardUrl: 'cardUrl',
            categoryContentTag: 'categoryContentTag',
            categoryCoverImageUrl: 'categoryCoverImageUrl',
            categoryCreateCardSmallImageUrl: 'categoryCreateCardSmallImageUrl',
            categoryListSmallImageUrl: 'categoryListSmallImageUrl',
            categoryName: 'categoryName',
            classIds: 'classIds',
            classNames: 'classNames',
            content: 'content',
            corpId: 'corpId',
            effectTime: 'effectTime',
            finished: 'finished',
            media: 'media',
            optEndTime: 'optEndTime',
            optEndUserId: 'optEndUserId',
            optEndUserName: 'optEndUserName',
            remindNotPunchCardHour: 'remindNotPunchCardHour',
            remindNotPunchCardMinute: 'remindNotPunchCardMinute',
            sendTime: 'sendTime',
            sourceType: 'sourceType',
            startTime: 'startTime',
            status: 'status',
            systemTime: 'systemTime',
            teacherId: 'teacherId',
            teacherName: 'teacherName',
            templateCoverImageUrl: 'templateCoverImageUrl',
            title: 'title',
            type: 'type',
        };
    }
    static types() {
        return {
            attr: 'string',
            cardBizCode: 'string',
            cardBizId: 'string',
            cardContentCount: 'number',
            cardCycle: 'number',
            cardFrequency: { 'type': 'array', 'itemType': 'number' },
            cardId: 'number',
            cardStatus: 'number',
            cardUrl: 'string',
            categoryContentTag: 'string',
            categoryCoverImageUrl: 'string',
            categoryCreateCardSmallImageUrl: 'string',
            categoryListSmallImageUrl: 'string',
            categoryName: 'string',
            classIds: { 'type': 'array', 'itemType': 'string' },
            classNames: { 'type': 'array', 'itemType': 'string' },
            content: 'string',
            corpId: 'string',
            effectTime: 'string',
            finished: 'boolean',
            media: 'string',
            optEndTime: 'string',
            optEndUserId: 'string',
            optEndUserName: 'string',
            remindNotPunchCardHour: 'number',
            remindNotPunchCardMinute: 'number',
            sendTime: 'string',
            sourceType: 'string',
            startTime: 'string',
            status: 'number',
            systemTime: 'number',
            teacherId: 'string',
            teacherName: 'string',
            templateCoverImageUrl: 'string',
            title: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardResponseBodyResult = CardGetCardResponseBodyResult;
class CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess extends $tea.Model {
    static names() {
        return {
            date: 'date',
            finishedStudentsNum: 'finishedStudentsNum',
            needFinishStudentsNum: 'needFinishStudentsNum',
            taskCode: 'taskCode',
            today: 'today',
        };
    }
    static types() {
        return {
            date: 'string',
            finishedStudentsNum: 'number',
            needFinishStudentsNum: 'number',
            taskCode: 'string',
            today: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess = CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess;
class CardGetCardFinishProgressResponseBodyResultClassStatistics extends $tea.Model {
    static names() {
        return {
            cardBizId: 'cardBizId',
            cardBizName: 'cardBizName',
            classId: 'classId',
            className: 'className',
            process: 'process',
        };
    }
    static types() {
        return {
            cardBizId: 'string',
            cardBizName: 'string',
            classId: 'string',
            className: 'string',
            process: { 'type': 'array', 'itemType': CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressResponseBodyResultClassStatistics = CardGetCardFinishProgressResponseBodyResultClassStatistics;
class CardGetCardFinishProgressResponseBodyResultPatriarchStatistics extends $tea.Model {
    static names() {
        return {
            cardTaskCode: 'cardTaskCode',
            date: 'date',
            isFinished: 'isFinished',
            isFinishedByReissueCard: 'isFinishedByReissueCard',
            isLastDay: 'isLastDay',
            reissueCard: 'reissueCard',
            studentId: 'studentId',
            studentName: 'studentName',
            today: 'today',
            userSubTaskId: 'userSubTaskId',
        };
    }
    static types() {
        return {
            cardTaskCode: 'string',
            date: 'string',
            isFinished: 'boolean',
            isFinishedByReissueCard: 'boolean',
            isLastDay: 'boolean',
            reissueCard: 'boolean',
            studentId: 'string',
            studentName: 'string',
            today: 'string',
            userSubTaskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressResponseBodyResultPatriarchStatistics = CardGetCardFinishProgressResponseBodyResultPatriarchStatistics;
class CardGetCardFinishProgressResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classStatistics: 'classStatistics',
            patriarchStatistics: 'patriarchStatistics',
            studentNameList: 'studentNameList',
        };
    }
    static types() {
        return {
            classStatistics: { 'type': 'array', 'itemType': CardGetCardFinishProgressResponseBodyResultClassStatistics },
            patriarchStatistics: { 'type': 'array', 'itemType': CardGetCardFinishProgressResponseBodyResultPatriarchStatistics },
            studentNameList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardGetCardFinishProgressResponseBodyResult = CardGetCardFinishProgressResponseBodyResult;
class CardQueryCardFeedsResponseBodyResultPostsAuthor extends $tea.Model {
    static names() {
        return {
            showName: 'showName',
            userId: 'userId',
            userRole: 'userRole',
        };
    }
    static types() {
        return {
            showName: 'string',
            userId: 'string',
            userRole: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsResponseBodyResultPostsAuthor = CardQueryCardFeedsResponseBodyResultPostsAuthor;
class CardQueryCardFeedsResponseBodyResultPostsContent extends $tea.Model {
    static names() {
        return {
            contentType: 'contentType',
            text: 'text',
        };
    }
    static types() {
        return {
            contentType: 'number',
            text: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsResponseBodyResultPostsContent = CardQueryCardFeedsResponseBodyResultPostsContent;
class CardQueryCardFeedsResponseBodyResultPosts extends $tea.Model {
    static names() {
        return {
            author: 'author',
            bizType: 'bizType',
            content: 'content',
            createAt: 'createAt',
            feedType: 'feedType',
            postId: 'postId',
            status: 'status',
        };
    }
    static types() {
        return {
            author: CardQueryCardFeedsResponseBodyResultPostsAuthor,
            bizType: 'number',
            content: CardQueryCardFeedsResponseBodyResultPostsContent,
            createAt: 'number',
            feedType: 'number',
            postId: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsResponseBodyResultPosts = CardQueryCardFeedsResponseBodyResultPosts;
class CardQueryCardFeedsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            posts: 'posts',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            posts: { 'type': 'array', 'itemType': CardQueryCardFeedsResponseBodyResultPosts },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CardQueryCardFeedsResponseBodyResult = CardQueryCardFeedsResponseBodyResult;
class CreateAppOrderRequestDetailList extends $tea.Model {
    static names() {
        return {
            goodsId: 'goodsId',
            goodsName: 'goodsName',
            goodsPrice: 'goodsPrice',
            goodsQuantity: 'goodsQuantity',
        };
    }
    static types() {
        return {
            goodsId: 'string',
            goodsName: 'string',
            goodsPrice: 'number',
            goodsQuantity: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppOrderRequestDetailList = CreateAppOrderRequestDetailList;
class CreateCollegeContactDeptRequestHideSceneConfig extends $tea.Model {
    static names() {
        return {
            active: 'active',
            chatboxSubtitle: 'chatboxSubtitle',
            nodeList: 'nodeList',
            profile: 'profile',
            search: 'search',
        };
    }
    static types() {
        return {
            active: 'boolean',
            chatboxSubtitle: 'boolean',
            nodeList: 'boolean',
            profile: 'boolean',
            search: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptRequestHideSceneConfig = CreateCollegeContactDeptRequestHideSceneConfig;
class CreateCollegeContactDeptRequestOuterSceneConfig extends $tea.Model {
    static names() {
        return {
            active: 'active',
            chatboxSubtitle: 'chatboxSubtitle',
            nodeList: 'nodeList',
            profile: 'profile',
            search: 'search',
        };
    }
    static types() {
        return {
            active: 'boolean',
            chatboxSubtitle: 'boolean',
            nodeList: 'boolean',
            profile: 'boolean',
            search: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptRequestOuterSceneConfig = CreateCollegeContactDeptRequestOuterSceneConfig;
class CreateCollegeContactDeptResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactDeptResponseBodyResult = CreateCollegeContactDeptResponseBodyResult;
class CreateCollegeContactSceneStruResponseBodyResult extends $tea.Model {
    static names() {
        return {
            struId: 'struId',
            studentDeptId: 'studentDeptId',
            teacherDeptId: 'teacherDeptId',
        };
    }
    static types() {
        return {
            struId: 'number',
            studentDeptId: 'number',
            teacherDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCollegeContactSceneStruResponseBodyResult = CreateCollegeContactSceneStruResponseBodyResult;
class CreateCourseRequestTeacherList extends $tea.Model {
    static names() {
        return {
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCourseRequestTeacherList = CreateCourseRequestTeacherList;
class CreateCustomClassRequestCustomClass extends $tea.Model {
    static names() {
        return {
            name: 'name',
        };
    }
    static types() {
        return {
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomClassRequestCustomClass = CreateCustomClassRequestCustomClass;
class CreateCustomClassResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomClassResponseBodyResult = CreateCustomClassResponseBodyResult;
class CreateCustomDeptRequestCustomDept extends $tea.Model {
    static names() {
        return {
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            name: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomDeptRequestCustomDept = CreateCustomDeptRequestCustomDept;
class CreateCustomDeptResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCustomDeptResponseBodyResult = CreateCustomDeptResponseBodyResult;
class CreateInviteUrlResponseBodyResult extends $tea.Model {
    static names() {
        return {
            inviteUrl: 'inviteUrl',
        };
    }
    static types() {
        return {
            inviteUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateInviteUrlResponseBodyResult = CreateInviteUrlResponseBodyResult;
class CreateOrderRequestDetailList extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            itemAmount: 'itemAmount',
            itemName: 'itemName',
            scene: 'scene',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            itemAmount: 'number',
            itemName: 'string',
            scene: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderRequestDetailList = CreateOrderRequestDetailList;
class CreateOrderFlowRequestDetailList extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            itemAmount: 'itemAmount',
            itemId: 'itemId',
            itemName: 'itemName',
            scene: 'scene',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            itemAmount: 'number',
            itemId: 'number',
            itemName: 'string',
            scene: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOrderFlowRequestDetailList = CreateOrderFlowRequestDetailList;
class CreateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseRequestAttendParticipants = CreateRemoteClassCourseRequestAttendParticipants;
class CreateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseRequestTeachingParticipant = CreateRemoteClassCourseRequestTeachingParticipant;
class CreateRemoteClassCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
        };
    }
    static types() {
        return {
            courseCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRemoteClassCourseResponseBodyResult = CreateRemoteClassCourseResponseBodyResult;
class CreateSectionConfigRequestSectionConfigsSectionEndDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionEndDate = CreateSectionConfigRequestSectionConfigsSectionEndDate;
class CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime = CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime;
class CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime = CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime;
class CreateSectionConfigRequestSectionConfigsSectionModels extends $tea.Model {
    static names() {
        return {
            sectionEndTime: 'sectionEndTime',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionStartTime: 'sectionStartTime',
            sectionType: 'sectionType',
        };
    }
    static types() {
        return {
            sectionEndTime: CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionStartTime: CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime,
            sectionType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionModels = CreateSectionConfigRequestSectionConfigsSectionModels;
class CreateSectionConfigRequestSectionConfigsSectionStartDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSectionStartDate = CreateSectionConfigRequestSectionConfigsSectionStartDate;
class CreateSectionConfigRequestSectionConfigsSemesterEndDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSemesterEndDate = CreateSectionConfigRequestSectionConfigsSemesterEndDate;
class CreateSectionConfigRequestSectionConfigsSemesterStartDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigsSemesterStartDate = CreateSectionConfigRequestSectionConfigsSemesterStartDate;
class CreateSectionConfigRequestSectionConfigs extends $tea.Model {
    static names() {
        return {
            scheduleName: 'scheduleName',
            schoolYear: 'schoolYear',
            sectionEndDate: 'sectionEndDate',
            sectionModels: 'sectionModels',
            sectionStartDate: 'sectionStartDate',
            semester: 'semester',
            semesterEndDate: 'semesterEndDate',
            semesterStartDate: 'semesterStartDate',
        };
    }
    static types() {
        return {
            scheduleName: 'string',
            schoolYear: 'string',
            sectionEndDate: CreateSectionConfigRequestSectionConfigsSectionEndDate,
            sectionModels: { 'type': 'array', 'itemType': CreateSectionConfigRequestSectionConfigsSectionModels },
            sectionStartDate: CreateSectionConfigRequestSectionConfigsSectionStartDate,
            semester: 'number',
            semesterEndDate: CreateSectionConfigRequestSectionConfigsSemesterEndDate,
            semesterStartDate: CreateSectionConfigRequestSectionConfigsSemesterStartDate,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSectionConfigRequestSectionConfigs = CreateSectionConfigRequestSectionConfigs;
class CreateSnsAppOrderRequestDetailList extends $tea.Model {
    static names() {
        return {
            goodsId: 'goodsId',
            goodsName: 'goodsName',
            goodsPrice: 'goodsPrice',
            goodsQuantity: 'goodsQuantity',
        };
    }
    static types() {
        return {
            goodsId: 'string',
            goodsName: 'string',
            goodsPrice: 'number',
            goodsQuantity: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSnsAppOrderRequestDetailList = CreateSnsAppOrderRequestDetailList;
class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate = CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate = CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
class CreateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    static names() {
        return {
            classPeriodType: 'classPeriodType',
            classroomId: 'classroomId',
            courseType: 'courseType',
            courserGroupItemEndDate: 'courserGroupItemEndDate',
            courserGroupItemStartDate: 'courserGroupItemStartDate',
            dayOfWeek: 'dayOfWeek',
            sectionIndex: 'sectionIndex',
        };
    }
    static types() {
        return {
            classPeriodType: 'number',
            classroomId: 'number',
            courseType: 'number',
            courserGroupItemEndDate: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate,
            courserGroupItemStartDate: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate,
            dayOfWeek: 'number',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupRequestCourserGroupItemModels = CreateUniversityCourseGroupRequestCourserGroupItemModels;
class CreateUniversityCourseGroupRequestTeacherInfos extends $tea.Model {
    static names() {
        return {
            participantRole: 'participantRole',
            userId: 'userId',
        };
    }
    static types() {
        return {
            participantRole: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupRequestTeacherInfos = CreateUniversityCourseGroupRequestTeacherInfos;
class CreateUniversityCourseGroupResponseBodyCourseGroupInfo extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateUniversityCourseGroupResponseBodyCourseGroupInfo = CreateUniversityCourseGroupResponseBodyCourseGroupInfo;
class EduGetFileSpaceResponseBodyResult extends $tea.Model {
    static names() {
        return {
            folderId: 'folderId',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            folderId: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduGetFileSpaceResponseBodyResult = EduGetFileSpaceResponseBodyResult;
class EduListUserByFromUserIdsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            campusId: 'campusId',
            classId: 'classId',
            gradeId: 'gradeId',
            name: 'name',
            periodId: 'periodId',
            role: 'role',
            userId: 'userId',
        };
    }
    static types() {
        return {
            campusId: 'number',
            classId: 'number',
            gradeId: 'number',
            name: 'string',
            periodId: 'number',
            role: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduListUserByFromUserIdsResponseBodyResult = EduListUserByFromUserIdsResponseBodyResult;
class EduTeacherListResponseBodyResultTeacherDetails extends $tea.Model {
    static names() {
        return {
            name: 'name',
            role: 'role',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            role: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduTeacherListResponseBodyResultTeacherDetails = EduTeacherListResponseBodyResultTeacherDetails;
class EduTeacherListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            teacherDetails: 'teacherDetails',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            teacherDetails: { 'type': 'array', 'itemType': EduTeacherListResponseBodyResultTeacherDetails },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EduTeacherListResponseBodyResult = EduTeacherListResponseBodyResult;
class EndCourseRequestLivePlayInfoList extends $tea.Model {
    static names() {
        return {
            liveInputUrl: 'liveInputUrl',
            liveOutputFlvUrl: 'liveOutputFlvUrl',
            liveOutputHlsUrl: 'liveOutputHlsUrl',
            liveType: 'liveType',
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            liveInputUrl: 'string',
            liveOutputFlvUrl: 'string',
            liveOutputHlsUrl: 'string',
            liveType: 'number',
            replayUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EndCourseRequestLivePlayInfoList = EndCourseRequestLivePlayInfoList;
class EndCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            success: 'success',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EndCourseResponseBodyUniversityCourseCommonResponse = EndCourseResponseBodyUniversityCourseCommonResponse;
class GetChildrenResponseBodyResultBindStudents extends $tea.Model {
    static names() {
        return {
            gradeLevel: 'gradeLevel',
            identityId: 'identityId',
            periodCode: 'periodCode',
        };
    }
    static types() {
        return {
            gradeLevel: 'number',
            identityId: 'string',
            periodCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChildrenResponseBodyResultBindStudents = GetChildrenResponseBodyResultBindStudents;
class GetChildrenResponseBodyResult extends $tea.Model {
    static names() {
        return {
            bindStudents: 'bindStudents',
            city: 'city',
            district: 'district',
            gradeLevel: 'gradeLevel',
            name: 'name',
            periodCode: 'periodCode',
            province: 'province',
            regionId: 'regionId',
        };
    }
    static types() {
        return {
            bindStudents: { 'type': 'array', 'itemType': GetChildrenResponseBodyResultBindStudents },
            city: 'string',
            district: 'string',
            gradeLevel: 'number',
            name: 'string',
            periodCode: 'string',
            province: 'string',
            regionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChildrenResponseBodyResult = GetChildrenResponseBodyResult;
class GetCollegeAlumniDeptsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            deptId: 'deptId',
            deptType: 'deptType',
            hasSubDept: 'hasSubDept',
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deptId: 'number',
            deptType: 'string',
            hasSubDept: 'boolean',
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniDeptsResponseBodyResult = GetCollegeAlumniDeptsResponseBodyResult;
class GetCollegeAlumniUserInfoResponseBodyResultDepts extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            deptId: 'deptId',
            hasSubDept: 'hasSubDept',
            isIndustryDept: 'isIndustryDept',
            name: 'name',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deptId: 'number',
            hasSubDept: 'boolean',
            isIndustryDept: 'boolean',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniUserInfoResponseBodyResultDepts = GetCollegeAlumniUserInfoResponseBodyResultDepts;
class GetCollegeAlumniUserInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            address: 'address',
            avatar: 'avatar',
            corpId: 'corpId',
            depts: 'depts',
            email: 'email',
            intake: 'intake',
            inviteId: 'inviteId',
            mobile: 'mobile',
            name: 'name',
            outtake: 'outtake',
            studentNumber: 'studentNumber',
            userId: 'userId',
        };
    }
    static types() {
        return {
            address: 'string',
            avatar: 'string',
            corpId: 'string',
            depts: { 'type': 'array', 'itemType': GetCollegeAlumniUserInfoResponseBodyResultDepts },
            email: 'string',
            intake: 'string',
            inviteId: 'number',
            mobile: 'string',
            name: 'string',
            outtake: 'string',
            studentNumber: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeAlumniUserInfoResponseBodyResult = GetCollegeAlumniUserInfoResponseBodyResult;
class GetCollegeContactDeptDetailResponseBodyResultHideSceneConfig extends $tea.Model {
    static names() {
        return {
            active: 'active',
            chatboxSubtitle: 'chatboxSubtitle',
            nodeList: 'nodeList',
            profile: 'profile',
            search: 'search',
        };
    }
    static types() {
        return {
            active: 'boolean',
            chatboxSubtitle: 'boolean',
            nodeList: 'boolean',
            profile: 'boolean',
            search: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailResponseBodyResultHideSceneConfig = GetCollegeContactDeptDetailResponseBodyResultHideSceneConfig;
class GetCollegeContactDeptDetailResponseBodyResultOuterSceneConfig extends $tea.Model {
    static names() {
        return {
            active: 'active',
            chatboxSubtitle: 'chatboxSubtitle',
            nodeList: 'nodeList',
            profile: 'profile',
            search: 'search',
        };
    }
    static types() {
        return {
            active: 'boolean',
            chatboxSubtitle: 'boolean',
            nodeList: 'boolean',
            profile: 'boolean',
            search: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailResponseBodyResultOuterSceneConfig = GetCollegeContactDeptDetailResponseBodyResultOuterSceneConfig;
class GetCollegeContactDeptDetailResponseBodyResult extends $tea.Model {
    static names() {
        return {
            autoAddUser: 'autoAddUser',
            autoApproveApply: 'autoApproveApply',
            brief: 'brief',
            code: 'code',
            createDeptGroup: 'createDeptGroup',
            deptCode: 'deptCode',
            deptGroupChatId: 'deptGroupChatId',
            deptId: 'deptId',
            deptManagerUseridList: 'deptManagerUseridList',
            deptPermits: 'deptPermits',
            deptType: 'deptType',
            empApplyJoinDept: 'empApplyJoinDept',
            extension: 'extension',
            fromUnionOrg: 'fromUnionOrg',
            groupContainSubDept: 'groupContainSubDept',
            hideDept: 'hideDept',
            hideSceneConfig: 'hideSceneConfig',
            name: 'name',
            order: 'order',
            orgDeptOwner: 'orgDeptOwner',
            outerDept: 'outerDept',
            outerPermitDepts: 'outerPermitDepts',
            outerPermitUsers: 'outerPermitUsers',
            outerSceneConfig: 'outerSceneConfig',
            parentId: 'parentId',
            sourceIdentifier: 'sourceIdentifier',
            struId: 'struId',
            tags: 'tags',
            telephone: 'telephone',
            userPermits: 'userPermits',
        };
    }
    static types() {
        return {
            autoAddUser: 'boolean',
            autoApproveApply: 'boolean',
            brief: 'string',
            code: 'string',
            createDeptGroup: 'boolean',
            deptCode: 'string',
            deptGroupChatId: 'string',
            deptId: 'number',
            deptManagerUseridList: { 'type': 'array', 'itemType': 'string' },
            deptPermits: { 'type': 'array', 'itemType': 'number' },
            deptType: 'string',
            empApplyJoinDept: 'boolean',
            extension: 'string',
            fromUnionOrg: 'boolean',
            groupContainSubDept: 'boolean',
            hideDept: 'boolean',
            hideSceneConfig: GetCollegeContactDeptDetailResponseBodyResultHideSceneConfig,
            name: 'string',
            order: 'number',
            orgDeptOwner: 'string',
            outerDept: 'boolean',
            outerPermitDepts: { 'type': 'array', 'itemType': 'number' },
            outerPermitUsers: { 'type': 'array', 'itemType': 'string' },
            outerSceneConfig: GetCollegeContactDeptDetailResponseBodyResultOuterSceneConfig,
            parentId: 'number',
            sourceIdentifier: 'string',
            struId: 'number',
            tags: 'string',
            telephone: 'string',
            userPermits: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactDeptDetailResponseBodyResult = GetCollegeContactDeptDetailResponseBodyResult;
class GetCollegeContactStandardStruDeptDetailResponseBodyResult extends $tea.Model {
    static names() {
        return {
            struId: 'struId',
            studentDeptId: 'studentDeptId',
            teacherDeptId: 'teacherDeptId',
        };
    }
    static types() {
        return {
            struId: 'number',
            studentDeptId: 'number',
            teacherDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCollegeContactStandardStruDeptDetailResponseBodyResult = GetCollegeContactStandardStruDeptDetailResponseBodyResult;
class GetDefaultChildResponseBodyBindStudents extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            period: 'period',
            staffId: 'staffId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            period: 'string',
            staffId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDefaultChildResponseBodyBindStudents = GetDefaultChildResponseBodyBindStudents;
class GetEduUserIdentityResponseBodyData extends $tea.Model {
    static names() {
        return {
            matchGuardianRule: 'matchGuardianRule',
            matchTeacherRule: 'matchTeacherRule',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            matchGuardianRule: 'boolean',
            matchTeacherRule: 'boolean',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEduUserIdentityResponseBodyData = GetEduUserIdentityResponseBodyData;
class GetFileDownloadInfoByPackageIdResponseBodyResult extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            mediaId: 'mediaId',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            mediaId: 'string',
            spaceId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileDownloadInfoByPackageIdResponseBodyResult = GetFileDownloadInfoByPackageIdResponseBodyResult;
class GetImageTempDownloadUrlResponseBodyResult extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            fileName: 'fileName',
            fileSize: 'fileSize',
            url: 'url',
        };
    }
    static types() {
        return {
            extension: 'string',
            fileName: 'string',
            fileSize: 'number',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetImageTempDownloadUrlResponseBodyResult = GetImageTempDownloadUrlResponseBodyResult;
class GetOpenCourseDetailResponseBodyPushModel extends $tea.Model {
    static names() {
        return {
            pushOrgNameList: 'pushOrgNameList',
            pushRoleNameList: 'pushRoleNameList',
        };
    }
    static types() {
        return {
            pushOrgNameList: { 'type': 'array', 'itemType': 'string' },
            pushRoleNameList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCourseDetailResponseBodyPushModel = GetOpenCourseDetailResponseBodyPushModel;
class GetOpenCoursesResponseBodyCourseList extends $tea.Model {
    static names() {
        return {
            courseId: 'courseId',
            coverUrl: 'coverUrl',
            feedType: 'feedType',
            jumpUrl: 'jumpUrl',
            startTime: 'startTime',
            teacherId: 'teacherId',
            teacherName: 'teacherName',
            title: 'title',
        };
    }
    static types() {
        return {
            courseId: 'string',
            coverUrl: 'string',
            feedType: 'number',
            jumpUrl: 'string',
            startTime: 'number',
            teacherId: 'string',
            teacherName: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOpenCoursesResponseBodyCourseList = GetOpenCoursesResponseBodyCourseList;
class GetPointActionRecordRequestBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            ownerId: 'ownerId',
            pointType: 'pointType',
        };
    }
    static types() {
        return {
            bizId: 'string',
            ownerId: 'string',
            pointType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordRequestBody = GetPointActionRecordRequestBody;
class GetPointActionRecordResponseBodyResult extends $tea.Model {
    static names() {
        return {
            actionTime: 'actionTime',
            quantity: 'quantity',
            status: 'status',
        };
    }
    static types() {
        return {
            actionTime: 'string',
            quantity: 'number',
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointActionRecordResponseBodyResult = GetPointActionRecordResponseBodyResult;
class GetPointInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            availableQuota: 'availableQuota',
            endTime: 'endTime',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            availableQuota: 'number',
            endTime: 'string',
            startTime: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPointInfoResponseBodyResult = GetPointInfoResponseBodyResult;
class GetRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseResponseBodyResultAttendParticipants = GetRemoteClassCourseResponseBodyResultAttendParticipants;
class GetRemoteClassCourseResponseBodyResultRecordInfos extends $tea.Model {
    static names() {
        return {
            startTime: 'startTime',
            stopTime: 'stopTime',
            url: 'url',
        };
    }
    static types() {
        return {
            startTime: 'string',
            stopTime: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseResponseBodyResultRecordInfos = GetRemoteClassCourseResponseBodyResultRecordInfos;
class GetRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseResponseBodyResultTeachingParticipant = GetRemoteClassCourseResponseBodyResultTeachingParticipant;
class GetRemoteClassCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            canEdit: 'canEdit',
            courseCode: 'courseCode',
            courseName: 'courseName',
            endTime: 'endTime',
            liveUrl: 'liveUrl',
            recordInfos: 'recordInfos',
            roomStatus: 'roomStatus',
            startTime: 'startTime',
            status: 'status',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': GetRemoteClassCourseResponseBodyResultAttendParticipants },
            canEdit: 'boolean',
            courseCode: 'string',
            courseName: 'string',
            endTime: 'number',
            liveUrl: 'string',
            recordInfos: { 'type': 'array', 'itemType': GetRemoteClassCourseResponseBodyResultRecordInfos },
            roomStatus: 'number',
            startTime: 'number',
            status: 'number',
            teachingParticipant: GetRemoteClassCourseResponseBodyResultTeachingParticipant,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRemoteClassCourseResponseBodyResult = GetRemoteClassCourseResponseBodyResult;
class GetShareRoleMembersResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            memberUserIdListInTrunkOrg: 'memberUserIdListInTrunkOrg',
        };
    }
    static types() {
        return {
            corpId: 'string',
            memberUserIdListInTrunkOrg: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRoleMembersResponseBodyResult = GetShareRoleMembersResponseBodyResult;
class GetShareRolesResponseBodyResult extends $tea.Model {
    static names() {
        return {
            shareRoleCode: 'shareRoleCode',
            shareRoleName: 'shareRoleName',
        };
    }
    static types() {
        return {
            shareRoleCode: 'string',
            shareRoleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetShareRolesResponseBodyResult = GetShareRolesResponseBodyResult;
class GetTaskListResponseBodyTaskList extends $tea.Model {
    static names() {
        return {
            name: 'name',
            taskId: 'taskId',
            taskYear: 'taskYear',
        };
    }
    static types() {
        return {
            name: 'string',
            taskId: 'number',
            taskYear: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskListResponseBodyTaskList = GetTaskListResponseBodyTaskList;
class GetTaskStudentListResponseBodyStudentList extends $tea.Model {
    static names() {
        return {
            name: 'name',
            sexuality: 'sexuality',
            studentId: 'studentId',
        };
    }
    static types() {
        return {
            name: 'string',
            sexuality: 'string',
            studentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskStudentListResponseBodyStudentList = GetTaskStudentListResponseBodyStudentList;
class InitCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestCoursesDateModel = InitCoursesOfClassRequestCoursesDateModel;
class InitCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    static names() {
        return {
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
        };
    }
    static types() {
        return {
            sectionIndex: 'number',
            sectionName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestCoursesSectionModel = InitCoursesOfClassRequestCoursesSectionModel;
class InitCoursesOfClassRequestCourses extends $tea.Model {
    static names() {
        return {
            courseName: 'courseName',
            creatorName: 'creatorName',
            dateModel: 'dateModel',
            location: 'location',
            sectionModel: 'sectionModel',
            teacherStaffIds: 'teacherStaffIds',
        };
    }
    static types() {
        return {
            courseName: 'string',
            creatorName: 'string',
            dateModel: InitCoursesOfClassRequestCoursesDateModel,
            location: 'string',
            sectionModel: InitCoursesOfClassRequestCoursesSectionModel,
            teacherStaffIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestCourses = InitCoursesOfClassRequestCourses;
class InitCoursesOfClassRequestSectionConfigEnd extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestSectionConfigEnd = InitCoursesOfClassRequestSectionConfigEnd;
class InitCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestSectionConfigSectionModelsEnd = InitCoursesOfClassRequestSectionConfigSectionModelsEnd;
class InitCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestSectionConfigSectionModelsStart = InitCoursesOfClassRequestSectionConfigSectionModelsStart;
class InitCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: InitCoursesOfClassRequestSectionConfigSectionModelsEnd,
            sectionIndex: 'number',
            sectionType: 'string',
            start: InitCoursesOfClassRequestSectionConfigSectionModelsStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestSectionConfigSectionModels = InitCoursesOfClassRequestSectionConfigSectionModels;
class InitCoursesOfClassRequestSectionConfigStart extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestSectionConfigStart = InitCoursesOfClassRequestSectionConfigStart;
class InitCoursesOfClassRequestSectionConfig extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionModels: 'sectionModels',
            start: 'start',
        };
    }
    static types() {
        return {
            end: InitCoursesOfClassRequestSectionConfigEnd,
            sectionModels: { 'type': 'array', 'itemType': InitCoursesOfClassRequestSectionConfigSectionModels },
            start: InitCoursesOfClassRequestSectionConfigStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InitCoursesOfClassRequestSectionConfig = InitCoursesOfClassRequestSectionConfig;
class InsertSectionConfigRequestEnd extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigRequestEnd = InsertSectionConfigRequestEnd;
class InsertSectionConfigRequestSectionModelsEnd extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigRequestSectionModelsEnd = InsertSectionConfigRequestSectionModelsEnd;
class InsertSectionConfigRequestSectionModelsStart extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigRequestSectionModelsStart = InsertSectionConfigRequestSectionModelsStart;
class InsertSectionConfigRequestSectionModels extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: InsertSectionConfigRequestSectionModelsEnd,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
            start: InsertSectionConfigRequestSectionModelsStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigRequestSectionModels = InsertSectionConfigRequestSectionModels;
class InsertSectionConfigRequestStart extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InsertSectionConfigRequestStart = InsertSectionConfigRequestStart;
class IsvDataWriteRequestRowValueList extends $tea.Model {
    static names() {
        return {
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvDataWriteRequestRowValueList = IsvDataWriteRequestRowValueList;
class IsvDataWriteResponseBodyResult extends $tea.Model {
    static names() {
        return {
            needRetry: 'needRetry',
            success: 'success',
        };
    }
    static types() {
        return {
            needRetry: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvDataWriteResponseBodyResult = IsvDataWriteResponseBodyResult;
class IsvMetadataQueryResponseBodyResultFields extends $tea.Model {
    static names() {
        return {
            description: 'description',
            fieldKey: 'fieldKey',
            fieldName: 'fieldName',
            fieldType: 'fieldType',
            primaryKey: 'primaryKey',
            required: 'required',
        };
    }
    static types() {
        return {
            description: 'string',
            fieldKey: 'string',
            fieldName: 'string',
            fieldType: 'string',
            primaryKey: 'boolean',
            required: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvMetadataQueryResponseBodyResultFields = IsvMetadataQueryResponseBodyResultFields;
class IsvMetadataQueryResponseBodyResult extends $tea.Model {
    static names() {
        return {
            fields: 'fields',
            tableCode: 'tableCode',
            tableExist: 'tableExist',
        };
    }
    static types() {
        return {
            fields: { 'type': 'array', 'itemType': IsvMetadataQueryResponseBodyResultFields },
            tableCode: 'string',
            tableExist: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IsvMetadataQueryResponseBodyResult = IsvMetadataQueryResponseBodyResult;
class ListCollegeContactDeptTypeConfigResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptType: 'deptType',
            name: 'name',
            userDef: 'userDef',
        };
    }
    static types() {
        return {
            deptType: 'string',
            name: 'string',
            userDef: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactDeptTypeConfigResponseBodyResult = ListCollegeContactDeptTypeConfigResponseBodyResult;
class ListCollegeContactSceneStrusResponseBodyResult extends $tea.Model {
    static names() {
        return {
            enable: 'enable',
            hasStruFixedDept: 'hasStruFixedDept',
            struBrief: 'struBrief',
            struId: 'struId',
            struName: 'struName',
            struType: 'struType',
            studentDeptId: 'studentDeptId',
            teacherDeptId: 'teacherDeptId',
        };
    }
    static types() {
        return {
            enable: 'boolean',
            hasStruFixedDept: 'boolean',
            struBrief: 'string',
            struId: 'number',
            struName: 'string',
            struType: 'string',
            studentDeptId: 'number',
            teacherDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSceneStrusResponseBodyResult = ListCollegeContactSceneStrusResponseBodyResult;
class ListCollegeContactSubDeptsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            autoAddUser: 'autoAddUser',
            createDeptGroup: 'createDeptGroup',
            deptCode: 'deptCode',
            deptId: 'deptId',
            deptType: 'deptType',
            extension: 'extension',
            fromUnionOrg: 'fromUnionOrg',
            name: 'name',
            parentId: 'parentId',
            sourceIdentifier: 'sourceIdentifier',
            struId: 'struId',
            tags: 'tags',
        };
    }
    static types() {
        return {
            autoAddUser: 'boolean',
            createDeptGroup: 'boolean',
            deptCode: 'string',
            deptId: 'number',
            deptType: 'string',
            extension: 'string',
            fromUnionOrg: 'boolean',
            name: 'string',
            parentId: 'number',
            sourceIdentifier: 'string',
            struId: 'number',
            tags: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCollegeContactSubDeptsResponseBodyResult = ListCollegeContactSubDeptsResponseBodyResult;
class ListOrderResponseBodyList extends $tea.Model {
    static names() {
        return {
            actualAmount: 'actualAmount',
            buyerId: 'buyerId',
            corpId: 'corpId',
            createTime: 'createTime',
            endTime: 'endTime',
            orderNo: 'orderNo',
            payTime: 'payTime',
            refundNo: 'refundNo',
            scene: 'scene',
            startTime: 'startTime',
            status: 'status',
            tradeNo: 'tradeNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            actualAmount: 'number',
            buyerId: 'string',
            corpId: 'string',
            createTime: 'number',
            endTime: 'number',
            orderNo: 'string',
            payTime: 'number',
            refundNo: 'string',
            scene: 'number',
            startTime: 'number',
            status: 'number',
            tradeNo: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListOrderResponseBodyList = ListOrderResponseBodyList;
class OrderInfoResponseBodyResultItemList extends $tea.Model {
    static names() {
        return {
            itemName: 'itemName',
            itemNum: 'itemNum',
        };
    }
    static types() {
        return {
            itemName: 'string',
            itemNum: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderInfoResponseBodyResultItemList = OrderInfoResponseBodyResultItemList;
class OrderInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            address: 'address',
            itemList: 'itemList',
            orderNo: 'orderNo',
            receiverPhoneSuffix: 'receiverPhoneSuffix',
            shopName: 'shopName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            address: 'string',
            itemList: { 'type': 'array', 'itemType': OrderInfoResponseBodyResultItemList },
            orderNo: 'string',
            receiverPhoneSuffix: 'string',
            shopName: 'string',
            userId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderInfoResponseBodyResult = OrderInfoResponseBodyResult;
class PageQueryClassCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classId: 'classId',
            className: 'className',
            classRoomId: 'classRoomId',
            classRoomName: 'classRoomName',
            classType: 'classType',
            corpId: 'corpId',
            courseCode: 'courseCode',
            courseDate: 'courseDate',
            courseName: 'courseName',
            courseWeek: 'courseWeek',
            endTime: 'endTime',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
            memo: 'memo',
            schoolYear: 'schoolYear',
            semester: 'semester',
            startTime: 'startTime',
            status: 'status',
            teachWeek: 'teachWeek',
            timeslotName: 'timeslotName',
            timeslotNum: 'timeslotNum',
            type: 'type',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classId: 'string',
            className: 'string',
            classRoomId: 'string',
            classRoomName: 'string',
            classType: 'number',
            corpId: 'string',
            courseCode: 'string',
            courseDate: 'string',
            courseName: 'string',
            courseWeek: 'number',
            endTime: 'string',
            isvCode: 'string',
            isvCourseId: 'string',
            memo: 'string',
            schoolYear: 'string',
            semester: 'number',
            startTime: 'string',
            status: 'number',
            teachWeek: 'number',
            timeslotName: 'string',
            timeslotNum: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryClassCourseResponseBodyResult = PageQueryClassCourseResponseBodyResult;
class PageQueryDevicesResponseBodyList extends $tea.Model {
    static names() {
        return {
            gmtExpiry: 'gmtExpiry',
            model: 'model',
            name: 'name',
            sn: 'sn',
            type: 'type',
        };
    }
    static types() {
        return {
            gmtExpiry: 'number',
            model: 'string',
            name: 'string',
            sn: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryDevicesResponseBodyList = PageQueryDevicesResponseBodyList;
class PageQueryKitOpenRecordResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
            openEndTime: 'openEndTime',
            openStartTime: 'openStartTime',
            openUserId: 'openUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvProductScene: 'string',
            openEndTime: 'string',
            openStartTime: 'string',
            openUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PageQueryKitOpenRecordResponseBodyResult = PageQueryKitOpenRecordResponseBodyResult;
class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList extends $tea.Model {
    static names() {
        return {
            liveInputUrl: 'liveInputUrl',
            liveOutputUrl: 'liveOutputUrl',
            liveType: 'liveType',
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            liveInputUrl: 'string',
            liveOutputUrl: 'string',
            liveType: 'number',
            replayUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList = PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList;
class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse extends $tea.Model {
    static names() {
        return {
            confirmStatus: 'confirmStatus',
            courseCode: 'courseCode',
            livePlayInfoList: 'livePlayInfoList',
        };
    }
    static types() {
        return {
            confirmStatus: 'boolean',
            courseCode: 'string',
            livePlayInfoList: { 'type': 'array', 'itemType': PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse = PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse;
class ProvidePointResponseBodyResult extends $tea.Model {
    static names() {
        return {
            availableQuota: 'availableQuota',
            provideNum: 'provideNum',
            provideSuccess: 'provideSuccess',
        };
    }
    static types() {
        return {
            availableQuota: 'number',
            provideNum: 'number',
            provideSuccess: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ProvidePointResponseBodyResult = ProvidePointResponseBodyResult;
class QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList extends $tea.Model {
    static names() {
        return {
            avator: 'avator',
            name: 'name',
            uid: 'uid',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avator: 'string',
            name: 'string',
            uid: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList = QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList;
class QueryAllSubjectsFromClassScheduleResponseBodyResultExt extends $tea.Model {
    static names() {
        return {
            backgroundColor: 'backgroundColor',
            classId: 'classId',
            fontColor: 'fontColor',
            teacherList: 'teacherList',
        };
    }
    static types() {
        return {
            backgroundColor: 'string',
            classId: 'number',
            fontColor: 'string',
            teacherList: { 'type': 'array', 'itemType': QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBodyResultExt = QueryAllSubjectsFromClassScheduleResponseBodyResultExt;
class QueryAllSubjectsFromClassScheduleResponseBodyResult extends $tea.Model {
    static names() {
        return {
            creatorOrgId: 'creatorOrgId',
            ext: 'ext',
            periodCode: 'periodCode',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
        };
    }
    static types() {
        return {
            creatorOrgId: 'number',
            ext: QueryAllSubjectsFromClassScheduleResponseBodyResultExt,
            periodCode: 'string',
            subjectCode: 'string',
            subjectName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllSubjectsFromClassScheduleResponseBodyResult = QueryAllSubjectsFromClassScheduleResponseBodyResult;
class QueryClassScheduleResponseBodyConfigEnd extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyConfigEnd = QueryClassScheduleResponseBodyConfigEnd;
class QueryClassScheduleResponseBodyConfigSectionModelsEnd extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyConfigSectionModelsEnd = QueryClassScheduleResponseBodyConfigSectionModelsEnd;
class QueryClassScheduleResponseBodyConfigSectionModelsStart extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyConfigSectionModelsStart = QueryClassScheduleResponseBodyConfigSectionModelsStart;
class QueryClassScheduleResponseBodyConfigSectionModels extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: QueryClassScheduleResponseBodyConfigSectionModelsEnd,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
            start: QueryClassScheduleResponseBodyConfigSectionModelsStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyConfigSectionModels = QueryClassScheduleResponseBodyConfigSectionModels;
class QueryClassScheduleResponseBodyConfigStart extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyConfigStart = QueryClassScheduleResponseBodyConfigStart;
class QueryClassScheduleResponseBodyConfig extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionModels: 'sectionModels',
            start: 'start',
        };
    }
    static types() {
        return {
            end: QueryClassScheduleResponseBodyConfigEnd,
            sectionModels: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyConfigSectionModels },
            start: QueryClassScheduleResponseBodyConfigStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyConfig = QueryClassScheduleResponseBodyConfig;
class QueryClassScheduleResponseBodyCourseDTOSClassrooms extends $tea.Model {
    static names() {
        return {
            interactInfo: 'interactInfo',
            targetId: 'targetId',
        };
    }
    static types() {
        return {
            interactInfo: 'string',
            targetId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyCourseDTOSClassrooms = QueryClassScheduleResponseBodyCourseDTOSClassrooms;
class QueryClassScheduleResponseBodyCourseDTOSEduUserModels extends $tea.Model {
    static names() {
        return {
            name: 'name',
            uid: 'uid',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            uid: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyCourseDTOSEduUserModels = QueryClassScheduleResponseBodyCourseDTOSEduUserModels;
class QueryClassScheduleResponseBodyCourseDTOS extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            classrooms: 'classrooms',
            code: 'code',
            courseGroupCode: 'courseGroupCode',
            coverUrl: 'coverUrl',
            creatorCorpId: 'creatorCorpId',
            creatorUserId: 'creatorUserId',
            creatorUserName: 'creatorUserName',
            eduUserModels: 'eduUserModels',
            endTime: 'endTime',
            extInfo: 'extInfo',
            introduce: 'introduce',
            name: 'name',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            startTime: 'startTime',
            status: 'status',
            subjectCode: 'subjectCode',
            teacherCorpId: 'teacherCorpId',
            teacherUserId: 'teacherUserId',
            teacherUserName: 'teacherUserName',
        };
    }
    static types() {
        return {
            classId: 'number',
            classrooms: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyCourseDTOSClassrooms },
            code: 'string',
            courseGroupCode: 'string',
            coverUrl: 'string',
            creatorCorpId: 'string',
            creatorUserId: 'string',
            creatorUserName: 'string',
            eduUserModels: { 'type': 'array', 'itemType': QueryClassScheduleResponseBodyCourseDTOSEduUserModels },
            endTime: 'number',
            extInfo: 'string',
            introduce: 'string',
            name: 'string',
            sectionIndex: 'number',
            sectionName: 'string',
            startTime: 'number',
            status: 'number',
            subjectCode: 'string',
            teacherCorpId: 'string',
            teacherUserId: 'string',
            teacherUserName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleResponseBodyCourseDTOS = QueryClassScheduleResponseBodyCourseDTOS;
class QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms extends $tea.Model {
    static names() {
        return {
            interactInfo: 'interactInfo',
            targetId: 'targetId',
        };
    }
    static types() {
        return {
            interactInfo: 'string',
            targetId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms = QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms;
class QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels extends $tea.Model {
    static names() {
        return {
            name: 'name',
            uid: 'uid',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            uid: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels = QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels;
class QueryClassScheduleByTimeSchoolResponseBodyResult extends $tea.Model {
    static names() {
        return {
            bizKey: 'bizKey',
            classId: 'classId',
            classrooms: 'classrooms',
            code: 'code',
            courseGroupCode: 'courseGroupCode',
            coverUrl: 'coverUrl',
            creatorCorpId: 'creatorCorpId',
            creatorUserId: 'creatorUserId',
            creatorUserName: 'creatorUserName',
            eduUserModels: 'eduUserModels',
            endTime: 'endTime',
            extInfo: 'extInfo',
            introduce: 'introduce',
            name: 'name',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            startTime: 'startTime',
            status: 'status',
            subjectCode: 'subjectCode',
            teacherCorpId: 'teacherCorpId',
            teacherUserId: 'teacherUserId',
            teacherUserName: 'teacherUserName',
        };
    }
    static types() {
        return {
            bizKey: 'string',
            classId: 'number',
            classrooms: { 'type': 'array', 'itemType': QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms },
            code: 'string',
            courseGroupCode: 'string',
            coverUrl: 'string',
            creatorCorpId: 'string',
            creatorUserId: 'string',
            creatorUserName: 'string',
            eduUserModels: { 'type': 'array', 'itemType': QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels },
            endTime: 'number',
            extInfo: 'string',
            introduce: 'string',
            name: 'string',
            sectionIndex: 'number',
            sectionName: 'string',
            startTime: 'number',
            status: 'number',
            subjectCode: 'string',
            teacherCorpId: 'string',
            teacherUserId: 'string',
            teacherUserName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleByTimeSchoolResponseBodyResult = QueryClassScheduleByTimeSchoolResponseBodyResult;
class QueryClassScheduleConfigResponseBodyResultEnd extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBodyResultEnd = QueryClassScheduleConfigResponseBodyResultEnd;
class QueryClassScheduleConfigResponseBodyResultSectionModelsEnd extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBodyResultSectionModelsEnd = QueryClassScheduleConfigResponseBodyResultSectionModelsEnd;
class QueryClassScheduleConfigResponseBodyResultSectionModelsStart extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBodyResultSectionModelsStart = QueryClassScheduleConfigResponseBodyResultSectionModelsStart;
class QueryClassScheduleConfigResponseBodyResultSectionModels extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: QueryClassScheduleConfigResponseBodyResultSectionModelsEnd,
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
            start: QueryClassScheduleConfigResponseBodyResultSectionModelsStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBodyResultSectionModels = QueryClassScheduleConfigResponseBodyResultSectionModels;
class QueryClassScheduleConfigResponseBodyResultStart extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBodyResultStart = QueryClassScheduleConfigResponseBodyResultStart;
class QueryClassScheduleConfigResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            end: 'end',
            sectionModels: 'sectionModels',
            start: 'start',
        };
    }
    static types() {
        return {
            classId: 'number',
            end: QueryClassScheduleConfigResponseBodyResultEnd,
            sectionModels: { 'type': 'array', 'itemType': QueryClassScheduleConfigResponseBodyResultSectionModels },
            start: QueryClassScheduleConfigResponseBodyResultStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassScheduleConfigResponseBodyResult = QueryClassScheduleConfigResponseBodyResult;
class QueryCollegeContactUserDetailResponseBodyResultDeptOrderList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            order: 'order',
        };
    }
    static types() {
        return {
            deptId: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultDeptOrderList = QueryCollegeContactUserDetailResponseBodyResultDeptOrderList;
class QueryCollegeContactUserDetailResponseBodyResultDeptPositionSet extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            isMain: 'isMain',
            managerUserId: 'managerUserId',
            title: 'title',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptId: 'number',
            isMain: 'boolean',
            managerUserId: 'string',
            title: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultDeptPositionSet = QueryCollegeContactUserDetailResponseBodyResultDeptPositionSet;
class QueryCollegeContactUserDetailResponseBodyResultDeptTypeSet extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            deptStructType: 'deptStructType',
            deptType: 'deptType',
            structDeptId: 'structDeptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            deptStructType: 'string',
            deptType: 'string',
            structDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultDeptTypeSet = QueryCollegeContactUserDetailResponseBodyResultDeptTypeSet;
class QueryCollegeContactUserDetailResponseBodyResultLeaderInDept extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            leader: 'leader',
        };
    }
    static types() {
        return {
            deptId: 'number',
            leader: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultLeaderInDept = QueryCollegeContactUserDetailResponseBodyResultLeaderInDept;
class QueryCollegeContactUserDetailResponseBodyResultRoleList extends $tea.Model {
    static names() {
        return {
            groupName: 'groupName',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            groupName: 'string',
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultRoleList = QueryCollegeContactUserDetailResponseBodyResultRoleList;
class QueryCollegeContactUserDetailResponseBodyResultUnionEmpExtUnionEmpMapList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            userid: 'userid',
        };
    }
    static types() {
        return {
            corpId: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultUnionEmpExtUnionEmpMapList = QueryCollegeContactUserDetailResponseBodyResultUnionEmpExtUnionEmpMapList;
class QueryCollegeContactUserDetailResponseBodyResultUnionEmpExt extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            unionEmpMapList: 'unionEmpMapList',
            userid: 'userid',
        };
    }
    static types() {
        return {
            corpId: 'string',
            unionEmpMapList: { 'type': 'array', 'itemType': QueryCollegeContactUserDetailResponseBodyResultUnionEmpExtUnionEmpMapList },
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResultUnionEmpExt = QueryCollegeContactUserDetailResponseBodyResultUnionEmpExt;
class QueryCollegeContactUserDetailResponseBodyResult extends $tea.Model {
    static names() {
        return {
            active: 'active',
            admin: 'admin',
            avatar: 'avatar',
            boss: 'boss',
            deptIdList: 'deptIdList',
            deptOrderList: 'deptOrderList',
            deptPositionSet: 'deptPositionSet',
            deptTypeSet: 'deptTypeSet',
            email: 'email',
            empType: 'empType',
            exclusiveAccount: 'exclusiveAccount',
            exclusiveAccountCorpId: 'exclusiveAccountCorpId',
            exclusiveAccountCorpName: 'exclusiveAccountCorpName',
            exclusiveAccountType: 'exclusiveAccountType',
            extension: 'extension',
            hideMobile: 'hideMobile',
            hiredDate: 'hiredDate',
            jobNumber: 'jobNumber',
            leaderInDept: 'leaderInDept',
            loginId: 'loginId',
            loginType: 'loginType',
            mainDeptId: 'mainDeptId',
            managerUserid: 'managerUserid',
            mobile: 'mobile',
            name: 'name',
            orgEmail: 'orgEmail',
            orgEmailType: 'orgEmailType',
            realAuthed: 'realAuthed',
            remark: 'remark',
            roleList: 'roleList',
            senior: 'senior',
            stateCode: 'stateCode',
            telephone: 'telephone',
            title: 'title',
            unionEmpExt: 'unionEmpExt',
            unionId: 'unionId',
            userid: 'userid',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            active: 'boolean',
            admin: 'boolean',
            avatar: 'string',
            boss: 'boolean',
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            deptOrderList: { 'type': 'array', 'itemType': QueryCollegeContactUserDetailResponseBodyResultDeptOrderList },
            deptPositionSet: { 'type': 'array', 'itemType': QueryCollegeContactUserDetailResponseBodyResultDeptPositionSet },
            deptTypeSet: { 'type': 'array', 'itemType': QueryCollegeContactUserDetailResponseBodyResultDeptTypeSet },
            email: 'string',
            empType: 'string',
            exclusiveAccount: 'boolean',
            exclusiveAccountCorpId: 'string',
            exclusiveAccountCorpName: 'string',
            exclusiveAccountType: 'string',
            extension: 'string',
            hideMobile: 'boolean',
            hiredDate: 'number',
            jobNumber: 'string',
            leaderInDept: { 'type': 'array', 'itemType': QueryCollegeContactUserDetailResponseBodyResultLeaderInDept },
            loginId: 'string',
            loginType: 'string',
            mainDeptId: 'number',
            managerUserid: 'string',
            mobile: 'string',
            name: 'string',
            orgEmail: 'string',
            orgEmailType: 'string',
            realAuthed: 'boolean',
            remark: 'string',
            roleList: { 'type': 'array', 'itemType': QueryCollegeContactUserDetailResponseBodyResultRoleList },
            senior: 'boolean',
            stateCode: 'string',
            telephone: 'string',
            title: 'string',
            unionEmpExt: QueryCollegeContactUserDetailResponseBodyResultUnionEmpExt,
            unionId: 'string',
            userid: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCollegeContactUserDetailResponseBodyResult = QueryCollegeContactUserDetailResponseBodyResult;
class QueryDeviceListByCorpIdResponseBodyResultList extends $tea.Model {
    static names() {
        return {
            appStatus: 'appStatus',
            deviceCode: 'deviceCode',
            deviceName: 'deviceName',
        };
    }
    static types() {
        return {
            appStatus: 'number',
            deviceCode: 'string',
            deviceName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceListByCorpIdResponseBodyResultList = QueryDeviceListByCorpIdResponseBodyResultList;
class QueryDeviceListByCorpIdResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryDeviceListByCorpIdResponseBodyResultList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDeviceListByCorpIdResponseBodyResult = QueryDeviceListByCorpIdResponseBodyResult;
class QueryEduAssetSpacesResponseBodySpaces extends $tea.Model {
    static names() {
        return {
            createTimeMillis: 'createTimeMillis',
            modifyTimeMillis: 'modifyTimeMillis',
            permissionMode: 'permissionMode',
            quota: 'quota',
            spaceId: 'spaceId',
            spaceName: 'spaceName',
            spaceType: 'spaceType',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createTimeMillis: 'number',
            modifyTimeMillis: 'number',
            permissionMode: 'string',
            quota: 'number',
            spaceId: 'string',
            spaceName: 'string',
            spaceType: 'string',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEduAssetSpacesResponseBodySpaces = QueryEduAssetSpacesResponseBodySpaces;
class QueryKitOpenRecordResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvProductScene: 'isvProductScene',
            openEndTime: 'openEndTime',
            openStartTime: 'openStartTime',
            openUserId: 'openUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvProductScene: 'string',
            openEndTime: 'string',
            openStartTime: 'string',
            openUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryKitOpenRecordResponseBodyResult = QueryKitOpenRecordResponseBodyResult;
class QueryOrgRelationListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            deviceCount: 'deviceCount',
            name: 'name',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deviceCount: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgRelationListResponseBodyResult = QueryOrgRelationListResponseBodyResult;
class QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo extends $tea.Model {
    static names() {
        return {
            secretKey: 'secretKey',
        };
    }
    static types() {
        return {
            secretKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo = QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo;
class QueryPhysicalClassroomResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classroomBuilding: 'classroomBuilding',
            classroomCampus: 'classroomCampus',
            classroomFloor: 'classroomFloor',
            classroomId: 'classroomId',
            classroomName: 'classroomName',
            classroomNumber: 'classroomNumber',
            directBroadcast: 'directBroadcast',
        };
    }
    static types() {
        return {
            classroomBuilding: 'string',
            classroomCampus: 'string',
            classroomFloor: 'string',
            classroomId: 'number',
            classroomName: 'string',
            classroomNumber: 'string',
            directBroadcast: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPhysicalClassroomResponseBodyResult = QueryPhysicalClassroomResponseBodyResult;
class QueryRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseResponseBodyResultAttendParticipants = QueryRemoteClassCourseResponseBodyResultAttendParticipants;
class QueryRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            orgName: 'orgName',
            participantId: 'participantId',
            participantName: 'participantName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            orgName: 'string',
            participantId: 'string',
            participantName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseResponseBodyResultTeachingParticipant = QueryRemoteClassCourseResponseBodyResultTeachingParticipant;
class QueryRemoteClassCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attendParticipants: 'attendParticipants',
            canEdit: 'canEdit',
            courseCode: 'courseCode',
            courseName: 'courseName',
            courseWays: 'courseWays',
            endTime: 'endTime',
            startTime: 'startTime',
            status: 'status',
            teachingParticipant: 'teachingParticipant',
        };
    }
    static types() {
        return {
            attendParticipants: { 'type': 'array', 'itemType': QueryRemoteClassCourseResponseBodyResultAttendParticipants },
            canEdit: 'boolean',
            courseCode: 'string',
            courseName: 'string',
            courseWays: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            startTime: 'number',
            status: 'number',
            teachingParticipant: QueryRemoteClassCourseResponseBodyResultTeachingParticipant,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemoteClassCourseResponseBodyResult = QueryRemoteClassCourseResponseBodyResult;
class QuerySchoolUserFaceResponseBodyUserFaceList extends $tea.Model {
    static names() {
        return {
            faceId: 'faceId',
            name: 'name',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            faceId: 'string',
            name: 'string',
            status: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySchoolUserFaceResponseBodyUserFaceList = QuerySchoolUserFaceResponseBodyUserFaceList;
class QueryStatisticsDataResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            courseCount: 'courseCount',
            courseHours: 'courseHours',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            classId: 'number',
            courseCount: 'number',
            courseHours: 'number',
            subjectCode: 'string',
            subjectName: 'number',
            userId: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStatisticsDataResponseBodyResult = QueryStatisticsDataResponseBodyResult;
class QueryStudentClassResponseBodyResultStudentList extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            studentName: 'studentName',
            studentUserId: 'studentUserId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            studentName: 'string',
            studentUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStudentClassResponseBodyResultStudentList = QueryStudentClassResponseBodyResultStudentList;
class QueryStudentClassResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            classType: 'classType',
            corpId: 'corpId',
            isvCode: 'isvCode',
            studentList: 'studentList',
        };
    }
    static types() {
        return {
            classId: 'string',
            classType: 'number',
            corpId: 'string',
            isvCode: 'string',
            studentList: { 'type': 'array', 'itemType': QueryStudentClassResponseBodyResultStudentList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryStudentClassResponseBodyResult = QueryStudentClassResponseBodyResult;
class QuerySubjectTeachersResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            periodCode: 'periodCode',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            periodCode: 'string',
            subjectCode: 'string',
            subjectName: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubjectTeachersResponseBodyResult = QuerySubjectTeachersResponseBodyResult;
class QueryTeachSubjectsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            corpId: 'corpId',
            periodCode: 'periodCode',
            subjectCode: 'subjectCode',
            subjectName: 'subjectName',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            classId: 'number',
            corpId: 'string',
            periodCode: 'string',
            subjectCode: 'string',
            subjectName: 'string',
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeachSubjectsResponseBodyResult = QueryTeachSubjectsResponseBodyResult;
class QueryTeacherCourseResponseBodyResultTeacherCourseDetailItemList extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            isvCourseId: 'isvCourseId',
        };
    }
    static types() {
        return {
            attributes: 'string',
            isvCourseId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeacherCourseResponseBodyResultTeacherCourseDetailItemList = QueryTeacherCourseResponseBodyResultTeacherCourseDetailItemList;
class QueryTeacherCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isvCode: 'isvCode',
            teacherCourseDetailItemList: 'teacherCourseDetailItemList',
            teacherName: 'teacherName',
            teacherUserId: 'teacherUserId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvCode: 'string',
            teacherCourseDetailItemList: { 'type': 'array', 'itemType': QueryTeacherCourseResponseBodyResultTeacherCourseDetailItemList },
            teacherName: 'string',
            teacherUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTeacherCourseResponseBodyResult = QueryTeacherCourseResponseBodyResult;
class QueryTransferCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classId: 'classId',
            className: 'className',
            corpId: 'corpId',
            isvCode: 'isvCode',
            isvRecordId: 'isvRecordId',
            srcCourseCode: 'srcCourseCode',
            srcCourseDate: 'srcCourseDate',
            srcCourseName: 'srcCourseName',
            srcIsvCourseId: 'srcIsvCourseId',
            srcTimeslotName: 'srcTimeslotName',
            srcTimeslotNum: 'srcTimeslotNum',
            tarCourseCode: 'tarCourseCode',
            tarCourseDate: 'tarCourseDate',
            tarCourseName: 'tarCourseName',
            tarIsvCourseId: 'tarIsvCourseId',
            tarTimeslotName: 'tarTimeslotName',
            tarTimeslotNum: 'tarTimeslotNum',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classId: 'string',
            className: 'string',
            corpId: 'string',
            isvCode: 'string',
            isvRecordId: 'string',
            srcCourseCode: 'string',
            srcCourseDate: 'number',
            srcCourseName: 'string',
            srcIsvCourseId: 'string',
            srcTimeslotName: 'string',
            srcTimeslotNum: 'number',
            tarCourseCode: 'string',
            tarCourseDate: 'number',
            tarCourseName: 'string',
            tarIsvCourseId: 'string',
            tarTimeslotName: 'string',
            tarTimeslotNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTransferCourseResponseBodyResult = QueryTransferCourseResponseBodyResult;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels extends $tea.Model {
    static names() {
        return {
            classPeriodType: 'classPeriodType',
            classroomId: 'classroomId',
            courseType: 'courseType',
            courserGroupItemEndDate: 'courserGroupItemEndDate',
            courserGroupItemStartDate: 'courserGroupItemStartDate',
            dayOfWeek: 'dayOfWeek',
            sectionIndex: 'sectionIndex',
        };
    }
    static types() {
        return {
            classPeriodType: 'number',
            classroomId: 'number',
            courseType: 'number',
            courserGroupItemEndDate: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate,
            courserGroupItemStartDate: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate,
            dayOfWeek: 'number',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels;
class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo extends $tea.Model {
    static names() {
        return {
            courseGroupCode: 'courseGroupCode',
            courseGroupIntroduce: 'courseGroupIntroduce',
            courseGroupName: 'courseGroupName',
            courserGroupItemModels: 'courserGroupItemModels',
            isvCourseGroupCode: 'isvCourseGroupCode',
            periodCode: 'periodCode',
            schoolYear: 'schoolYear',
            semester: 'semester',
            subjectName: 'subjectName',
        };
    }
    static types() {
        return {
            courseGroupCode: 'string',
            courseGroupIntroduce: 'string',
            courseGroupName: 'string',
            courserGroupItemModels: { 'type': 'array', 'itemType': QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels },
            isvCourseGroupCode: 'string',
            periodCode: 'string',
            schoolYear: 'string',
            semester: 'number',
            subjectName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo = QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo;
class SaveClassLearningDataResponseBodyResult extends $tea.Model {
    static names() {
        return {
            questionUploadUrlList: 'questionUploadUrlList',
            standardAnswerUploadUrlList: 'standardAnswerUploadUrlList',
        };
    }
    static types() {
        return {
            questionUploadUrlList: { 'type': 'array', 'itemType': 'string' },
            standardAnswerUploadUrlList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveClassLearningDataResponseBodyResult = SaveClassLearningDataResponseBodyResult;
class SaveStudentLearningDataRequestWrongQuestions extends $tea.Model {
    static names() {
        return {
            knowledgePoints: 'knowledgePoints',
            questionNo: 'questionNo',
            questionPictureNum: 'questionPictureNum',
            standardAnswerPictureNum: 'standardAnswerPictureNum',
            userAnswerPictureNum: 'userAnswerPictureNum',
        };
    }
    static types() {
        return {
            knowledgePoints: { 'type': 'array', 'itemType': 'string' },
            questionNo: 'string',
            questionPictureNum: 'number',
            standardAnswerPictureNum: 'number',
            userAnswerPictureNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataRequestWrongQuestions = SaveStudentLearningDataRequestWrongQuestions;
class SaveStudentLearningDataResponseBodyResultWrongQuestions extends $tea.Model {
    static names() {
        return {
            questionNo: 'questionNo',
            questionUploadUrlList: 'questionUploadUrlList',
            standardAnswerUploadUrlList: 'standardAnswerUploadUrlList',
            userAnswerUploadUrlList: 'userAnswerUploadUrlList',
        };
    }
    static types() {
        return {
            questionNo: 'string',
            questionUploadUrlList: { 'type': 'array', 'itemType': 'string' },
            standardAnswerUploadUrlList: { 'type': 'array', 'itemType': 'string' },
            userAnswerUploadUrlList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataResponseBodyResultWrongQuestions = SaveStudentLearningDataResponseBodyResultWrongQuestions;
class SaveStudentLearningDataResponseBodyResult extends $tea.Model {
    static names() {
        return {
            saveSuccess: 'saveSuccess',
            wrongQuestions: 'wrongQuestions',
        };
    }
    static types() {
        return {
            saveSuccess: 'boolean',
            wrongQuestions: { 'type': 'array', 'itemType': SaveStudentLearningDataResponseBodyResultWrongQuestions },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStudentLearningDataResponseBodyResult = SaveStudentLearningDataResponseBodyResult;
class SearchTeachersResponseBodyUsers extends $tea.Model {
    static names() {
        return {
            classId: 'classId',
            deptName: 'deptName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            classId: 'number',
            deptName: 'string',
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTeachersResponseBodyUsers = SearchTeachersResponseBodyUsers;
class StartCourseRequestLivePlayInfoList extends $tea.Model {
    static names() {
        return {
            liveInputUrl: 'liveInputUrl',
            liveOutputFlvUrl: 'liveOutputFlvUrl',
            liveOutputHlsUrl: 'liveOutputHlsUrl',
            liveType: 'liveType',
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            liveInputUrl: 'string',
            liveOutputFlvUrl: 'string',
            liveOutputHlsUrl: 'string',
            liveType: 'number',
            replayUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCourseRequestLivePlayInfoList = StartCourseRequestLivePlayInfoList;
class StartCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            success: 'success',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCourseResponseBodyUniversityCourseCommonResponse = StartCourseResponseBodyUniversityCourseCommonResponse;
class StartCoursePrepareResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            success: 'success',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCoursePrepareResponseBodyUniversityCourseCommonResponse = StartCoursePrepareResponseBodyUniversityCourseCommonResponse;
class UpdateCollegeContactDeptRequestHideSceneConfig extends $tea.Model {
    static names() {
        return {
            active: 'active',
            chatboxSubtitle: 'chatboxSubtitle',
            nodeList: 'nodeList',
            profile: 'profile',
            search: 'search',
        };
    }
    static types() {
        return {
            active: 'boolean',
            chatboxSubtitle: 'boolean',
            nodeList: 'boolean',
            profile: 'boolean',
            search: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactDeptRequestHideSceneConfig = UpdateCollegeContactDeptRequestHideSceneConfig;
class UpdateCollegeContactDeptRequestOuterSceneConfig extends $tea.Model {
    static names() {
        return {
            active: 'active',
            chatboxSubtitle: 'chatboxSubtitle',
            nodeList: 'nodeList',
            profile: 'profile',
            search: 'search',
        };
    }
    static types() {
        return {
            active: 'boolean',
            chatboxSubtitle: 'boolean',
            nodeList: 'boolean',
            profile: 'boolean',
            search: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactDeptRequestOuterSceneConfig = UpdateCollegeContactDeptRequestOuterSceneConfig;
class UpdateCollegeContactExclusiveRequestDeptOrderList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            order: 'order',
        };
    }
    static types() {
        return {
            deptId: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveRequestDeptOrderList = UpdateCollegeContactExclusiveRequestDeptOrderList;
class UpdateCollegeContactExclusiveRequestDeptPositionSet extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            managerUserId: 'managerUserId',
            title: 'title',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptId: 'number',
            managerUserId: 'string',
            title: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveRequestDeptPositionSet = UpdateCollegeContactExclusiveRequestDeptPositionSet;
class UpdateCollegeContactExclusiveRequestDeptTitleList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            title: 'title',
        };
    }
    static types() {
        return {
            deptId: 'number',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactExclusiveRequestDeptTitleList = UpdateCollegeContactExclusiveRequestDeptTitleList;
class UpdateCollegeContactUserRequestDeptOrderList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            order: 'order',
        };
    }
    static types() {
        return {
            deptId: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserRequestDeptOrderList = UpdateCollegeContactUserRequestDeptOrderList;
class UpdateCollegeContactUserRequestDeptPositionSet extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            managerUserId: 'managerUserId',
            title: 'title',
            workPlace: 'workPlace',
        };
    }
    static types() {
        return {
            deptId: 'number',
            managerUserId: 'string',
            title: 'string',
            workPlace: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserRequestDeptPositionSet = UpdateCollegeContactUserRequestDeptPositionSet;
class UpdateCollegeContactUserRequestDeptTitleList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            title: 'title',
        };
    }
    static types() {
        return {
            deptId: 'number',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCollegeContactUserRequestDeptTitleList = UpdateCollegeContactUserRequestDeptTitleList;
class UpdateCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestCoursesDateModel = UpdateCoursesOfClassRequestCoursesDateModel;
class UpdateCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    static names() {
        return {
            sectionIndex: 'sectionIndex',
            sectionName: 'sectionName',
            sectionType: 'sectionType',
        };
    }
    static types() {
        return {
            sectionIndex: 'number',
            sectionName: 'string',
            sectionType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestCoursesSectionModel = UpdateCoursesOfClassRequestCoursesSectionModel;
class UpdateCoursesOfClassRequestCourses extends $tea.Model {
    static names() {
        return {
            courseCode: 'courseCode',
            courseGroupCode: 'courseGroupCode',
            courseName: 'courseName',
            creatorName: 'creatorName',
            dateModel: 'dateModel',
            deleteTag: 'deleteTag',
            location: 'location',
            sectionModel: 'sectionModel',
            teacherStaffIds: 'teacherStaffIds',
        };
    }
    static types() {
        return {
            courseCode: 'string',
            courseGroupCode: 'string',
            courseName: 'string',
            creatorName: 'string',
            dateModel: UpdateCoursesOfClassRequestCoursesDateModel,
            deleteTag: 'boolean',
            location: 'string',
            sectionModel: UpdateCoursesOfClassRequestCoursesSectionModel,
            teacherStaffIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestCourses = UpdateCoursesOfClassRequestCourses;
class UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd = UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd;
class UpdateCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    static names() {
        return {
            hour: 'hour',
            min: 'min',
        };
    }
    static types() {
        return {
            hour: 'number',
            min: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestSectionConfigSectionModelsStart = UpdateCoursesOfClassRequestSectionConfigSectionModelsStart;
class UpdateCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    static names() {
        return {
            end: 'end',
            sectionIndex: 'sectionIndex',
            sectionType: 'sectionType',
            start: 'start',
        };
    }
    static types() {
        return {
            end: UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd,
            sectionIndex: 'number',
            sectionType: 'string',
            start: UpdateCoursesOfClassRequestSectionConfigSectionModelsStart,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestSectionConfigSectionModels = UpdateCoursesOfClassRequestSectionConfigSectionModels;
class UpdateCoursesOfClassRequestSectionConfig extends $tea.Model {
    static names() {
        return {
            sectionModels: 'sectionModels',
        };
    }
    static types() {
        return {
            sectionModels: { 'type': 'array', 'itemType': UpdateCoursesOfClassRequestSectionConfigSectionModels },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCoursesOfClassRequestSectionConfig = UpdateCoursesOfClassRequestSectionConfig;
class UpdateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassCourseRequestAttendParticipants = UpdateRemoteClassCourseRequestAttendParticipants;
class UpdateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            participantId: 'participantId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            participantId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRemoteClassCourseRequestTeachingParticipant = UpdateRemoteClassCourseRequestTeachingParticipant;
class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate = UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            month: 'month',
            year: 'year',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            month: 'number',
            year: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate = UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
class UpdateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    static names() {
        return {
            classPeriodType: 'classPeriodType',
            classroomId: 'classroomId',
            courseType: 'courseType',
            courserGroupItemEndDate: 'courserGroupItemEndDate',
            courserGroupItemStartDate: 'courserGroupItemStartDate',
            dayOfWeek: 'dayOfWeek',
            sectionIndex: 'sectionIndex',
        };
    }
    static types() {
        return {
            classPeriodType: 'number',
            classroomId: 'number',
            courseType: 'number',
            courserGroupItemEndDate: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate,
            courserGroupItemStartDate: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate,
            dayOfWeek: 'number',
            sectionIndex: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUniversityCourseGroupRequestCourserGroupItemModels = UpdateUniversityCourseGroupRequestCourserGroupItemModels;
class QueryClassCourseResponseBodyResult extends $tea.Model {
    static names() {
        return {
            attributes: 'attributes',
            classId: 'classId',
            className: 'className',
            classRoomId: 'classRoomId',
            classRoomName: 'classRoomName',
            classType: 'classType',
            corpId: 'corpId',
            courseCode: 'courseCode',
            courseDate: 'courseDate',
            courseName: 'courseName',
            courseWeek: 'courseWeek',
            endTime: 'endTime',
            isvCode: 'isvCode',
            isvCourseId: 'isvCourseId',
            memo: 'memo',
            schoolYear: 'schoolYear',
            semester: 'semester',
            startTime: 'startTime',
            status: 'status',
            teachWeek: 'teachWeek',
            timeslotName: 'timeslotName',
            timeslotNum: 'timeslotNum',
            type: 'type',
        };
    }
    static types() {
        return {
            attributes: 'string',
            classId: 'string',
            className: 'string',
            classRoomId: 'string',
            classRoomName: 'string',
            classType: 'number',
            corpId: 'string',
            courseCode: 'string',
            courseDate: 'string',
            courseName: 'string',
            courseWeek: 'number',
            endTime: 'string',
            isvCode: 'string',
            isvCourseId: 'string',
            memo: 'string',
            schoolYear: 'string',
            semester: 'number',
            startTime: 'string',
            status: 'number',
            teachWeek: 'number',
            timeslotName: 'string',
            timeslotNum: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryClassCourseResponseBodyResult = QueryClassCourseResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 视讯paas机具激活
     *
     * @param request - ActivateDeviceRequest
     * @param headers - ActivateDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ActivateDeviceResponse
     */
    async activateDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.licenseKey)) {
            body["licenseKey"] = request.licenseKey;
        }
        if (!tea_util_1.default.isUnset(request.model)) {
            body["model"] = request.model;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ActivateDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/devices/activate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ActivateDeviceResponse({}));
    }
    /**
     * 视讯paas机具激活
     *
     * @param request - ActivateDeviceRequest
     * @returns ActivateDeviceResponse
     */
    async activateDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ActivateDeviceHeaders({});
        return await this.activateDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 高校校友会批量创建部门
     *
     * @param request - AddCollegeAlumniDeptsRequest
     * @param headers - AddCollegeAlumniDeptsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCollegeAlumniDeptsResponse
     */
    async addCollegeAlumniDeptsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.depts)) {
            body["depts"] = request.depts;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddCollegeAlumniDepts",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/depts/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCollegeAlumniDeptsResponse({}));
    }
    /**
     * 高校校友会批量创建部门
     *
     * @param request - AddCollegeAlumniDeptsRequest
     * @returns AddCollegeAlumniDeptsResponse
     */
    async addCollegeAlumniDepts(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCollegeAlumniDeptsHeaders({});
        return await this.addCollegeAlumniDeptsWithOptions(request, headers, runtime);
    }
    /**
     * 高校校友会新增校友信息
     *
     * @param request - AddCollegeAlumniUserInfoRequest
     * @param headers - AddCollegeAlumniUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCollegeAlumniUserInfoResponse
     */
    async addCollegeAlumniUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.intake)) {
            body["intake"] = request.intake;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.outtake)) {
            body["outtake"] = request.outtake;
        }
        if (!tea_util_1.default.isUnset(request.studentNumber)) {
            body["studentNumber"] = request.studentNumber;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddCollegeAlumniUserInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/userInfos`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCollegeAlumniUserInfoResponse({}));
    }
    /**
     * 高校校友会新增校友信息
     *
     * @param request - AddCollegeAlumniUserInfoRequest
     * @returns AddCollegeAlumniUserInfoResponse
     */
    async addCollegeAlumniUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCollegeAlumniUserInfoHeaders({});
        return await this.addCollegeAlumniUserInfoWithOptions(request, headers, runtime);
    }
    /**
     * 创建高校账号用户
     *
     * @param request - AddCollegeContactExclusiveRequest
     * @param headers - AddCollegeContactExclusiveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCollegeContactExclusiveResponse
     */
    async addCollegeContactExclusiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.avatarMediaId)) {
            body["avatarMediaId"] = request.avatarMediaId;
        }
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.deptOrderList)) {
            body["deptOrderList"] = request.deptOrderList;
        }
        if (!tea_util_1.default.isUnset(request.deptPositionSet)) {
            body["deptPositionSet"] = request.deptPositionSet;
        }
        if (!tea_util_1.default.isUnset(request.deptTitleList)) {
            body["deptTitleList"] = request.deptTitleList;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.empType)) {
            body["empType"] = request.empType;
        }
        if (!tea_util_1.default.isUnset(request.exclusiveAccount)) {
            body["exclusiveAccount"] = request.exclusiveAccount;
        }
        if (!tea_util_1.default.isUnset(request.exclusiveAccountType)) {
            body["exclusiveAccountType"] = request.exclusiveAccountType;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.hiredDate)) {
            body["hiredDate"] = request.hiredDate;
        }
        if (!tea_util_1.default.isUnset(request.initPassword)) {
            body["initPassword"] = request.initPassword;
        }
        if (!tea_util_1.default.isUnset(request.jobNumber)) {
            body["jobNumber"] = request.jobNumber;
        }
        if (!tea_util_1.default.isUnset(request.loginIdType)) {
            body["loginIdType"] = request.loginIdType;
        }
        if (!tea_util_1.default.isUnset(request.mainDeptId)) {
            body["mainDeptId"] = request.mainDeptId;
        }
        if (!tea_util_1.default.isUnset(request.managerUserid)) {
            body["managerUserid"] = request.managerUserid;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.nickname)) {
            body["nickname"] = request.nickname;
        }
        if (!tea_util_1.default.isUnset(request.orgEmail)) {
            body["orgEmail"] = request.orgEmail;
        }
        if (!tea_util_1.default.isUnset(request.orgEmailType)) {
            body["orgEmailType"] = request.orgEmailType;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.sendActiveSms)) {
            body["sendActiveSms"] = request.sendActiveSms;
        }
        if (!tea_util_1.default.isUnset(request.seniorMode)) {
            body["seniorMode"] = request.seniorMode;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        if (!tea_util_1.default.isUnset(request.workPlace)) {
            body["workPlace"] = request.workPlace;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddCollegeContactExclusive",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/exclusiveAccounts/users`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCollegeContactExclusiveResponse({}));
    }
    /**
     * 创建高校账号用户
     *
     * @param request - AddCollegeContactExclusiveRequest
     * @returns AddCollegeContactExclusiveResponse
     */
    async addCollegeContactExclusive(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCollegeContactExclusiveHeaders({});
        return await this.addCollegeContactExclusiveWithOptions(request, headers, runtime);
    }
    /**
     * 创建个人账号用户
     *
     * @param request - AddCollegeContactUserRequest
     * @param headers - AddCollegeContactUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCollegeContactUserResponse
     */
    async addCollegeContactUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.deptOrderList)) {
            body["deptOrderList"] = request.deptOrderList;
        }
        if (!tea_util_1.default.isUnset(request.deptPositionSet)) {
            body["deptPositionSet"] = request.deptPositionSet;
        }
        if (!tea_util_1.default.isUnset(request.deptTitleList)) {
            body["deptTitleList"] = request.deptTitleList;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.empType)) {
            body["empType"] = request.empType;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.hideMobile)) {
            body["hideMobile"] = request.hideMobile;
        }
        if (!tea_util_1.default.isUnset(request.hiredDate)) {
            body["hiredDate"] = request.hiredDate;
        }
        if (!tea_util_1.default.isUnset(request.jobNumber)) {
            body["jobNumber"] = request.jobNumber;
        }
        if (!tea_util_1.default.isUnset(request.loginEmail)) {
            body["loginEmail"] = request.loginEmail;
        }
        if (!tea_util_1.default.isUnset(request.mainDeptId)) {
            body["mainDeptId"] = request.mainDeptId;
        }
        if (!tea_util_1.default.isUnset(request.managerUserid)) {
            body["managerUserid"] = request.managerUserid;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.orgEmail)) {
            body["orgEmail"] = request.orgEmail;
        }
        if (!tea_util_1.default.isUnset(request.orgEmailType)) {
            body["orgEmailType"] = request.orgEmailType;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.sendActiveSms)) {
            body["sendActiveSms"] = request.sendActiveSms;
        }
        if (!tea_util_1.default.isUnset(request.seniorMode)) {
            body["seniorMode"] = request.seniorMode;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        if (!tea_util_1.default.isUnset(request.workPlace)) {
            body["workPlace"] = request.workPlace;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddCollegeContactUser",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/personalAccounts/users`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCollegeContactUserResponse({}));
    }
    /**
     * 创建个人账号用户
     *
     * @param request - AddCollegeContactUserRequest
     * @returns AddCollegeContactUserResponse
     */
    async addCollegeContactUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCollegeContactUserHeaders({});
        return await this.addCollegeContactUserWithOptions(request, headers, runtime);
    }
    /**
     * 增加赛事记录
     *
     * @param request - AddCompetitionRecordRequest
     * @param headers - AddCompetitionRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCompetitionRecordResponse
     */
    async addCompetitionRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.competitionCode)) {
            body["competitionCode"] = request.competitionCode;
        }
        if (!tea_util_1.default.isUnset(request.groupTemplateCode)) {
            body["groupTemplateCode"] = request.groupTemplateCode;
        }
        if (!tea_util_1.default.isUnset(request.joinGroup)) {
            body["joinGroup"] = request.joinGroup;
        }
        if (!tea_util_1.default.isUnset(request.participantName)) {
            body["participantName"] = request.participantName;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddCompetitionRecord",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/competitions/records`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCompetitionRecordResponse({}));
    }
    /**
     * 增加赛事记录
     *
     * @param request - AddCompetitionRecordRequest
     * @returns AddCompetitionRecordResponse
     */
    async addCompetitionRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCompetitionRecordHeaders({});
        return await this.addCompetitionRecordWithOptions(request, headers, runtime);
    }
    /**
     * 添加设备
     *
     * @param request - AddDeviceRequest
     * @param headers - AddDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddDeviceResponse
     */
    async addDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.model)) {
            body["model"] = request.model;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/devices`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddDeviceResponse({}));
    }
    /**
     * 添加设备
     *
     * @param request - AddDeviceRequest
     * @returns AddDeviceResponse
     */
    async addDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddDeviceHeaders({});
        return await this.addDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 添加学校配置
     *
     * @param request - AddSchoolConfigRequest
     * @param headers - AddSchoolConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddSchoolConfigResponse
     */
    async addSchoolConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.operatorName)) {
            body["operatorName"] = request.operatorName;
        }
        if (!tea_util_1.default.isUnset(request.temperatureUpLimit)) {
            body["temperatureUpLimit"] = request.temperatureUpLimit;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddSchoolConfig",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/schools/configurations`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddSchoolConfigResponse({}));
    }
    /**
     * 添加学校配置
     *
     * @param request - AddSchoolConfigRequest
     * @returns AddSchoolConfigResponse
     */
    async addSchoolConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddSchoolConfigHeaders({});
        return await this.addSchoolConfigWithOptions(request, headers, runtime);
    }
    /**
     * 修改课程
     *
     * @param request - AdjustCourseRequest
     * @param headers - AdjustCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AdjustCourseResponse
     */
    async adjustCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.className)) {
            body["className"] = request.className;
        }
        if (!tea_util_1.default.isUnset(request.classRoomId)) {
            body["classRoomId"] = request.classRoomId;
        }
        if (!tea_util_1.default.isUnset(request.classRoomName)) {
            body["classRoomName"] = request.classRoomName;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.courseDate)) {
            body["courseDate"] = request.courseDate;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.courseWeek)) {
            body["courseWeek"] = request.courseWeek;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseId)) {
            body["isvCourseId"] = request.isvCourseId;
        }
        if (!tea_util_1.default.isUnset(request.memo)) {
            body["memo"] = request.memo;
        }
        if (!tea_util_1.default.isUnset(request.schoolYear)) {
            body["schoolYear"] = request.schoolYear;
        }
        if (!tea_util_1.default.isUnset(request.semester)) {
            body["semester"] = request.semester;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.teachWeek)) {
            body["teachWeek"] = request.teachWeek;
        }
        if (!tea_util_1.default.isUnset(request.timeslotName)) {
            body["timeslotName"] = request.timeslotName;
        }
        if (!tea_util_1.default.isUnset(request.timeslotNum)) {
            body["timeslotNum"] = request.timeslotNum;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AdjustCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/courses/adjust`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AdjustCourseResponse({}));
    }
    /**
     * 修改课程
     *
     * @param request - AdjustCourseRequest
     * @returns AdjustCourseResponse
     */
    async adjustCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AdjustCourseHeaders({});
        return await this.adjustCourseWithOptions(request, headers, runtime);
    }
    /**
     * 修改教育套件
     *
     * @param request - AdjustKitRequest
     * @param headers - AdjustKitHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AdjustKitResponse
     */
    async adjustKitWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvProductScene)) {
            body["isvProductScene"] = request.isvProductScene;
        }
        if (!tea_util_1.default.isUnset(request.openEndTime)) {
            body["openEndTime"] = request.openEndTime;
        }
        if (!tea_util_1.default.isUnset(request.openStartTime)) {
            body["openStartTime"] = request.openStartTime;
        }
        if (!tea_util_1.default.isUnset(request.openUserId)) {
            body["openUserId"] = request.openUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AdjustKit",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/records/adjust`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AdjustKitResponse({}));
    }
    /**
     * 修改教育套件
     *
     * @param request - AdjustKitRequest
     * @returns AdjustKitResponse
     */
    async adjustKit(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AdjustKitHeaders({});
        return await this.adjustKitWithOptions(request, headers, runtime);
    }
    /**
     * 进行分班
     *
     * @param request - AssignClassRequest
     * @param headers - AssignClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AssignClassResponse
     */
    async assignClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.isFinish)) {
            body["isFinish"] = request.isFinish;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            body["studentId"] = request.studentId;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AssignClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/newGrades/tasks/students/classes/assign`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AssignClassResponse({}));
    }
    /**
     * 进行分班
     *
     * @param request - AssignClassRequest
     * @returns AssignClassResponse
     */
    async assignClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AssignClassHeaders({});
        return await this.assignClassWithOptions(request, headers, runtime);
    }
    /**
     * 批量创建打卡
     *
     * @param request - BatchCreateRequest
     * @param headers - BatchCreateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchCreateResponse
     */
    async batchCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            body["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            body["identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.jsVersion)) {
            body["jsVersion"] = request.jsVersion;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            body["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreate",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateResponse({}));
    }
    /**
     * 批量创建打卡
     *
     * @param request - BatchCreateRequest
     * @returns BatchCreateResponse
     */
    async batchCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateHeaders({});
        return await this.batchCreateWithOptions(request, headers, runtime);
    }
    /**
     * 批量创建课程
     *
     * @param request - BatchCreateCourseRequest
     * @param headers - BatchCreateCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchCreateCourseResponse
     */
    async batchCreateCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.className)) {
            body["className"] = request.className;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.courseDetailItemList)) {
            body["courseDetailItemList"] = request.courseDetailItemList;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.schoolYear)) {
            body["schoolYear"] = request.schoolYear;
        }
        if (!tea_util_1.default.isUnset(request.semester)) {
            body["semester"] = request.semester;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreateCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/courses/batchCreate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateCourseResponse({}));
    }
    /**
     * 批量创建课程
     *
     * @param request - BatchCreateCourseRequest
     * @returns BatchCreateCourseResponse
     */
    async batchCreateCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateCourseHeaders({});
        return await this.batchCreateCourseWithOptions(request, headers, runtime);
    }
    /**
     * 批量创建学生班级
     *
     * @param request - BatchCreateStudentClassRequest
     * @param headers - BatchCreateStudentClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchCreateStudentClassResponse
     */
    async batchCreateStudentClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.className)) {
            body["className"] = request.className;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.studentList)) {
            body["studentList"] = request.studentList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreateStudentClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/students/classes/batchCreate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateStudentClassResponse({}));
    }
    /**
     * 批量创建学生班级
     *
     * @param request - BatchCreateStudentClassRequest
     * @returns BatchCreateStudentClassResponse
     */
    async batchCreateStudentClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateStudentClassHeaders({});
        return await this.batchCreateStudentClassWithOptions(request, headers, runtime);
    }
    /**
     * 批量创建老师课程
     *
     * @param request - BatchCreateTeacherCourseRequest
     * @param headers - BatchCreateTeacherCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchCreateTeacherCourseResponse
     */
    async batchCreateTeacherCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.teacherCourseDetailItemList)) {
            body["teacherCourseDetailItemList"] = request.teacherCourseDetailItemList;
        }
        if (!tea_util_1.default.isUnset(request.teacherName)) {
            body["teacherName"] = request.teacherName;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreateTeacherCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/teachers/courses/batchCreate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateTeacherCourseResponse({}));
    }
    /**
     * 批量创建老师课程
     *
     * @param request - BatchCreateTeacherCourseRequest
     * @returns BatchCreateTeacherCourseResponse
     */
    async batchCreateTeacherCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateTeacherCourseHeaders({});
        return await this.batchCreateTeacherCourseWithOptions(request, headers, runtime);
    }
    /**
     * 批量失效课程
     *
     * @param request - BatchInvalidCourseRequest
     * @param headers - BatchInvalidCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchInvalidCourseResponse
     */
    async batchInvalidCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseId)) {
            body["isvCourseId"] = request.isvCourseId;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseIds)) {
            body["isvCourseIds"] = request.isvCourseIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchInvalidCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/courses/batchInvalid`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchInvalidCourseResponse({}));
    }
    /**
     * 批量失效课程
     *
     * @param request - BatchInvalidCourseRequest
     * @returns BatchInvalidCourseResponse
     */
    async batchInvalidCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchInvalidCourseHeaders({});
        return await this.batchInvalidCourseWithOptions(request, headers, runtime);
    }
    /**
     * 跨组织-批量创建作业
     *
     * @param request - BatchOrgCreateHWRequest
     * @param headers - BatchOrgCreateHWHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchOrgCreateHWResponse
     */
    async batchOrgCreateHWWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.hwContent)) {
            body["hwContent"] = request.hwContent;
        }
        if (!tea_util_1.default.isUnset(request.hwDeadline)) {
            body["hwDeadline"] = request.hwDeadline;
        }
        if (!tea_util_1.default.isUnset(request.hwDeadlineOpen)) {
            body["hwDeadlineOpen"] = request.hwDeadlineOpen;
        }
        if (!tea_util_1.default.isUnset(request.hwMedia)) {
            body["hwMedia"] = request.hwMedia;
        }
        if (!tea_util_1.default.isUnset(request.hwPhoto)) {
            body["hwPhoto"] = request.hwPhoto;
        }
        if (!tea_util_1.default.isUnset(request.hwTitle)) {
            body["hwTitle"] = request.hwTitle;
        }
        if (!tea_util_1.default.isUnset(request.hwType)) {
            body["hwType"] = request.hwType;
        }
        if (!tea_util_1.default.isUnset(request.hwVideo)) {
            body["hwVideo"] = request.hwVideo;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            body["identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.openSelectItemList)) {
            body["openSelectItemList"] = request.openSelectItemList;
        }
        if (!tea_util_1.default.isUnset(request.scheduledRelease)) {
            body["scheduledRelease"] = request.scheduledRelease;
        }
        if (!tea_util_1.default.isUnset(request.scheduledTime)) {
            body["scheduledTime"] = request.scheduledTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.targetRole)) {
            body["targetRole"] = request.targetRole;
        }
        if (!tea_util_1.default.isUnset(request.teacherName)) {
            body["teacherName"] = request.teacherName;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchOrgCreateHW",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/homeworks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchOrgCreateHWResponse({}));
    }
    /**
     * 跨组织-批量创建作业
     *
     * @param request - BatchOrgCreateHWRequest
     * @returns BatchOrgCreateHWResponse
     */
    async batchOrgCreateHW(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchOrgCreateHWHeaders({});
        return await this.batchOrgCreateHWWithOptions(request, headers, runtime);
    }
    /**
     * 撤销订单
     *
     * @param request - CancelOrderRequest
     * @param headers - CancelOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CancelOrderResponse
     */
    async cancelOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CancelOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders/cancel`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CancelOrderResponse({}));
    }
    /**
     * 撤销订单
     *
     * @param request - CancelOrderRequest
     * @returns CancelOrderResponse
     */
    async cancelOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CancelOrderHeaders({});
        return await this.cancelOrderWithOptions(request, headers, runtime);
    }
    /**
     * 个人应用撤销订单
     *
     * @param request - CancelSnsOrderRequest
     * @param headers - CancelSnsOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CancelSnsOrderResponse
     */
    async cancelSnsOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.alipayAppId)) {
            body["alipayAppId"] = request.alipayAppId;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CancelSnsOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/snsUserOrders/cancel`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CancelSnsOrderResponse({}));
    }
    /**
     * 个人应用撤销订单
     *
     * @param request - CancelSnsOrderRequest
     * @returns CancelSnsOrderResponse
     */
    async cancelSnsOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CancelSnsOrderHeaders({});
        return await this.cancelSnsOrderWithOptions(request, headers, runtime);
    }
    /**
     * 取消订单
     *
     * @param request - CancelUserOrderRequest
     * @param headers - CancelUserOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CancelUserOrderResponse
     */
    async cancelUserOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.alipayAppId)) {
            body["alipayAppId"] = request.alipayAppId;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CancelUserOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/userOrders/cancel`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CancelUserOrderResponse({}));
    }
    /**
     * 取消订单
     *
     * @param request - CancelUserOrderRequest
     * @returns CancelUserOrderResponse
     */
    async cancelUserOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CancelUserOrderHeaders({});
        return await this.cancelUserOrderWithOptions(request, headers, runtime);
    }
    /**
     * 批量查询打卡任务
     *
     * @param request - CardBatchQueryCardsRequest
     * @param headers - CardBatchQueryCardsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardBatchQueryCardsResponse
     */
    async cardBatchQueryCardsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            body["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset(request.cardIds)) {
            body["cardIds"] = request.cardIds;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            body["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CardBatchQueryCards",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards/tasks/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardBatchQueryCardsResponse({}));
    }
    /**
     * 批量查询打卡任务
     *
     * @param request - CardBatchQueryCardsRequest
     * @returns CardBatchQueryCardsResponse
     */
    async cardBatchQueryCards(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardBatchQueryCardsHeaders({});
        return await this.cardBatchQueryCardsWithOptions(request, headers, runtime);
    }
    /**
     * 删除打卡
     *
     * @param request - CardDeleteCardRequest
     * @param headers - CardDeleteCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardDeleteCardResponse
     */
    async cardDeleteCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            query["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset(request.cardBizId)) {
            query["cardBizId"] = request.cardBizId;
        }
        if (!tea_util_1.default.isUnset(request.cardId)) {
            query["cardId"] = request.cardId;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            query["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CardDeleteCard",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardDeleteCardResponse({}));
    }
    /**
     * 删除打卡
     *
     * @param request - CardDeleteCardRequest
     * @returns CardDeleteCardResponse
     */
    async cardDeleteCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardDeleteCardHeaders({});
        return await this.cardDeleteCardWithOptions(request, headers, runtime);
    }
    /**
     * 打卡-结束打卡
     *
     * @param request - CardEndCardRequest
     * @param headers - CardEndCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardEndCardResponse
     */
    async cardEndCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            body["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset(request.cardBizId)) {
            body["cardBizId"] = request.cardBizId;
        }
        if (!tea_util_1.default.isUnset(request.cardId)) {
            body["cardId"] = request.cardId;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            body["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CardEndCard",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards/finish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardEndCardResponse({}));
    }
    /**
     * 打卡-结束打卡
     *
     * @param request - CardEndCardRequest
     * @returns CardEndCardResponse
     */
    async cardEndCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardEndCardHeaders({});
        return await this.cardEndCardWithOptions(request, headers, runtime);
    }
    /**
     * 查询打卡任务
     *
     * @param request - CardGetCardRequest
     * @param headers - CardGetCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardGetCardResponse
     */
    async cardGetCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cardId)) {
            query["cardId"] = request.cardId;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            query["sourceType"] = request.sourceType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CardGetCard",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards/tasks`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardGetCardResponse({}));
    }
    /**
     * 查询打卡任务
     *
     * @param request - CardGetCardRequest
     * @returns CardGetCardResponse
     */
    async cardGetCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardGetCardHeaders({});
        return await this.cardGetCardWithOptions(request, headers, runtime);
    }
    /**
     * 获取打卡任务完成进度
     *
     * @param request - CardGetCardFinishProgressRequest
     * @param headers - CardGetCardFinishProgressHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardGetCardFinishProgressResponse
     */
    async cardGetCardFinishProgressWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            query["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset(request.cardBizId)) {
            query["cardBizId"] = request.cardBizId;
        }
        if (!tea_util_1.default.isUnset(request.cardId)) {
            query["cardId"] = request.cardId;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            query["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CardGetCardFinishProgress",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards/completionProgress`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardGetCardFinishProgressResponse({}));
    }
    /**
     * 获取打卡任务完成进度
     *
     * @param request - CardGetCardFinishProgressRequest
     * @returns CardGetCardFinishProgressResponse
     */
    async cardGetCardFinishProgress(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardGetCardFinishProgressHeaders({});
        return await this.cardGetCardFinishProgressWithOptions(request, headers, runtime);
    }
    /**
     * 查询打卡Feed流
     *
     * @param request - CardQueryCardFeedsRequest
     * @param headers - CardQueryCardFeedsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardQueryCardFeedsResponse
     */
    async cardQueryCardFeedsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizType)) {
            query["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.cardBizCode)) {
            query["cardBizCode"] = request.cardBizCode;
        }
        if (!tea_util_1.default.isUnset(request.cardBizId)) {
            query["cardBizId"] = request.cardBizId;
        }
        if (!tea_util_1.default.isUnset(request.cardId)) {
            query["cardId"] = request.cardId;
        }
        if (!tea_util_1.default.isUnset(request.count)) {
            query["count"] = request.count;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            query["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.feedType)) {
            query["feedType"] = request.feedType;
        }
        if (!tea_util_1.default.isUnset(request.needFinishProcess)) {
            query["needFinishProcess"] = request.needFinishProcess;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            query["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        if (!tea_util_1.default.isUnset(request.subBizId)) {
            query["subBizId"] = request.subBizId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CardQueryCardFeeds",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/cards/feeds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardQueryCardFeedsResponse({}));
    }
    /**
     * 查询打卡Feed流
     *
     * @param request - CardQueryCardFeedsRequest
     * @returns CardQueryCardFeedsResponse
     */
    async cardQueryCardFeeds(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardQueryCardFeedsHeaders({});
        return await this.cardQueryCardFeedsWithOptions(request, headers, runtime);
    }
    /**
     * 支付校验
     *
     * @param request - CheckRestrictionRequest
     * @param headers - CheckRestrictionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckRestrictionResponse
     */
    async checkRestrictionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CheckRestriction",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/restrictions/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckRestrictionResponse({}));
    }
    /**
     * 支付校验
     *
     * @param request - CheckRestrictionRequest
     * @returns CheckRestrictionResponse
     */
    async checkRestriction(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckRestrictionHeaders({});
        return await this.checkRestrictionWithOptions(request, headers, runtime);
    }
    /**
     * 积分兑换
     *
     * @param request - ConsumePointRequest
     * @param headers - ConsumePointHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ConsumePointResponse
     */
    async consumePointWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.amount)) {
            body["amount"] = request.amount;
        }
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ConsumePoint",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/poins/consume`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ConsumePointResponse({}));
    }
    /**
     * 积分兑换
     *
     * @param request - ConsumePointRequest
     * @returns ConsumePointResponse
     */
    async consumePoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ConsumePointHeaders({});
        return await this.consumePointWithOptions(request, headers, runtime);
    }
    /**
     * 全校排课结束通知
     *
     * @param request - CourseSchedulingComplimentNoticeRequest
     * @param headers - CourseSchedulingComplimentNoticeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CourseSchedulingComplimentNoticeResponse
     */
    async courseSchedulingComplimentNoticeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CourseSchedulingComplimentNotice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/schedules/finishNotify`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CourseSchedulingComplimentNoticeResponse({}));
    }
    /**
     * 全校排课结束通知
     *
     * @param request - CourseSchedulingComplimentNoticeRequest
     * @returns CourseSchedulingComplimentNoticeResponse
     */
    async courseSchedulingComplimentNotice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CourseSchedulingComplimentNoticeHeaders({});
        return await this.courseSchedulingComplimentNoticeWithOptions(request, headers, runtime);
    }
    /**
     * 创建App支付订单
     *
     * @param request - CreateAppOrderRequest
     * @param headers - CreateAppOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAppOrderResponse
     */
    async createAppOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.alipayAppId)) {
            body["alipayAppId"] = request.alipayAppId;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.labelAmount)) {
            body["labelAmount"] = request.labelAmount;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.merchantOrderNo)) {
            body["merchantOrderNo"] = request.merchantOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.outerUserId)) {
            body["outerUserId"] = request.outerUserId;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            body["subject"] = request.subject;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAppOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/appOrders`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateAppOrderResponse({}));
    }
    /**
     * 创建App支付订单
     *
     * @param request - CreateAppOrderRequest
     * @returns CreateAppOrderResponse
     */
    async createAppOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAppOrderHeaders({});
        return await this.createAppOrderWithOptions(request, headers, runtime);
    }
    /**
     * 创建高校通讯录组织单元
     *
     * @param request - CreateCollegeContactDeptRequest
     * @param headers - CreateCollegeContactDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCollegeContactDeptResponse
     */
    async createCollegeContactDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.autoApproveApply)) {
            body["autoApproveApply"] = request.autoApproveApply;
        }
        if (!tea_util_1.default.isUnset(request.brief)) {
            body["brief"] = request.brief;
        }
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.createDeptGroup)) {
            body["createDeptGroup"] = request.createDeptGroup;
        }
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            body["deptCode"] = request.deptCode;
        }
        if (!tea_util_1.default.isUnset(request.deptPermits)) {
            body["deptPermits"] = request.deptPermits;
        }
        if (!tea_util_1.default.isUnset(request.deptType)) {
            body["deptType"] = request.deptType;
        }
        if (!tea_util_1.default.isUnset(request.empApplyJoinDept)) {
            body["empApplyJoinDept"] = request.empApplyJoinDept;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.hideDept)) {
            body["hideDept"] = request.hideDept;
        }
        if (!tea_util_1.default.isUnset(request.hideSceneConfig)) {
            body["hideSceneConfig"] = request.hideSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.outerDept)) {
            body["outerDept"] = request.outerDept;
        }
        if (!tea_util_1.default.isUnset(request.outerDeptOnlySelf)) {
            body["outerDeptOnlySelf"] = request.outerDeptOnlySelf;
        }
        if (!tea_util_1.default.isUnset(request.outerPermitDepts)) {
            body["outerPermitDepts"] = request.outerPermitDepts;
        }
        if (!tea_util_1.default.isUnset(request.outerPermitUsers)) {
            body["outerPermitUsers"] = request.outerPermitUsers;
        }
        if (!tea_util_1.default.isUnset(request.outerSceneConfig)) {
            body["outerSceneConfig"] = request.outerSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.parentId)) {
            body["parentId"] = request.parentId;
        }
        if (!tea_util_1.default.isUnset(request.sourceIdentifier)) {
            body["sourceIdentifier"] = request.sourceIdentifier;
        }
        if (!tea_util_1.default.isUnset(request.struId)) {
            body["struId"] = request.struId;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        if (!tea_util_1.default.isUnset(request.userPermits)) {
            body["userPermits"] = request.userPermits;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCollegeContactDept",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCollegeContactDeptResponse({}));
    }
    /**
     * 创建高校通讯录组织单元
     *
     * @param request - CreateCollegeContactDeptRequest
     * @returns CreateCollegeContactDeptResponse
     */
    async createCollegeContactDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCollegeContactDeptHeaders({});
        return await this.createCollegeContactDeptWithOptions(request, headers, runtime);
    }
    /**
     * 创建高校通讯录场景架构
     *
     * @param request - CreateCollegeContactSceneStruRequest
     * @param headers - CreateCollegeContactSceneStruHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCollegeContactSceneStruResponse
     */
    async createCollegeContactSceneStruWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.hasStruFixedDept)) {
            body["hasStruFixedDept"] = request.hasStruFixedDept;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.sourceIdentifier)) {
            body["sourceIdentifier"] = request.sourceIdentifier;
        }
        if (!tea_util_1.default.isUnset(request.struBrief)) {
            body["struBrief"] = request.struBrief;
        }
        if (!tea_util_1.default.isUnset(request.struName)) {
            body["struName"] = request.struName;
        }
        if (!tea_util_1.default.isUnset(request.struType)) {
            body["struType"] = request.struType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCollegeContactSceneStru",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/scenes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCollegeContactSceneStruResponse({}));
    }
    /**
     * 创建高校通讯录场景架构
     *
     * @param request - CreateCollegeContactSceneStruRequest
     * @returns CreateCollegeContactSceneStruResponse
     */
    async createCollegeContactSceneStru(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCollegeContactSceneStruHeaders({});
        return await this.createCollegeContactSceneStruWithOptions(request, headers, runtime);
    }
    /**
     * 创建课程
     *
     * @param request - CreateCourseRequest
     * @param headers - CreateCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCourseResponse
     */
    async createCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.className)) {
            body["className"] = request.className;
        }
        if (!tea_util_1.default.isUnset(request.classRoomId)) {
            body["classRoomId"] = request.classRoomId;
        }
        if (!tea_util_1.default.isUnset(request.classRoomName)) {
            body["classRoomName"] = request.classRoomName;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.courseDate)) {
            body["courseDate"] = request.courseDate;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.courseWeek)) {
            body["courseWeek"] = request.courseWeek;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseId)) {
            body["isvCourseId"] = request.isvCourseId;
        }
        if (!tea_util_1.default.isUnset(request.memo)) {
            body["memo"] = request.memo;
        }
        if (!tea_util_1.default.isUnset(request.schoolYear)) {
            body["schoolYear"] = request.schoolYear;
        }
        if (!tea_util_1.default.isUnset(request.semester)) {
            body["semester"] = request.semester;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.teachWeek)) {
            body["teachWeek"] = request.teachWeek;
        }
        if (!tea_util_1.default.isUnset(request.teacherList)) {
            body["teacherList"] = request.teacherList;
        }
        if (!tea_util_1.default.isUnset(request.timeslotName)) {
            body["timeslotName"] = request.timeslotName;
        }
        if (!tea_util_1.default.isUnset(request.timeslotNum)) {
            body["timeslotNum"] = request.timeslotNum;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/courses`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCourseResponse({}));
    }
    /**
     * 创建课程
     *
     * @param request - CreateCourseRequest
     * @returns CreateCourseResponse
     */
    async createCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCourseHeaders({});
        return await this.createCourseWithOptions(request, headers, runtime);
    }
    /**
     * 创建自定义部门下班级
     *
     * @param request - CreateCustomClassRequest
     * @param headers - CreateCustomClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCustomClassResponse
     */
    async createCustomClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.customClass)) {
            body["customClass"] = request.customClass;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            body["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCustomClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/customClasses`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCustomClassResponse({}));
    }
    /**
     * 创建自定义部门下班级
     *
     * @param request - CreateCustomClassRequest
     * @returns CreateCustomClassResponse
     */
    async createCustomClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCustomClassHeaders({});
        return await this.createCustomClassWithOptions(request, headers, runtime);
    }
    /**
     * 创建自定义校区或部门
     *
     * @param request - CreateCustomDeptRequest
     * @param headers - CreateCustomDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCustomDeptResponse
     */
    async createCustomDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.customDept)) {
            body["customDept"] = request.customDept;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            body["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCustomDept",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/customDepts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCustomDeptResponse({}));
    }
    /**
     * 创建自定义校区或部门
     *
     * @param request - CreateCustomDeptRequest
     * @returns CreateCustomDeptResponse
     */
    async createCustomDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCustomDeptHeaders({});
        return await this.createCustomDeptWithOptions(request, headers, runtime);
    }
    /**
     * 教学资源库创建space
     *
     * @param request - CreateEduAssetSpaceRequest
     * @param headers - CreateEduAssetSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateEduAssetSpaceResponse
     */
    async createEduAssetSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.spaceDesc)) {
            body["spaceDesc"] = request.spaceDesc;
        }
        if (!tea_util_1.default.isUnset(request.spaceIcon)) {
            body["spaceIcon"] = request.spaceIcon;
        }
        if (!tea_util_1.default.isUnset(request.spaceName)) {
            body["spaceName"] = request.spaceName;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateEduAssetSpace",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/assets/spaces`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateEduAssetSpaceResponse({}));
    }
    /**
     * 教学资源库创建space
     *
     * @param request - CreateEduAssetSpaceRequest
     * @returns CreateEduAssetSpaceResponse
     */
    async createEduAssetSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateEduAssetSpaceHeaders({});
        return await this.createEduAssetSpaceWithOptions(request, headers, runtime);
    }
    /**
     * 创建设备履约记录，亲情通话、考勤数据同步
     *
     * @param request - CreateFulfilRecordRequest
     * @param headers - CreateFulfilRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateFulfilRecordResponse
     */
    async createFulfilRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizTime)) {
            body["bizTime"] = request.bizTime;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateFulfilRecord",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/fulfilRecords`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateFulfilRecordResponse({}));
    }
    /**
     * 创建设备履约记录，亲情通话、考勤数据同步
     *
     * @param request - CreateFulfilRecordRequest
     * @returns CreateFulfilRecordResponse
     */
    async createFulfilRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateFulfilRecordHeaders({});
        return await this.createFulfilRecordWithOptions(request, headers, runtime);
    }
    /**
     * 查询某个组织下面的设备列表
     *
     * @param request - CreateInviteUrlRequest
     * @param headers - CreateInviteUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateInviteUrlResponse
     */
    async createInviteUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.targetOperator)) {
            body["targetOperator"] = request.targetOperator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateInviteUrl",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/orgRelations/inviteUrls`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateInviteUrlResponse({}));
    }
    /**
     * 查询某个组织下面的设备列表
     *
     * @param request - CreateInviteUrlRequest
     * @returns CreateInviteUrlResponse
     */
    async createInviteUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateInviteUrlHeaders({});
        return await this.createInviteUrlWithOptions(request, headers, runtime);
    }
    /**
     * 创建商品
     *
     * @param request - CreateItemRequest
     * @param headers - CreateItemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateItemResponse
     */
    async createItemWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.effectType)) {
            body["effectType"] = request.effectType;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.optUser)) {
            body["optUser"] = request.optUser;
        }
        if (!tea_util_1.default.isUnset(request.periodType)) {
            body["periodType"] = request.periodType;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateItem",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/items`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateItemResponse({}));
    }
    /**
     * 创建商品
     *
     * @param request - CreateItemRequest
     * @returns CreateItemResponse
     */
    async createItem(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateItemHeaders({});
        return await this.createItemWithOptions(request, headers, runtime);
    }
    /**
     * 创建订单信息
     *
     * @param request - CreateOrderRequest
     * @param headers - CreateOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateOrderResponse
     */
    async createOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.createTime)) {
            body["createTime"] = request.createTime;
        }
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.ftoken)) {
            body["ftoken"] = request.ftoken;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.terminalParams)) {
            body["terminalParams"] = request.terminalParams;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.totalAmount)) {
            body["totalAmount"] = request.totalAmount;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateOrderResponse({}));
    }
    /**
     * 创建订单信息
     *
     * @param request - CreateOrderRequest
     * @returns CreateOrderResponse
     */
    async createOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrderHeaders({});
        return await this.createOrderWithOptions(request, headers, runtime);
    }
    /**
     * 创建开单流水
     *
     * @param request - CreateOrderFlowRequest
     * @param headers - CreateOrderFlowHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateOrderFlowResponse
     */
    async createOrderFlowWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.alipayUid)) {
            body["alipayUid"] = request.alipayUid;
        }
        if (!tea_util_1.default.isUnset(request.createTime)) {
            body["createTime"] = request.createTime;
        }
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.guardianUserId)) {
            body["guardianUserId"] = request.guardianUserId;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.totalAmount)) {
            body["totalAmount"] = request.totalAmount;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrderFlow",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders/flows`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateOrderFlowResponse({}));
    }
    /**
     * 创建开单流水
     *
     * @param request - CreateOrderFlowRequest
     * @returns CreateOrderFlowResponse
     */
    async createOrderFlow(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrderFlowHeaders({});
        return await this.createOrderFlowWithOptions(request, headers, runtime);
    }
    /**
     * 添加物理教室信息
     *
     * @param request - CreatePhysicalClassroomRequest
     * @param headers - CreatePhysicalClassroomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreatePhysicalClassroomResponse
     */
    async createPhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.classroomBuilding)) {
            body["classroomBuilding"] = request.classroomBuilding;
        }
        if (!tea_util_1.default.isUnset(request.classroomCampus)) {
            body["classroomCampus"] = request.classroomCampus;
        }
        if (!tea_util_1.default.isUnset(request.classroomFloor)) {
            body["classroomFloor"] = request.classroomFloor;
        }
        if (!tea_util_1.default.isUnset(request.classroomName)) {
            body["classroomName"] = request.classroomName;
        }
        if (!tea_util_1.default.isUnset(request.classroomNumber)) {
            body["classroomNumber"] = request.classroomNumber;
        }
        if (!tea_util_1.default.isUnset(request.directBroadcast)) {
            body["directBroadcast"] = request.directBroadcast;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreatePhysicalClassroom",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/physicalClassrooms`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreatePhysicalClassroomResponse({}));
    }
    /**
     * 添加物理教室信息
     *
     * @param request - CreatePhysicalClassroomRequest
     * @returns CreatePhysicalClassroomResponse
     */
    async createPhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreatePhysicalClassroomHeaders({});
        return await this.createPhysicalClassroomWithOptions(request, headers, runtime);
    }
    /**
     * 创建退款流水
     *
     * @param request - CreateRefundFlowRequest
     * @param headers - CreateRefundFlowHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateRefundFlowResponse
     */
    async createRefundFlowWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.operatorName)) {
            body["operatorName"] = request.operatorName;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateRefundFlow",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/refunds/flows`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateRefundFlowResponse({}));
    }
    /**
     * 创建退款流水
     *
     * @param request - CreateRefundFlowRequest
     * @returns CreateRefundFlowResponse
     */
    async createRefundFlow(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRefundFlowHeaders({});
        return await this.createRefundFlowWithOptions(request, headers, runtime);
    }
    /**
     * 创建预约类型的专递课堂
     *
     * @param request - CreateRemoteClassCourseRequest
     * @param headers - CreateRemoteClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateRemoteClassCourseResponse
     */
    async createRemoteClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendParticipants)) {
            body["attendParticipants"] = request.attendParticipants;
        }
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.teachingParticipant)) {
            body["teachingParticipant"] = request.teachingParticipant;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateRemoteClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/courses`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateRemoteClassCourseResponse({}));
    }
    /**
     * 创建预约类型的专递课堂
     *
     * @param request - CreateRemoteClassCourseRequest
     * @returns CreateRemoteClassCourseResponse
     */
    async createRemoteClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRemoteClassCourseHeaders({});
        return await this.createRemoteClassCourseWithOptions(request, headers, runtime);
    }
    /**
     * 按学期创建课表模板
     *
     * @param request - CreateSectionConfigRequest
     * @param headers - CreateSectionConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSectionConfigResponse
     */
    async createSectionConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.sectionConfigs)) {
            body["sectionConfigs"] = request.sectionConfigs;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSectionConfig",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/sectionConfigs`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSectionConfigResponse({}));
    }
    /**
     * 按学期创建课表模板
     *
     * @param request - CreateSectionConfigRequest
     * @returns CreateSectionConfigResponse
     */
    async createSectionConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSectionConfigHeaders({});
        return await this.createSectionConfigWithOptions(request, headers, runtime);
    }
    /**
     * 个人应用创建APP订单
     *
     * @param request - CreateSnsAppOrderRequest
     * @param headers - CreateSnsAppOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSnsAppOrderResponse
     */
    async createSnsAppOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualAmount)) {
            body["actualAmount"] = request.actualAmount;
        }
        if (!tea_util_1.default.isUnset(request.alipayAppId)) {
            body["alipayAppId"] = request.alipayAppId;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.labelAmount)) {
            body["labelAmount"] = request.labelAmount;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.merchantOrderNo)) {
            body["merchantOrderNo"] = request.merchantOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            body["subject"] = request.subject;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSnsAppOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/snsAppOrders`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSnsAppOrderResponse({}));
    }
    /**
     * 个人应用创建APP订单
     *
     * @param request - CreateSnsAppOrderRequest
     * @returns CreateSnsAppOrderResponse
     */
    async createSnsAppOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSnsAppOrderHeaders({});
        return await this.createSnsAppOrderWithOptions(request, headers, runtime);
    }
    /**
     * 创建ststoken
     *
     * @param request - CreateStsTokenRequest
     * @param headers - CreateStsTokenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateStsTokenResponse
     */
    async createStsTokenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceSn)) {
            body["deviceSn"] = request.deviceSn;
        }
        if (!tea_util_1.default.isUnset(request.stsType)) {
            body["stsType"] = request.stsType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateStsToken",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/ststoken`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateStsTokenResponse({}));
    }
    /**
     * 创建ststoken
     *
     * @param request - CreateStsTokenRequest
     * @returns CreateStsTokenResponse
     */
    async createStsToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateStsTokenHeaders({});
        return await this.createStsTokenWithOptions(request, headers, runtime);
    }
    /**
     * 创建学生班级
     *
     * @param request - CreateStudentClassRequest
     * @param headers - CreateStudentClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateStudentClassResponse
     */
    async createStudentClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.className)) {
            body["className"] = request.className;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.studentName)) {
            body["studentName"] = request.studentName;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            body["studentUserId"] = request.studentUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateStudentClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/students/classes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateStudentClassResponse({}));
    }
    /**
     * 创建学生班级
     *
     * @param request - CreateStudentClassRequest
     * @returns CreateStudentClassResponse
     */
    async createStudentClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateStudentClassHeaders({});
        return await this.createStudentClassWithOptions(request, headers, runtime);
    }
    /**
     * 创建老师课程
     *
     * @param request - CreateTeacherCourseRequest
     * @param headers - CreateTeacherCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTeacherCourseResponse
     */
    async createTeacherCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseId)) {
            body["isvCourseId"] = request.isvCourseId;
        }
        if (!tea_util_1.default.isUnset(request.teacherName)) {
            body["teacherName"] = request.teacherName;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTeacherCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/teachers/courses`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTeacherCourseResponse({}));
    }
    /**
     * 创建老师课程
     *
     * @param request - CreateTeacherCourseRequest
     * @returns CreateTeacherCourseResponse
     */
    async createTeacherCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTeacherCourseHeaders({});
        return await this.createTeacherCourseWithOptions(request, headers, runtime);
    }
    /**
     * 套件-创建定时卡片
     *
     * @param request - CreateTimerCardRequest
     * @param headers - CreateTimerCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTimerCardResponse
     */
    async createTimerCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionTime)) {
            body["actionTime"] = request.actionTime;
        }
        if (!tea_util_1.default.isUnset(request.bizData)) {
            body["bizData"] = request.bizData;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            body["identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.memo)) {
            body["memo"] = request.memo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTimerCard",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/timerCards`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTimerCardResponse({}));
    }
    /**
     * 套件-创建定时卡片
     *
     * @param request - CreateTimerCardRequest
     * @returns CreateTimerCardResponse
     */
    async createTimerCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTimerCardHeaders({});
        return await this.createTimerCardWithOptions(request, headers, runtime);
    }
    /**
     * 创建授权token
     *
     * @param request - CreateTokenRequest
     * @param headers - CreateTokenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTokenResponse
     */
    async createTokenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateToken",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/tokens`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTokenResponse({}));
    }
    /**
     * 创建授权token
     *
     * @param request - CreateTokenRequest
     * @returns CreateTokenResponse
     */
    async createToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTokenHeaders({});
        return await this.createTokenWithOptions(request, headers, runtime);
    }
    /**
     * 创建调代课记录
     *
     * @param request - CreateTransferRecordRequest
     * @param headers - CreateTransferRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTransferRecordResponse
     */
    async createTransferRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.className)) {
            body["className"] = request.className;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvRecordId)) {
            body["isvRecordId"] = request.isvRecordId;
        }
        if (!tea_util_1.default.isUnset(request.srcCourseCode)) {
            body["srcCourseCode"] = request.srcCourseCode;
        }
        if (!tea_util_1.default.isUnset(request.srcCourseDate)) {
            body["srcCourseDate"] = request.srcCourseDate;
        }
        if (!tea_util_1.default.isUnset(request.srcCourseName)) {
            body["srcCourseName"] = request.srcCourseName;
        }
        if (!tea_util_1.default.isUnset(request.srcIsvCourseId)) {
            body["srcIsvCourseId"] = request.srcIsvCourseId;
        }
        if (!tea_util_1.default.isUnset(request.srcTimeslotName)) {
            body["srcTimeslotName"] = request.srcTimeslotName;
        }
        if (!tea_util_1.default.isUnset(request.srcTimeslotNum)) {
            body["srcTimeslotNum"] = request.srcTimeslotNum;
        }
        if (!tea_util_1.default.isUnset(request.tarCourseCode)) {
            body["tarCourseCode"] = request.tarCourseCode;
        }
        if (!tea_util_1.default.isUnset(request.tarCourseDate)) {
            body["tarCourseDate"] = request.tarCourseDate;
        }
        if (!tea_util_1.default.isUnset(request.tarCourseName)) {
            body["tarCourseName"] = request.tarCourseName;
        }
        if (!tea_util_1.default.isUnset(request.tarIsvCourseId)) {
            body["tarIsvCourseId"] = request.tarIsvCourseId;
        }
        if (!tea_util_1.default.isUnset(request.tarTimeslotName)) {
            body["tarTimeslotName"] = request.tarTimeslotName;
        }
        if (!tea_util_1.default.isUnset(request.tarTimeslotNum)) {
            body["tarTimeslotNum"] = request.tarTimeslotNum;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTransferRecord",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/transferRecords`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTransferRecordResponse({}));
    }
    /**
     * 创建调代课记录
     *
     * @param request - CreateTransferRecordRequest
     * @returns CreateTransferRecordResponse
     */
    async createTransferRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTransferRecordHeaders({});
        return await this.createTransferRecordWithOptions(request, headers, runtime);
    }
    /**
     * 大学创建课程组
     *
     * @param request - CreateUniversityCourseGroupRequest
     * @param headers - CreateUniversityCourseGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateUniversityCourseGroupResponse
     */
    async createUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupIntroduce)) {
            body["courseGroupIntroduce"] = request.courseGroupIntroduce;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupName)) {
            body["courseGroupName"] = request.courseGroupName;
        }
        if (!tea_util_1.default.isUnset(request.courserGroupItemModels)) {
            body["courserGroupItemModels"] = request.courserGroupItemModels;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseGroupCode)) {
            body["isvCourseGroupCode"] = request.isvCourseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.periodCode)) {
            body["periodCode"] = request.periodCode;
        }
        if (!tea_util_1.default.isUnset(request.schoolYear)) {
            body["schoolYear"] = request.schoolYear;
        }
        if (!tea_util_1.default.isUnset(request.semester)) {
            body["semester"] = request.semester;
        }
        if (!tea_util_1.default.isUnset(request.subjectName)) {
            body["subjectName"] = request.subjectName;
        }
        if (!tea_util_1.default.isUnset(request.teacherInfos)) {
            body["teacherInfos"] = request.teacherInfos;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateUniversityCourseGroup",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courseGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateUniversityCourseGroupResponse({}));
    }
    /**
     * 大学创建课程组
     *
     * @param request - CreateUniversityCourseGroupRequest
     * @returns CreateUniversityCourseGroupResponse
     */
    async createUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUniversityCourseGroupHeaders({});
        return await this.createUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    /**
     * 大学增加学生
     *
     * @param request - CreateUniversityStudentRequest
     * @param headers - CreateUniversityStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateUniversityStudentResponse
     */
    async createUniversityStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.gender)) {
            body["gender"] = request.gender;
        }
        if (!tea_util_1.default.isUnset(request.identityNumber)) {
            body["identityNumber"] = request.identityNumber;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.studentNumber)) {
            body["studentNumber"] = request.studentNumber;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateUniversityStudent",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/students`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateUniversityStudentResponse({}));
    }
    /**
     * 大学增加学生
     *
     * @param request - CreateUniversityStudentRequest
     * @returns CreateUniversityStudentResponse
     */
    async createUniversityStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUniversityStudentHeaders({});
        return await this.createUniversityStudentWithOptions(request, headers, runtime);
    }
    /**
     * 大学添加老师
     *
     * @param request - CreateUniversityTeacherRequest
     * @param headers - CreateUniversityTeacherHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateUniversityTeacherResponse
     */
    async createUniversityTeacherWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            body["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateUniversityTeacher",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/teachers`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateUniversityTeacherResponse({}));
    }
    /**
     * 大学添加老师
     *
     * @param request - CreateUniversityTeacherRequest
     * @returns CreateUniversityTeacherResponse
     */
    async createUniversityTeacher(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateUniversityTeacherHeaders({});
        return await this.createUniversityTeacherWithOptions(request, headers, runtime);
    }
    /**
     * 视讯paas机具取消激活
     *
     * @param request - DeactivateDeviceRequest
     * @param headers - DeactivateDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeactivateDeviceResponse
     */
    async deactivateDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.model)) {
            body["model"] = request.model;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeactivateDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/devices/deactivate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeactivateDeviceResponse({}));
    }
    /**
     * 视讯paas机具取消激活
     *
     * @param request - DeactivateDeviceRequest
     * @returns DeactivateDeviceResponse
     */
    async deactivateDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeactivateDeviceHeaders({});
        return await this.deactivateDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 扣减教育积分
     *
     * @param request - DeductPointRequest
     * @param headers - DeductPointHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeductPointResponse
     */
    async deductPointWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.deductDesc)) {
            body["deductDesc"] = request.deductDesc;
        }
        if (!tea_util_1.default.isUnset(request.deductDetailUrl)) {
            body["deductDetailUrl"] = request.deductDetailUrl;
        }
        if (!tea_util_1.default.isUnset(request.deductNum)) {
            body["deductNum"] = request.deductNum;
        }
        if (!tea_util_1.default.isUnset(request.pointType)) {
            body["pointType"] = request.pointType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeductPoint",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/points/deduct`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeductPointResponse({}));
    }
    /**
     * 扣减教育积分
     *
     * @param request - DeductPointRequest
     * @returns DeductPointResponse
     */
    async deductPoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeductPointHeaders({});
        return await this.deductPointWithOptions(request, headers, runtime);
    }
    /**
     * 高校校友会删除当前部门
     *
     * @param request - DeleteCollegeAlumniDeptRequest
     * @param headers - DeleteCollegeAlumniDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteCollegeAlumniDeptResponse
     */
    async deleteCollegeAlumniDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteCollegeAlumniDept",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/depts`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteCollegeAlumniDeptResponse({}));
    }
    /**
     * 高校校友会删除当前部门
     *
     * @param request - DeleteCollegeAlumniDeptRequest
     * @returns DeleteCollegeAlumniDeptResponse
     */
    async deleteCollegeAlumniDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteCollegeAlumniDeptHeaders({});
        return await this.deleteCollegeAlumniDeptWithOptions(request, headers, runtime);
    }
    /**
     * 高校校友会删除校友信息
     *
     * @param request - DeleteCollegeAlumniUserInfoRequest
     * @param headers - DeleteCollegeAlumniUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteCollegeAlumniUserInfoResponse
     */
    async deleteCollegeAlumniUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteCollegeAlumniUserInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/userInfos/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteCollegeAlumniUserInfoResponse({}));
    }
    /**
     * 高校校友会删除校友信息
     *
     * @param request - DeleteCollegeAlumniUserInfoRequest
     * @returns DeleteCollegeAlumniUserInfoResponse
     */
    async deleteCollegeAlumniUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteCollegeAlumniUserInfoHeaders({});
        return await this.deleteCollegeAlumniUserInfoWithOptions(request, headers, runtime);
    }
    /**
     * 删除高校通讯录场景架构
     *
     * @param request - DeleteCollegeContactSceneStruRequest
     * @param headers - DeleteCollegeContactSceneStruHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteCollegeContactSceneStruResponse
     */
    async deleteCollegeContactSceneStruWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.struId)) {
            body["struId"] = request.struId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteCollegeContactSceneStru",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/scenes/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteCollegeContactSceneStruResponse({}));
    }
    /**
     * 删除高校通讯录场景架构
     *
     * @param request - DeleteCollegeContactSceneStruRequest
     * @returns DeleteCollegeContactSceneStruResponse
     */
    async deleteCollegeContactSceneStru(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteCollegeContactSceneStruHeaders({});
        return await this.deleteCollegeContactSceneStruWithOptions(request, headers, runtime);
    }
    /**
     * 删除家校部门
     *
     * @param request - DeleteDeptRequest
     * @param headers - DeleteDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDeptResponse
     */
    async deleteDeptWithOptions(deptId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDept",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/depts/${deptId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDeptResponse({}));
    }
    /**
     * 删除家校部门
     *
     * @param request - DeleteDeptRequest
     * @returns DeleteDeptResponse
     */
    async deleteDept(deptId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDeptHeaders({});
        return await this.deleteDeptWithOptions(deptId, request, headers, runtime);
    }
    /**
     * 视讯paas机具删除
     *
     * @param request - DeleteDeviceRequest
     * @param headers - DeleteDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDeviceResponse
     */
    async deleteDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/devices`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDeviceResponse({}));
    }
    /**
     * 视讯paas机具删除
     *
     * @param request - DeleteDeviceRequest
     * @returns DeleteDeviceResponse
     */
    async deleteDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDeviceHeaders({});
        return await this.deleteDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 删除设备上面的组织
     *
     * @param request - DeleteDeviceOrgRequest
     * @param headers - DeleteDeviceOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDeviceOrgResponse
     */
    async deleteDeviceOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            query["deviceCode"] = request.deviceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDeviceOrg",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/deviceOrgs`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDeviceOrgResponse({}));
    }
    /**
     * 删除设备上面的组织
     *
     * @param request - DeleteDeviceOrgRequest
     * @returns DeleteDeviceOrgResponse
     */
    async deleteDeviceOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDeviceOrgHeaders({});
        return await this.deleteDeviceOrgWithOptions(request, headers, runtime);
    }
    /**
     * 删除家长
     *
     * @param request - DeleteGuardianRequest
     * @param headers - DeleteGuardianHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteGuardianResponse
     */
    async deleteGuardianWithOptions(classId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.stuId)) {
            query["stuId"] = request.stuId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteGuardian",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/${classId}/guardians/${userId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteGuardianResponse({}));
    }
    /**
     * 删除家长
     *
     * @param request - DeleteGuardianRequest
     * @returns DeleteGuardianResponse
     */
    async deleteGuardian(classId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteGuardianHeaders({});
        return await this.deleteGuardianWithOptions(classId, userId, request, headers, runtime);
    }
    /**
     * 删除组织的关联关系
     *
     * @param request - DeleteOrgRelationRequest
     * @param headers - DeleteOrgRelationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteOrgRelationResponse
     */
    async deleteOrgRelationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteOrgRelation",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/orgRelations`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteOrgRelationResponse({}));
    }
    /**
     * 删除组织的关联关系
     *
     * @param request - DeleteOrgRelationRequest
     * @returns DeleteOrgRelationResponse
     */
    async deleteOrgRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteOrgRelationHeaders({});
        return await this.deleteOrgRelationWithOptions(request, headers, runtime);
    }
    /**
     * 删除物理教室信息
     *
     * @param request - DeletePhysicalClassroomRequest
     * @param headers - DeletePhysicalClassroomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeletePhysicalClassroomResponse
     */
    async deletePhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classroomId)) {
            query["classroomId"] = request.classroomId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeletePhysicalClassroom",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/physicalClassrooms`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeletePhysicalClassroomResponse({}));
    }
    /**
     * 删除物理教室信息
     *
     * @param request - DeletePhysicalClassroomRequest
     * @returns DeletePhysicalClassroomResponse
     */
    async deletePhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeletePhysicalClassroomHeaders({});
        return await this.deletePhysicalClassroomWithOptions(request, headers, runtime);
    }
    /**
     * 删除专递课堂课程
     *
     * @param request - DeleteRemoteClassCourseRequest
     * @param headers - DeleteRemoteClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRemoteClassCourseResponse
     */
    async deleteRemoteClassCourseWithOptions(courseCode, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRemoteClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/courses/${courseCode}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteRemoteClassCourseResponse({}));
    }
    /**
     * 删除专递课堂课程
     *
     * @param request - DeleteRemoteClassCourseRequest
     * @returns DeleteRemoteClassCourseResponse
     */
    async deleteRemoteClassCourse(courseCode, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteRemoteClassCourseHeaders({});
        return await this.deleteRemoteClassCourseWithOptions(courseCode, request, headers, runtime);
    }
    /**
     * 删除学生
     *
     * @param request - DeleteStudentRequest
     * @param headers - DeleteStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteStudentResponse
     */
    async deleteStudentWithOptions(classId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteStudent",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/${classId}/students/${userId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteStudentResponse({}));
    }
    /**
     * 删除学生
     *
     * @param request - DeleteStudentRequest
     * @returns DeleteStudentResponse
     */
    async deleteStudent(classId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteStudentHeaders({});
        return await this.deleteStudentWithOptions(classId, userId, request, headers, runtime);
    }
    /**
     * 删除老师
     *
     * @param request - DeleteTeacherRequest
     * @param headers - DeleteTeacherHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTeacherResponse
     */
    async deleteTeacherWithOptions(classId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.adviser)) {
            query["adviser"] = request.adviser;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTeacher",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/${classId}/teachers/${userId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteTeacherResponse({}));
    }
    /**
     * 删除老师
     *
     * @param request - DeleteTeacherRequest
     * @returns DeleteTeacherResponse
     */
    async deleteTeacher(classId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteTeacherHeaders({});
        return await this.deleteTeacherWithOptions(classId, userId, request, headers, runtime);
    }
    /**
     * 删除大学课程组
     *
     * @param request - DeleteUniversityCourseGroupRequest
     * @param headers - DeleteUniversityCourseGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteUniversityCourseGroupResponse
     */
    async deleteUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            query["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteUniversityCourseGroup",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courseGroups`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteUniversityCourseGroupResponse({}));
    }
    /**
     * 删除大学课程组
     *
     * @param request - DeleteUniversityCourseGroupRequest
     * @returns DeleteUniversityCourseGroupResponse
     */
    async deleteUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteUniversityCourseGroupHeaders({});
        return await this.deleteUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    /**
     * 删除大学学生
     *
     * @param request - DeleteUniversityStudentRequest
     * @param headers - DeleteUniversityStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteUniversityStudentResponse
     */
    async deleteUniversityStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            query["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            query["studentUserId"] = request.studentUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteUniversityStudent",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/students`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteUniversityStudentResponse({}));
    }
    /**
     * 删除大学学生
     *
     * @param request - DeleteUniversityStudentRequest
     * @returns DeleteUniversityStudentResponse
     */
    async deleteUniversityStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteUniversityStudentHeaders({});
        return await this.deleteUniversityStudentWithOptions(request, headers, runtime);
    }
    /**
     * 删除大学教师
     *
     * @param request - DeleteUniversityTeacherRequest
     * @param headers - DeleteUniversityTeacherHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteUniversityTeacherResponse
     */
    async deleteUniversityTeacherWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            query["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            query["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            query["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteUniversityTeacher",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/teachers`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteUniversityTeacherResponse({}));
    }
    /**
     * 删除大学教师
     *
     * @param request - DeleteUniversityTeacherRequest
     * @returns DeleteUniversityTeacherResponse
     */
    async deleteUniversityTeacher(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteUniversityTeacherHeaders({});
        return await this.deleteUniversityTeacherWithOptions(request, headers, runtime);
    }
    /**
     * 设备心跳上报
     *
     * @param request - DeviceHeartbeatRequest
     * @param headers - DeviceHeartbeatHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeviceHeartbeatResponse
     */
    async deviceHeartbeatWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeviceHeartbeat",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/heartbeats/report`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeviceHeartbeatResponse({}));
    }
    /**
     * 设备心跳上报
     *
     * @param request - DeviceHeartbeatRequest
     * @returns DeviceHeartbeatResponse
     */
    async deviceHeartbeat(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeviceHeartbeatHeaders({});
        return await this.deviceHeartbeatWithOptions(request, headers, runtime);
    }
    /**
     * 停用高校通讯录场景架构
     *
     * @param request - DisableCollegeContactSceneStruRequest
     * @param headers - DisableCollegeContactSceneStruHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DisableCollegeContactSceneStruResponse
     */
    async disableCollegeContactSceneStruWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.struId)) {
            body["struId"] = request.struId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DisableCollegeContactSceneStru",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/scenes/disable`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DisableCollegeContactSceneStruResponse({}));
    }
    /**
     * 停用高校通讯录场景架构
     *
     * @param request - DisableCollegeContactSceneStruRequest
     * @returns DisableCollegeContactSceneStruResponse
     */
    async disableCollegeContactSceneStru(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DisableCollegeContactSceneStruHeaders({});
        return await this.disableCollegeContactSceneStruWithOptions(request, headers, runtime);
    }
    /**
     * 教育三方aigc结果回调
     *
     * @param request - EduAIGCCallbackRequest
     * @param headers - EduAIGCCallbackHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EduAIGCCallbackResponse
     */
    async eduAIGCCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.channelCode)) {
            body["channelCode"] = request.channelCode;
        }
        if (!tea_util_1.default.isUnset(request.commitTime)) {
            body["commitTime"] = request.commitTime;
        }
        if (!tea_util_1.default.isUnset(request.completeTime)) {
            body["completeTime"] = request.completeTime;
        }
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.contentSize)) {
            body["contentSize"] = request.contentSize;
        }
        if (!tea_util_1.default.isUnset(request.contentType)) {
            body["contentType"] = request.contentType;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.prompt)) {
            body["prompt"] = request.prompt;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EduAIGCCallback",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/aigc/callback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EduAIGCCallbackResponse({}));
    }
    /**
     * 教育三方aigc结果回调
     *
     * @param request - EduAIGCCallbackRequest
     * @returns EduAIGCCallbackResponse
     */
    async eduAIGCCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EduAIGCCallbackHeaders({});
        return await this.eduAIGCCallbackWithOptions(request, headers, runtime);
    }
    /**
     * 教育侧用户的所有角色
     *
     * @param request - EduFindUserRolesByUserIdRequest
     * @param headers - EduFindUserRolesByUserIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EduFindUserRolesByUserIdResponse
     */
    async eduFindUserRolesByUserIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            query["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.hasOrgRole)) {
            query["hasOrgRole"] = request.hasOrgRole;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EduFindUserRolesByUserId",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/users/allRoles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EduFindUserRolesByUserIdResponse({}));
    }
    /**
     * 教育侧用户的所有角色
     *
     * @param request - EduFindUserRolesByUserIdRequest
     * @returns EduFindUserRolesByUserIdResponse
     */
    async eduFindUserRolesByUserId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EduFindUserRolesByUserIdHeaders({});
        return await this.eduFindUserRolesByUserIdWithOptions(request, headers, runtime);
    }
    /**
     * 获取用户文件存储空间信息
     *
     * @param request - EduGetFileSpaceRequest
     * @param headers - EduGetFileSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EduGetFileSpaceResponse
     */
    async eduGetFileSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.channelCode)) {
            body["channelCode"] = request.channelCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EduGetFileSpace",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/files/spaces/infos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EduGetFileSpaceResponse({}));
    }
    /**
     * 获取用户文件存储空间信息
     *
     * @param request - EduGetFileSpaceRequest
     * @returns EduGetFileSpaceResponse
     */
    async eduGetFileSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EduGetFileSpaceHeaders({});
        return await this.eduGetFileSpaceWithOptions(request, headers, runtime);
    }
    /**
     * 教育侧获取用户所有关系详情列表
     *
     * @param request - EduListUserByFromUserIdsRequest
     * @param headers - EduListUserByFromUserIdsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EduListUserByFromUserIdsResponse
     */
    async eduListUserByFromUserIdsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            query["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.guardianUserId)) {
            query["guardianUserId"] = request.guardianUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EduListUserByFromUserIds",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/users/allRelations/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EduListUserByFromUserIdsResponse({}));
    }
    /**
     * 教育侧获取用户所有关系详情列表
     *
     * @param request - EduListUserByFromUserIdsRequest
     * @returns EduListUserByFromUserIdsResponse
     */
    async eduListUserByFromUserIds(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EduListUserByFromUserIdsHeaders({});
        return await this.eduListUserByFromUserIdsWithOptions(request, headers, runtime);
    }
    /**
     * 查询教师列表
     *
     * @param request - EduTeacherListRequest
     * @param headers - EduTeacherListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EduTeacherListResponse
     */
    async eduTeacherListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "EduTeacherList",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/teachers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EduTeacherListResponse({}));
    }
    /**
     * 查询教师列表
     *
     * @param request - EduTeacherListRequest
     * @returns EduTeacherListResponse
     */
    async eduTeacherList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EduTeacherListHeaders({});
        return await this.eduTeacherListWithOptions(request, headers, runtime);
    }
    /**
     * 启用高校通讯录场景架构
     *
     * @param request - EnableCollegeContactSceneStruRequest
     * @param headers - EnableCollegeContactSceneStruHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EnableCollegeContactSceneStruResponse
     */
    async enableCollegeContactSceneStruWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.struId)) {
            body["struId"] = request.struId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EnableCollegeContactSceneStru",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/scenes/enable`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EnableCollegeContactSceneStruResponse({}));
    }
    /**
     * 启用高校通讯录场景架构
     *
     * @param request - EnableCollegeContactSceneStruRequest
     * @returns EnableCollegeContactSceneStruResponse
     */
    async enableCollegeContactSceneStru(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EnableCollegeContactSceneStruHeaders({});
        return await this.enableCollegeContactSceneStruWithOptions(request, headers, runtime);
    }
    /**
     * 关闭课程
     *
     * @param request - EndCourseRequest
     * @param headers - EndCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EndCourseResponse
     */
    async endCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.livePlayInfoList)) {
            body["livePlayInfoList"] = request.livePlayInfoList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EndCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courses/end`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EndCourseResponse({}));
    }
    /**
     * 关闭课程
     *
     * @param request - EndCourseRequest
     * @returns EndCourseResponse
     */
    async endCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EndCourseHeaders({});
        return await this.endCourseWithOptions(request, headers, runtime);
    }
    /**
     * 获取绑定孩子信息
     *
     * @param request - GetBindChildInfoRequest
     * @param headers - GetBindChildInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetBindChildInfoResponse
     */
    async getBindChildInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.schoolCorpId)) {
            query["schoolCorpId"] = request.schoolCorpId;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            query["studentUserId"] = request.studentUserId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetBindChildInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/families/childs/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetBindChildInfoResponse({}));
    }
    /**
     * 获取绑定孩子信息
     *
     * @param request - GetBindChildInfoRequest
     * @returns GetBindChildInfoResponse
     */
    async getBindChildInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBindChildInfoHeaders({});
        return await this.getBindChildInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询用户的孩子列表
     *
     * @param headers - GetChildrenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetChildrenResponse
     */
    async getChildrenWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetChildren",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/children/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetChildrenResponse({}));
    }
    /**
     * 查询用户的孩子列表
     * @returns GetChildrenResponse
     */
    async getChildren() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetChildrenHeaders({});
        return await this.getChildrenWithOptions(headers, runtime);
    }
    /**
     * 高校校友会获取当前部门的所有子部门
     *
     * @param request - GetCollegeAlumniDeptsRequest
     * @param headers - GetCollegeAlumniDeptsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCollegeAlumniDeptsResponse
     */
    async getCollegeAlumniDeptsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCollegeAlumniDepts",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/subDepts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCollegeAlumniDeptsResponse({}));
    }
    /**
     * 高校校友会获取当前部门的所有子部门
     *
     * @param request - GetCollegeAlumniDeptsRequest
     * @returns GetCollegeAlumniDeptsResponse
     */
    async getCollegeAlumniDepts(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCollegeAlumniDeptsHeaders({});
        return await this.getCollegeAlumniDeptsWithOptions(request, headers, runtime);
    }
    /**
     * 高校校友会查询校友信息
     *
     * @param request - GetCollegeAlumniUserInfoRequest
     * @param headers - GetCollegeAlumniUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCollegeAlumniUserInfoResponse
     */
    async getCollegeAlumniUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCollegeAlumniUserInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/userInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCollegeAlumniUserInfoResponse({}));
    }
    /**
     * 高校校友会查询校友信息
     *
     * @param request - GetCollegeAlumniUserInfoRequest
     * @returns GetCollegeAlumniUserInfoResponse
     */
    async getCollegeAlumniUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCollegeAlumniUserInfoHeaders({});
        return await this.getCollegeAlumniUserInfoWithOptions(request, headers, runtime);
    }
    /**
     * 获取高校通讯录组织单元详情
     *
     * @param request - GetCollegeContactDeptDetailRequest
     * @param headers - GetCollegeContactDeptDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCollegeContactDeptDetailResponse
     */
    async getCollegeContactDeptDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCollegeContactDeptDetail",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCollegeContactDeptDetailResponse({}));
    }
    /**
     * 获取高校通讯录组织单元详情
     *
     * @param request - GetCollegeContactDeptDetailRequest
     * @returns GetCollegeContactDeptDetailResponse
     */
    async getCollegeContactDeptDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCollegeContactDeptDetailHeaders({});
        return await this.getCollegeContactDeptDetailWithOptions(request, headers, runtime);
    }
    /**
     * 获取行政组织架构信息
     *
     * @param request - GetCollegeContactStandardStruDeptDetailRequest
     * @param headers - GetCollegeContactStandardStruDeptDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCollegeContactStandardStruDeptDetailResponse
     */
    async getCollegeContactStandardStruDeptDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCollegeContactStandardStruDeptDetail",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/standards`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCollegeContactStandardStruDeptDetailResponse({}));
    }
    /**
     * 获取行政组织架构信息
     *
     * @param request - GetCollegeContactStandardStruDeptDetailRequest
     * @returns GetCollegeContactStandardStruDeptDetailResponse
     */
    async getCollegeContactStandardStruDeptDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCollegeContactStandardStruDeptDetailHeaders({});
        return await this.getCollegeContactStandardStruDeptDetailWithOptions(request, headers, runtime);
    }
    /**
     * 获取默认孩子信息
     *
     * @param headers - GetDefaultChildHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDefaultChildResponse
     */
    async getDefaultChildWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetDefaultChild",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/defaultChildren`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDefaultChildResponse({}));
    }
    /**
     * 获取默认孩子信息
     * @returns GetDefaultChildResponse
     */
    async getDefaultChild() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDefaultChildHeaders({});
        return await this.getDefaultChildWithOptions(headers, runtime);
    }
    /**
     * 阿里云盘教师节活动获取用户身份
     *
     * @param request - GetEduUserIdentityRequest
     * @param headers - GetEduUserIdentityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetEduUserIdentityResponse
     */
    async getEduUserIdentityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEduUserIdentity",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/apollos/activities/userIdentities`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetEduUserIdentityResponse({}));
    }
    /**
     * 阿里云盘教师节活动获取用户身份
     *
     * @param request - GetEduUserIdentityRequest
     * @returns GetEduUserIdentityResponse
     */
    async getEduUserIdentity(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEduUserIdentityHeaders({});
        return await this.getEduUserIdentityWithOptions(request, headers, runtime);
    }
    /**
     * 获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @param headers - GetFileDownloadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileDownloadInfoResponse
     */
    async getFileDownloadInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fileIdList)) {
            body["fileIdList"] = request.fileIdList;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            body["spaceId"] = request.spaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFileDownloadInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/files/downloadInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFileDownloadInfoResponse({}));
    }
    /**
     * 获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @returns GetFileDownloadInfoResponse
     */
    async getFileDownloadInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFileDownloadInfoHeaders({});
        return await this.getFileDownloadInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询文件和图片ID信息
     *
     * @param request - GetFileDownloadInfoByPackageIdRequest
     * @param headers - GetFileDownloadInfoByPackageIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileDownloadInfoByPackageIdResponse
     */
    async getFileDownloadInfoByPackageIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.packageId)) {
            body["packageId"] = request.packageId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFileDownloadInfoByPackageId",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/fileAndImages/ids/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFileDownloadInfoByPackageIdResponse({}));
    }
    /**
     * 查询文件和图片ID信息
     *
     * @param request - GetFileDownloadInfoByPackageIdRequest
     * @returns GetFileDownloadInfoByPackageIdResponse
     */
    async getFileDownloadInfoByPackageId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFileDownloadInfoByPackageIdHeaders({});
        return await this.getFileDownloadInfoByPackageIdWithOptions(request, headers, runtime);
    }
    /**
     * 获取图片下载信息
     *
     * @param request - GetImageTempDownloadUrlRequest
     * @param headers - GetImageTempDownloadUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetImageTempDownloadUrlResponse
     */
    async getImageTempDownloadUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            body["sourceType"] = request.sourceType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetImageTempDownloadUrl",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/images/tempDownloadUrls/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetImageTempDownloadUrlResponse({}));
    }
    /**
     * 获取图片下载信息
     *
     * @param request - GetImageTempDownloadUrlRequest
     * @returns GetImageTempDownloadUrlResponse
     */
    async getImageTempDownloadUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetImageTempDownloadUrlHeaders({});
        return await this.getImageTempDownloadUrlWithOptions(request, headers, runtime);
    }
    /**
     * 获取公开课的课程详情
     *
     * @param headers - GetOpenCourseDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOpenCourseDetailResponse
     */
    async getOpenCourseDetailWithOptions(courseId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetOpenCourseDetail",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/openCourse/${courseId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOpenCourseDetailResponse({}));
    }
    /**
     * 获取公开课的课程详情
     * @returns GetOpenCourseDetailResponse
     */
    async getOpenCourseDetail(courseId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOpenCourseDetailHeaders({});
        return await this.getOpenCourseDetailWithOptions(courseId, headers, runtime);
    }
    /**
     * 获取通过审核的课程列表
     *
     * @param request - GetOpenCoursesRequest
     * @param headers - GetOpenCoursesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOpenCoursesResponse
     */
    async getOpenCoursesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOpenCourses",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/openCourses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOpenCoursesResponse({}));
    }
    /**
     * 获取通过审核的课程列表
     *
     * @param request - GetOpenCoursesRequest
     * @returns GetOpenCoursesResponse
     */
    async getOpenCourses(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOpenCoursesHeaders({});
        return await this.getOpenCoursesWithOptions(request, headers, runtime);
    }
    /**
     * 查询教育积分流水记录
     *
     * @param tmpReq - GetPointActionRecordRequest
     * @param headers - GetPointActionRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPointActionRecordResponse
     */
    async getPointActionRecordWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new GetPointActionRecordShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPointActionRecord",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/points/actionRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPointActionRecordResponse({}));
    }
    /**
     * 查询教育积分流水记录
     *
     * @param request - GetPointActionRecordRequest
     * @returns GetPointActionRecordResponse
     */
    async getPointActionRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPointActionRecordHeaders({});
        return await this.getPointActionRecordWithOptions(request, headers, runtime);
    }
    /**
     * 查询教育积分信息
     *
     * @param request - GetPointInfoRequest
     * @param headers - GetPointInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPointInfoResponse
     */
    async getPointInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pointType)) {
            query["pointType"] = request.pointType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPointInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/points/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPointInfoResponse({}));
    }
    /**
     * 查询教育积分信息
     *
     * @param request - GetPointInfoRequest
     * @returns GetPointInfoResponse
     */
    async getPointInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPointInfoHeaders({});
        return await this.getPointInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询专递课堂课程详情
     *
     * @param request - GetRemoteClassCourseRequest
     * @param headers - GetRemoteClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRemoteClassCourseResponse
     */
    async getRemoteClassCourseWithOptions(courseCode, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRemoteClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/courses/${courseCode}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRemoteClassCourseResponse({}));
    }
    /**
     * 查询专递课堂课程详情
     *
     * @param request - GetRemoteClassCourseRequest
     * @returns GetRemoteClassCourseResponse
     */
    async getRemoteClassCourse(courseCode, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRemoteClassCourseHeaders({});
        return await this.getRemoteClassCourseWithOptions(courseCode, request, headers, runtime);
    }
    /**
     * 获取共享角色成员
     *
     * @param headers - GetShareRoleMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetShareRoleMembersResponse
     */
    async getShareRoleMembersWithOptions(shareRoleCode, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetShareRoleMembers",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/shareRoles/${shareRoleCode}/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetShareRoleMembersResponse({}));
    }
    /**
     * 获取共享角色成员
     * @returns GetShareRoleMembersResponse
     */
    async getShareRoleMembers(shareRoleCode) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetShareRoleMembersHeaders({});
        return await this.getShareRoleMembersWithOptions(shareRoleCode, headers, runtime);
    }
    /**
     * 获取教育局的共享角色列表
     *
     * @param headers - GetShareRolesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetShareRolesResponse
     */
    async getShareRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetShareRoles",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/shareRoles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetShareRolesResponse({}));
    }
    /**
     * 获取教育局的共享角色列表
     * @returns GetShareRolesResponse
     */
    async getShareRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetShareRolesHeaders({});
        return await this.getShareRolesWithOptions(headers, runtime);
    }
    /**
     * 查询入学任务列表
     *
     * @param request - GetTaskListRequest
     * @param headers - GetTaskListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskListResponse
     */
    async getTaskListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.taskYear)) {
            query["taskYear"] = request.taskYear;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTaskList",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/newGrades/tasks/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTaskListResponse({}));
    }
    /**
     * 查询入学任务列表
     *
     * @param request - GetTaskListRequest
     * @returns GetTaskListResponse
     */
    async getTaskList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTaskListHeaders({});
        return await this.getTaskListWithOptions(request, headers, runtime);
    }
    /**
     * 获取入学任务下的学生列表
     *
     * @param request - GetTaskStudentListRequest
     * @param headers - GetTaskStudentListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskStudentListResponse
     */
    async getTaskStudentListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTaskStudentList",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/newGrades/tasks/students/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTaskStudentListResponse({}));
    }
    /**
     * 获取入学任务下的学生列表
     *
     * @param request - GetTaskStudentListRequest
     * @returns GetTaskStudentListResponse
     */
    async getTaskStudentList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTaskStudentListHeaders({});
        return await this.getTaskStudentListWithOptions(request, headers, runtime);
    }
    /**
     * 初始化班级课程表
     *
     * @param request - InitCoursesOfClassRequest
     * @param headers - InitCoursesOfClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InitCoursesOfClassResponse
     */
    async initCoursesOfClassWithOptions(classId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courses)) {
            body["courses"] = request.courses;
        }
        if (!tea_util_1.default.isUnset(request.sectionConfig)) {
            body["sectionConfig"] = request.sectionConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InitCoursesOfClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/${classId}/courses/init`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InitCoursesOfClassResponse({}));
    }
    /**
     * 初始化班级课程表
     *
     * @param request - InitCoursesOfClassRequest
     * @returns InitCoursesOfClassResponse
     */
    async initCoursesOfClass(classId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitCoursesOfClassHeaders({});
        return await this.initCoursesOfClassWithOptions(classId, request, headers, runtime);
    }
    /**
     * 设备启动注册
     *
     * @param request - InitDeviceRequest
     * @param headers - InitDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InitDeviceResponse
     */
    async initDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.encryptPubKey)) {
            body["encryptPubKey"] = request.encryptPubKey;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InitDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/devices/init`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InitDeviceResponse({}));
    }
    /**
     * 设备启动注册
     *
     * @param request - InitDeviceRequest
     * @returns InitDeviceResponse
     */
    async initDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitDeviceHeaders({});
        return await this.initDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 视讯paas机具初始化
     *
     * @param request - InitVPaasDeviceRequest
     * @param headers - InitVPaasDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InitVPaasDeviceResponse
     */
    async initVPaasDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InitVPaasDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/devices/init`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InitVPaasDeviceResponse({}));
    }
    /**
     * 视讯paas机具初始化
     *
     * @param request - InitVPaasDeviceRequest
     * @returns InitVPaasDeviceResponse
     */
    async initVPaasDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitVPaasDeviceHeaders({});
        return await this.initVPaasDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 插入学校维度节次设置
     *
     * @param request - InsertSectionConfigRequest
     * @param headers - InsertSectionConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InsertSectionConfigResponse
     */
    async insertSectionConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.end)) {
            body["end"] = request.end;
        }
        if (!tea_util_1.default.isUnset(request.scheduleName)) {
            body["scheduleName"] = request.scheduleName;
        }
        if (!tea_util_1.default.isUnset(request.sectionModels)) {
            body["sectionModels"] = request.sectionModels;
        }
        if (!tea_util_1.default.isUnset(request.start)) {
            body["start"] = request.start;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InsertSectionConfig",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/schedules/configs`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InsertSectionConfigResponse({}));
    }
    /**
     * 插入学校维度节次设置
     *
     * @param request - InsertSectionConfigRequest
     * @returns InsertSectionConfigResponse
     */
    async insertSectionConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertSectionConfigHeaders({});
        return await this.insertSectionConfigWithOptions(request, headers, runtime);
    }
    /**
     * 失效课程
     *
     * @param request - InvalidCourseRequest
     * @param headers - InvalidCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InvalidCourseResponse
     */
    async invalidCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseId)) {
            body["isvCourseId"] = request.isvCourseId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InvalidCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/courses/invalid`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InvalidCourseResponse({}));
    }
    /**
     * 失效课程
     *
     * @param request - InvalidCourseRequest
     * @returns InvalidCourseResponse
     */
    async invalidCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InvalidCourseHeaders({});
        return await this.invalidCourseWithOptions(request, headers, runtime);
    }
    /**
     * 失效教育套件
     *
     * @param request - InvalidKitRequest
     * @param headers - InvalidKitHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InvalidKitResponse
     */
    async invalidKitWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvProductScene)) {
            body["isvProductScene"] = request.isvProductScene;
        }
        if (!tea_util_1.default.isUnset(request.openUserId)) {
            body["openUserId"] = request.openUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InvalidKit",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/records/invalid`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InvalidKitResponse({}));
    }
    /**
     * 失效教育套件
     *
     * @param request - InvalidKitRequest
     * @returns InvalidKitResponse
     */
    async invalidKit(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InvalidKitHeaders({});
        return await this.invalidKitWithOptions(request, headers, runtime);
    }
    /**
     * 删除学生班级
     *
     * @param request - InvalidStudentClassRequest
     * @param headers - InvalidStudentClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InvalidStudentClassResponse
     */
    async invalidStudentClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.studentUserIds)) {
            body["studentUserIds"] = request.studentUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InvalidStudentClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/students/classes/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InvalidStudentClassResponse({}));
    }
    /**
     * 删除学生班级
     *
     * @param request - InvalidStudentClassRequest
     * @returns InvalidStudentClassResponse
     */
    async invalidStudentClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InvalidStudentClassHeaders({});
        return await this.invalidStudentClassWithOptions(request, headers, runtime);
    }
    /**
     * 删除老师课程
     *
     * @param request - InvalidTeacherCourseRequest
     * @param headers - InvalidTeacherCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InvalidTeacherCourseResponse
     */
    async invalidTeacherCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.needDeleteCourseIdList)) {
            body["needDeleteCourseIdList"] = request.needDeleteCourseIdList;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InvalidTeacherCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/teachers/courses/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InvalidTeacherCourseResponse({}));
    }
    /**
     * 删除老师课程
     *
     * @param request - InvalidTeacherCourseRequest
     * @returns InvalidTeacherCourseResponse
     */
    async invalidTeacherCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InvalidTeacherCourseHeaders({});
        return await this.invalidTeacherCourseWithOptions(request, headers, runtime);
    }
    /**
     * 第三方数据写入
     *
     * @param request - IsvDataWriteRequest
     * @param headers - IsvDataWriteHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IsvDataWriteResponse
     */
    async isvDataWriteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.objectCode)) {
            body["objectCode"] = request.objectCode;
        }
        if (!tea_util_1.default.isUnset(request.rowValueList)) {
            body["rowValueList"] = request.rowValueList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IsvDataWrite",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/datas/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IsvDataWriteResponse({}));
    }
    /**
     * 第三方数据写入
     *
     * @param request - IsvDataWriteRequest
     * @returns IsvDataWriteResponse
     */
    async isvDataWrite(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IsvDataWriteHeaders({});
        return await this.isvDataWriteWithOptions(request, headers, runtime);
    }
    /**
     * Isv查询元数据信息
     *
     * @param request - IsvMetadataQueryRequest
     * @param headers - IsvMetadataQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IsvMetadataQueryResponse
     */
    async isvMetadataQueryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.objectCode)) {
            query["objectCode"] = request.objectCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "IsvMetadataQuery",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/datas/metadatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IsvMetadataQueryResponse({}));
    }
    /**
     * Isv查询元数据信息
     *
     * @param request - IsvMetadataQueryRequest
     * @returns IsvMetadataQueryResponse
     */
    async isvMetadataQuery(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IsvMetadataQueryHeaders({});
        return await this.isvMetadataQueryWithOptions(request, headers, runtime);
    }
    /**
     * 获取高校组织单元类型
     *
     * @param request - ListCollegeContactDeptTypeConfigRequest
     * @param headers - ListCollegeContactDeptTypeConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListCollegeContactDeptTypeConfigResponse
     */
    async listCollegeContactDeptTypeConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCollegeContactDeptTypeConfig",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/configs/deptTypes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCollegeContactDeptTypeConfigResponse({}));
    }
    /**
     * 获取高校组织单元类型
     *
     * @param request - ListCollegeContactDeptTypeConfigRequest
     * @returns ListCollegeContactDeptTypeConfigResponse
     */
    async listCollegeContactDeptTypeConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCollegeContactDeptTypeConfigHeaders({});
        return await this.listCollegeContactDeptTypeConfigWithOptions(request, headers, runtime);
    }
    /**
     * 获取高校通讯录场景架构列表
     *
     * @param request - ListCollegeContactSceneStrusRequest
     * @param headers - ListCollegeContactSceneStrusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListCollegeContactSceneStrusResponse
     */
    async listCollegeContactSceneStrusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCollegeContactSceneStrus",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/scenes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCollegeContactSceneStrusResponse({}));
    }
    /**
     * 获取高校通讯录场景架构列表
     *
     * @param request - ListCollegeContactSceneStrusRequest
     * @returns ListCollegeContactSceneStrusResponse
     */
    async listCollegeContactSceneStrus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCollegeContactSceneStrusHeaders({});
        return await this.listCollegeContactSceneStrusWithOptions(request, headers, runtime);
    }
    /**
     * 获取高校通讯录子组织单元列表
     *
     * @param request - ListCollegeContactSubDeptsRequest
     * @param headers - ListCollegeContactSubDeptsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListCollegeContactSubDeptsResponse
     */
    async listCollegeContactSubDeptsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCollegeContactSubDepts",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/subDepts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCollegeContactSubDeptsResponse({}));
    }
    /**
     * 获取高校通讯录子组织单元列表
     *
     * @param request - ListCollegeContactSubDeptsRequest
     * @returns ListCollegeContactSubDeptsResponse
     */
    async listCollegeContactSubDepts(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCollegeContactSubDeptsHeaders({});
        return await this.listCollegeContactSubDeptsWithOptions(request, headers, runtime);
    }
    /**
     * 查询订单
     *
     * @param request - ListOrderRequest
     * @param headers - ListOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListOrderResponse
     */
    async listOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.createTimeEnd)) {
            body["createTimeEnd"] = request.createTimeEnd;
        }
        if (!tea_util_1.default.isUnset(request.createTimeStart)) {
            body["createTimeStart"] = request.createTimeStart;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            body["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.tradeNo)) {
            body["tradeNo"] = request.tradeNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListOrderResponse({}));
    }
    /**
     * 查询订单
     *
     * @param request - ListOrderRequest
     * @returns ListOrderResponse
     */
    async listOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListOrderHeaders({});
        return await this.listOrderWithOptions(request, headers, runtime);
    }
    /**
     * 学生调班，如果学生在本班有对应的家长，则家长也会跟同学生进行调整班级。
     *
     * @param request - MoveStudentRequest
     * @param headers - MoveStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveStudentResponse
     */
    async moveStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.originClassId)) {
            body["originClassId"] = request.originClassId;
        }
        if (!tea_util_1.default.isUnset(request.targetClassId)) {
            body["targetClassId"] = request.targetClassId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "MoveStudent",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/students/move`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MoveStudentResponse({}));
    }
    /**
     * 学生调班，如果学生在本班有对应的家长，则家长也会跟同学生进行调整班级。
     *
     * @param request - MoveStudentRequest
     * @returns MoveStudentResponse
     */
    async moveStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MoveStudentHeaders({});
        return await this.moveStudentWithOptions(request, headers, runtime);
    }
    /**
     * 开通教育套件
     *
     * @param request - OpenKitRequest
     * @param headers - OpenKitHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenKitResponse
     */
    async openKitWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attributes)) {
            body["attributes"] = request.attributes;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvProductScene)) {
            body["isvProductScene"] = request.isvProductScene;
        }
        if (!tea_util_1.default.isUnset(request.openEndTime)) {
            body["openEndTime"] = request.openEndTime;
        }
        if (!tea_util_1.default.isUnset(request.openStartTime)) {
            body["openStartTime"] = request.openStartTime;
        }
        if (!tea_util_1.default.isUnset(request.openUserId)) {
            body["openUserId"] = request.openUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OpenKit",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/records/open`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OpenKitResponse({}));
    }
    /**
     * 开通教育套件
     *
     * @param request - OpenKitRequest
     * @returns OpenKitResponse
     */
    async openKit(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OpenKitHeaders({});
        return await this.openKitWithOptions(request, headers, runtime);
    }
    /**
     * 查询订单信息
     *
     * @param request - OrderInfoRequest
     * @param headers - OrderInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OrderInfoResponse
     */
    async orderInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OrderInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/dingLifes/orders`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OrderInfoResponse({}));
    }
    /**
     * 查询订单信息
     *
     * @param request - OrderInfoRequest
     * @returns OrderInfoResponse
     */
    async orderInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OrderInfoHeaders({});
        return await this.orderInfoWithOptions(request, headers, runtime);
    }
    /**
     * 批量查询班级课表
     *
     * @param request - PageQueryClassCourseRequest
     * @param headers - PageQueryClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PageQueryClassCourseResponse
     */
    async pageQueryClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.endCourseDate)) {
            body["endCourseDate"] = request.endCourseDate;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startCourseDate)) {
            body["startCourseDate"] = request.startCourseDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PageQueryClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/classes/courses/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PageQueryClassCourseResponse({}));
    }
    /**
     * 批量查询班级课表
     *
     * @param request - PageQueryClassCourseRequest
     * @returns PageQueryClassCourseResponse
     */
    async pageQueryClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PageQueryClassCourseHeaders({});
        return await this.pageQueryClassCourseWithOptions(request, headers, runtime);
    }
    /**
     * 分页查询设备列表
     *
     * @param request - PageQueryDevicesRequest
     * @param headers - PageQueryDevicesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PageQueryDevicesResponse
     */
    async pageQueryDevicesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PageQueryDevices",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/devices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PageQueryDevicesResponse({}));
    }
    /**
     * 分页查询设备列表
     *
     * @param request - PageQueryDevicesRequest
     * @returns PageQueryDevicesResponse
     */
    async pageQueryDevices(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PageQueryDevicesHeaders({});
        return await this.pageQueryDevicesWithOptions(request, headers, runtime);
    }
    /**
     * 批量查询套件开通记录
     *
     * @param request - PageQueryKitOpenRecordRequest
     * @param headers - PageQueryKitOpenRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PageQueryKitOpenRecordResponse
     */
    async pageQueryKitOpenRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvProductScene)) {
            body["isvProductScene"] = request.isvProductScene;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PageQueryKitOpenRecord",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/records/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PageQueryKitOpenRecordResponse({}));
    }
    /**
     * 批量查询套件开通记录
     *
     * @param request - PageQueryKitOpenRecordRequest
     * @returns PageQueryKitOpenRecordResponse
     */
    async pageQueryKitOpenRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PageQueryKitOpenRecordHeaders({});
        return await this.pageQueryKitOpenRecordWithOptions(request, headers, runtime);
    }
    /**
     * 支付订单
     *
     * @param request - PayOrderRequest
     * @param headers - PayOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PayOrderResponse
     */
    async payOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PayOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders/pay`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PayOrderResponse({}));
    }
    /**
     * 支付订单
     *
     * @param request - PayOrderRequest
     * @returns PayOrderResponse
     */
    async payOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PayOrderHeaders({});
        return await this.payOrderWithOptions(request, headers, runtime);
    }
    /**
     * 轮询课程状态，确认教师是否已同意开课
     *
     * @param request - PollingConfirmStatusRequest
     * @param headers - PollingConfirmStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PollingConfirmStatusResponse
     */
    async pollingConfirmStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            query["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            query["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            query["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PollingConfirmStatus",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courses/pollingConfirmStatus`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PollingConfirmStatusResponse({}));
    }
    /**
     * 轮询课程状态，确认教师是否已同意开课
     *
     * @param request - PollingConfirmStatusRequest
     * @returns PollingConfirmStatusResponse
     */
    async pollingConfirmStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PollingConfirmStatusHeaders({});
        return await this.pollingConfirmStatusWithOptions(request, headers, runtime);
    }
    /**
     * 视讯paas机具预拨号
     *
     * @param request - PreDialRequest
     * @param headers - PreDialHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PreDialResponse
     */
    async preDialWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callerUserId)) {
            body["callerUserId"] = request.callerUserId;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserId)) {
            body["receiverUserId"] = request.receiverUserId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PreDial",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/devices/preDial`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PreDialResponse({}));
    }
    /**
     * 视讯paas机具预拨号
     *
     * @param request - PreDialRequest
     * @returns PreDialResponse
     */
    async preDial(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PreDialHeaders({});
        return await this.preDialWithOptions(request, headers, runtime);
    }
    /**
     * 发放教育积分
     *
     * @param request - ProvidePointRequest
     * @param headers - ProvidePointHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ProvidePointResponse
     */
    async providePointWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionCode)) {
            body["actionCode"] = request.actionCode;
        }
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.pointType)) {
            body["pointType"] = request.pointType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ProvidePoint",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/points/provide`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ProvidePointResponse({}));
    }
    /**
     * 发放教育积分
     *
     * @param request - ProvidePointRequest
     * @returns ProvidePointResponse
     */
    async providePoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ProvidePointHeaders({});
        return await this.providePointWithOptions(request, headers, runtime);
    }
    /**
     * 查询全量学科实例列表
     *
     * @param tmpReq - QueryAllSubjectsFromClassScheduleRequest
     * @param headers - QueryAllSubjectsFromClassScheduleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllSubjectsFromClassScheduleResponse
     */
    async queryAllSubjectsFromClassScheduleWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryAllSubjectsFromClassScheduleShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.classIds)) {
            request.classIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.classIds, "classIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIdsShrink)) {
            query["classIds"] = request.classIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.periodCode)) {
            query["periodCode"] = request.periodCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllSubjectsFromClassSchedule",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/subjects/instances`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllSubjectsFromClassScheduleResponse({}));
    }
    /**
     * 查询全量学科实例列表
     *
     * @param request - QueryAllSubjectsFromClassScheduleRequest
     * @returns QueryAllSubjectsFromClassScheduleResponse
     */
    async queryAllSubjectsFromClassSchedule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllSubjectsFromClassScheduleHeaders({});
        return await this.queryAllSubjectsFromClassScheduleWithOptions(request, headers, runtime);
    }
    /**
     * 查询课程表
     *
     * @param request - QueryClassScheduleRequest
     * @param headers - QueryClassScheduleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryClassScheduleResponse
     */
    async queryClassScheduleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.subscriberType)) {
            query["subscriberType"] = request.subscriberType;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.sectionIndexList)) {
            body["sectionIndexList"] = request.sectionIndexList;
        }
        if (!tea_util_1.default.isUnset(request.subscriberIds)) {
            body["subscriberIds"] = request.subscriberIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryClassSchedule",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/schedules/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryClassScheduleResponse({}));
    }
    /**
     * 查询课程表
     *
     * @param request - QueryClassScheduleRequest
     * @returns QueryClassScheduleResponse
     */
    async queryClassSchedule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassScheduleHeaders({});
        return await this.queryClassScheduleWithOptions(request, headers, runtime);
    }
    /**
     * 按照学校和时间区间筛选课程
     *
     * @param request - QueryClassScheduleByTimeSchoolRequest
     * @param headers - QueryClassScheduleByTimeSchoolHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryClassScheduleByTimeSchoolResponse
     */
    async queryClassScheduleByTimeSchoolWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryClassScheduleByTimeSchool",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/schools/classes/courses `,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryClassScheduleByTimeSchoolResponse({}));
    }
    /**
     * 按照学校和时间区间筛选课程
     *
     * @param request - QueryClassScheduleByTimeSchoolRequest
     * @returns QueryClassScheduleByTimeSchoolResponse
     */
    async queryClassScheduleByTimeSchool(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassScheduleByTimeSchoolHeaders({});
        return await this.queryClassScheduleByTimeSchoolWithOptions(request, headers, runtime);
    }
    /**
     * 获取课程表设置
     *
     * @param tmpReq - QueryClassScheduleConfigRequest
     * @param headers - QueryClassScheduleConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryClassScheduleConfigResponse
     */
    async queryClassScheduleConfigWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryClassScheduleConfigShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.classIds)) {
            request.classIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.classIds, "classIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIdsShrink)) {
            query["classIds"] = request.classIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryClassScheduleConfig",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/schedules/configs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryClassScheduleConfigResponse({}));
    }
    /**
     * 获取课程表设置
     *
     * @param request - QueryClassScheduleConfigRequest
     * @returns QueryClassScheduleConfigResponse
     */
    async queryClassScheduleConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassScheduleConfigHeaders({});
        return await this.queryClassScheduleConfigWithOptions(request, headers, runtime);
    }
    /**
     * 获取用户详情(包含高校账号)
     *
     * @param request - QueryCollegeContactUserDetailRequest
     * @param headers - QueryCollegeContactUserDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryCollegeContactUserDetailResponse
     */
    async queryCollegeContactUserDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobNumber)) {
            query["jobNumber"] = request.jobNumber;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            query["userid"] = request.userid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCollegeContactUserDetail",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCollegeContactUserDetailResponse({}));
    }
    /**
     * 获取用户详情(包含高校账号)
     *
     * @param request - QueryCollegeContactUserDetailRequest
     * @returns QueryCollegeContactUserDetailResponse
     */
    async queryCollegeContactUserDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCollegeContactUserDetailHeaders({});
        return await this.queryCollegeContactUserDetailWithOptions(request, headers, runtime);
    }
    /**
     * 查询单台视讯PAAS设备
     *
     * @param request - QueryDeviceRequest
     * @param headers - QueryDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDeviceResponse
     */
    async queryDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpass/devices/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDeviceResponse({}));
    }
    /**
     * 查询单台视讯PAAS设备
     *
     * @param request - QueryDeviceRequest
     * @returns QueryDeviceResponse
     */
    async queryDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDeviceHeaders({});
        return await this.queryDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 查询某个组织下面的设备列表
     *
     * @param request - QueryDeviceListByCorpIdRequest
     * @param headers - QueryDeviceListByCorpIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDeviceListByCorpIdResponse
     */
    async queryDeviceListByCorpIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceListByCorpId",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/devices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDeviceListByCorpIdResponse({}));
    }
    /**
     * 查询某个组织下面的设备列表
     *
     * @param request - QueryDeviceListByCorpIdRequest
     * @returns QueryDeviceListByCorpIdResponse
     */
    async queryDeviceListByCorpId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDeviceListByCorpIdHeaders({});
        return await this.queryDeviceListByCorpIdWithOptions(request, headers, runtime);
    }
    /**
     * 教学资源库查询space列表
     *
     * @param request - QueryEduAssetSpacesRequest
     * @param headers - QueryEduAssetSpacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryEduAssetSpacesResponse
     */
    async queryEduAssetSpacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            query["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEduAssetSpaces",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/assets/spaces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryEduAssetSpacesResponse({}));
    }
    /**
     * 教学资源库查询space列表
     *
     * @param request - QueryEduAssetSpacesRequest
     * @returns QueryEduAssetSpacesResponse
     */
    async queryEduAssetSpaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEduAssetSpacesHeaders({});
        return await this.queryEduAssetSpacesWithOptions(request, headers, runtime);
    }
    /**
     * 根据设备SN信息查询学校人脸库
     *
     * @param request - QueryGroupIdRequest
     * @param headers - QueryGroupIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryGroupIdResponse
     */
    async queryGroupIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupId",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/faces/groups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupIdResponse({}));
    }
    /**
     * 根据设备SN信息查询学校人脸库
     *
     * @param request - QueryGroupIdRequest
     * @returns QueryGroupIdResponse
     */
    async queryGroupId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupIdHeaders({});
        return await this.queryGroupIdWithOptions(request, headers, runtime);
    }
    /**
     * 查询套件开通记录
     *
     * @param request - QueryKitOpenRecordRequest
     * @param headers - QueryKitOpenRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryKitOpenRecordResponse
     */
    async queryKitOpenRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvProductScene)) {
            body["isvProductScene"] = request.isvProductScene;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryKitOpenRecord",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/records/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryKitOpenRecordResponse({}));
    }
    /**
     * 查询套件开通记录
     *
     * @param request - QueryKitOpenRecordRequest
     * @returns QueryKitOpenRecordResponse
     */
    async queryKitOpenRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryKitOpenRecordHeaders({});
        return await this.queryKitOpenRecordWithOptions(request, headers, runtime);
    }
    /**
     * 查询订单信息
     *
     * @param request - QueryOrderRequest
     * @param headers - QueryOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryOrderResponse
     */
    async queryOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alipayAppId)) {
            query["alipayAppId"] = request.alipayAppId;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            query["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            query["signature"] = request.signature;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOrderResponse({}));
    }
    /**
     * 查询订单信息
     *
     * @param request - QueryOrderRequest
     * @returns QueryOrderResponse
     */
    async queryOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrderHeaders({});
        return await this.queryOrderWithOptions(request, headers, runtime);
    }
    /**
     * 查询某个组织下面关联的组织列表
     *
     * @param request - QueryOrgRelationListRequest
     * @param headers - QueryOrgRelationListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryOrgRelationListResponse
     */
    async queryOrgRelationListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOrgRelationList",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/orgRelations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOrgRelationListResponse({}));
    }
    /**
     * 查询某个组织下面关联的组织列表
     *
     * @param request - QueryOrgRelationListRequest
     * @returns QueryOrgRelationListResponse
     */
    async queryOrgRelationList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgRelationListHeaders({});
        return await this.queryOrgRelationListWithOptions(request, headers, runtime);
    }
    /**
     * 获取组织秘钥
     *
     * @param request - QueryOrgSecretKeyRequest
     * @param headers - QueryOrgSecretKeyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryOrgSecretKeyResponse
     */
    async queryOrgSecretKeyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            query["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOrgSecretKey",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/secretKeys`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOrgSecretKeyResponse({}));
    }
    /**
     * 获取组织秘钥
     *
     * @param request - QueryOrgSecretKeyRequest
     * @returns QueryOrgSecretKeyResponse
     */
    async queryOrgSecretKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgSecretKeyHeaders({});
        return await this.queryOrgSecretKeyWithOptions(request, headers, runtime);
    }
    /**
     * 查询教育组织类型
     *
     * @param headers - QueryOrgTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryOrgTypeResponse
     */
    async queryOrgTypeWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryOrgType",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orgTypes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOrgTypeResponse({}));
    }
    /**
     * 查询教育组织类型
     * @returns QueryOrgTypeResponse
     */
    async queryOrgType() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgTypeHeaders({});
        return await this.queryOrgTypeWithOptions(headers, runtime);
    }
    /**
     * 查询支付结果
     *
     * @param request - QueryPayResultRequest
     * @param headers - QueryPayResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPayResultResponse
     */
    async queryPayResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            body["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryPayResult",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/payResults/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPayResultResponse({}));
    }
    /**
     * 查询支付结果
     *
     * @param request - QueryPayResultRequest
     * @returns QueryPayResultResponse
     */
    async queryPayResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPayResultHeaders({});
        return await this.queryPayResultWithOptions(request, headers, runtime);
    }
    /**
     * 查询物理教室信息
     *
     * @param request - QueryPhysicalClassroomRequest
     * @param headers - QueryPhysicalClassroomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPhysicalClassroomResponse
     */
    async queryPhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classroomId)) {
            query["classroomId"] = request.classroomId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPhysicalClassroom",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/physicalClassrooms`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPhysicalClassroomResponse({}));
    }
    /**
     * 查询物理教室信息
     *
     * @param request - QueryPhysicalClassroomRequest
     * @returns QueryPhysicalClassroomResponse
     */
    async queryPhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPhysicalClassroomHeaders({});
        return await this.queryPhysicalClassroomWithOptions(request, headers, runtime);
    }
    /**
     * 查询用户订购服务状态
     *
     * @param request - QueryPurchaseInfoRequest
     * @param headers - QueryPurchaseInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPurchaseInfoResponse
     */
    async queryPurchaseInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            query["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            query["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPurchaseInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/users/purchases`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPurchaseInfoResponse({}));
    }
    /**
     * 查询用户订购服务状态
     *
     * @param request - QueryPurchaseInfoRequest
     * @returns QueryPurchaseInfoResponse
     */
    async queryPurchaseInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPurchaseInfoHeaders({});
        return await this.queryPurchaseInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询课程列表
     *
     * @param request - QueryRemoteClassCourseRequest
     * @param headers - QueryRemoteClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryRemoteClassCourseResponse
     */
    async queryRemoteClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryRemoteClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/courses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRemoteClassCourseResponse({}));
    }
    /**
     * 查询课程列表
     *
     * @param request - QueryRemoteClassCourseRequest
     * @returns QueryRemoteClassCourseResponse
     */
    async queryRemoteClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRemoteClassCourseHeaders({});
        return await this.queryRemoteClassCourseWithOptions(request, headers, runtime);
    }
    /**
     * 分批查询学校人脸id
     *
     * @param request - QuerySchoolUserFaceRequest
     * @param headers - QuerySchoolUserFaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySchoolUserFaceResponse
     */
    async querySchoolUserFaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySchoolUserFace",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/schools/faces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySchoolUserFaceResponse({}));
    }
    /**
     * 分批查询学校人脸id
     *
     * @param request - QuerySchoolUserFaceRequest
     * @returns QuerySchoolUserFaceResponse
     */
    async querySchoolUserFace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySchoolUserFaceHeaders({});
        return await this.querySchoolUserFaceWithOptions(request, headers, runtime);
    }
    /**
     * 个人应用查询订单信息
     *
     * @param request - QuerySnsOrderRequest
     * @param headers - QuerySnsOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySnsOrderResponse
     */
    async querySnsOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.alipayAppId)) {
            query["alipayAppId"] = request.alipayAppId;
        }
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            query["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            query["signature"] = request.signature;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySnsOrder",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/snsOrders`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySnsOrderResponse({}));
    }
    /**
     * 个人应用查询订单信息
     *
     * @param request - QuerySnsOrderRequest
     * @returns QuerySnsOrderResponse
     */
    async querySnsOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySnsOrderHeaders({});
        return await this.querySnsOrderWithOptions(request, headers, runtime);
    }
    /**
     * 获得课程表详细信息
     *
     * @param request - QueryStatisticsDataRequest
     * @param headers - QueryStatisticsDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryStatisticsDataResponse
     */
    async queryStatisticsDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.sectionIndexList)) {
            body["sectionIndexList"] = request.sectionIndexList;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserIds)) {
            body["teacherUserIds"] = request.teacherUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryStatisticsData",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/schedules/statisticData/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryStatisticsDataResponse({}));
    }
    /**
     * 获得课程表详细信息
     *
     * @param request - QueryStatisticsDataRequest
     * @returns QueryStatisticsDataResponse
     */
    async queryStatisticsData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryStatisticsDataHeaders({});
        return await this.queryStatisticsDataWithOptions(request, headers, runtime);
    }
    /**
     * 查询学生班级
     *
     * @param request - QueryStudentClassRequest
     * @param headers - QueryStudentClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryStudentClassResponse
     */
    async queryStudentClassWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.classType)) {
            body["classType"] = request.classType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.studentUserIds)) {
            body["studentUserIds"] = request.studentUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryStudentClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/students/classes/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryStudentClassResponse({}));
    }
    /**
     * 查询学生班级
     *
     * @param request - QueryStudentClassRequest
     * @returns QueryStudentClassResponse
     */
    async queryStudentClass(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryStudentClassHeaders({});
        return await this.queryStudentClassWithOptions(request, headers, runtime);
    }
    /**
     * 查询教授某学科老师列表
     *
     * @param request - QuerySubjectTeachersRequest
     * @param headers - QuerySubjectTeachersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySubjectTeachersResponse
     */
    async querySubjectTeachersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIds)) {
            query["classIds"] = request.classIds;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.subjectCode)) {
            query["subjectCode"] = request.subjectCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySubjectTeachers",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/subjects/teachers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySubjectTeachersResponse({}));
    }
    /**
     * 查询教授某学科老师列表
     *
     * @param request - QuerySubjectTeachersRequest
     * @returns QuerySubjectTeachersResponse
     */
    async querySubjectTeachers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySubjectTeachersHeaders({});
        return await this.querySubjectTeachersWithOptions(request, headers, runtime);
    }
    /**
     * 查询老师教授学科列表
     *
     * @param request - QueryTeachSubjectsRequest
     * @param headers - QueryTeachSubjectsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTeachSubjectsResponse
     */
    async queryTeachSubjectsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.classIds)) {
            query["classIds"] = request.classIds;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryTeachSubjects",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/teachers/subjects`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTeachSubjectsResponse({}));
    }
    /**
     * 查询老师教授学科列表
     *
     * @param request - QueryTeachSubjectsRequest
     * @returns QueryTeachSubjectsResponse
     */
    async queryTeachSubjects(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTeachSubjectsHeaders({});
        return await this.queryTeachSubjectsWithOptions(request, headers, runtime);
    }
    /**
     * 查询老师课程
     *
     * @param request - QueryTeacherCourseRequest
     * @param headers - QueryTeacherCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTeacherCourseResponse
     */
    async queryTeacherCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseIdList)) {
            body["isvCourseIdList"] = request.isvCourseIdList;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryTeacherCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/teachers/courses/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTeacherCourseResponse({}));
    }
    /**
     * 查询老师课程
     *
     * @param request - QueryTeacherCourseRequest
     * @returns QueryTeacherCourseResponse
     */
    async queryTeacherCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTeacherCourseHeaders({});
        return await this.queryTeacherCourseWithOptions(request, headers, runtime);
    }
    /**
     * 查询调代课记录
     *
     * @param request - QueryTransferCourseRequest
     * @param headers - QueryTransferCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTransferCourseResponse
     */
    async queryTransferCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvRecordId)) {
            body["isvRecordId"] = request.isvRecordId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryTransferCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/transferRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTransferCourseResponse({}));
    }
    /**
     * 查询调代课记录
     *
     * @param request - QueryTransferCourseRequest
     * @returns QueryTransferCourseResponse
     */
    async queryTransferCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTransferCourseHeaders({});
        return await this.queryTransferCourseWithOptions(request, headers, runtime);
    }
    /**
     * 查询大学课程组
     *
     * @param request - QueryUniversityCourseGroupRequest
     * @param headers - QueryUniversityCourseGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUniversityCourseGroupResponse
     */
    async queryUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            query["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUniversityCourseGroup",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courseGroups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUniversityCourseGroupResponse({}));
    }
    /**
     * 查询大学课程组
     *
     * @param request - QueryUniversityCourseGroupRequest
     * @returns QueryUniversityCourseGroupResponse
     */
    async queryUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUniversityCourseGroupHeaders({});
        return await this.queryUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    /**
     * 根据人脸id查询用户信息
     *
     * @param request - QueryUserFaceRequest
     * @param headers - QueryUserFaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserFaceResponse
     */
    async queryUserFaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            query["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserFace",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/users/faces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserFaceResponse({}));
    }
    /**
     * 根据人脸id查询用户信息
     *
     * @param request - QueryUserFaceRequest
     * @returns QueryUserFaceResponse
     */
    async queryUserFace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserFaceHeaders({});
        return await this.queryUserFaceWithOptions(request, headers, runtime);
    }
    /**
     * 查询用户支付信息
     *
     * @param request - QueryUserPayInfoRequest
     * @param headers - QueryUserPayInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserPayInfoResponse
     */
    async queryUserPayInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.faceId)) {
            query["faceId"] = request.faceId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserPayInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/orders/payInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserPayInfoResponse({}));
    }
    /**
     * 查询用户支付信息
     *
     * @param request - QueryUserPayInfoRequest
     * @returns QueryUserPayInfoResponse
     */
    async queryUserPayInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserPayInfoHeaders({});
        return await this.queryUserPayInfoWithOptions(request, headers, runtime);
    }
    /**
     * 移除设备
     *
     * @param request - RemoveDeviceRequest
     * @param headers - RemoveDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveDeviceResponse
     */
    async removeDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.merchantId)) {
            query["merchantId"] = request.merchantId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RemoveDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/devices`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveDeviceResponse({}));
    }
    /**
     * 移除设备
     *
     * @param request - RemoveDeviceRequest
     * @returns RemoveDeviceResponse
     */
    async removeDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveDeviceHeaders({});
        return await this.removeDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 设备日志上报接口
     *
     * @param request - ReportDeviceLogRequest
     * @param headers - ReportDeviceLogHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReportDeviceLogResponse
     */
    async reportDeviceLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            query["mediaId"] = request.mediaId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            query["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ReportDeviceLog",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/deviceLogs/report`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ReportDeviceLogResponse({}));
    }
    /**
     * 设备日志上报接口
     *
     * @param request - ReportDeviceLogRequest
     * @returns ReportDeviceLogResponse
     */
    async reportDeviceLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ReportDeviceLogHeaders({});
        return await this.reportDeviceLogWithOptions(request, headers, runtime);
    }
    /**
     * 上传设备使用日志
     *
     * @param request - ReportDeviceUseLogRequest
     * @param headers - ReportDeviceUseLogHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReportDeviceUseLogResponse
     */
    async reportDeviceUseLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ReportDeviceUseLog",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/deviceUseLogs/report`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ReportDeviceUseLogResponse({}));
    }
    /**
     * 上传设备使用日志
     *
     * @param request - ReportDeviceUseLogRequest
     * @returns ReportDeviceUseLogResponse
     */
    async reportDeviceUseLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ReportDeviceUseLogHeaders({});
        return await this.reportDeviceUseLogWithOptions(request, headers, runtime);
    }
    /**
     * 回滚教育积分扣减
     *
     * @param request - RollbackDeductPointRequest
     * @param headers - RollbackDeductPointHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RollbackDeductPointResponse
     */
    async rollbackDeductPointWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.pointType)) {
            body["pointType"] = request.pointType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RollbackDeductPoint",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/deductPoints/rollback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RollbackDeductPointResponse({}));
    }
    /**
     * 回滚教育积分扣减
     *
     * @param request - RollbackDeductPointRequest
     * @returns RollbackDeductPointResponse
     */
    async rollbackDeductPoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RollbackDeductPointHeaders({});
        return await this.rollbackDeductPointWithOptions(request, headers, runtime);
    }
    /**
     * 保存班级学情数据
     *
     * @param request - SaveClassLearningDataRequest
     * @param headers - SaveClassLearningDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveClassLearningDataResponse
     */
    async saveClassLearningDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.assignNum)) {
            body["assignNum"] = request.assignNum;
        }
        if (!tea_util_1.default.isUnset(request.assignStudentUserIds)) {
            body["assignStudentUserIds"] = request.assignStudentUserIds;
        }
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.fileSuffix)) {
            body["fileSuffix"] = request.fileSuffix;
        }
        if (!tea_util_1.default.isUnset(request.generatedTime)) {
            body["generatedTime"] = request.generatedTime;
        }
        if (!tea_util_1.default.isUnset(request.questionNum)) {
            body["questionNum"] = request.questionNum;
        }
        if (!tea_util_1.default.isUnset(request.questionPictureNum)) {
            body["questionPictureNum"] = request.questionPictureNum;
        }
        if (!tea_util_1.default.isUnset(request.standardAnswerPictureNum)) {
            body["standardAnswerPictureNum"] = request.standardAnswerPictureNum;
        }
        if (!tea_util_1.default.isUnset(request.subjectCode)) {
            body["subjectCode"] = request.subjectCode;
        }
        if (!tea_util_1.default.isUnset(request.teacherUserId)) {
            body["teacherUserId"] = request.teacherUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveClassLearningData",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/learnings/datas/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveClassLearningDataResponse({}));
    }
    /**
     * 保存班级学情数据
     *
     * @param request - SaveClassLearningDataRequest
     * @returns SaveClassLearningDataResponse
     */
    async saveClassLearningData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveClassLearningDataHeaders({});
        return await this.saveClassLearningDataWithOptions(request, headers, runtime);
    }
    /**
     * 保存学生学情数据
     *
     * @param request - SaveStudentLearningDataRequest
     * @param headers - SaveStudentLearningDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveStudentLearningDataResponse
     */
    async saveStudentLearningDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.assignNum)) {
            body["assignNum"] = request.assignNum;
        }
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.correctNum)) {
            body["correctNum"] = request.correctNum;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.fileSuffix)) {
            body["fileSuffix"] = request.fileSuffix;
        }
        if (!tea_util_1.default.isUnset(request.generatedTime)) {
            body["generatedTime"] = request.generatedTime;
        }
        if (!tea_util_1.default.isUnset(request.questionNum)) {
            body["questionNum"] = request.questionNum;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            body["studentUserId"] = request.studentUserId;
        }
        if (!tea_util_1.default.isUnset(request.subjectCode)) {
            body["subjectCode"] = request.subjectCode;
        }
        if (!tea_util_1.default.isUnset(request.submitNum)) {
            body["submitNum"] = request.submitNum;
        }
        if (!tea_util_1.default.isUnset(request.wrongQuestions)) {
            body["wrongQuestions"] = request.wrongQuestions;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveStudentLearningData",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/students/learnings/datas/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveStudentLearningDataResponse({}));
    }
    /**
     * 保存学生学情数据
     *
     * @param request - SaveStudentLearningDataRequest
     * @returns SaveStudentLearningDataResponse
     */
    async saveStudentLearningData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveStudentLearningDataHeaders({});
        return await this.saveStudentLearningDataWithOptions(request, headers, runtime);
    }
    /**
     * 按关键字搜索老师
     *
     * @param request - SearchTeachersRequest
     * @param headers - SearchTeachersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchTeachersResponse
     */
    async searchTeachersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.nameKeyword)) {
            query["nameKeyword"] = request.nameKeyword;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchTeachers",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/teachers/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchTeachersResponse({}));
    }
    /**
     * 按关键字搜索老师
     *
     * @param request - SearchTeachersRequest
     * @returns SearchTeachersResponse
     */
    async searchTeachers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchTeachersHeaders({});
        return await this.searchTeachersWithOptions(request, headers, runtime);
    }
    /**
     * 套件-发送AI卡片
     *
     * @param request - SendAiCardRequest
     * @param headers - SendAiCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendAiCardResponse
     */
    async sendAiCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionType)) {
            body["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.bizData)) {
            body["bizData"] = request.bizData;
        }
        if (!tea_util_1.default.isUnset(request.cardChannel)) {
            body["cardChannel"] = request.cardChannel;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.identifier)) {
            body["identifier"] = request.identifier;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendAiCard",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/aiCards/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendAiCardResponse({}));
    }
    /**
     * 套件-发送AI卡片
     *
     * @param request - SendAiCardRequest
     * @returns SendAiCardResponse
     */
    async sendAiCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendAiCardHeaders({});
        return await this.sendAiCardWithOptions(request, headers, runtime);
    }
    /**
     * 收藏文件消息发送
     *
     * @param request - SendFileMessageRequest
     * @param headers - SendFileMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendFileMessageResponse
     */
    async sendFileMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            body["fileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.fileSize)) {
            body["fileSize"] = request.fileSize;
        }
        if (!tea_util_1.default.isUnset(request.fileUrl)) {
            body["fileUrl"] = request.fileUrl;
        }
        if (!tea_util_1.default.isUnset(request.sendType)) {
            body["sendType"] = request.sendType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendFileMessage",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/contents/files/messages/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendFileMessageResponse({}));
    }
    /**
     * 收藏文件消息发送
     *
     * @param request - SendFileMessageRequest
     * @returns SendFileMessageResponse
     */
    async sendFileMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendFileMessageHeaders({});
        return await this.sendFileMessageWithOptions(request, headers, runtime);
    }
    /**
     * 亲情通话发消息
     *
     * @param request - SendMessageRequest
     * @param headers - SendMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendMessageResponse
     */
    async sendMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.fromUserId)) {
            body["fromUserId"] = request.fromUserId;
        }
        if (!tea_util_1.default.isUnset(request.sn)) {
            body["sn"] = request.sn;
        }
        if (!tea_util_1.default.isUnset(request.toUserIdList)) {
            body["toUserIdList"] = request.toUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendMessage",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/messages/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendMessageResponse({}));
    }
    /**
     * 亲情通话发消息
     *
     * @param request - SendMessageRequest
     * @returns SendMessageResponse
     */
    async sendMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendMessageHeaders({});
        return await this.sendMessageWithOptions(request, headers, runtime);
    }
    /**
     * 发送打印订单提醒消息
     *
     * @param request - SendPrintOrderNoticeMsgRequest
     * @param headers - SendPrintOrderNoticeMsgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendPrintOrderNoticeMsgResponse
     */
    async sendPrintOrderNoticeMsgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.createOrderTime)) {
            body["createOrderTime"] = request.createOrderTime;
        }
        if (!tea_util_1.default.isUnset(request.deliveryCompanyName)) {
            body["deliveryCompanyName"] = request.deliveryCompanyName;
        }
        if (!tea_util_1.default.isUnset(request.deliveryNumber)) {
            body["deliveryNumber"] = request.deliveryNumber;
        }
        if (!tea_util_1.default.isUnset(request.deliveryTime)) {
            body["deliveryTime"] = request.deliveryTime;
        }
        if (!tea_util_1.default.isUnset(request.paymentTime)) {
            body["paymentTime"] = request.paymentTime;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.sceneCode)) {
            body["sceneCode"] = request.sceneCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendPrintOrderNoticeMsg",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/files/printOrders/noticeMessages/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendPrintOrderNoticeMsgResponse({}));
    }
    /**
     * 发送打印订单提醒消息
     *
     * @param request - SendPrintOrderNoticeMsgRequest
     * @returns SendPrintOrderNoticeMsgResponse
     */
    async sendPrintOrderNoticeMsg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendPrintOrderNoticeMsgHeaders({});
        return await this.sendPrintOrderNoticeMsgWithOptions(request, headers, runtime);
    }
    /**
     * 开始课程
     *
     * @param request - StartCourseRequest
     * @param headers - StartCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StartCourseResponse
     */
    async startCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.livePlayInfoList)) {
            body["livePlayInfoList"] = request.livePlayInfoList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StartCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courses/start`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StartCourseResponse({}));
    }
    /**
     * 开始课程
     *
     * @param request - StartCourseRequest
     * @returns StartCourseResponse
     */
    async startCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartCourseHeaders({});
        return await this.startCourseWithOptions(request, headers, runtime);
    }
    /**
     * 预开课，发送开课提醒
     *
     * @param request - StartCoursePrepareRequest
     * @param headers - StartCoursePrepareHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StartCoursePrepareResponse
     */
    async startCoursePrepareWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseDate)) {
            body["courseDate"] = request.courseDate;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceId)) {
            body["deviceId"] = request.deviceId;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.liveCoverImage)) {
            body["liveCoverImage"] = request.liveCoverImage;
        }
        if (!tea_util_1.default.isUnset(request.sectionIndex)) {
            body["sectionIndex"] = request.sectionIndex;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StartCoursePrepare",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courses/prepare`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StartCoursePrepareResponse({}));
    }
    /**
     * 预开课，发送开课提醒
     *
     * @param request - StartCoursePrepareRequest
     * @returns StartCoursePrepareResponse
     */
    async startCoursePrepare(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartCoursePrepareHeaders({});
        return await this.startCoursePrepareWithOptions(request, headers, runtime);
    }
    /**
     * 订阅大学课程组
     *
     * @param request - SubscribeUniversityCourseGroupRequest
     * @param headers - SubscribeUniversityCourseGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubscribeUniversityCourseGroupResponse
     */
    async subscribeUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.studentUserIds)) {
            body["studentUserIds"] = request.studentUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SubscribeUniversityCourseGroup",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courseGroups/subscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubscribeUniversityCourseGroupResponse({}));
    }
    /**
     * 订阅大学课程组
     *
     * @param request - SubscribeUniversityCourseGroupRequest
     * @returns SubscribeUniversityCourseGroupResponse
     */
    async subscribeUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubscribeUniversityCourseGroupHeaders({});
        return await this.subscribeUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    /**
     * 取消订阅大学课程组
     *
     * @param request - UnsubscribeUniversityCourseGroupRequest
     * @param headers - UnsubscribeUniversityCourseGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnsubscribeUniversityCourseGroupResponse
     */
    async unsubscribeUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.studentUserIds)) {
            body["studentUserIds"] = request.studentUserIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UnsubscribeUniversityCourseGroup",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courseGroups/unsubscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnsubscribeUniversityCourseGroupResponse({}));
    }
    /**
     * 取消订阅大学课程组
     *
     * @param request - UnsubscribeUniversityCourseGroupRequest
     * @returns UnsubscribeUniversityCourseGroupResponse
     */
    async unsubscribeUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnsubscribeUniversityCourseGroupHeaders({});
        return await this.unsubscribeUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    /**
     * 高校校友会更新校友信息
     *
     * @param request - UpdateCollegeAlumniUserInfoRequest
     * @param headers - UpdateCollegeAlumniUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCollegeAlumniUserInfoResponse
     */
    async updateCollegeAlumniUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.intake)) {
            body["intake"] = request.intake;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.outtake)) {
            body["outtake"] = request.outtake;
        }
        if (!tea_util_1.default.isUnset(request.studentNumber)) {
            body["studentNumber"] = request.studentNumber;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCollegeAlumniUserInfo",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeAlumni/userInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCollegeAlumniUserInfoResponse({}));
    }
    /**
     * 高校校友会更新校友信息
     *
     * @param request - UpdateCollegeAlumniUserInfoRequest
     * @returns UpdateCollegeAlumniUserInfoResponse
     */
    async updateCollegeAlumniUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCollegeAlumniUserInfoHeaders({});
        return await this.updateCollegeAlumniUserInfoWithOptions(request, headers, runtime);
    }
    /**
     * 更新高校通讯录组织单元
     *
     * @param request - UpdateCollegeContactDeptRequest
     * @param headers - UpdateCollegeContactDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCollegeContactDeptResponse
     */
    async updateCollegeContactDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.autoAddUser)) {
            body["autoAddUser"] = request.autoAddUser;
        }
        if (!tea_util_1.default.isUnset(request.autoApproveApply)) {
            body["autoApproveApply"] = request.autoApproveApply;
        }
        if (!tea_util_1.default.isUnset(request.brief)) {
            body["brief"] = request.brief;
        }
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.createDeptGroup)) {
            body["createDeptGroup"] = request.createDeptGroup;
        }
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            body["deptCode"] = request.deptCode;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.deptManagerUseridList)) {
            body["deptManagerUseridList"] = request.deptManagerUseridList;
        }
        if (!tea_util_1.default.isUnset(request.deptPermits)) {
            body["deptPermits"] = request.deptPermits;
        }
        if (!tea_util_1.default.isUnset(request.deptType)) {
            body["deptType"] = request.deptType;
        }
        if (!tea_util_1.default.isUnset(request.empApplyJoinDept)) {
            body["empApplyJoinDept"] = request.empApplyJoinDept;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.forceUpdateFields)) {
            body["forceUpdateFields"] = request.forceUpdateFields;
        }
        if (!tea_util_1.default.isUnset(request.groupContainHiddenDept)) {
            body["groupContainHiddenDept"] = request.groupContainHiddenDept;
        }
        if (!tea_util_1.default.isUnset(request.groupContainOuterDept)) {
            body["groupContainOuterDept"] = request.groupContainOuterDept;
        }
        if (!tea_util_1.default.isUnset(request.groupContainSubDept)) {
            body["groupContainSubDept"] = request.groupContainSubDept;
        }
        if (!tea_util_1.default.isUnset(request.hideDept)) {
            body["hideDept"] = request.hideDept;
        }
        if (!tea_util_1.default.isUnset(request.hideSceneConfig)) {
            body["hideSceneConfig"] = request.hideSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.orgDeptOwner)) {
            body["orgDeptOwner"] = request.orgDeptOwner;
        }
        if (!tea_util_1.default.isUnset(request.outerDept)) {
            body["outerDept"] = request.outerDept;
        }
        if (!tea_util_1.default.isUnset(request.outerDeptOnlySelf)) {
            body["outerDeptOnlySelf"] = request.outerDeptOnlySelf;
        }
        if (!tea_util_1.default.isUnset(request.outerPermitDepts)) {
            body["outerPermitDepts"] = request.outerPermitDepts;
        }
        if (!tea_util_1.default.isUnset(request.outerPermitUsers)) {
            body["outerPermitUsers"] = request.outerPermitUsers;
        }
        if (!tea_util_1.default.isUnset(request.outerSceneConfig)) {
            body["outerSceneConfig"] = request.outerSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.parentId)) {
            body["parentId"] = request.parentId;
        }
        if (!tea_util_1.default.isUnset(request.sourceIdentifier)) {
            body["sourceIdentifier"] = request.sourceIdentifier;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        if (!tea_util_1.default.isUnset(request.userPermits)) {
            body["userPermits"] = request.userPermits;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCollegeContactDept",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCollegeContactDeptResponse({}));
    }
    /**
     * 更新高校通讯录组织单元
     *
     * @param request - UpdateCollegeContactDeptRequest
     * @returns UpdateCollegeContactDeptResponse
     */
    async updateCollegeContactDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCollegeContactDeptHeaders({});
        return await this.updateCollegeContactDeptWithOptions(request, headers, runtime);
    }
    /**
     * 更新高校账号用户
     *
     * @param request - UpdateCollegeContactExclusiveRequest
     * @param headers - UpdateCollegeContactExclusiveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCollegeContactExclusiveResponse
     */
    async updateCollegeContactExclusiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.avatarMediaId)) {
            body["avatarMediaId"] = request.avatarMediaId;
        }
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.deptOrderList)) {
            body["deptOrderList"] = request.deptOrderList;
        }
        if (!tea_util_1.default.isUnset(request.deptPositionSet)) {
            body["deptPositionSet"] = request.deptPositionSet;
        }
        if (!tea_util_1.default.isUnset(request.deptTitleList)) {
            body["deptTitleList"] = request.deptTitleList;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.empType)) {
            body["empType"] = request.empType;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.forceUpdateFields)) {
            body["forceUpdateFields"] = request.forceUpdateFields;
        }
        if (!tea_util_1.default.isUnset(request.hideMobile)) {
            body["hideMobile"] = request.hideMobile;
        }
        if (!tea_util_1.default.isUnset(request.hiredDate)) {
            body["hiredDate"] = request.hiredDate;
        }
        if (!tea_util_1.default.isUnset(request.jobNumber)) {
            body["jobNumber"] = request.jobNumber;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.loginIdType)) {
            body["loginIdType"] = request.loginIdType;
        }
        if (!tea_util_1.default.isUnset(request.mainDeptId)) {
            body["mainDeptId"] = request.mainDeptId;
        }
        if (!tea_util_1.default.isUnset(request.managerUserid)) {
            body["managerUserid"] = request.managerUserid;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.nickname)) {
            body["nickname"] = request.nickname;
        }
        if (!tea_util_1.default.isUnset(request.orgEmail)) {
            body["orgEmail"] = request.orgEmail;
        }
        if (!tea_util_1.default.isUnset(request.orgEmailType)) {
            body["orgEmailType"] = request.orgEmailType;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.seniorMode)) {
            body["seniorMode"] = request.seniorMode;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        if (!tea_util_1.default.isUnset(request.workPlace)) {
            body["workPlace"] = request.workPlace;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCollegeContactExclusive",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/exclusiveAccounts/users`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCollegeContactExclusiveResponse({}));
    }
    /**
     * 更新高校账号用户
     *
     * @param request - UpdateCollegeContactExclusiveRequest
     * @returns UpdateCollegeContactExclusiveResponse
     */
    async updateCollegeContactExclusive(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCollegeContactExclusiveHeaders({});
        return await this.updateCollegeContactExclusiveWithOptions(request, headers, runtime);
    }
    /**
     * 更新高校通讯录场景架构
     *
     * @param request - UpdateCollegeContactSceneStruRequest
     * @param headers - UpdateCollegeContactSceneStruHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCollegeContactSceneStruResponse
     */
    async updateCollegeContactSceneStruWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.sourceIdentifier)) {
            body["sourceIdentifier"] = request.sourceIdentifier;
        }
        if (!tea_util_1.default.isUnset(request.struBrief)) {
            body["struBrief"] = request.struBrief;
        }
        if (!tea_util_1.default.isUnset(request.struId)) {
            body["struId"] = request.struId;
        }
        if (!tea_util_1.default.isUnset(request.struName)) {
            body["struName"] = request.struName;
        }
        if (!tea_util_1.default.isUnset(request.struType)) {
            body["struType"] = request.struType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCollegeContactSceneStru",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/depts/structures/scenes`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCollegeContactSceneStruResponse({}));
    }
    /**
     * 更新高校通讯录场景架构
     *
     * @param request - UpdateCollegeContactSceneStruRequest
     * @returns UpdateCollegeContactSceneStruResponse
     */
    async updateCollegeContactSceneStru(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCollegeContactSceneStruHeaders({});
        return await this.updateCollegeContactSceneStruWithOptions(request, headers, runtime);
    }
    /**
     * 更新个人账号用户
     *
     * @param request - UpdateCollegeContactUserRequest
     * @param headers - UpdateCollegeContactUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCollegeContactUserResponse
     */
    async updateCollegeContactUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.deptOrderList)) {
            body["deptOrderList"] = request.deptOrderList;
        }
        if (!tea_util_1.default.isUnset(request.deptPositionSet)) {
            body["deptPositionSet"] = request.deptPositionSet;
        }
        if (!tea_util_1.default.isUnset(request.deptTitleList)) {
            body["deptTitleList"] = request.deptTitleList;
        }
        if (!tea_util_1.default.isUnset(request.email)) {
            body["email"] = request.email;
        }
        if (!tea_util_1.default.isUnset(request.empType)) {
            body["empType"] = request.empType;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.forceUpdateFields)) {
            body["forceUpdateFields"] = request.forceUpdateFields;
        }
        if (!tea_util_1.default.isUnset(request.hideMobile)) {
            body["hideMobile"] = request.hideMobile;
        }
        if (!tea_util_1.default.isUnset(request.hiredDate)) {
            body["hiredDate"] = request.hiredDate;
        }
        if (!tea_util_1.default.isUnset(request.jobNumber)) {
            body["jobNumber"] = request.jobNumber;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.mainDeptId)) {
            body["mainDeptId"] = request.mainDeptId;
        }
        if (!tea_util_1.default.isUnset(request.managerUserid)) {
            body["managerUserid"] = request.managerUserid;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.orgEmail)) {
            body["orgEmail"] = request.orgEmail;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.seniorMode)) {
            body["seniorMode"] = request.seniorMode;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        if (!tea_util_1.default.isUnset(request.workPlace)) {
            body["workPlace"] = request.workPlace;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCollegeContactUser",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/personalAccounts/users`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCollegeContactUserResponse({}));
    }
    /**
     * 更新个人账号用户
     *
     * @param request - UpdateCollegeContactUserRequest
     * @returns UpdateCollegeContactUserResponse
     */
    async updateCollegeContactUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCollegeContactUserHeaders({});
        return await this.updateCollegeContactUserWithOptions(request, headers, runtime);
    }
    /**
     * 修改用户成员类型
     *
     * @param request - UpdateCollegeUserEmpTypeRequest
     * @param headers - UpdateCollegeUserEmpTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCollegeUserEmpTypeResponse
     */
    async updateCollegeUserEmpTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.empType)) {
            body["empType"] = request.empType;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCollegeUserEmpType",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/collegeContact/empTypes/change`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCollegeUserEmpTypeResponse({}));
    }
    /**
     * 修改用户成员类型
     *
     * @param request - UpdateCollegeUserEmpTypeRequest
     * @returns UpdateCollegeUserEmpTypeResponse
     */
    async updateCollegeUserEmpType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCollegeUserEmpTypeHeaders({});
        return await this.updateCollegeUserEmpTypeWithOptions(request, headers, runtime);
    }
    /**
     * 更新班级课程表（调代课等微调场景）
     *
     * @param request - UpdateCoursesOfClassRequest
     * @param headers - UpdateCoursesOfClassHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCoursesOfClassResponse
     */
    async updateCoursesOfClassWithOptions(classId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courses)) {
            body["courses"] = request.courses;
        }
        if (!tea_util_1.default.isUnset(request.sectionConfig)) {
            body["sectionConfig"] = request.sectionConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCoursesOfClass",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/classes/${classId}/courses/schedules`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCoursesOfClassResponse({}));
    }
    /**
     * 更新班级课程表（调代课等微调场景）
     *
     * @param request - UpdateCoursesOfClassRequest
     * @returns UpdateCoursesOfClassResponse
     */
    async updateCoursesOfClass(classId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCoursesOfClassHeaders({});
        return await this.updateCoursesOfClassWithOptions(classId, request, headers, runtime);
    }
    /**
     * 添加物理教室信息
     *
     * @param request - UpdatePhysicalClassroomRequest
     * @param headers - UpdatePhysicalClassroomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePhysicalClassroomResponse
     */
    async updatePhysicalClassroomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.classroomBuilding)) {
            body["classroomBuilding"] = request.classroomBuilding;
        }
        if (!tea_util_1.default.isUnset(request.classroomCampus)) {
            body["classroomCampus"] = request.classroomCampus;
        }
        if (!tea_util_1.default.isUnset(request.classroomFloor)) {
            body["classroomFloor"] = request.classroomFloor;
        }
        if (!tea_util_1.default.isUnset(request.classroomId)) {
            body["classroomId"] = request.classroomId;
        }
        if (!tea_util_1.default.isUnset(request.classroomName)) {
            body["classroomName"] = request.classroomName;
        }
        if (!tea_util_1.default.isUnset(request.classroomNumber)) {
            body["classroomNumber"] = request.classroomNumber;
        }
        if (!tea_util_1.default.isUnset(request.directBroadcast)) {
            body["directBroadcast"] = request.directBroadcast;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePhysicalClassroom",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/physicalClassrooms`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePhysicalClassroomResponse({}));
    }
    /**
     * 添加物理教室信息
     *
     * @param request - UpdatePhysicalClassroomRequest
     * @returns UpdatePhysicalClassroomResponse
     */
    async updatePhysicalClassroom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePhysicalClassroomHeaders({});
        return await this.updatePhysicalClassroomWithOptions(request, headers, runtime);
    }
    /**
     * 更新专递课堂课程
     *
     * @param request - UpdateRemoteClassCourseRequest
     * @param headers - UpdateRemoteClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRemoteClassCourseResponse
     */
    async updateRemoteClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendParticipants)) {
            body["attendParticipants"] = request.attendParticipants;
        }
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.courseCode)) {
            body["courseCode"] = request.courseCode;
        }
        if (!tea_util_1.default.isUnset(request.courseName)) {
            body["courseName"] = request.courseName;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.teachingParticipant)) {
            body["teachingParticipant"] = request.teachingParticipant;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRemoteClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/courses`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRemoteClassCourseResponse({}));
    }
    /**
     * 更新专递课堂课程
     *
     * @param request - UpdateRemoteClassCourseRequest
     * @returns UpdateRemoteClassCourseResponse
     */
    async updateRemoteClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRemoteClassCourseHeaders({});
        return await this.updateRemoteClassCourseWithOptions(request, headers, runtime);
    }
    /**
     * 更新设备名称
     *
     * @param request - UpdateRemoteClassDeviceRequest
     * @param headers - UpdateRemoteClassDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRemoteClassDeviceResponse
     */
    async updateRemoteClassDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            query["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceCode)) {
            query["deviceCode"] = request.deviceCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceName)) {
            query["deviceName"] = request.deviceName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRemoteClassDevice",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/remoteClasses/deviceNames`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRemoteClassDeviceResponse({}));
    }
    /**
     * 更新设备名称
     *
     * @param request - UpdateRemoteClassDeviceRequest
     * @returns UpdateRemoteClassDeviceResponse
     */
    async updateRemoteClassDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRemoteClassDeviceHeaders({});
        return await this.updateRemoteClassDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 更新大学课程组
     *
     * @param request - UpdateUniversityCourseGroupRequest
     * @param headers - UpdateUniversityCourseGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUniversityCourseGroupResponse
     */
    async updateUniversityCourseGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.courseGroupCode)) {
            body["courseGroupCode"] = request.courseGroupCode;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupIntroduce)) {
            body["courseGroupIntroduce"] = request.courseGroupIntroduce;
        }
        if (!tea_util_1.default.isUnset(request.courseGroupName)) {
            body["courseGroupName"] = request.courseGroupName;
        }
        if (!tea_util_1.default.isUnset(request.courserGroupItemModels)) {
            body["courserGroupItemModels"] = request.courserGroupItemModels;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateUniversityCourseGroup",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/universities/courseGroups`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateUniversityCourseGroupResponse({}));
    }
    /**
     * 更新大学课程组
     *
     * @param request - UpdateUniversityCourseGroupRequest
     * @returns UpdateUniversityCourseGroupResponse
     */
    async updateUniversityCourseGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateUniversityCourseGroupHeaders({});
        return await this.updateUniversityCourseGroupWithOptions(request, headers, runtime);
    }
    /**
     * 上传学情图片回调
     *
     * @param request - UploadLearningDataCallbackRequest
     * @param headers - UploadLearningDataCallbackHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UploadLearningDataCallbackResponse
     */
    async uploadLearningDataCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.generatedTime)) {
            body["generatedTime"] = request.generatedTime;
        }
        if (!tea_util_1.default.isUnset(request.studentUserId)) {
            body["studentUserId"] = request.studentUserId;
        }
        if (!tea_util_1.default.isUnset(request.subjectCode)) {
            body["subjectCode"] = request.subjectCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UploadLearningDataCallback",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/uploadLearnings/datas/callback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UploadLearningDataCallbackResponse({}));
    }
    /**
     * 上传学情图片回调
     *
     * @param request - UploadLearningDataCallbackRequest
     * @returns UploadLearningDataCallbackResponse
     */
    async uploadLearningDataCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UploadLearningDataCallbackHeaders({});
        return await this.uploadLearningDataCallbackWithOptions(request, headers, runtime);
    }
    /**
     * 视讯PAAS接口代理
     *
     * @param request - VPaasProxyRequest
     * @param headers - VPaasProxyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns VPaasProxyResponse
     */
    async vPaasProxyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionCode)) {
            body["actionCode"] = request.actionCode;
        }
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        if (!tea_util_1.default.isUnset(request.publicKey)) {
            body["publicKey"] = request.publicKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "VPaasProxy",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/vpaas/proxy`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new VPaasProxyResponse({}));
    }
    /**
     * 视讯PAAS接口代理
     *
     * @param request - VPaasProxyRequest
     * @returns VPaasProxyResponse
     */
    async vPaasProxy(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new VPaasProxyHeaders({});
        return await this.vPaasProxyWithOptions(request, headers, runtime);
    }
    /**
     * 校验开学季任务是否完成
     *
     * @param request - ValidateNewGradeManagerRequest
     * @param headers - ValidateNewGradeManagerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ValidateNewGradeManagerResponse
     */
    async validateNewGradeManagerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ValidateNewGradeManager",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/newGrades/tasks/validate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateNewGradeManagerResponse({}));
    }
    /**
     * 校验开学季任务是否完成
     *
     * @param request - ValidateNewGradeManagerRequest
     * @returns ValidateNewGradeManagerResponse
     */
    async validateNewGradeManager(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateNewGradeManagerHeaders({});
        return await this.validateNewGradeManagerWithOptions(request, headers, runtime);
    }
    /**
     * 校验用户的教育角色
     *
     * @param request - ValidateUserRoleRequest
     * @param headers - ValidateUserRoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ValidateUserRoleResponse
     */
    async validateUserRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.timeThreshold)) {
            body["timeThreshold"] = request.timeThreshold;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ValidateUserRole",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/users/roles/validate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateUserRoleResponse({}));
    }
    /**
     * 校验用户的教育角色
     *
     * @param request - ValidateUserRoleRequest
     * @returns ValidateUserRoleResponse
     */
    async validateUserRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateUserRoleHeaders({});
        return await this.validateUserRoleWithOptions(request, headers, runtime);
    }
    /**
     * 查询班级课程
     *
     * @param request - QueryClassCourseRequest
     * @param headers - QueryClassCourseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryClassCourseResponse
     */
    async queryClassCourseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.classId)) {
            body["classId"] = request.classId;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvCode)) {
            body["isvCode"] = request.isvCode;
        }
        if (!tea_util_1.default.isUnset(request.isvCourseId)) {
            body["isvCourseId"] = request.isvCourseId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "queryClassCourse",
            version: "edu_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/edu/kits/classes/courses/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryClassCourseResponse({}));
    }
    /**
     * 查询班级课程
     *
     * @param request - QueryClassCourseRequest
     * @returns QueryClassCourseResponse
     */
    async queryClassCourse(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryClassCourseHeaders({});
        return await this.queryClassCourseWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map