/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ApprovalListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApprovalListResponseBody extends $tea.Model {
    data?: ApprovalListResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApprovalListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ApprovalListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthRequest extends $tea.Model {
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelCorpAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrdersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrdersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    itemCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    itemName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    orderCreateTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    orderId?: string;
    payFee?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    quantity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrdersResponseBody extends $tea.Model {
    esignOrderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrdersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChannelOrdersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpRealnameHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpRealnameRequest extends $tea.Model {
    redirectUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpRealnameResponseBody extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpRealnameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CorpRealnameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDevelopersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDevelopersRequest extends $tea.Model {
    noticeUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDevelopersResponseBody extends $tea.Model {
    data?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDevelopersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDevelopersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequest extends $tea.Model {
    ccs?: CreateProcessRequestCcs[];
    files?: CreateProcessRequestFiles[];
    /**
     * @remarks
     * This parameter is required.
     */
    initiatorUserId?: string;
    participants?: CreateProcessRequestParticipants[];
    redirectUrl?: string;
    signEndTime?: number;
    sourceInfo?: CreateProcessRequestSourceInfo;
    /**
     * @remarks
     * This parameter is required.
     */
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateProcessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachsApprovalHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    tsignOpenAppId?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachsApprovalResponseBody extends $tea.Model {
    data?: GetAttachsApprovalResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachsApprovalResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAttachsApprovalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthUrlRequest extends $tea.Model {
    redirectUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthUrlResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    mobileUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pcUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAuthUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContractMarginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContractMarginResponseBody extends $tea.Model {
    margin?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContractMarginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetContractMarginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpConsoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpConsoleResponseBody extends $tea.Model {
    orgConsoleUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpConsoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCorpConsoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpInfoResponseBody extends $tea.Model {
    isRealName?: string;
    orgRealName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCorpInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExecuteUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExecuteUrlRequest extends $tea.Model {
    account?: string;
    signContainer?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExecuteUrlResponseBody extends $tea.Model {
    longUrl?: string;
    mobileUrl?: string;
    pcUrl?: string;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExecuteUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetExecuteUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoResponseBody extends $tea.Model {
    downloadUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    name?: string;
    pdfTotalPages?: number;
    size?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadUrlRequest extends $tea.Model {
    contentMd5?: string;
    contentType?: string;
    convert2Pdf?: boolean;
    fileName?: string;
    fileSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadUrlResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    uploadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileUploadUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponseBody extends $tea.Model {
    businessScene?: string;
    flowStatus?: number;
    initiatorAuthorizedName?: string;
    initiatorName?: string;
    logs?: GetFlowDetailResponseBodyLogs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFlowDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDocsResponseBody extends $tea.Model {
    data?: GetFlowDocsResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFlowDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIsvStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIsvStatusResponseBody extends $tea.Model {
    authStatus?: string;
    installStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIsvStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetIsvStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignDetailResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    businessScene?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    flowStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    signers?: GetSignDetailResponseBodySigners[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSignDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoResponseBody extends $tea.Model {
    isRealName?: string;
    userRealName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartRequest extends $tea.Model {
    autoStart?: string;
    ccs?: ProcessStartRequestCcs[];
    /**
     * @remarks
     * This parameter is required.
     */
    files?: ProcessStartRequestFiles[];
    /**
     * @remarks
     * This parameter is required.
     */
    initiatorUserId?: string;
    participants?: ProcessStartRequestParticipants[];
    redirectUrl?: string;
    sourceInfo?: ProcessStartRequestSourceInfo;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartResponseBody extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ProcessStartResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResaleOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResaleOrderRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    orderCreateTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    orderId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    quantity?: number;
    serviceStartTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    serviceStopTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResaleOrderResponseBody extends $tea.Model {
    esignOrderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResaleOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ResaleOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UsersRealnameHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    serviceGroup?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UsersRealnameRequest extends $tea.Model {
    redirectUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UsersRealnameResponseBody extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UsersRealnameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UsersRealnameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApprovalListResponseBodyDataApprovalNodes extends $tea.Model {
    approvalTime?: string;
    approverName?: string;
    startTime?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApprovalListResponseBodyData extends $tea.Model {
    approvalName?: string;
    approvalNodes?: ApprovalListResponseBodyDataApprovalNodes[];
    endTime?: number;
    refuseReason?: string;
    sealIdImg?: string;
    sponsorAccountName?: string;
    startTime?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequestCcs extends $tea.Model {
    account?: string;
    accountName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accountType?: string;
    orgName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequestFiles extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequestParticipantsSignPosListSignDate extends $tea.Model {
    format?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequestParticipantsSignPosList extends $tea.Model {
    fileId?: string;
    isCrossPage?: boolean;
    needSignDate?: boolean;
    page?: string;
    signDate?: CreateProcessRequestParticipantsSignPosListSignDate;
    signRequirement?: string;
    x?: number;
    y?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequestParticipants extends $tea.Model {
    account?: string;
    accountName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accountType?: string;
    orgName?: string;
    signOrder?: number;
    signPosList?: CreateProcessRequestParticipantsSignPosList[];
    /**
     * @remarks
     * This parameter is required.
     */
    signRequirements?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessRequestSourceInfo extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    showText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachsApprovalResponseBodyDataFiles extends $tea.Model {
    fileName?: string;
    originalFileUrl?: string;
    signFinishFileUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachsApprovalResponseBodyData extends $tea.Model {
    files?: GetAttachsApprovalResponseBodyDataFiles[];
    flowId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponseBodyLogs extends $tea.Model {
    logType?: string;
    operateDescription?: string;
    operateTime?: number;
    operatorAccountName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDocsResponseBodyData extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignDetailResponseBodySigners extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    signStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    signerName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartRequestCcs extends $tea.Model {
    account?: string;
    accountName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accountType?: string;
    orgName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartRequestFiles extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartRequestParticipants extends $tea.Model {
    account?: string;
    accountName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accountType?: string;
    orgName?: string;
    signRequirements?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessStartRequestSourceInfo extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    showText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 获取流程任务用印审批列表
     *
     * @param headers - ApprovalListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ApprovalListResponse
     */
    approvalListWithOptions(taskId: string, headers: ApprovalListHeaders, runtime: $Util.RuntimeOptions): Promise<ApprovalListResponse>;
    /**
     * 获取流程任务用印审批列表
     * @returns ApprovalListResponse
     */
    approvalList(taskId: string): Promise<ApprovalListResponse>;
    /**
     * 取消企业的授权
     *
     * @param request - CancelCorpAuthRequest
     * @param headers - CancelCorpAuthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CancelCorpAuthResponse
     */
    cancelCorpAuthWithOptions(request: CancelCorpAuthRequest, headers: CancelCorpAuthHeaders, runtime: $Util.RuntimeOptions): Promise<CancelCorpAuthResponse>;
    /**
     * 取消企业的授权
     *
     * @param request - CancelCorpAuthRequest
     * @returns CancelCorpAuthResponse
     */
    cancelCorpAuth(request: CancelCorpAuthRequest): Promise<CancelCorpAuthResponse>;
    /**
     * 套餐转售1（分润模式）
     *
     * @param request - ChannelOrdersRequest
     * @param headers - ChannelOrdersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChannelOrdersResponse
     */
    channelOrdersWithOptions(request: ChannelOrdersRequest, headers: ChannelOrdersHeaders, runtime: $Util.RuntimeOptions): Promise<ChannelOrdersResponse>;
    /**
     * 套餐转售1（分润模式）
     *
     * @param request - ChannelOrdersRequest
     * @returns ChannelOrdersResponse
     */
    channelOrders(request: ChannelOrdersRequest): Promise<ChannelOrdersResponse>;
    /**
     * 生成企业实名的跳转地址
     *
     * @param request - CorpRealnameRequest
     * @param headers - CorpRealnameHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CorpRealnameResponse
     */
    corpRealnameWithOptions(request: CorpRealnameRequest, headers: CorpRealnameHeaders, runtime: $Util.RuntimeOptions): Promise<CorpRealnameResponse>;
    /**
     * 生成企业实名的跳转地址
     *
     * @param request - CorpRealnameRequest
     * @returns CorpRealnameResponse
     */
    corpRealname(request: CorpRealnameRequest): Promise<CorpRealnameResponse>;
    /**
     * 钉钉ISV服务商数据初始化
     *
     * @param request - CreateDevelopersRequest
     * @param headers - CreateDevelopersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDevelopersResponse
     */
    createDevelopersWithOptions(request: CreateDevelopersRequest, headers: CreateDevelopersHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDevelopersResponse>;
    /**
     * 钉钉ISV服务商数据初始化
     *
     * @param request - CreateDevelopersRequest
     * @returns CreateDevelopersResponse
     */
    createDevelopers(request: CreateDevelopersRequest): Promise<CreateDevelopersResponse>;
    /**
     * 通过API发起签署流程
     *
     * @param request - CreateProcessRequest
     * @param headers - CreateProcessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateProcessResponse
     */
    createProcessWithOptions(request: CreateProcessRequest, headers: CreateProcessHeaders, runtime: $Util.RuntimeOptions): Promise<CreateProcessResponse>;
    /**
     * 通过API发起签署流程
     *
     * @param request - CreateProcessRequest
     * @returns CreateProcessResponse
     */
    createProcess(request: CreateProcessRequest): Promise<CreateProcessResponse>;
    /**
     * 获取钉钉审批实例-电子附件信息
     *
     * @param headers - GetAttachsApprovalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAttachsApprovalResponse
     */
    getAttachsApprovalWithOptions(instanceId: string, headers: GetAttachsApprovalHeaders, runtime: $Util.RuntimeOptions): Promise<GetAttachsApprovalResponse>;
    /**
     * 获取钉钉审批实例-电子附件信息
     * @returns GetAttachsApprovalResponse
     */
    getAttachsApproval(instanceId: string): Promise<GetAttachsApprovalResponse>;
    /**
     * 生成授权页面地址
     *
     * @param request - GetAuthUrlRequest
     * @param headers - GetAuthUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAuthUrlResponse
     */
    getAuthUrlWithOptions(request: GetAuthUrlRequest, headers: GetAuthUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetAuthUrlResponse>;
    /**
     * 生成授权页面地址
     *
     * @param request - GetAuthUrlRequest
     * @returns GetAuthUrlResponse
     */
    getAuthUrl(request: GetAuthUrlRequest): Promise<GetAuthUrlResponse>;
    /**
     * 查询套餐余量
     *
     * @param headers - GetContractMarginHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetContractMarginResponse
     */
    getContractMarginWithOptions(headers: GetContractMarginHeaders, runtime: $Util.RuntimeOptions): Promise<GetContractMarginResponse>;
    /**
     * 查询套餐余量
     * @returns GetContractMarginResponse
     */
    getContractMargin(): Promise<GetContractMarginResponse>;
    /**
     * 获取企业控制台地址
     *
     * @param headers - GetCorpConsoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCorpConsoleResponse
     */
    getCorpConsoleWithOptions(headers: GetCorpConsoleHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpConsoleResponse>;
    /**
     * 获取企业控制台地址
     * @returns GetCorpConsoleResponse
     */
    getCorpConsole(): Promise<GetCorpConsoleResponse>;
    /**
     * 查询企业信息
     *
     * @param headers - GetCorpInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCorpInfoResponse
     */
    getCorpInfoWithOptions(headers: GetCorpInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpInfoResponse>;
    /**
     * 查询企业信息
     * @returns GetCorpInfoResponse
     */
    getCorpInfo(): Promise<GetCorpInfoResponse>;
    /**
     * 获取签署人签署地址
     *
     * @param request - GetExecuteUrlRequest
     * @param headers - GetExecuteUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetExecuteUrlResponse
     */
    getExecuteUrlWithOptions(request: GetExecuteUrlRequest, headers: GetExecuteUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetExecuteUrlResponse>;
    /**
     * 获取签署人签署地址
     *
     * @param request - GetExecuteUrlRequest
     * @returns GetExecuteUrlResponse
     */
    getExecuteUrl(request: GetExecuteUrlRequest): Promise<GetExecuteUrlResponse>;
    /**
     * 获取文件详情
     *
     * @param headers - GetFileInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileInfoResponse
     */
    getFileInfoWithOptions(fileId: string, headers: GetFileInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileInfoResponse>;
    /**
     * 获取文件详情
     * @returns GetFileInfoResponse
     */
    getFileInfo(fileId: string): Promise<GetFileInfoResponse>;
    /**
     * 获取文件上传地址
     *
     * @param request - GetFileUploadUrlRequest
     * @param headers - GetFileUploadUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileUploadUrlResponse
     */
    getFileUploadUrlWithOptions(request: GetFileUploadUrlRequest, headers: GetFileUploadUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileUploadUrlResponse>;
    /**
     * 获取文件上传地址
     *
     * @param request - GetFileUploadUrlRequest
     * @returns GetFileUploadUrlResponse
     */
    getFileUploadUrl(request: GetFileUploadUrlRequest): Promise<GetFileUploadUrlResponse>;
    /**
     * 获取流程详细信息及操作记录
     *
     * @param headers - GetFlowDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFlowDetailResponse
     */
    getFlowDetailWithOptions(taskId: string, headers: GetFlowDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetFlowDetailResponse>;
    /**
     * 获取流程详细信息及操作记录
     * @returns GetFlowDetailResponse
     */
    getFlowDetail(taskId: string): Promise<GetFlowDetailResponse>;
    /**
     * 获取流程任务的所有合同列表，收到签署完成消息后查询
     *
     * @param headers - GetFlowDocsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFlowDocsResponse
     */
    getFlowDocsWithOptions(taskId: string, headers: GetFlowDocsHeaders, runtime: $Util.RuntimeOptions): Promise<GetFlowDocsResponse>;
    /**
     * 获取流程任务的所有合同列表，收到签署完成消息后查询
     * @returns GetFlowDocsResponse
     */
    getFlowDocs(taskId: string): Promise<GetFlowDocsResponse>;
    /**
     * 获取企业的e签宝微应用当前状态
     *
     * @param headers - GetIsvStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetIsvStatusResponse
     */
    getIsvStatusWithOptions(headers: GetIsvStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetIsvStatusResponse>;
    /**
     * 获取企业的e签宝微应用当前状态
     * @returns GetIsvStatusResponse
     */
    getIsvStatus(): Promise<GetIsvStatusResponse>;
    /**
     * 获取流程签署的详细信息
     *
     * @param headers - GetSignDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSignDetailResponse
     */
    getSignDetailWithOptions(taskId: string, headers: GetSignDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetSignDetailResponse>;
    /**
     * 获取流程签署的详细信息
     * @returns GetSignDetailResponse
     */
    getSignDetail(taskId: string): Promise<GetSignDetailResponse>;
    /**
     * 查询个人信息
     *
     * @param headers - GetUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserInfoResponse
     */
    getUserInfoWithOptions(userId: string, headers: GetUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserInfoResponse>;
    /**
     * 查询个人信息
     * @returns GetUserInfoResponse
     */
    getUserInfo(userId: string): Promise<GetUserInfoResponse>;
    /**
     * 获取发起签署任务的地址
     *
     * @param request - ProcessStartRequest
     * @param headers - ProcessStartHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ProcessStartResponse
     */
    processStartWithOptions(request: ProcessStartRequest, headers: ProcessStartHeaders, runtime: $Util.RuntimeOptions): Promise<ProcessStartResponse>;
    /**
     * 获取发起签署任务的地址
     *
     * @param request - ProcessStartRequest
     * @returns ProcessStartResponse
     */
    processStart(request: ProcessStartRequest): Promise<ProcessStartResponse>;
    /**
     * 套餐转售2（底价结算模式）
     *
     * @param request - ResaleOrderRequest
     * @param headers - ResaleOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ResaleOrderResponse
     */
    resaleOrderWithOptions(request: ResaleOrderRequest, headers: ResaleOrderHeaders, runtime: $Util.RuntimeOptions): Promise<ResaleOrderResponse>;
    /**
     * 套餐转售2（底价结算模式）
     *
     * @param request - ResaleOrderRequest
     * @returns ResaleOrderResponse
     */
    resaleOrder(request: ResaleOrderRequest): Promise<ResaleOrderResponse>;
    /**
     * 获取跳转到个人实名的地址
     *
     * @param request - UsersRealnameRequest
     * @param headers - UsersRealnameHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UsersRealnameResponse
     */
    usersRealnameWithOptions(request: UsersRealnameRequest, headers: UsersRealnameHeaders, runtime: $Util.RuntimeOptions): Promise<UsersRealnameResponse>;
    /**
     * 获取跳转到个人实名的地址
     *
     * @param request - UsersRealnameRequest
     * @returns UsersRealnameResponse
     */
    usersRealname(request: UsersRealnameRequest): Promise<UsersRealnameResponse>;
}
