/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class DentryAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: AddPermissionRequestMembers[];
    option?: AddPermissionRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * MANAGER
     */
    roleId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dentry_name
     */
    name?: string;
    option?: CommitFileRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * upload_key
     */
    uploadKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBody extends $tea.Model {
    dentry?: CommitFileResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CommitFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: DeletePermissionRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * MANAGER
     */
    roleId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeletePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequest extends $tea.Model {
    option?: GetFileUploadInfoRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * HEADER_SIGNATURE
     */
    protocol?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponseBody extends $tea.Model {
    headerSignatureInfo?: GetFileUploadInfoResponseBodyHeaderSignatureInfo;
    /**
     * @example
     * HEADER_SIGNATURE
     */
    protocol?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    /**
     * @example
     * upload_key
     */
    uploadKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileUploadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionInheritanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionInheritanceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionInheritanceResponseBody extends $tea.Model {
    /**
     * @example
     * PASS_ON
     */
    inheritance?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionInheritanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPermissionInheritanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionShareScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionShareScopeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionShareScopeResponseBody extends $tea.Model {
    /**
     * @example
     * ORG_READ
     */
    scope?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionShareScopeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPermissionShareScopeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsRequest extends $tea.Model {
    option?: ListPermissionsRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    permissions?: ListPermissionsResponseBodyPermissions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerGetDefaultHandOverUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerGetDefaultHandOverUserRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerGetDefaultHandOverUserResponseBody extends $tea.Model {
    /**
     * @example
     * staff_id
     */
    defaultHandoverUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerGetDefaultHandOverUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ManagerGetDefaultHandOverUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerSetDefaultHandOverUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerSetDefaultHandOverUserRequest extends $tea.Model {
    /**
     * @example
     * staff_id
     */
    defaultHandoverUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerSetDefaultHandOverUserResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagerSetDefaultHandOverUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ManagerSetDefaultHandOverUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * keyword
     */
    keyword?: string;
    option?: SearchDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesResponseBody extends $tea.Model {
    items?: SearchDentriesResponseBodyItems[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchPublishDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchPublishDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * keyword
     */
    keyword?: string;
    option?: SearchPublishDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * workspace_id
     */
    workspaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchPublishDentriesResponseBody extends $tea.Model {
    items?: SearchPublishDentriesResponseBodyItems[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchPublishDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchPublishDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspacesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * keyword
     */
    keyword?: string;
    option?: SearchWorkspacesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspacesResponseBody extends $tea.Model {
    items?: SearchWorkspacesResponseBodyItems[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionInheritanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionInheritanceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PASS_ON
     */
    inheritance?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionInheritanceResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionInheritanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetPermissionInheritanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionShareScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionShareScopeRequest extends $tea.Model {
    option?: SetPermissionShareScopeRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ORG_READ
     */
    scope?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionShareScopeResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionShareScopeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetPermissionShareScopeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: UpdatePermissionRequestMembers[];
    option?: UpdatePermissionRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * MANAGER
     */
    roleId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdatePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequestMembers extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * member_id
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequestOption extends $tea.Model {
    /**
     * @example
     * 3600
     */
    duration?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequestOptionAppProperties extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_name
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * property_value
     */
    value?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileRequestOption extends $tea.Model {
    appProperties?: CommitFileRequestOptionAppProperties[];
    /**
     * @example
     * AUTO_RENAME
     */
    conflictStrategy?: string;
    /**
     * @example
     * false
     */
    convertToOnlineDoc?: boolean;
    /**
     * @example
     * DOC
     */
    convertToOnlineDocTargetDocumentType?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentryThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CommitFileResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * DOCUMENT
     */
    category?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: CommitFileResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: CommitFileResponseBodyDentryThumbnail;
    /**
     * @example
     * FILE
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequestMembers extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * member_id
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequestOptionPreCheckParam extends $tea.Model {
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * 512
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoRequestOption extends $tea.Model {
    preCheckParam?: GetFileUploadInfoRequestOptionPreCheckParam;
    /**
     * @example
     * true
     */
    preferIntranet?: boolean;
    /**
     * @example
     * ZHANGJIAKOU
     */
    preferRegion?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileUploadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    /**
     * @example
     * 900
     */
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    /**
     * @example
     * ZHANGJIAKOU
     */
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsRequestOption extends $tea.Model {
    filterRoleIds?: string[];
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyPermissionsMember extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @example
     * member_id
     */
    id?: string;
    /**
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyPermissionsRole extends $tea.Model {
    /**
     * @example
     * MANAGER
     */
    id?: string;
    /**
     * @example
     * MANAGER
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyPermissions extends $tea.Model {
    /**
     * @example
     * space_id
     */
    dentryUuid?: string;
    /**
     * @example
     * 3600
     */
    duration?: number;
    member?: ListPermissionsResponseBodyPermissionsMember;
    role?: ListPermissionsResponseBodyPermissionsRole;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesRequestOptionCreateTimeRange extends $tea.Model {
    /**
     * @example
     * end_time
     */
    endTime?: number;
    /**
     * @example
     * start_time
     */
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesRequestOptionVisitTimeRange extends $tea.Model {
    /**
     * @example
     * end_time
     */
    endTime?: number;
    /**
     * @example
     * start_time
     */
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesRequestOption extends $tea.Model {
    createTimeRange?: SearchDentriesRequestOptionCreateTimeRange;
    creatorIds?: string[];
    dentryCategories?: string[];
    /**
     * @example
     * 20
     */
    maxResults?: number;
    modifierIds?: string[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    spaceIds?: number[];
    visitTimeRange?: SearchDentriesRequestOptionVisitTimeRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesResponseBodyItemsCreator extends $tea.Model {
    /**
     * @example
     * user_name
     */
    name?: string;
    /**
     * @example
     * staff_id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesResponseBodyItemsModifier extends $tea.Model {
    /**
     * @example
     * user_name
     */
    name?: string;
    /**
     * @example
     * staff_id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesResponseBodyItemsPath extends $tea.Model {
    /**
     * @example
     * folderA/folderB
     */
    longPath?: string;
    /**
     * @example
     * folderA:folderB
     */
    path?: string;
    /**
     * @example
     * url
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDentriesResponseBodyItems extends $tea.Model {
    creator?: SearchDentriesResponseBodyItemsCreator;
    /**
     * @example
     * uuid
     */
    dentryUuid?: string;
    lastModifyTime?: number;
    modifier?: SearchDentriesResponseBodyItemsModifier;
    /**
     * @example
     * name
     */
    name?: string;
    path?: SearchDentriesResponseBodyItemsPath;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchPublishDentriesRequestOption extends $tea.Model {
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchPublishDentriesResponseBodyItems extends $tea.Model {
    /**
     * @example
     * name
     */
    name?: string;
    /**
     * @example
     * folderA/folderB
     */
    path?: string;
    /**
     * @example
     * name
     */
    summary?: string;
    /**
     * @example
     * url
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspacesRequestOption extends $tea.Model {
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspacesResponseBodyItems extends $tea.Model {
    /**
     * @example
     * workspace_name
     */
    name?: string;
    /**
     * @example
     * workspace_url
     */
    url?: string;
    /**
     * @example
     * workspace_id
     */
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetPermissionShareScopeRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    canSearch?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionRequestMembers extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * member_id
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * USER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionRequestOption extends $tea.Model {
    /**
     * @example
     * 3600
     */
    duration?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @param headers - AddPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddPermissionResponse
     */
    addPermissionWithOptions(dentryUuid: string, request: AddPermissionRequest, headers: AddPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<AddPermissionResponse>;
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @returns AddPermissionResponse
     */
    addPermission(dentryUuid: string, request: AddPermissionRequest): Promise<AddPermissionResponse>;
    /**
     * 提交文件
     *
     * @param request - CommitFileRequest
     * @param headers - CommitFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CommitFileResponse
     */
    commitFileWithOptions(parentDentryUuid: string, request: CommitFileRequest, headers: CommitFileHeaders, runtime: $Util.RuntimeOptions): Promise<CommitFileResponse>;
    /**
     * 提交文件
     *
     * @param request - CommitFileRequest
     * @returns CommitFileResponse
     */
    commitFile(parentDentryUuid: string, request: CommitFileRequest): Promise<CommitFileResponse>;
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @param headers - DeletePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeletePermissionResponse
     */
    deletePermissionWithOptions(dentryUuid: string, request: DeletePermissionRequest, headers: DeletePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePermissionResponse>;
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @returns DeletePermissionResponse
     */
    deletePermission(dentryUuid: string, request: DeletePermissionRequest): Promise<DeletePermissionResponse>;
    /**
     * 获取文件上传信息
     *
     * @param request - GetFileUploadInfoRequest
     * @param headers - GetFileUploadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileUploadInfoResponse
     */
    getFileUploadInfoWithOptions(parentDentryUuid: string, request: GetFileUploadInfoRequest, headers: GetFileUploadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileUploadInfoResponse>;
    /**
     * 获取文件上传信息
     *
     * @param request - GetFileUploadInfoRequest
     * @returns GetFileUploadInfoResponse
     */
    getFileUploadInfo(parentDentryUuid: string, request: GetFileUploadInfoRequest): Promise<GetFileUploadInfoResponse>;
    /**
     * 获取权限继承模式
     *
     * @param request - GetPermissionInheritanceRequest
     * @param headers - GetPermissionInheritanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPermissionInheritanceResponse
     */
    getPermissionInheritanceWithOptions(dentryUuid: string, request: GetPermissionInheritanceRequest, headers: GetPermissionInheritanceHeaders, runtime: $Util.RuntimeOptions): Promise<GetPermissionInheritanceResponse>;
    /**
     * 获取权限继承模式
     *
     * @param request - GetPermissionInheritanceRequest
     * @returns GetPermissionInheritanceResponse
     */
    getPermissionInheritance(dentryUuid: string, request: GetPermissionInheritanceRequest): Promise<GetPermissionInheritanceResponse>;
    /**
     * 获取分享范围
     *
     * @param request - GetPermissionShareScopeRequest
     * @param headers - GetPermissionShareScopeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPermissionShareScopeResponse
     */
    getPermissionShareScopeWithOptions(dentryUuid: string, request: GetPermissionShareScopeRequest, headers: GetPermissionShareScopeHeaders, runtime: $Util.RuntimeOptions): Promise<GetPermissionShareScopeResponse>;
    /**
     * 获取分享范围
     *
     * @param request - GetPermissionShareScopeRequest
     * @returns GetPermissionShareScopeResponse
     */
    getPermissionShareScope(dentryUuid: string, request: GetPermissionShareScopeRequest): Promise<GetPermissionShareScopeResponse>;
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @param headers - ListPermissionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPermissionsResponse
     */
    listPermissionsWithOptions(dentryUuid: string, request: ListPermissionsRequest, headers: ListPermissionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListPermissionsResponse>;
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @returns ListPermissionsResponse
     */
    listPermissions(dentryUuid: string, request: ListPermissionsRequest): Promise<ListPermissionsResponse>;
    /**
     * 查询员工离职时空间默认转交人(管理员)
     *
     * @param request - ManagerGetDefaultHandOverUserRequest
     * @param headers - ManagerGetDefaultHandOverUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ManagerGetDefaultHandOverUserResponse
     */
    managerGetDefaultHandOverUserWithOptions(request: ManagerGetDefaultHandOverUserRequest, headers: ManagerGetDefaultHandOverUserHeaders, runtime: $Util.RuntimeOptions): Promise<ManagerGetDefaultHandOverUserResponse>;
    /**
     * 查询员工离职时空间默认转交人(管理员)
     *
     * @param request - ManagerGetDefaultHandOverUserRequest
     * @returns ManagerGetDefaultHandOverUserResponse
     */
    managerGetDefaultHandOverUser(request: ManagerGetDefaultHandOverUserRequest): Promise<ManagerGetDefaultHandOverUserResponse>;
    /**
     * 设置员工离职时空间默认转交人(管理员)
     *
     * @param request - ManagerSetDefaultHandOverUserRequest
     * @param headers - ManagerSetDefaultHandOverUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ManagerSetDefaultHandOverUserResponse
     */
    managerSetDefaultHandOverUserWithOptions(request: ManagerSetDefaultHandOverUserRequest, headers: ManagerSetDefaultHandOverUserHeaders, runtime: $Util.RuntimeOptions): Promise<ManagerSetDefaultHandOverUserResponse>;
    /**
     * 设置员工离职时空间默认转交人(管理员)
     *
     * @param request - ManagerSetDefaultHandOverUserRequest
     * @returns ManagerSetDefaultHandOverUserResponse
     */
    managerSetDefaultHandOverUser(request: ManagerSetDefaultHandOverUserRequest): Promise<ManagerSetDefaultHandOverUserResponse>;
    /**
     * 搜索文件
     *
     * @param request - SearchDentriesRequest
     * @param headers - SearchDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchDentriesResponse
     */
    searchDentriesWithOptions(request: SearchDentriesRequest, headers: SearchDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<SearchDentriesResponse>;
    /**
     * 搜索文件
     *
     * @param request - SearchDentriesRequest
     * @returns SearchDentriesResponse
     */
    searchDentries(request: SearchDentriesRequest): Promise<SearchDentriesResponse>;
    /**
     * 搜索公开发布文件
     *
     * @param request - SearchPublishDentriesRequest
     * @param headers - SearchPublishDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchPublishDentriesResponse
     */
    searchPublishDentriesWithOptions(request: SearchPublishDentriesRequest, headers: SearchPublishDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<SearchPublishDentriesResponse>;
    /**
     * 搜索公开发布文件
     *
     * @param request - SearchPublishDentriesRequest
     * @returns SearchPublishDentriesResponse
     */
    searchPublishDentries(request: SearchPublishDentriesRequest): Promise<SearchPublishDentriesResponse>;
    /**
     * 搜索知识库
     *
     * @param request - SearchWorkspacesRequest
     * @param headers - SearchWorkspacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchWorkspacesResponse
     */
    searchWorkspacesWithOptions(request: SearchWorkspacesRequest, headers: SearchWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<SearchWorkspacesResponse>;
    /**
     * 搜索知识库
     *
     * @param request - SearchWorkspacesRequest
     * @returns SearchWorkspacesResponse
     */
    searchWorkspaces(request: SearchWorkspacesRequest): Promise<SearchWorkspacesResponse>;
    /**
     * 设置权限继承模式
     *
     * @param request - SetPermissionInheritanceRequest
     * @param headers - SetPermissionInheritanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetPermissionInheritanceResponse
     */
    setPermissionInheritanceWithOptions(dentryUuid: string, request: SetPermissionInheritanceRequest, headers: SetPermissionInheritanceHeaders, runtime: $Util.RuntimeOptions): Promise<SetPermissionInheritanceResponse>;
    /**
     * 设置权限继承模式
     *
     * @param request - SetPermissionInheritanceRequest
     * @returns SetPermissionInheritanceResponse
     */
    setPermissionInheritance(dentryUuid: string, request: SetPermissionInheritanceRequest): Promise<SetPermissionInheritanceResponse>;
    /**
     * 设置分享范围
     *
     * @param request - SetPermissionShareScopeRequest
     * @param headers - SetPermissionShareScopeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetPermissionShareScopeResponse
     */
    setPermissionShareScopeWithOptions(dentryUuid: string, request: SetPermissionShareScopeRequest, headers: SetPermissionShareScopeHeaders, runtime: $Util.RuntimeOptions): Promise<SetPermissionShareScopeResponse>;
    /**
     * 设置分享范围
     *
     * @param request - SetPermissionShareScopeRequest
     * @returns SetPermissionShareScopeResponse
     */
    setPermissionShareScope(dentryUuid: string, request: SetPermissionShareScopeRequest): Promise<SetPermissionShareScopeResponse>;
    /**
     * 修改权限
     *
     * @param request - UpdatePermissionRequest
     * @param headers - UpdatePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePermissionResponse
     */
    updatePermissionWithOptions(dentryUuid: string, request: UpdatePermissionRequest, headers: UpdatePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePermissionResponse>;
    /**
     * 修改权限
     *
     * @param request - UpdatePermissionRequest
     * @returns UpdatePermissionResponse
     */
    updatePermission(dentryUuid: string, request: UpdatePermissionRequest): Promise<UpdatePermissionResponse>;
}
