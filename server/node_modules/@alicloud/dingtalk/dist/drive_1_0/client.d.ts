/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddCustomSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    bizType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    identifier?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    permissionMode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSpaceResponseBody extends $tea.Model {
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCustomSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFileRequest extends $tea.Model {
    addConflictPolicy?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    mediaId?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFileResponseBody extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    modifier?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: AddPermissionRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    role?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponseBody extends $tea.Model {
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleFilesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    recycleType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRecycleFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyFileRequest extends $tea.Model {
    addConflictPolicy?: string;
    targetParentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyFileResponseBody extends $tea.Model {
    file?: CopyFileResponseBodyFile;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CopyFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deletePolicy?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFileResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFilesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deletePolicy?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFilesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    success?: boolean;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: DeletePermissionRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    role?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleFilesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    recycleItemIdList?: number[];
    /**
     * @remarks
     * This parameter is required.
     */
    recycleType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRecycleFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTaskInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTaskInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTaskInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    beginTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    endTime?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    failed?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    status?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    success?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncTaskInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAsyncTaskInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    withInternalResourceUrl?: boolean;
    withRegion?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadInfoResponseBody extends $tea.Model {
    downloadInfo?: GetDownloadInfoResponseBodyDownloadInfo;
    region?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDownloadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoResponseBody extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    modifier?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMySpaceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPreviewInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPreviewInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    version?: number;
    watermark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPreviewInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    info?: GetPreviewInfoResponseBodyInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPreviewInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPreviewInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrivilegeInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrivilegeInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrivilegeInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    types?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrivilegeInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPrivilegeInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQuotaInfosHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQuotaInfosRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    identifiers?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    type?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQuotaInfosResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    quotas?: GetQuotaInfosResponseBodyQuotas[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQuotaInfosResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetQuotaInfosResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadInfoRequest extends $tea.Model {
    addConflictPolicy?: string;
    callerRegion?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    md5?: string;
    mediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    withInternalEndPoint?: boolean;
    withRegion?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadInfoResponseBody extends $tea.Model {
    headerSignatureUploadInfo?: GetUploadInfoResponseBodyHeaderSignatureUploadInfo;
    region?: string;
    stsUploadInfo?: GetUploadInfoResponseBodyStsUploadInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUploadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantPrivilegeOfCustomSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantPrivilegeOfCustomSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    duration?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    type?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantPrivilegeOfCustomSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InfoSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InfoSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InfoSpaceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InfoSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InfoSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFilesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    orderType?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    withIcon?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFilesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    files?: ListFilesResponseBodyFiles[];
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: ListPermissionsResponseBodyMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    outMembers?: ListPermissionsResponseBodyOutMembers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleFilesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    orderType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    recycleType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleFilesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    recycleItems?: ListRecycleFilesResponseBodyRecycleItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListRecycleFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpacesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpacesResponseBody extends $tea.Model {
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaces?: ListSpacesResponseBodySpaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementBuyQuotaHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementBuyQuotaRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    order?: ManagementBuyQuotaRequestOrder;
    /**
     * @remarks
     * This parameter is required.
     */
    token?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementBuyQuotaResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementListSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementListSpacesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    spaceIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementListSpacesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    spaces?: ManagementListSpacesResponseBodySpaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementListSpacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ManagementListSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementModifySpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementModifySpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementModifySpaceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    spaces?: ManagementModifySpaceResponseBodySpaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementModifySpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ManagementModifySpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: ModifyPermissionRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    role?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFileRequest extends $tea.Model {
    addConflictPolicy?: string;
    targetParentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFileResponseBody extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    modifier?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MoveFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFilesRequest extends $tea.Model {
    addConflictPolicy?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileIds?: string[];
    targetParentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    targetSpaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFilesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    files?: MoveFilesResponseBodyFiles[];
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MoveFilesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecoverRecycleFilesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecoverRecycleFilesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    recycleItemIdList?: number[];
    /**
     * @remarks
     * This parameter is required.
     */
    recycleType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecoverRecycleFilesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameFileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    newFileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameFileResponseBody extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    modifier?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RenameFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPermissionRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyFileResponseBodyFile extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    fileId?: string;
    fileName?: string;
    filePath?: string;
    fileSize?: number;
    fileType?: string;
    modifier?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDownloadInfoResponseBodyDownloadInfo extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    expirationSeconds?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    headers?: {
        [key: string]: any;
    };
    internalResourceUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    resourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPreviewInfoResponseBodyInfo extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQuotaInfosResponseBodyQuotas extends $tea.Model {
    identifier?: string;
    quota?: number;
    type?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadInfoResponseBodyHeaderSignatureUploadInfo extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    expirationSeconds?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    headers?: {
        [key: string]: any;
    };
    internalResourceUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    mediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    resourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadInfoResponseBodyStsUploadInfo extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accessKeySecret?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accessToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    accessTokenExpirationMillis?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    bucket?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    endPoint?: string;
    internalEndPoint?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFilesResponseBodyFiles extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    icon?: string;
    modifier?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    thumbnail?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyMembersMember extends $tea.Model {
    corpId?: string;
    memberId?: string;
    memberName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    extend?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    member?: ListPermissionsResponseBodyMembersMember;
    /**
     * @remarks
     * This parameter is required.
     */
    role?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyOutMembersMember extends $tea.Model {
    corpId?: string;
    memberId?: string;
    memberName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPermissionsResponseBodyOutMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    extend?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    member?: ListPermissionsResponseBodyOutMembersMember;
    /**
     * @remarks
     * This parameter is required.
     */
    role?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecycleFilesResponseBodyRecycleItems extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deleteStaffId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    deleteTime?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    recycleItemId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpacesResponseBodySpaces extends $tea.Model {
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementBuyQuotaRequestOrder extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    bizType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    capacity?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    capacityType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    day?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    money?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementListSpacesResponseBodySpaces extends $tea.Model {
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManagementModifySpaceResponseBodySpaces extends $tea.Model {
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    permissionMode?: string;
    quota?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    spaceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPermissionRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveFilesResponseBodyFiles extends $tea.Model {
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    createTime?: string;
    creator?: string;
    fileExtension?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    filePath?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    fileType?: string;
    modifier?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    modifyTime?: string;
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 新建自定义空间
     *
     * @param request - AddCustomSpaceRequest
     * @param headers - AddCustomSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCustomSpaceResponse
     */
    addCustomSpaceWithOptions(request: AddCustomSpaceRequest, headers: AddCustomSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<AddCustomSpaceResponse>;
    /**
     * 新建自定义空间
     *
     * @param request - AddCustomSpaceRequest
     * @returns AddCustomSpaceResponse
     */
    addCustomSpace(request: AddCustomSpaceRequest): Promise<AddCustomSpaceResponse>;
    /**
     * 添加文件
     *
     * @param request - AddFileRequest
     * @param headers - AddFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddFileResponse
     */
    addFileWithOptions(spaceId: string, request: AddFileRequest, headers: AddFileHeaders, runtime: $Util.RuntimeOptions): Promise<AddFileResponse>;
    /**
     * 添加文件
     *
     * @param request - AddFileRequest
     * @returns AddFileResponse
     */
    addFile(spaceId: string, request: AddFileRequest): Promise<AddFileResponse>;
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @param headers - AddPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddPermissionResponse
     */
    addPermissionWithOptions(spaceId: string, fileId: string, request: AddPermissionRequest, headers: AddPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<AddPermissionResponse>;
    /**
     * 添加权限
     *
     * @param request - AddPermissionRequest
     * @returns AddPermissionResponse
     */
    addPermission(spaceId: string, fileId: string, request: AddPermissionRequest): Promise<AddPermissionResponse>;
    /**
     * 新建空间
     *
     * @param request - AddSpaceRequest
     * @param headers - AddSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddSpaceResponse
     */
    addSpaceWithOptions(request: AddSpaceRequest, headers: AddSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<AddSpaceResponse>;
    /**
     * 新建空间
     *
     * @param request - AddSpaceRequest
     * @returns AddSpaceResponse
     */
    addSpace(request: AddSpaceRequest): Promise<AddSpaceResponse>;
    /**
     * 清空回收站文件
     *
     * @param request - ClearRecycleFilesRequest
     * @param headers - ClearRecycleFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ClearRecycleFilesResponse
     */
    clearRecycleFilesWithOptions(request: ClearRecycleFilesRequest, headers: ClearRecycleFilesHeaders, runtime: $Util.RuntimeOptions): Promise<ClearRecycleFilesResponse>;
    /**
     * 清空回收站文件
     *
     * @param request - ClearRecycleFilesRequest
     * @returns ClearRecycleFilesResponse
     */
    clearRecycleFiles(request: ClearRecycleFilesRequest): Promise<ClearRecycleFilesResponse>;
    /**
     * 拷贝文件
     *
     * @param request - CopyFileRequest
     * @param headers - CopyFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyFileResponse
     */
    copyFileWithOptions(spaceId: string, fileId: string, request: CopyFileRequest, headers: CopyFileHeaders, runtime: $Util.RuntimeOptions): Promise<CopyFileResponse>;
    /**
     * 拷贝文件
     *
     * @param request - CopyFileRequest
     * @returns CopyFileResponse
     */
    copyFile(spaceId: string, fileId: string, request: CopyFileRequest): Promise<CopyFileResponse>;
    /**
     * 删除文件
     *
     * @param request - DeleteFileRequest
     * @param headers - DeleteFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteFileResponse
     */
    deleteFileWithOptions(spaceId: string, fileId: string, request: DeleteFileRequest, headers: DeleteFileHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteFileResponse>;
    /**
     * 删除文件
     *
     * @param request - DeleteFileRequest
     * @returns DeleteFileResponse
     */
    deleteFile(spaceId: string, fileId: string, request: DeleteFileRequest): Promise<DeleteFileResponse>;
    /**
     * 批量删除文件（夹）
     *
     * @param request - DeleteFilesRequest
     * @param headers - DeleteFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteFilesResponse
     */
    deleteFilesWithOptions(spaceId: string, request: DeleteFilesRequest, headers: DeleteFilesHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteFilesResponse>;
    /**
     * 批量删除文件（夹）
     *
     * @param request - DeleteFilesRequest
     * @returns DeleteFilesResponse
     */
    deleteFiles(spaceId: string, request: DeleteFilesRequest): Promise<DeleteFilesResponse>;
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @param headers - DeletePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeletePermissionResponse
     */
    deletePermissionWithOptions(spaceId: string, fileId: string, request: DeletePermissionRequest, headers: DeletePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePermissionResponse>;
    /**
     * 删除权限
     *
     * @param request - DeletePermissionRequest
     * @returns DeletePermissionResponse
     */
    deletePermission(spaceId: string, fileId: string, request: DeletePermissionRequest): Promise<DeletePermissionResponse>;
    /**
     * 彻底删除回收站文件
     *
     * @param request - DeleteRecycleFilesRequest
     * @param headers - DeleteRecycleFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRecycleFilesResponse
     */
    deleteRecycleFilesWithOptions(request: DeleteRecycleFilesRequest, headers: DeleteRecycleFilesHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRecycleFilesResponse>;
    /**
     * 彻底删除回收站文件
     *
     * @param request - DeleteRecycleFilesRequest
     * @returns DeleteRecycleFilesResponse
     */
    deleteRecycleFiles(request: DeleteRecycleFilesRequest): Promise<DeleteRecycleFilesResponse>;
    /**
     * 删除空间
     *
     * @param request - DeleteSpaceRequest
     * @param headers - DeleteSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteSpaceResponse
     */
    deleteSpaceWithOptions(spaceId: string, request: DeleteSpaceRequest, headers: DeleteSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSpaceResponse>;
    /**
     * 删除空间
     *
     * @param request - DeleteSpaceRequest
     * @returns DeleteSpaceResponse
     */
    deleteSpace(spaceId: string, request: DeleteSpaceRequest): Promise<DeleteSpaceResponse>;
    /**
     * 获取异步任务信息
     *
     * @param request - GetAsyncTaskInfoRequest
     * @param headers - GetAsyncTaskInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAsyncTaskInfoResponse
     */
    getAsyncTaskInfoWithOptions(taskId: string, request: GetAsyncTaskInfoRequest, headers: GetAsyncTaskInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetAsyncTaskInfoResponse>;
    /**
     * 获取异步任务信息
     *
     * @param request - GetAsyncTaskInfoRequest
     * @returns GetAsyncTaskInfoResponse
     */
    getAsyncTaskInfo(taskId: string, request: GetAsyncTaskInfoRequest): Promise<GetAsyncTaskInfoResponse>;
    /**
     * 获取下载信息
     *
     * @param request - GetDownloadInfoRequest
     * @param headers - GetDownloadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDownloadInfoResponse
     */
    getDownloadInfoWithOptions(spaceId: string, fileId: string, request: GetDownloadInfoRequest, headers: GetDownloadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetDownloadInfoResponse>;
    /**
     * 获取下载信息
     *
     * @param request - GetDownloadInfoRequest
     * @returns GetDownloadInfoResponse
     */
    getDownloadInfo(spaceId: string, fileId: string, request: GetDownloadInfoRequest): Promise<GetDownloadInfoResponse>;
    /**
     * 获取文件信息
     *
     * @param request - GetFileInfoRequest
     * @param headers - GetFileInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileInfoResponse
     */
    getFileInfoWithOptions(spaceId: string, fileId: string, request: GetFileInfoRequest, headers: GetFileInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileInfoResponse>;
    /**
     * 获取文件信息
     *
     * @param request - GetFileInfoRequest
     * @returns GetFileInfoResponse
     */
    getFileInfo(spaceId: string, fileId: string, request: GetFileInfoRequest): Promise<GetFileInfoResponse>;
    /**
     * 获取我的工作空间信息
     *
     * @param request - GetMySpaceInfoRequest
     * @param headers - GetMySpaceInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMySpaceInfoResponse
     */
    getMySpaceInfoWithOptions(request: GetMySpaceInfoRequest, headers: GetMySpaceInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetMySpaceInfoResponse>;
    /**
     * 获取我的工作空间信息
     *
     * @param request - GetMySpaceInfoRequest
     * @returns GetMySpaceInfoResponse
     */
    getMySpaceInfo(request: GetMySpaceInfoRequest): Promise<GetMySpaceInfoResponse>;
    /**
     * 获取预览信息
     *
     * @param request - GetPreviewInfoRequest
     * @param headers - GetPreviewInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPreviewInfoResponse
     */
    getPreviewInfoWithOptions(spaceId: string, fileId: string, request: GetPreviewInfoRequest, headers: GetPreviewInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPreviewInfoResponse>;
    /**
     * 获取预览信息
     *
     * @param request - GetPreviewInfoRequest
     * @returns GetPreviewInfoResponse
     */
    getPreviewInfo(spaceId: string, fileId: string, request: GetPreviewInfoRequest): Promise<GetPreviewInfoResponse>;
    /**
     * 获取权限点信息
     *
     * @param request - GetPrivilegeInfoRequest
     * @param headers - GetPrivilegeInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPrivilegeInfoResponse
     */
    getPrivilegeInfoWithOptions(spaceId: string, fileId: string, request: GetPrivilegeInfoRequest, headers: GetPrivilegeInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPrivilegeInfoResponse>;
    /**
     * 获取权限点信息
     *
     * @param request - GetPrivilegeInfoRequest
     * @returns GetPrivilegeInfoResponse
     */
    getPrivilegeInfo(spaceId: string, fileId: string, request: GetPrivilegeInfoRequest): Promise<GetPrivilegeInfoResponse>;
    /**
     * 获取容量信息列表
     *
     * @param request - GetQuotaInfosRequest
     * @param headers - GetQuotaInfosHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetQuotaInfosResponse
     */
    getQuotaInfosWithOptions(request: GetQuotaInfosRequest, headers: GetQuotaInfosHeaders, runtime: $Util.RuntimeOptions): Promise<GetQuotaInfosResponse>;
    /**
     * 获取容量信息列表
     *
     * @param request - GetQuotaInfosRequest
     * @returns GetQuotaInfosResponse
     */
    getQuotaInfos(request: GetQuotaInfosRequest): Promise<GetQuotaInfosResponse>;
    /**
     * 获取上传信息
     *
     * @param request - GetUploadInfoRequest
     * @param headers - GetUploadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUploadInfoResponse
     */
    getUploadInfoWithOptions(spaceId: string, parentId: string, request: GetUploadInfoRequest, headers: GetUploadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetUploadInfoResponse>;
    /**
     * 获取上传信息
     *
     * @param request - GetUploadInfoRequest
     * @returns GetUploadInfoResponse
     */
    getUploadInfo(spaceId: string, parentId: string, request: GetUploadInfoRequest): Promise<GetUploadInfoResponse>;
    /**
     * 添加自定义空间权限
     *
     * @param request - GrantPrivilegeOfCustomSpaceRequest
     * @param headers - GrantPrivilegeOfCustomSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GrantPrivilegeOfCustomSpaceResponse
     */
    grantPrivilegeOfCustomSpaceWithOptions(spaceId: string, request: GrantPrivilegeOfCustomSpaceRequest, headers: GrantPrivilegeOfCustomSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<GrantPrivilegeOfCustomSpaceResponse>;
    /**
     * 添加自定义空间权限
     *
     * @param request - GrantPrivilegeOfCustomSpaceRequest
     * @returns GrantPrivilegeOfCustomSpaceResponse
     */
    grantPrivilegeOfCustomSpace(spaceId: string, request: GrantPrivilegeOfCustomSpaceRequest): Promise<GrantPrivilegeOfCustomSpaceResponse>;
    /**
     * 获取空间信息
     *
     * @param request - InfoSpaceRequest
     * @param headers - InfoSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InfoSpaceResponse
     */
    infoSpaceWithOptions(spaceId: string, request: InfoSpaceRequest, headers: InfoSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<InfoSpaceResponse>;
    /**
     * 获取空间信息
     *
     * @param request - InfoSpaceRequest
     * @returns InfoSpaceResponse
     */
    infoSpace(spaceId: string, request: InfoSpaceRequest): Promise<InfoSpaceResponse>;
    /**
     * 获取文件列表
     *
     * @param request - ListFilesRequest
     * @param headers - ListFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListFilesResponse
     */
    listFilesWithOptions(spaceId: string, request: ListFilesRequest, headers: ListFilesHeaders, runtime: $Util.RuntimeOptions): Promise<ListFilesResponse>;
    /**
     * 获取文件列表
     *
     * @param request - ListFilesRequest
     * @returns ListFilesResponse
     */
    listFiles(spaceId: string, request: ListFilesRequest): Promise<ListFilesResponse>;
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @param headers - ListPermissionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPermissionsResponse
     */
    listPermissionsWithOptions(spaceId: string, fileId: string, request: ListPermissionsRequest, headers: ListPermissionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListPermissionsResponse>;
    /**
     * 获取权限列表
     *
     * @param request - ListPermissionsRequest
     * @returns ListPermissionsResponse
     */
    listPermissions(spaceId: string, fileId: string, request: ListPermissionsRequest): Promise<ListPermissionsResponse>;
    /**
     * 获取回收站文件列表
     *
     * @param request - ListRecycleFilesRequest
     * @param headers - ListRecycleFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRecycleFilesResponse
     */
    listRecycleFilesWithOptions(request: ListRecycleFilesRequest, headers: ListRecycleFilesHeaders, runtime: $Util.RuntimeOptions): Promise<ListRecycleFilesResponse>;
    /**
     * 获取回收站文件列表
     *
     * @param request - ListRecycleFilesRequest
     * @returns ListRecycleFilesResponse
     */
    listRecycleFiles(request: ListRecycleFilesRequest): Promise<ListRecycleFilesResponse>;
    /**
     * 获取空间列表
     *
     * @param request - ListSpacesRequest
     * @param headers - ListSpacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSpacesResponse
     */
    listSpacesWithOptions(request: ListSpacesRequest, headers: ListSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<ListSpacesResponse>;
    /**
     * 获取空间列表
     *
     * @param request - ListSpacesRequest
     * @returns ListSpacesResponse
     */
    listSpaces(request: ListSpacesRequest): Promise<ListSpacesResponse>;
    /**
     * 管理侧购买容量
     *
     * @param request - ManagementBuyQuotaRequest
     * @param headers - ManagementBuyQuotaHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ManagementBuyQuotaResponse
     */
    managementBuyQuotaWithOptions(request: ManagementBuyQuotaRequest, headers: ManagementBuyQuotaHeaders, runtime: $Util.RuntimeOptions): Promise<ManagementBuyQuotaResponse>;
    /**
     * 管理侧购买容量
     *
     * @param request - ManagementBuyQuotaRequest
     * @returns ManagementBuyQuotaResponse
     */
    managementBuyQuota(request: ManagementBuyQuotaRequest): Promise<ManagementBuyQuotaResponse>;
    /**
     * 管理侧获取空间列表
     *
     * @param request - ManagementListSpacesRequest
     * @param headers - ManagementListSpacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ManagementListSpacesResponse
     */
    managementListSpacesWithOptions(request: ManagementListSpacesRequest, headers: ManagementListSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<ManagementListSpacesResponse>;
    /**
     * 管理侧获取空间列表
     *
     * @param request - ManagementListSpacesRequest
     * @returns ManagementListSpacesResponse
     */
    managementListSpaces(request: ManagementListSpacesRequest): Promise<ManagementListSpacesResponse>;
    /**
     * 管理侧修改空间信息
     *
     * @param request - ManagementModifySpaceRequest
     * @param headers - ManagementModifySpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ManagementModifySpaceResponse
     */
    managementModifySpaceWithOptions(request: ManagementModifySpaceRequest, headers: ManagementModifySpaceHeaders, runtime: $Util.RuntimeOptions): Promise<ManagementModifySpaceResponse>;
    /**
     * 管理侧修改空间信息
     *
     * @param request - ManagementModifySpaceRequest
     * @returns ManagementModifySpaceResponse
     */
    managementModifySpace(request: ManagementModifySpaceRequest): Promise<ManagementModifySpaceResponse>;
    /**
     * 修改权限
     *
     * @param request - ModifyPermissionRequest
     * @param headers - ModifyPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ModifyPermissionResponse
     */
    modifyPermissionWithOptions(spaceId: string, fileId: string, request: ModifyPermissionRequest, headers: ModifyPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<ModifyPermissionResponse>;
    /**
     * 修改权限
     *
     * @param request - ModifyPermissionRequest
     * @returns ModifyPermissionResponse
     */
    modifyPermission(spaceId: string, fileId: string, request: ModifyPermissionRequest): Promise<ModifyPermissionResponse>;
    /**
     * 移动文件
     *
     * @param request - MoveFileRequest
     * @param headers - MoveFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveFileResponse
     */
    moveFileWithOptions(spaceId: string, fileId: string, request: MoveFileRequest, headers: MoveFileHeaders, runtime: $Util.RuntimeOptions): Promise<MoveFileResponse>;
    /**
     * 移动文件
     *
     * @param request - MoveFileRequest
     * @returns MoveFileResponse
     */
    moveFile(spaceId: string, fileId: string, request: MoveFileRequest): Promise<MoveFileResponse>;
    /**
     * 批量移动文件（夹）
     *
     * @param request - MoveFilesRequest
     * @param headers - MoveFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveFilesResponse
     */
    moveFilesWithOptions(spaceId: string, request: MoveFilesRequest, headers: MoveFilesHeaders, runtime: $Util.RuntimeOptions): Promise<MoveFilesResponse>;
    /**
     * 批量移动文件（夹）
     *
     * @param request - MoveFilesRequest
     * @returns MoveFilesResponse
     */
    moveFiles(spaceId: string, request: MoveFilesRequest): Promise<MoveFilesResponse>;
    /**
     * 还原回收站文件
     *
     * @param request - RecoverRecycleFilesRequest
     * @param headers - RecoverRecycleFilesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RecoverRecycleFilesResponse
     */
    recoverRecycleFilesWithOptions(request: RecoverRecycleFilesRequest, headers: RecoverRecycleFilesHeaders, runtime: $Util.RuntimeOptions): Promise<RecoverRecycleFilesResponse>;
    /**
     * 还原回收站文件
     *
     * @param request - RecoverRecycleFilesRequest
     * @returns RecoverRecycleFilesResponse
     */
    recoverRecycleFiles(request: RecoverRecycleFilesRequest): Promise<RecoverRecycleFilesResponse>;
    /**
     * 重命名文件
     *
     * @param request - RenameFileRequest
     * @param headers - RenameFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RenameFileResponse
     */
    renameFileWithOptions(spaceId: string, fileId: string, request: RenameFileRequest, headers: RenameFileHeaders, runtime: $Util.RuntimeOptions): Promise<RenameFileResponse>;
    /**
     * 重命名文件
     *
     * @param request - RenameFileRequest
     * @returns RenameFileResponse
     */
    renameFile(spaceId: string, fileId: string, request: RenameFileRequest): Promise<RenameFileResponse>;
}
