/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ResultItemsDentryAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentriesAppPropertiesValue extends $tea.Model {
    /**
     * @example
     * property_name
     */
    name?: string;
    /**
     * @example
     * property_value
     */
    value?: string;
    /**
     * @example
     * PRIVATE
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    option?: GetDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBody extends $tea.Model {
    resultItems?: GetDentriesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryRequest extends $tea.Model {
    option?: GetDentryRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBody extends $tea.Model {
    dentry?: GetDentryResponseBodyDentry;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponseBody extends $tea.Model {
    resultItems?: GetDentryThumbnailsResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentryThumbnailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoRequest extends $tea.Model {
    option?: GetFileDownloadInfoRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponseBody extends $tea.Model {
    headerSignatureInfo?: GetFileDownloadInfoResponseBodyHeaderSignatureInfo;
    /**
     * @example
     * HEADER_SIGNATURE
     */
    protocol?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileDownloadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * open_conversation_id
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBody extends $tea.Model {
    space?: GetSpaceResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesRequest extends $tea.Model {
    option?: ListAllDentriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBody extends $tea.Model {
    dentries?: ListAllDentriesResponseBodyDentries[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAllDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesRequest extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * DESC
     */
    order?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    orderBy?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBody extends $tea.Model {
    dentries?: ListDentriesResponseBodyDentries[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListExpiredHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListExpiredRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * open_conversation_id
     */
    openConversationId?: string;
    option?: ListExpiredRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListExpiredResponseBody extends $tea.Model {
    files?: ListExpiredResponseBodyFiles[];
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListExpiredResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListExpiredResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SPACE
     */
    scope?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * scope_id
     */
    scopeId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubscribeEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * SPACE
     */
    scope?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * scope_id
     */
    scopeId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnsubscribeEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesRequestOption extends $tea.Model {
    appIdsForAppProperties?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItemsDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItemsDentryThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItemsDentry extends $tea.Model {
    appProperties?: {
        [key: string]: ResultItemsDentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: GetDentriesResponseBodyResultItemsDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: GetDentriesResponseBodyResultItemsDentryThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentriesResponseBodyResultItems extends $tea.Model {
    dentry?: GetDentriesResponseBodyResultItemsDentry;
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryRequestOption extends $tea.Model {
    appIdsForAppProperties?: string[];
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentryProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentryThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryResponseBodyDentry extends $tea.Model {
    appProperties?: {
        [key: string]: DentryAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: GetDentryResponseBodyDentryProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: GetDentryResponseBodyDentryThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponseBodyResultItemsThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryThumbnailsResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * dentry_id
     */
    dentryId?: string;
    /**
     * @example
     * permissionDenied
     */
    errorCode?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * true
     */
    success?: boolean;
    thumbnail?: GetDentryThumbnailsResponseBodyResultItemsThumbnail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    preferIntranet?: boolean;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileDownloadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    /**
     * @example
     * 900
     */
    expirationSeconds?: number;
    headers?: {
        [key: string]: string;
    };
    internalResourceUrls?: string[];
    /**
     * @example
     * ZHANGJIAKOU
     */
    region?: string;
    resourceUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceResponseBodySpace extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesRequestOption extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * DESC
     */
    order?: string;
    /**
     * @example
     * true
     */
    withThumbnail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBodyDentriesProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBodyDentriesThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllDentriesResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: ListAllDentriesResponseBodyDentriesProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: ListAllDentriesResponseBodyDentriesThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentriesProperties extends $tea.Model {
    /**
     * @example
     * true
     */
    readOnly?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentriesThumbnail extends $tea.Model {
    /**
     * @example
     * 64
     */
    height?: number;
    /**
     * @example
     * url
     */
    url?: string;
    /**
     * @example
     * 64
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListDentriesResponseBodyDentries extends $tea.Model {
    appProperties?: {
        [key: string]: DentriesAppPropertiesValue[];
    };
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modifier_id
     */
    modifierId?: string;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * PUBLIC_OSS_PARTITION
     */
    partitionType?: string;
    /**
     * @example
     * dentry_path
     */
    path?: string;
    properties?: ListDentriesResponseBodyDentriesProperties;
    /**
     * @example
     * 512
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * DINGTALK
     */
    storageDriver?: string;
    thumbnail?: ListDentriesResponseBodyDentriesThumbnail;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListExpiredRequestOption extends $tea.Model {
    /**
     * @example
     * 30
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListExpiredResponseBodyFiles extends $tea.Model {
    /**
     * @example
     * open_conversation_id
     */
    conversationId?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * creator_id
     */
    creatorId?: string;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * file_id
     */
    id?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    /**
     * @example
     * modified_id
     */
    modifierId?: string;
    /**
     * @example
     * file_name
     */
    name?: string;
    /**
     * @example
     * parent_id
     */
    parentId?: string;
    /**
     * @example
     * file_path
     */
    path?: string;
    /**
     * @example
     * 256
     */
    size?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * file
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 三方个人应用批量获取文件或文件夹信息
     *
     * @param request - GetDentriesRequest
     * @param headers - GetDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentriesResponse
     */
    getDentriesWithOptions(spaceId: string, request: GetDentriesRequest, headers: GetDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentriesResponse>;
    /**
     * 三方个人应用批量获取文件或文件夹信息
     *
     * @param request - GetDentriesRequest
     * @returns GetDentriesResponse
     */
    getDentries(spaceId: string, request: GetDentriesRequest): Promise<GetDentriesResponse>;
    /**
     * 三方个人应用获取文件(夹)信息
     *
     * @param request - GetDentryRequest
     * @param headers - GetDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryResponse
     */
    getDentryWithOptions(spaceId: string, dentryId: string, request: GetDentryRequest, headers: GetDentryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryResponse>;
    /**
     * 三方个人应用获取文件(夹)信息
     *
     * @param request - GetDentryRequest
     * @returns GetDentryResponse
     */
    getDentry(spaceId: string, dentryId: string, request: GetDentryRequest): Promise<GetDentryResponse>;
    /**
     * 三方个人应用批量获取文件缩略图
     *
     * @param request - GetDentryThumbnailsRequest
     * @param headers - GetDentryThumbnailsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryThumbnailsResponse
     */
    getDentryThumbnailsWithOptions(spaceId: string, request: GetDentryThumbnailsRequest, headers: GetDentryThumbnailsHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryThumbnailsResponse>;
    /**
     * 三方个人应用批量获取文件缩略图
     *
     * @param request - GetDentryThumbnailsRequest
     * @returns GetDentryThumbnailsResponse
     */
    getDentryThumbnails(spaceId: string, request: GetDentryThumbnailsRequest): Promise<GetDentryThumbnailsResponse>;
    /**
     * 三方个人应用获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @param headers - GetFileDownloadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFileDownloadInfoResponse
     */
    getFileDownloadInfoWithOptions(spaceId: string, dentryId: string, request: GetFileDownloadInfoRequest, headers: GetFileDownloadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileDownloadInfoResponse>;
    /**
     * 三方个人应用获取文件下载信息
     *
     * @param request - GetFileDownloadInfoRequest
     * @returns GetFileDownloadInfoResponse
     */
    getFileDownloadInfo(spaceId: string, dentryId: string, request: GetFileDownloadInfoRequest): Promise<GetFileDownloadInfoResponse>;
    /**
     * 三方个人应用获取IM会话存储空间信息
     *
     * @param request - GetSpaceRequest
     * @param headers - GetSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSpaceResponse
     */
    getSpaceWithOptions(request: GetSpaceRequest, headers: GetSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceResponse>;
    /**
     * 三方个人应用获取IM会话存储空间信息
     *
     * @param request - GetSpaceRequest
     * @returns GetSpaceResponse
     */
    getSpace(request: GetSpaceRequest): Promise<GetSpaceResponse>;
    /**
     * 三方个人应用获取全部文件或文件夹列表
     *
     * @param request - ListAllDentriesRequest
     * @param headers - ListAllDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAllDentriesResponse
     */
    listAllDentriesWithOptions(spaceId: string, request: ListAllDentriesRequest, headers: ListAllDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<ListAllDentriesResponse>;
    /**
     * 三方个人应用获取全部文件或文件夹列表
     *
     * @param request - ListAllDentriesRequest
     * @returns ListAllDentriesResponse
     */
    listAllDentries(spaceId: string, request: ListAllDentriesRequest): Promise<ListAllDentriesResponse>;
    /**
     * 三方个人应用获取文件列表
     *
     * @param request - ListDentriesRequest
     * @param headers - ListDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDentriesResponse
     */
    listDentriesWithOptions(spaceId: string, request: ListDentriesRequest, headers: ListDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<ListDentriesResponse>;
    /**
     * 三方个人应用获取文件列表
     *
     * @param request - ListDentriesRequest
     * @returns ListDentriesResponse
     */
    listDentries(spaceId: string, request: ListDentriesRequest): Promise<ListDentriesResponse>;
    /**
     * 获取会话过期文件列表
     *
     * @param request - ListExpiredRequest
     * @param headers - ListExpiredHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListExpiredResponse
     */
    listExpiredWithOptions(request: ListExpiredRequest, headers: ListExpiredHeaders, runtime: $Util.RuntimeOptions): Promise<ListExpiredResponse>;
    /**
     * 获取会话过期文件列表
     *
     * @param request - ListExpiredRequest
     * @returns ListExpiredResponse
     */
    listExpired(request: ListExpiredRequest): Promise<ListExpiredResponse>;
    /**
     * 三方个人应用订阅文件变更事件
     *
     * @param request - SubscribeEventRequest
     * @param headers - SubscribeEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubscribeEventResponse
     */
    subscribeEventWithOptions(request: SubscribeEventRequest, headers: SubscribeEventHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeEventResponse>;
    /**
     * 三方个人应用订阅文件变更事件
     *
     * @param request - SubscribeEventRequest
     * @returns SubscribeEventResponse
     */
    subscribeEvent(request: SubscribeEventRequest): Promise<SubscribeEventResponse>;
    /**
     * 三方个人应用取消订阅文件变更事件
     *
     * @param request - UnsubscribeEventRequest
     * @param headers - UnsubscribeEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnsubscribeEventResponse
     */
    unsubscribeEventWithOptions(request: UnsubscribeEventRequest, headers: UnsubscribeEventHeaders, runtime: $Util.RuntimeOptions): Promise<UnsubscribeEventResponse>;
    /**
     * 三方个人应用取消订阅文件变更事件
     *
     * @param request - UnsubscribeEventRequest
     * @returns UnsubscribeEventResponse
     */
    unsubscribeEvent(request: UnsubscribeEventRequest): Promise<UnsubscribeEventResponse>;
}
