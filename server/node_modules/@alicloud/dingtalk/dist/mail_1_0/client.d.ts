/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user@yourcompany.org
     */
    email?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    employeeType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * password
     */
    password?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserResponseBody extends $tea.Model {
    email?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMailFoldersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMailFoldersRequest extends $tea.Model {
    folderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMailFoldersResponseBody extends $tea.Model {
    folders?: ListMailFoldersResponseBodyFolders[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMailFoldersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListMailFoldersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMailFoldersResponseBodyFolders extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    childFolderCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    displayName?: string;
    extensions?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    parentFolderId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    totalItemCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    unreadItemCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 创建企业邮箱用户
     *
     * @param request - CreateUserRequest
     * @param headers - CreateUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateUserResponse
     */
    createUserWithOptions(request: CreateUserRequest, headers: CreateUserHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUserResponse>;
    /**
     * 创建企业邮箱用户
     *
     * @param request - CreateUserRequest
     * @returns CreateUserResponse
     */
    createUser(request: CreateUserRequest): Promise<CreateUserResponse>;
    /**
     * 获取指定文件夹的子文件夹列表
     *
     * @param request - ListMailFoldersRequest
     * @param headers - ListMailFoldersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMailFoldersResponse
     */
    listMailFoldersWithOptions(email: string, request: ListMailFoldersRequest, headers: ListMailFoldersHeaders, runtime: $Util.RuntimeOptions): Promise<ListMailFoldersResponse>;
    /**
     * 获取指定文件夹的子文件夹列表
     *
     * @param request - ListMailFoldersRequest
     * @returns ListMailFoldersResponse
     */
    listMailFolders(email: string, request: ListMailFoldersRequest): Promise<ListMailFoldersResponse>;
}
