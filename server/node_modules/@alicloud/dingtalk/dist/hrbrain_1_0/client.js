"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HrbrainDeleteWorkExpRequest = exports.HrbrainDeleteWorkExpHeaders = exports.HrbrainDeleteTransferEvalResponse = exports.HrbrainDeleteTransferEvalResponseBody = exports.HrbrainDeleteTransferEvalRequest = exports.HrbrainDeleteTransferEvalHeaders = exports.HrbrainDeleteRegistResponse = exports.HrbrainDeleteRegistResponseBody = exports.HrbrainDeleteRegistRequest = exports.HrbrainDeleteRegistHeaders = exports.HrbrainDeletePunDetailResponse = exports.HrbrainDeletePunDetailResponseBody = exports.HrbrainDeletePunDetailRequest = exports.HrbrainDeletePunDetailHeaders = exports.HrbrainDeletePromRecordsResponse = exports.HrbrainDeletePromRecordsResponseBody = exports.HrbrainDeletePromRecordsRequest = exports.HrbrainDeletePromRecordsHeaders = exports.HrbrainDeletePerfEvalResponse = exports.HrbrainDeletePerfEvalResponseBody = exports.HrbrainDeletePerfEvalRequest = exports.HrbrainDeletePerfEvalHeaders = exports.HrbrainDeleteLabelProfSkillResponse = exports.HrbrainDeleteLabelProfSkillResponseBody = exports.HrbrainDeleteLabelProfSkillRequest = exports.HrbrainDeleteLabelProfSkillHeaders = exports.HrbrainDeleteLabelInventoryResponse = exports.HrbrainDeleteLabelInventoryResponseBody = exports.HrbrainDeleteLabelInventoryRequest = exports.HrbrainDeleteLabelInventoryHeaders = exports.HrbrainDeleteLabelIndustryResponse = exports.HrbrainDeleteLabelIndustryResponseBody = exports.HrbrainDeleteLabelIndustryRequest = exports.HrbrainDeleteLabelIndustryHeaders = exports.HrbrainDeleteEmpInfoResponse = exports.HrbrainDeleteEmpInfoResponseBody = exports.HrbrainDeleteEmpInfoRequest = exports.HrbrainDeleteEmpInfoHeaders = exports.HrbrainDeleteEduExpResponse = exports.HrbrainDeleteEduExpResponseBody = exports.HrbrainDeleteEduExpRequest = exports.HrbrainDeleteEduExpHeaders = exports.HrbrainDeleteDimissionResponse = exports.HrbrainDeleteDimissionResponseBody = exports.HrbrainDeleteDimissionRequest = exports.HrbrainDeleteDimissionHeaders = exports.HrbrainDeleteAwardRecordsResponse = exports.HrbrainDeleteAwardRecordsResponseBody = exports.HrbrainDeleteAwardRecordsRequest = exports.HrbrainDeleteAwardRecordsHeaders = void 0;
exports.HrbrainImportPerfEvalResponse = exports.HrbrainImportPerfEvalResponseBody = exports.HrbrainImportPerfEvalRequest = exports.HrbrainImportPerfEvalHeaders = exports.HrbrainImportLabelProfSkillResponse = exports.HrbrainImportLabelProfSkillResponseBody = exports.HrbrainImportLabelProfSkillRequest = exports.HrbrainImportLabelProfSkillHeaders = exports.HrbrainImportLabelInventoryResponse = exports.HrbrainImportLabelInventoryResponseBody = exports.HrbrainImportLabelInventoryRequest = exports.HrbrainImportLabelInventoryHeaders = exports.HrbrainImportLabelIndustryResponse = exports.HrbrainImportLabelIndustryResponseBody = exports.HrbrainImportLabelIndustryRequest = exports.HrbrainImportLabelIndustryHeaders = exports.HrbrainImportLabelCustomResponse = exports.HrbrainImportLabelCustomResponseBody = exports.HrbrainImportLabelCustomRequest = exports.HrbrainImportLabelCustomHeaders = exports.HrbrainImportLabelBaseResponse = exports.HrbrainImportLabelBaseResponseBody = exports.HrbrainImportLabelBaseRequest = exports.HrbrainImportLabelBaseHeaders = exports.HrbrainImportEmpInfoResponse = exports.HrbrainImportEmpInfoResponseBody = exports.HrbrainImportEmpInfoRequest = exports.HrbrainImportEmpInfoHeaders = exports.HrbrainImportEduExpResponse = exports.HrbrainImportEduExpResponseBody = exports.HrbrainImportEduExpRequest = exports.HrbrainImportEduExpHeaders = exports.HrbrainImportDimissionResponse = exports.HrbrainImportDimissionResponseBody = exports.HrbrainImportDimissionRequest = exports.HrbrainImportDimissionHeaders = exports.HrbrainImportDeptInfoResponse = exports.HrbrainImportDeptInfoResponseBody = exports.HrbrainImportDeptInfoRequest = exports.HrbrainImportDeptInfoHeaders = exports.HrbrainImportAwardDetailResponse = exports.HrbrainImportAwardDetailResponseBody = exports.HrbrainImportAwardDetailRequest = exports.HrbrainImportAwardDetailHeaders = exports.HrbrainDeletetLabelBaseResponse = exports.HrbrainDeletetLabelBaseResponseBody = exports.HrbrainDeletetLabelBaseRequest = exports.HrbrainDeletetLabelBaseHeaders = exports.HrbrainDeleteWorkExpResponse = exports.HrbrainDeleteWorkExpResponseBody = void 0;
exports.HrbrainImportLabelIndustryRequestBody = exports.HrbrainImportLabelCustomRequestBody = exports.HrbrainImportLabelBaseRequestBody = exports.HrbrainImportEmpInfoRequestBody = exports.HrbrainImportEduExpRequestBody = exports.HrbrainImportDimissionRequestBody = exports.HrbrainImportDeptInfoRequestBody = exports.HrbrainImportAwardDetailRequestBody = exports.HrbrainDeletetLabelBaseRequestParams = exports.HrbrainDeleteWorkExpRequestParams = exports.HrbrainDeleteTransferEvalRequestParams = exports.HrbrainDeleteRegistRequestParams = exports.HrbrainDeletePunDetailRequestParams = exports.HrbrainDeletePromRecordsRequestParams = exports.HrbrainDeletePerfEvalRequestParams = exports.HrbrainDeleteLabelProfSkillRequestParams = exports.HrbrainDeleteLabelInventoryRequestParams = exports.HrbrainDeleteLabelIndustryRequestParams = exports.HrbrainDeleteEmpInfoRequestParams = exports.HrbrainDeleteEduExpRequestParams = exports.HrbrainDeleteDimissionRequestParams = exports.HrbrainDeleteAwardRecordsRequestParams = exports.SyncDataResponse = exports.SyncDataResponseBody = exports.SyncDataRequest = exports.SyncDataHeaders = exports.StaffLabelRecordsQueryResponse = exports.StaffLabelRecordsQueryResponseBody = exports.StaffLabelRecordsQueryRequest = exports.StaffLabelRecordsQueryHeaders = exports.HrbrainImportWorkExpResponse = exports.HrbrainImportWorkExpResponseBody = exports.HrbrainImportWorkExpRequest = exports.HrbrainImportWorkExpHeaders = exports.HrbrainImportTransferEvalResponse = exports.HrbrainImportTransferEvalResponseBody = exports.HrbrainImportTransferEvalRequest = exports.HrbrainImportTransferEvalHeaders = exports.HrbrainImportRegistResponse = exports.HrbrainImportRegistResponseBody = exports.HrbrainImportRegistRequest = exports.HrbrainImportRegistHeaders = exports.HrbrainImportPunDetailResponse = exports.HrbrainImportPunDetailResponseBody = exports.HrbrainImportPunDetailRequest = exports.HrbrainImportPunDetailHeaders = exports.HrbrainImportPromEvalResponse = exports.HrbrainImportPromEvalResponseBody = exports.HrbrainImportPromEvalRequest = exports.HrbrainImportPromEvalHeaders = void 0;
exports.StaffLabelRecordsQueryResponseBodyContent = exports.StaffLabelRecordsQueryResponseBodyContentData = exports.StaffLabelRecordsQueryResponseBodyContentDataLabels = exports.StaffLabelRecordsQueryResponseBodyContentDataLabelsOptions = exports.StaffLabelRecordsQueryRequestBody = exports.StaffLabelRecordsQueryRequestBodyLabels = exports.HrbrainImportWorkExpRequestBody = exports.HrbrainImportTransferEvalRequestBody = exports.HrbrainImportRegistRequestBody = exports.HrbrainImportPunDetailRequestBody = exports.HrbrainImportPromEvalRequestBody = exports.HrbrainImportPerfEvalRequestBody = exports.HrbrainImportLabelProfSkillRequestBody = exports.HrbrainImportLabelInventoryRequestBody = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class HrbrainDeleteAwardRecordsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteAwardRecordsHeaders = HrbrainDeleteAwardRecordsHeaders;
class HrbrainDeleteAwardRecordsRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteAwardRecordsRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteAwardRecordsRequest = HrbrainDeleteAwardRecordsRequest;
class HrbrainDeleteAwardRecordsResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteAwardRecordsResponseBody = HrbrainDeleteAwardRecordsResponseBody;
class HrbrainDeleteAwardRecordsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteAwardRecordsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteAwardRecordsResponse = HrbrainDeleteAwardRecordsResponse;
class HrbrainDeleteDimissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteDimissionHeaders = HrbrainDeleteDimissionHeaders;
class HrbrainDeleteDimissionRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteDimissionRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteDimissionRequest = HrbrainDeleteDimissionRequest;
class HrbrainDeleteDimissionResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteDimissionResponseBody = HrbrainDeleteDimissionResponseBody;
class HrbrainDeleteDimissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteDimissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteDimissionResponse = HrbrainDeleteDimissionResponse;
class HrbrainDeleteEduExpHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEduExpHeaders = HrbrainDeleteEduExpHeaders;
class HrbrainDeleteEduExpRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteEduExpRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEduExpRequest = HrbrainDeleteEduExpRequest;
class HrbrainDeleteEduExpResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEduExpResponseBody = HrbrainDeleteEduExpResponseBody;
class HrbrainDeleteEduExpResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteEduExpResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEduExpResponse = HrbrainDeleteEduExpResponse;
class HrbrainDeleteEmpInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEmpInfoHeaders = HrbrainDeleteEmpInfoHeaders;
class HrbrainDeleteEmpInfoRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteEmpInfoRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEmpInfoRequest = HrbrainDeleteEmpInfoRequest;
class HrbrainDeleteEmpInfoResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEmpInfoResponseBody = HrbrainDeleteEmpInfoResponseBody;
class HrbrainDeleteEmpInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteEmpInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEmpInfoResponse = HrbrainDeleteEmpInfoResponse;
class HrbrainDeleteLabelIndustryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelIndustryHeaders = HrbrainDeleteLabelIndustryHeaders;
class HrbrainDeleteLabelIndustryRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteLabelIndustryRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelIndustryRequest = HrbrainDeleteLabelIndustryRequest;
class HrbrainDeleteLabelIndustryResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelIndustryResponseBody = HrbrainDeleteLabelIndustryResponseBody;
class HrbrainDeleteLabelIndustryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteLabelIndustryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelIndustryResponse = HrbrainDeleteLabelIndustryResponse;
class HrbrainDeleteLabelInventoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelInventoryHeaders = HrbrainDeleteLabelInventoryHeaders;
class HrbrainDeleteLabelInventoryRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteLabelInventoryRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelInventoryRequest = HrbrainDeleteLabelInventoryRequest;
class HrbrainDeleteLabelInventoryResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelInventoryResponseBody = HrbrainDeleteLabelInventoryResponseBody;
class HrbrainDeleteLabelInventoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteLabelInventoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelInventoryResponse = HrbrainDeleteLabelInventoryResponse;
class HrbrainDeleteLabelProfSkillHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelProfSkillHeaders = HrbrainDeleteLabelProfSkillHeaders;
class HrbrainDeleteLabelProfSkillRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteLabelProfSkillRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelProfSkillRequest = HrbrainDeleteLabelProfSkillRequest;
class HrbrainDeleteLabelProfSkillResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelProfSkillResponseBody = HrbrainDeleteLabelProfSkillResponseBody;
class HrbrainDeleteLabelProfSkillResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteLabelProfSkillResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelProfSkillResponse = HrbrainDeleteLabelProfSkillResponse;
class HrbrainDeletePerfEvalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePerfEvalHeaders = HrbrainDeletePerfEvalHeaders;
class HrbrainDeletePerfEvalRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeletePerfEvalRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePerfEvalRequest = HrbrainDeletePerfEvalRequest;
class HrbrainDeletePerfEvalResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePerfEvalResponseBody = HrbrainDeletePerfEvalResponseBody;
class HrbrainDeletePerfEvalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeletePerfEvalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePerfEvalResponse = HrbrainDeletePerfEvalResponse;
class HrbrainDeletePromRecordsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePromRecordsHeaders = HrbrainDeletePromRecordsHeaders;
class HrbrainDeletePromRecordsRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeletePromRecordsRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePromRecordsRequest = HrbrainDeletePromRecordsRequest;
class HrbrainDeletePromRecordsResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePromRecordsResponseBody = HrbrainDeletePromRecordsResponseBody;
class HrbrainDeletePromRecordsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeletePromRecordsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePromRecordsResponse = HrbrainDeletePromRecordsResponse;
class HrbrainDeletePunDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePunDetailHeaders = HrbrainDeletePunDetailHeaders;
class HrbrainDeletePunDetailRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeletePunDetailRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePunDetailRequest = HrbrainDeletePunDetailRequest;
class HrbrainDeletePunDetailResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePunDetailResponseBody = HrbrainDeletePunDetailResponseBody;
class HrbrainDeletePunDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeletePunDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePunDetailResponse = HrbrainDeletePunDetailResponse;
class HrbrainDeleteRegistHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteRegistHeaders = HrbrainDeleteRegistHeaders;
class HrbrainDeleteRegistRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteRegistRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteRegistRequest = HrbrainDeleteRegistRequest;
class HrbrainDeleteRegistResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteRegistResponseBody = HrbrainDeleteRegistResponseBody;
class HrbrainDeleteRegistResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteRegistResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteRegistResponse = HrbrainDeleteRegistResponse;
class HrbrainDeleteTransferEvalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteTransferEvalHeaders = HrbrainDeleteTransferEvalHeaders;
class HrbrainDeleteTransferEvalRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteTransferEvalRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteTransferEvalRequest = HrbrainDeleteTransferEvalRequest;
class HrbrainDeleteTransferEvalResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteTransferEvalResponseBody = HrbrainDeleteTransferEvalResponseBody;
class HrbrainDeleteTransferEvalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteTransferEvalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteTransferEvalResponse = HrbrainDeleteTransferEvalResponse;
class HrbrainDeleteWorkExpHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteWorkExpHeaders = HrbrainDeleteWorkExpHeaders;
class HrbrainDeleteWorkExpRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeleteWorkExpRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteWorkExpRequest = HrbrainDeleteWorkExpRequest;
class HrbrainDeleteWorkExpResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteWorkExpResponseBody = HrbrainDeleteWorkExpResponseBody;
class HrbrainDeleteWorkExpResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeleteWorkExpResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteWorkExpResponse = HrbrainDeleteWorkExpResponse;
class HrbrainDeletetLabelBaseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletetLabelBaseHeaders = HrbrainDeletetLabelBaseHeaders;
class HrbrainDeletetLabelBaseRequest extends $tea.Model {
    static names() {
        return {
            params: 'params',
        };
    }
    static types() {
        return {
            params: { 'type': 'array', 'itemType': HrbrainDeletetLabelBaseRequestParams },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletetLabelBaseRequest = HrbrainDeletetLabelBaseRequest;
class HrbrainDeletetLabelBaseResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletetLabelBaseResponseBody = HrbrainDeletetLabelBaseResponseBody;
class HrbrainDeletetLabelBaseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainDeletetLabelBaseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletetLabelBaseResponse = HrbrainDeletetLabelBaseResponse;
class HrbrainImportAwardDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportAwardDetailHeaders = HrbrainImportAwardDetailHeaders;
class HrbrainImportAwardDetailRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportAwardDetailRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportAwardDetailRequest = HrbrainImportAwardDetailRequest;
class HrbrainImportAwardDetailResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportAwardDetailResponseBody = HrbrainImportAwardDetailResponseBody;
class HrbrainImportAwardDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportAwardDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportAwardDetailResponse = HrbrainImportAwardDetailResponse;
class HrbrainImportDeptInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDeptInfoHeaders = HrbrainImportDeptInfoHeaders;
class HrbrainImportDeptInfoRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportDeptInfoRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDeptInfoRequest = HrbrainImportDeptInfoRequest;
class HrbrainImportDeptInfoResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDeptInfoResponseBody = HrbrainImportDeptInfoResponseBody;
class HrbrainImportDeptInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportDeptInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDeptInfoResponse = HrbrainImportDeptInfoResponse;
class HrbrainImportDimissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDimissionHeaders = HrbrainImportDimissionHeaders;
class HrbrainImportDimissionRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportDimissionRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDimissionRequest = HrbrainImportDimissionRequest;
class HrbrainImportDimissionResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDimissionResponseBody = HrbrainImportDimissionResponseBody;
class HrbrainImportDimissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportDimissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDimissionResponse = HrbrainImportDimissionResponse;
class HrbrainImportEduExpHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEduExpHeaders = HrbrainImportEduExpHeaders;
class HrbrainImportEduExpRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportEduExpRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEduExpRequest = HrbrainImportEduExpRequest;
class HrbrainImportEduExpResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEduExpResponseBody = HrbrainImportEduExpResponseBody;
class HrbrainImportEduExpResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportEduExpResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEduExpResponse = HrbrainImportEduExpResponse;
class HrbrainImportEmpInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEmpInfoHeaders = HrbrainImportEmpInfoHeaders;
class HrbrainImportEmpInfoRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportEmpInfoRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEmpInfoRequest = HrbrainImportEmpInfoRequest;
class HrbrainImportEmpInfoResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEmpInfoResponseBody = HrbrainImportEmpInfoResponseBody;
class HrbrainImportEmpInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportEmpInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEmpInfoResponse = HrbrainImportEmpInfoResponse;
class HrbrainImportLabelBaseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelBaseHeaders = HrbrainImportLabelBaseHeaders;
class HrbrainImportLabelBaseRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportLabelBaseRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelBaseRequest = HrbrainImportLabelBaseRequest;
class HrbrainImportLabelBaseResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelBaseResponseBody = HrbrainImportLabelBaseResponseBody;
class HrbrainImportLabelBaseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportLabelBaseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelBaseResponse = HrbrainImportLabelBaseResponse;
class HrbrainImportLabelCustomHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelCustomHeaders = HrbrainImportLabelCustomHeaders;
class HrbrainImportLabelCustomRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportLabelCustomRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelCustomRequest = HrbrainImportLabelCustomRequest;
class HrbrainImportLabelCustomResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelCustomResponseBody = HrbrainImportLabelCustomResponseBody;
class HrbrainImportLabelCustomResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportLabelCustomResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelCustomResponse = HrbrainImportLabelCustomResponse;
class HrbrainImportLabelIndustryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelIndustryHeaders = HrbrainImportLabelIndustryHeaders;
class HrbrainImportLabelIndustryRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportLabelIndustryRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelIndustryRequest = HrbrainImportLabelIndustryRequest;
class HrbrainImportLabelIndustryResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelIndustryResponseBody = HrbrainImportLabelIndustryResponseBody;
class HrbrainImportLabelIndustryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportLabelIndustryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelIndustryResponse = HrbrainImportLabelIndustryResponse;
class HrbrainImportLabelInventoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelInventoryHeaders = HrbrainImportLabelInventoryHeaders;
class HrbrainImportLabelInventoryRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportLabelInventoryRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelInventoryRequest = HrbrainImportLabelInventoryRequest;
class HrbrainImportLabelInventoryResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelInventoryResponseBody = HrbrainImportLabelInventoryResponseBody;
class HrbrainImportLabelInventoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportLabelInventoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelInventoryResponse = HrbrainImportLabelInventoryResponse;
class HrbrainImportLabelProfSkillHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelProfSkillHeaders = HrbrainImportLabelProfSkillHeaders;
class HrbrainImportLabelProfSkillRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportLabelProfSkillRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelProfSkillRequest = HrbrainImportLabelProfSkillRequest;
class HrbrainImportLabelProfSkillResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelProfSkillResponseBody = HrbrainImportLabelProfSkillResponseBody;
class HrbrainImportLabelProfSkillResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportLabelProfSkillResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelProfSkillResponse = HrbrainImportLabelProfSkillResponse;
class HrbrainImportPerfEvalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPerfEvalHeaders = HrbrainImportPerfEvalHeaders;
class HrbrainImportPerfEvalRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportPerfEvalRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPerfEvalRequest = HrbrainImportPerfEvalRequest;
class HrbrainImportPerfEvalResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPerfEvalResponseBody = HrbrainImportPerfEvalResponseBody;
class HrbrainImportPerfEvalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportPerfEvalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPerfEvalResponse = HrbrainImportPerfEvalResponse;
class HrbrainImportPromEvalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPromEvalHeaders = HrbrainImportPromEvalHeaders;
class HrbrainImportPromEvalRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportPromEvalRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPromEvalRequest = HrbrainImportPromEvalRequest;
class HrbrainImportPromEvalResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPromEvalResponseBody = HrbrainImportPromEvalResponseBody;
class HrbrainImportPromEvalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportPromEvalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPromEvalResponse = HrbrainImportPromEvalResponse;
class HrbrainImportPunDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPunDetailHeaders = HrbrainImportPunDetailHeaders;
class HrbrainImportPunDetailRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportPunDetailRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPunDetailRequest = HrbrainImportPunDetailRequest;
class HrbrainImportPunDetailResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPunDetailResponseBody = HrbrainImportPunDetailResponseBody;
class HrbrainImportPunDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportPunDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPunDetailResponse = HrbrainImportPunDetailResponse;
class HrbrainImportRegistHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportRegistHeaders = HrbrainImportRegistHeaders;
class HrbrainImportRegistRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportRegistRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportRegistRequest = HrbrainImportRegistRequest;
class HrbrainImportRegistResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportRegistResponseBody = HrbrainImportRegistResponseBody;
class HrbrainImportRegistResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportRegistResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportRegistResponse = HrbrainImportRegistResponse;
class HrbrainImportTransferEvalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportTransferEvalHeaders = HrbrainImportTransferEvalHeaders;
class HrbrainImportTransferEvalRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportTransferEvalRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportTransferEvalRequest = HrbrainImportTransferEvalRequest;
class HrbrainImportTransferEvalResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportTransferEvalResponseBody = HrbrainImportTransferEvalResponseBody;
class HrbrainImportTransferEvalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportTransferEvalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportTransferEvalResponse = HrbrainImportTransferEvalResponse;
class HrbrainImportWorkExpHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportWorkExpHeaders = HrbrainImportWorkExpHeaders;
class HrbrainImportWorkExpRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': HrbrainImportWorkExpRequestBody },
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportWorkExpRequest = HrbrainImportWorkExpRequest;
class HrbrainImportWorkExpResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportWorkExpResponseBody = HrbrainImportWorkExpResponseBody;
class HrbrainImportWorkExpResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HrbrainImportWorkExpResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportWorkExpResponse = HrbrainImportWorkExpResponse;
class StaffLabelRecordsQueryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryHeaders = StaffLabelRecordsQueryHeaders;
class StaffLabelRecordsQueryRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            dingCorpId: 'dingCorpId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': StaffLabelRecordsQueryRequestBody },
            dingCorpId: 'string',
            maxResults: 'number',
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryRequest = StaffLabelRecordsQueryRequest;
class StaffLabelRecordsQueryResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            content: StaffLabelRecordsQueryResponseBodyContent,
            requestId: 'string',
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryResponseBody = StaffLabelRecordsQueryResponseBody;
class StaffLabelRecordsQueryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StaffLabelRecordsQueryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryResponse = StaffLabelRecordsQueryResponse;
class SyncDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncDataHeaders = SyncDataHeaders;
class SyncDataRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            dataId: 'dataId',
            etlTime: 'etlTime',
            projectId: 'projectId',
            schemaId: 'schemaId',
        };
    }
    static types() {
        return {
            content: 'string',
            dataId: 'string',
            etlTime: 'string',
            projectId: 'string',
            schemaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncDataRequest = SyncDataRequest;
class SyncDataResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncDataResponseBody = SyncDataResponseBody;
class SyncDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SyncDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncDataResponse = SyncDataResponse;
class HrbrainDeleteAwardRecordsRequestParams extends $tea.Model {
    static names() {
        return {
            awardDate: 'awardDate',
            awardName: 'awardName',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            awardDate: 'string',
            awardName: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteAwardRecordsRequestParams = HrbrainDeleteAwardRecordsRequestParams;
class HrbrainDeleteDimissionRequestParams extends $tea.Model {
    static names() {
        return {
            dimissionDate: 'dimissionDate',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            dimissionDate: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteDimissionRequestParams = HrbrainDeleteDimissionRequestParams;
class HrbrainDeleteEduExpRequestParams extends $tea.Model {
    static names() {
        return {
            eduName: 'eduName',
            endDate: 'endDate',
            schoolName: 'schoolName',
            startDate: 'startDate',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            eduName: 'string',
            endDate: 'string',
            schoolName: 'string',
            startDate: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEduExpRequestParams = HrbrainDeleteEduExpRequestParams;
class HrbrainDeleteEmpInfoRequestParams extends $tea.Model {
    static names() {
        return {
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteEmpInfoRequestParams = HrbrainDeleteEmpInfoRequestParams;
class HrbrainDeleteLabelIndustryRequestParams extends $tea.Model {
    static names() {
        return {
            label: 'label',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            label: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelIndustryRequestParams = HrbrainDeleteLabelIndustryRequestParams;
class HrbrainDeleteLabelInventoryRequestParams extends $tea.Model {
    static names() {
        return {
            label: 'label',
            period: 'period',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            label: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            period: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelInventoryRequestParams = HrbrainDeleteLabelInventoryRequestParams;
class HrbrainDeleteLabelProfSkillRequestParams extends $tea.Model {
    static names() {
        return {
            label: 'label',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            label: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteLabelProfSkillRequestParams = HrbrainDeleteLabelProfSkillRequestParams;
class HrbrainDeletePerfEvalRequestParams extends $tea.Model {
    static names() {
        return {
            perfPlanName: 'perfPlanName',
            period: 'period',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            perfPlanName: 'string',
            period: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePerfEvalRequestParams = HrbrainDeletePerfEvalRequestParams;
class HrbrainDeletePromRecordsRequestParams extends $tea.Model {
    static names() {
        return {
            awardDate: 'awardDate',
            awardName: 'awardName',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            awardDate: 'string',
            awardName: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePromRecordsRequestParams = HrbrainDeletePromRecordsRequestParams;
class HrbrainDeletePunDetailRequestParams extends $tea.Model {
    static names() {
        return {
            effectiveDate: 'effectiveDate',
            punName: 'punName',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            effectiveDate: 'string',
            punName: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletePunDetailRequestParams = HrbrainDeletePunDetailRequestParams;
class HrbrainDeleteRegistRequestParams extends $tea.Model {
    static names() {
        return {
            registDate: 'registDate',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            registDate: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteRegistRequestParams = HrbrainDeleteRegistRequestParams;
class HrbrainDeleteTransferEvalRequestParams extends $tea.Model {
    static names() {
        return {
            transferDate: 'transferDate',
            transferType: 'transferType',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            transferDate: 'string',
            transferType: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteTransferEvalRequestParams = HrbrainDeleteTransferEvalRequestParams;
class HrbrainDeleteWorkExpRequestParams extends $tea.Model {
    static names() {
        return {
            companyName: 'companyName',
            endDate: 'endDate',
            startDate: 'startDate',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            companyName: 'string',
            endDate: 'string',
            startDate: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeleteWorkExpRequestParams = HrbrainDeleteWorkExpRequestParams;
class HrbrainDeletetLabelBaseRequestParams extends $tea.Model {
    static names() {
        return {
            label: 'label',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            label: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainDeletetLabelBaseRequestParams = HrbrainDeletetLabelBaseRequestParams;
class HrbrainImportAwardDetailRequestBody extends $tea.Model {
    static names() {
        return {
            awardDate: 'awardDate',
            awardName: 'awardName',
            awardOrg: 'awardOrg',
            awardType: 'awardType',
            comment: 'comment',
            extendInfo: 'extendInfo',
            name: 'name',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            awardDate: 'string',
            awardName: 'string',
            awardOrg: 'string',
            awardType: 'string',
            comment: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportAwardDetailRequestBody = HrbrainImportAwardDetailRequestBody;
class HrbrainImportDeptInfoRequestBody extends $tea.Model {
    static names() {
        return {
            createDate: 'createDate',
            deptName: 'deptName',
            deptNo: 'deptNo',
            effectiveDate: 'effectiveDate',
            extendInfo: 'extendInfo',
            isEffective: 'isEffective',
            superDeptName: 'superDeptName',
            superDeptNo: 'superDeptNo',
            superEmpId: 'superEmpId',
            superName: 'superName',
        };
    }
    static types() {
        return {
            createDate: 'string',
            deptName: 'string',
            deptNo: 'string',
            effectiveDate: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            isEffective: 'string',
            superDeptName: 'string',
            superDeptNo: 'string',
            superEmpId: 'string',
            superName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDeptInfoRequestBody = HrbrainImportDeptInfoRequestBody;
class HrbrainImportDimissionRequestBody extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            deptNo: 'deptNo',
            dimissionDate: 'dimissionDate',
            dimissionReaasonDesc: 'dimissionReaasonDesc',
            dimissionReason: 'dimissionReason',
            empType: 'empType',
            extendInfo: 'extendInfo',
            jobCodeName: 'jobCodeName',
            jobLevel: 'jobLevel',
            name: 'name',
            postName: 'postName',
            superName: 'superName',
            workLocAddr: 'workLocAddr',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            deptName: 'string',
            deptNo: 'string',
            dimissionDate: 'string',
            dimissionReaasonDesc: 'string',
            dimissionReason: 'string',
            empType: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            jobCodeName: 'string',
            jobLevel: 'string',
            name: 'string',
            postName: 'string',
            superName: 'string',
            workLocAddr: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportDimissionRequestBody = HrbrainImportDimissionRequestBody;
class HrbrainImportEduExpRequestBody extends $tea.Model {
    static names() {
        return {
            eduName: 'eduName',
            endDate: 'endDate',
            extendInfo: 'extendInfo',
            major: 'major',
            name: 'name',
            schoolName: 'schoolName',
            startDate: 'startDate',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            eduName: 'string',
            endDate: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            major: 'string',
            name: 'string',
            schoolName: 'string',
            startDate: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEduExpRequestBody = HrbrainImportEduExpRequestBody;
class HrbrainImportEmpInfoRequestBody extends $tea.Model {
    static names() {
        return {
            birthday: 'birthday',
            deptName: 'deptName',
            deptNo: 'deptNo',
            dimissionDate: 'dimissionDate',
            empSource: 'empSource',
            empStatus: 'empStatus',
            empType: 'empType',
            extendInfo: 'extendInfo',
            gender: 'gender',
            highestDegree: 'highestDegree',
            highestEduName: 'highestEduName',
            isDimission: 'isDimission',
            jobCodeName: 'jobCodeName',
            jobLevel: 'jobLevel',
            lastSchoolName: 'lastSchoolName',
            marriage: 'marriage',
            name: 'name',
            nation: 'nation',
            nationCtry: 'nationCtry',
            politicalStatus: 'politicalStatus',
            postName: 'postName',
            registDate: 'registDate',
            regularDate: 'regularDate',
            superEmpId: 'superEmpId',
            superName: 'superName',
            workEmail: 'workEmail',
            workLocAddr: 'workLocAddr',
            workLocCity: 'workLocCity',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            birthday: 'string',
            deptName: 'string',
            deptNo: 'string',
            dimissionDate: 'string',
            empSource: 'string',
            empStatus: 'string',
            empType: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            gender: 'string',
            highestDegree: 'string',
            highestEduName: 'string',
            isDimission: 'string',
            jobCodeName: 'string',
            jobLevel: 'string',
            lastSchoolName: 'string',
            marriage: 'string',
            name: 'string',
            nation: 'string',
            nationCtry: 'string',
            politicalStatus: 'string',
            postName: 'string',
            registDate: 'string',
            regularDate: 'string',
            superEmpId: 'string',
            superName: 'string',
            workEmail: 'string',
            workLocAddr: 'string',
            workLocCity: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportEmpInfoRequestBody = HrbrainImportEmpInfoRequestBody;
class HrbrainImportLabelBaseRequestBody extends $tea.Model {
    static names() {
        return {
            extendInfo: 'extendInfo',
            name: 'name',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelBaseRequestBody = HrbrainImportLabelBaseRequestBody;
class HrbrainImportLabelCustomRequestBody extends $tea.Model {
    static names() {
        return {
            extendInfo: 'extendInfo',
            name: 'name',
            tag: 'tag',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            tag: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelCustomRequestBody = HrbrainImportLabelCustomRequestBody;
class HrbrainImportLabelIndustryRequestBody extends $tea.Model {
    static names() {
        return {
            extendInfo: 'extendInfo',
            level1: 'level1',
            level2: 'level2',
            level3: 'level3',
            name: 'name',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            level1: 'string',
            level2: 'string',
            level3: 'string',
            name: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelIndustryRequestBody = HrbrainImportLabelIndustryRequestBody;
class HrbrainImportLabelInventoryRequestBody extends $tea.Model {
    static names() {
        return {
            extendInfo: 'extendInfo',
            name: 'name',
            period: 'period',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            period: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelInventoryRequestBody = HrbrainImportLabelInventoryRequestBody;
class HrbrainImportLabelProfSkillRequestBody extends $tea.Model {
    static names() {
        return {
            extendInfo: 'extendInfo',
            level1: 'level1',
            level2: 'level2',
            level3: 'level3',
            name: 'name',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            level1: 'string',
            level2: 'string',
            level3: 'string',
            name: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportLabelProfSkillRequestBody = HrbrainImportLabelProfSkillRequestBody;
class HrbrainImportPerfEvalRequestBody extends $tea.Model {
    static names() {
        return {
            comment: 'comment',
            extendInfo: 'extendInfo',
            name: 'name',
            perfCate: 'perfCate',
            perfPlanName: 'perfPlanName',
            perfScore: 'perfScore',
            period: 'period',
            periodEndDate: 'periodEndDate',
            periodStartDate: 'periodStartDate',
            score: 'score',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            comment: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            perfCate: 'string',
            perfPlanName: 'string',
            perfScore: 'string',
            period: 'string',
            periodEndDate: 'string',
            periodStartDate: 'string',
            score: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPerfEvalRequestBody = HrbrainImportPerfEvalRequestBody;
class HrbrainImportPromEvalRequestBody extends $tea.Model {
    static names() {
        return {
            comment: 'comment',
            effectiveDate: 'effectiveDate',
            extendInfo: 'extendInfo',
            name: 'name',
            newJobLevel: 'newJobLevel',
            period: 'period',
            periodEndDate: 'periodEndDate',
            periodStartDate: 'periodStartDate',
            preJobLevel: 'preJobLevel',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            comment: 'string',
            effectiveDate: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            newJobLevel: 'string',
            period: 'string',
            periodEndDate: 'string',
            periodStartDate: 'string',
            preJobLevel: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPromEvalRequestBody = HrbrainImportPromEvalRequestBody;
class HrbrainImportPunDetailRequestBody extends $tea.Model {
    static names() {
        return {
            comment: 'comment',
            effectiveDate: 'effectiveDate',
            extendInfo: 'extendInfo',
            name: 'name',
            punName: 'punName',
            punOrg: 'punOrg',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            comment: 'string',
            effectiveDate: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            punName: 'string',
            punOrg: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportPunDetailRequestBody = HrbrainImportPunDetailRequestBody;
class HrbrainImportRegistRequestBody extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            deptNo: 'deptNo',
            empSource: 'empSource',
            empType: 'empType',
            extendInfo: 'extendInfo',
            jobCodeName: 'jobCodeName',
            jobLevel: 'jobLevel',
            name: 'name',
            postName: 'postName',
            registDate: 'registDate',
            superName: 'superName',
            workLocAddr: 'workLocAddr',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            deptName: 'string',
            deptNo: 'string',
            empSource: 'string',
            empType: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            jobCodeName: 'string',
            jobLevel: 'string',
            name: 'string',
            postName: 'string',
            registDate: 'string',
            superName: 'string',
            workLocAddr: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportRegistRequestBody = HrbrainImportRegistRequestBody;
class HrbrainImportTransferEvalRequestBody extends $tea.Model {
    static names() {
        return {
            currInfo: 'currInfo',
            extendInfo: 'extendInfo',
            name: 'name',
            preInfo: 'preInfo',
            transferDate: 'transferDate',
            transferReason: 'transferReason',
            transferType: 'transferType',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            currInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            preInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            transferDate: 'string',
            transferReason: 'string',
            transferType: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportTransferEvalRequestBody = HrbrainImportTransferEvalRequestBody;
class HrbrainImportWorkExpRequestBody extends $tea.Model {
    static names() {
        return {
            companyName: 'companyName',
            endDate: 'endDate',
            extendInfo: 'extendInfo',
            jobDesc: 'jobDesc',
            name: 'name',
            postName: 'postName',
            startDate: 'startDate',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            companyName: 'string',
            endDate: 'string',
            extendInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            jobDesc: 'string',
            name: 'string',
            postName: 'string',
            startDate: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HrbrainImportWorkExpRequestBody = HrbrainImportWorkExpRequestBody;
class StaffLabelRecordsQueryRequestBodyLabels extends $tea.Model {
    static names() {
        return {
            code: 'code',
            typeCode: 'typeCode',
        };
    }
    static types() {
        return {
            code: 'string',
            typeCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryRequestBodyLabels = StaffLabelRecordsQueryRequestBodyLabels;
class StaffLabelRecordsQueryRequestBody extends $tea.Model {
    static names() {
        return {
            labels: 'labels',
            userId: 'userId',
        };
    }
    static types() {
        return {
            labels: { 'type': 'array', 'itemType': StaffLabelRecordsQueryRequestBodyLabels },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryRequestBody = StaffLabelRecordsQueryRequestBody;
class StaffLabelRecordsQueryResponseBodyContentDataLabelsOptions extends $tea.Model {
    static names() {
        return {
            label: 'label',
            tip: 'tip',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            tip: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryResponseBodyContentDataLabelsOptions = StaffLabelRecordsQueryResponseBodyContentDataLabelsOptions;
class StaffLabelRecordsQueryResponseBodyContentDataLabels extends $tea.Model {
    static names() {
        return {
            code: 'code',
            guid: 'guid',
            name: 'name',
            options: 'options',
            typeCode: 'typeCode',
            typeName: 'typeName',
            value: 'value',
        };
    }
    static types() {
        return {
            code: 'string',
            guid: 'string',
            name: 'string',
            options: { 'type': 'array', 'itemType': StaffLabelRecordsQueryResponseBodyContentDataLabelsOptions },
            typeCode: 'string',
            typeName: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryResponseBodyContentDataLabels = StaffLabelRecordsQueryResponseBodyContentDataLabels;
class StaffLabelRecordsQueryResponseBodyContentData extends $tea.Model {
    static names() {
        return {
            labels: 'labels',
            userId: 'userId',
        };
    }
    static types() {
        return {
            labels: { 'type': 'array', 'itemType': StaffLabelRecordsQueryResponseBodyContentDataLabels },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryResponseBodyContentData = StaffLabelRecordsQueryResponseBodyContentData;
class StaffLabelRecordsQueryResponseBodyContent extends $tea.Model {
    static names() {
        return {
            data: 'data',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            totalCountt: 'totalCountt',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': StaffLabelRecordsQueryResponseBodyContentData },
            maxResults: 'number',
            nextToken: 'string',
            totalCountt: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StaffLabelRecordsQueryResponseBodyContent = StaffLabelRecordsQueryResponseBodyContent;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 删除奖励记录
     *
     * @param request - HrbrainDeleteAwardRecordsRequest
     * @param headers - HrbrainDeleteAwardRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteAwardRecordsResponse
     */
    async hrbrainDeleteAwardRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteAwardRecords",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/awardRecords/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteAwardRecordsResponse({}));
    }
    /**
     * 删除奖励记录
     *
     * @param request - HrbrainDeleteAwardRecordsRequest
     * @returns HrbrainDeleteAwardRecordsResponse
     */
    async hrbrainDeleteAwardRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteAwardRecordsHeaders({});
        return await this.hrbrainDeleteAwardRecordsWithOptions(request, headers, runtime);
    }
    /**
     * 删除离职记录
     *
     * @param request - HrbrainDeleteDimissionRequest
     * @param headers - HrbrainDeleteDimissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteDimissionResponse
     */
    async hrbrainDeleteDimissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteDimission",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/dimissionInfos/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteDimissionResponse({}));
    }
    /**
     * 删除离职记录
     *
     * @param request - HrbrainDeleteDimissionRequest
     * @returns HrbrainDeleteDimissionResponse
     */
    async hrbrainDeleteDimission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteDimissionHeaders({});
        return await this.hrbrainDeleteDimissionWithOptions(request, headers, runtime);
    }
    /**
     * 删除教育经历
     *
     * @param request - HrbrainDeleteEduExpRequest
     * @param headers - HrbrainDeleteEduExpHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteEduExpResponse
     */
    async hrbrainDeleteEduExpWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteEduExp",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/eduExperiences/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteEduExpResponse({}));
    }
    /**
     * 删除教育经历
     *
     * @param request - HrbrainDeleteEduExpRequest
     * @returns HrbrainDeleteEduExpResponse
     */
    async hrbrainDeleteEduExp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteEduExpHeaders({});
        return await this.hrbrainDeleteEduExpWithOptions(request, headers, runtime);
    }
    /**
     * 删除人员信息
     *
     * @param request - HrbrainDeleteEmpInfoRequest
     * @param headers - HrbrainDeleteEmpInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteEmpInfoResponse
     */
    async hrbrainDeleteEmpInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteEmpInfo",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/empInfos/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteEmpInfoResponse({}));
    }
    /**
     * 删除人员信息
     *
     * @param request - HrbrainDeleteEmpInfoRequest
     * @returns HrbrainDeleteEmpInfoResponse
     */
    async hrbrainDeleteEmpInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteEmpInfoHeaders({});
        return await this.hrbrainDeleteEmpInfoWithOptions(request, headers, runtime);
    }
    /**
     * 删除领域经验
     *
     * @param request - HrbrainDeleteLabelIndustryRequest
     * @param headers - HrbrainDeleteLabelIndustryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteLabelIndustryResponse
     */
    async hrbrainDeleteLabelIndustryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteLabelIndustry",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/industries/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteLabelIndustryResponse({}));
    }
    /**
     * 删除领域经验
     *
     * @param request - HrbrainDeleteLabelIndustryRequest
     * @returns HrbrainDeleteLabelIndustryResponse
     */
    async hrbrainDeleteLabelIndustry(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteLabelIndustryHeaders({});
        return await this.hrbrainDeleteLabelIndustryWithOptions(request, headers, runtime);
    }
    /**
     * 删除盘点数据
     *
     * @param request - HrbrainDeleteLabelInventoryRequest
     * @param headers - HrbrainDeleteLabelInventoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteLabelInventoryResponse
     */
    async hrbrainDeleteLabelInventoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteLabelInventory",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/inventories/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteLabelInventoryResponse({}));
    }
    /**
     * 删除盘点数据
     *
     * @param request - HrbrainDeleteLabelInventoryRequest
     * @returns HrbrainDeleteLabelInventoryResponse
     */
    async hrbrainDeleteLabelInventory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteLabelInventoryHeaders({});
        return await this.hrbrainDeleteLabelInventoryWithOptions(request, headers, runtime);
    }
    /**
     * 删除专业技能
     *
     * @param request - HrbrainDeleteLabelProfSkillRequest
     * @param headers - HrbrainDeleteLabelProfSkillHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteLabelProfSkillResponse
     */
    async hrbrainDeleteLabelProfSkillWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteLabelProfSkill",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/profSkills/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteLabelProfSkillResponse({}));
    }
    /**
     * 删除专业技能
     *
     * @param request - HrbrainDeleteLabelProfSkillRequest
     * @returns HrbrainDeleteLabelProfSkillResponse
     */
    async hrbrainDeleteLabelProfSkill(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteLabelProfSkillHeaders({});
        return await this.hrbrainDeleteLabelProfSkillWithOptions(request, headers, runtime);
    }
    /**
     * 删除绩效记录
     *
     * @param request - HrbrainDeletePerfEvalRequest
     * @param headers - HrbrainDeletePerfEvalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeletePerfEvalResponse
     */
    async hrbrainDeletePerfEvalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeletePerfEval",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/perfRecords/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeletePerfEvalResponse({}));
    }
    /**
     * 删除绩效记录
     *
     * @param request - HrbrainDeletePerfEvalRequest
     * @returns HrbrainDeletePerfEvalResponse
     */
    async hrbrainDeletePerfEval(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeletePerfEvalHeaders({});
        return await this.hrbrainDeletePerfEvalWithOptions(request, headers, runtime);
    }
    /**
     * 数据集成晋升记录删除
     *
     * @param request - HrbrainDeletePromRecordsRequest
     * @param headers - HrbrainDeletePromRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeletePromRecordsResponse
     */
    async hrbrainDeletePromRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeletePromRecords",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/promEvals/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeletePromRecordsResponse({}));
    }
    /**
     * 数据集成晋升记录删除
     *
     * @param request - HrbrainDeletePromRecordsRequest
     * @returns HrbrainDeletePromRecordsResponse
     */
    async hrbrainDeletePromRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeletePromRecordsHeaders({});
        return await this.hrbrainDeletePromRecordsWithOptions(request, headers, runtime);
    }
    /**
     * 删除处分记录
     *
     * @param request - HrbrainDeletePunDetailRequest
     * @param headers - HrbrainDeletePunDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeletePunDetailResponse
     */
    async hrbrainDeletePunDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeletePunDetail",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/punDetails/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeletePunDetailResponse({}));
    }
    /**
     * 删除处分记录
     *
     * @param request - HrbrainDeletePunDetailRequest
     * @returns HrbrainDeletePunDetailResponse
     */
    async hrbrainDeletePunDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeletePunDetailHeaders({});
        return await this.hrbrainDeletePunDetailWithOptions(request, headers, runtime);
    }
    /**
     * 删除入职记录
     *
     * @param request - HrbrainDeleteRegistRequest
     * @param headers - HrbrainDeleteRegistHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteRegistResponse
     */
    async hrbrainDeleteRegistWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteRegist",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/registerInfos/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteRegistResponse({}));
    }
    /**
     * 删除入职记录
     *
     * @param request - HrbrainDeleteRegistRequest
     * @returns HrbrainDeleteRegistResponse
     */
    async hrbrainDeleteRegist(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteRegistHeaders({});
        return await this.hrbrainDeleteRegistWithOptions(request, headers, runtime);
    }
    /**
     * 删除调岗记录
     *
     * @param request - HrbrainDeleteTransferEvalRequest
     * @param headers - HrbrainDeleteTransferEvalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteTransferEvalResponse
     */
    async hrbrainDeleteTransferEvalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteTransferEval",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/changeRecords/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteTransferEvalResponse({}));
    }
    /**
     * 删除调岗记录
     *
     * @param request - HrbrainDeleteTransferEvalRequest
     * @returns HrbrainDeleteTransferEvalResponse
     */
    async hrbrainDeleteTransferEval(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteTransferEvalHeaders({});
        return await this.hrbrainDeleteTransferEvalWithOptions(request, headers, runtime);
    }
    /**
     * 删除工作经历
     *
     * @param request - HrbrainDeleteWorkExpRequest
     * @param headers - HrbrainDeleteWorkExpHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeleteWorkExpResponse
     */
    async hrbrainDeleteWorkExpWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeleteWorkExp",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/workExperiences/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeleteWorkExpResponse({}));
    }
    /**
     * 删除工作经历
     *
     * @param request - HrbrainDeleteWorkExpRequest
     * @returns HrbrainDeleteWorkExpResponse
     */
    async hrbrainDeleteWorkExp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeleteWorkExpHeaders({});
        return await this.hrbrainDeleteWorkExpWithOptions(request, headers, runtime);
    }
    /**
     * 删除标签数据
     *
     * @param request - HrbrainDeletetLabelBaseRequest
     * @param headers - HrbrainDeletetLabelBaseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainDeletetLabelBaseResponse
     */
    async hrbrainDeletetLabelBaseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.params)) {
            body["params"] = request.params;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainDeletetLabelBase",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/baseLabels/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainDeletetLabelBaseResponse({}));
    }
    /**
     * 删除标签数据
     *
     * @param request - HrbrainDeletetLabelBaseRequest
     * @returns HrbrainDeletetLabelBaseResponse
     */
    async hrbrainDeletetLabelBase(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainDeletetLabelBaseHeaders({});
        return await this.hrbrainDeletetLabelBaseWithOptions(request, headers, runtime);
    }
    /**
     * 集成奖励记录
     *
     * @param request - HrbrainImportAwardDetailRequest
     * @param headers - HrbrainImportAwardDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportAwardDetailResponse
     */
    async hrbrainImportAwardDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportAwardDetail",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/awardDetails/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportAwardDetailResponse({}));
    }
    /**
     * 集成奖励记录
     *
     * @param request - HrbrainImportAwardDetailRequest
     * @returns HrbrainImportAwardDetailResponse
     */
    async hrbrainImportAwardDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportAwardDetailHeaders({});
        return await this.hrbrainImportAwardDetailWithOptions(request, headers, runtime);
    }
    /**
     * 集成组织架构
     *
     * @param request - HrbrainImportDeptInfoRequest
     * @param headers - HrbrainImportDeptInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportDeptInfoResponse
     */
    async hrbrainImportDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportDeptInfo",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/deptInfos/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportDeptInfoResponse({}));
    }
    /**
     * 集成组织架构
     *
     * @param request - HrbrainImportDeptInfoRequest
     * @returns HrbrainImportDeptInfoResponse
     */
    async hrbrainImportDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportDeptInfoHeaders({});
        return await this.hrbrainImportDeptInfoWithOptions(request, headers, runtime);
    }
    /**
     * 集成离职信息
     *
     * @param request - HrbrainImportDimissionRequest
     * @param headers - HrbrainImportDimissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportDimissionResponse
     */
    async hrbrainImportDimissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportDimission",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/dimissionInfos/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportDimissionResponse({}));
    }
    /**
     * 集成离职信息
     *
     * @param request - HrbrainImportDimissionRequest
     * @returns HrbrainImportDimissionResponse
     */
    async hrbrainImportDimission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportDimissionHeaders({});
        return await this.hrbrainImportDimissionWithOptions(request, headers, runtime);
    }
    /**
     * 集成教育经历
     *
     * @param request - HrbrainImportEduExpRequest
     * @param headers - HrbrainImportEduExpHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportEduExpResponse
     */
    async hrbrainImportEduExpWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportEduExp",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/eduExperiences/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportEduExpResponse({}));
    }
    /**
     * 集成教育经历
     *
     * @param request - HrbrainImportEduExpRequest
     * @returns HrbrainImportEduExpResponse
     */
    async hrbrainImportEduExp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportEduExpHeaders({});
        return await this.hrbrainImportEduExpWithOptions(request, headers, runtime);
    }
    /**
     * 集成人员信息
     *
     * @param request - HrbrainImportEmpInfoRequest
     * @param headers - HrbrainImportEmpInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportEmpInfoResponse
     */
    async hrbrainImportEmpInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportEmpInfo",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/empInfos/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportEmpInfoResponse({}));
    }
    /**
     * 集成人员信息
     *
     * @param request - HrbrainImportEmpInfoRequest
     * @returns HrbrainImportEmpInfoResponse
     */
    async hrbrainImportEmpInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportEmpInfoHeaders({});
        return await this.hrbrainImportEmpInfoWithOptions(request, headers, runtime);
    }
    /**
     * 集成基础标签
     *
     * @param request - HrbrainImportLabelBaseRequest
     * @param headers - HrbrainImportLabelBaseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportLabelBaseResponse
     */
    async hrbrainImportLabelBaseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportLabelBase",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/baseLabels/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportLabelBaseResponse({}));
    }
    /**
     * 集成基础标签
     *
     * @param request - HrbrainImportLabelBaseRequest
     * @returns HrbrainImportLabelBaseResponse
     */
    async hrbrainImportLabelBase(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportLabelBaseHeaders({});
        return await this.hrbrainImportLabelBaseWithOptions(request, headers, runtime);
    }
    /**
     * 集成自定义标签
     *
     * @param request - HrbrainImportLabelCustomRequest
     * @param headers - HrbrainImportLabelCustomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportLabelCustomResponse
     */
    async hrbrainImportLabelCustomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportLabelCustom",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/customLabels/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportLabelCustomResponse({}));
    }
    /**
     * 集成自定义标签
     *
     * @param request - HrbrainImportLabelCustomRequest
     * @returns HrbrainImportLabelCustomResponse
     */
    async hrbrainImportLabelCustom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportLabelCustomHeaders({});
        return await this.hrbrainImportLabelCustomWithOptions(request, headers, runtime);
    }
    /**
     * 集成领域经验
     *
     * @param request - HrbrainImportLabelIndustryRequest
     * @param headers - HrbrainImportLabelIndustryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportLabelIndustryResponse
     */
    async hrbrainImportLabelIndustryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportLabelIndustry",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/industries/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportLabelIndustryResponse({}));
    }
    /**
     * 集成领域经验
     *
     * @param request - HrbrainImportLabelIndustryRequest
     * @returns HrbrainImportLabelIndustryResponse
     */
    async hrbrainImportLabelIndustry(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportLabelIndustryHeaders({});
        return await this.hrbrainImportLabelIndustryWithOptions(request, headers, runtime);
    }
    /**
     * 集成盘点数据
     *
     * @param request - HrbrainImportLabelInventoryRequest
     * @param headers - HrbrainImportLabelInventoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportLabelInventoryResponse
     */
    async hrbrainImportLabelInventoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportLabelInventory",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/inventories/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportLabelInventoryResponse({}));
    }
    /**
     * 集成盘点数据
     *
     * @param request - HrbrainImportLabelInventoryRequest
     * @returns HrbrainImportLabelInventoryResponse
     */
    async hrbrainImportLabelInventory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportLabelInventoryHeaders({});
        return await this.hrbrainImportLabelInventoryWithOptions(request, headers, runtime);
    }
    /**
     * 集成专业技能
     *
     * @param request - HrbrainImportLabelProfSkillRequest
     * @param headers - HrbrainImportLabelProfSkillHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportLabelProfSkillResponse
     */
    async hrbrainImportLabelProfSkillWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportLabelProfSkill",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/profSkills/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportLabelProfSkillResponse({}));
    }
    /**
     * 集成专业技能
     *
     * @param request - HrbrainImportLabelProfSkillRequest
     * @returns HrbrainImportLabelProfSkillResponse
     */
    async hrbrainImportLabelProfSkill(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportLabelProfSkillHeaders({});
        return await this.hrbrainImportLabelProfSkillWithOptions(request, headers, runtime);
    }
    /**
     * 集成绩效记录
     *
     * @param request - HrbrainImportPerfEvalRequest
     * @param headers - HrbrainImportPerfEvalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportPerfEvalResponse
     */
    async hrbrainImportPerfEvalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportPerfEval",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/perfRecords/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportPerfEvalResponse({}));
    }
    /**
     * 集成绩效记录
     *
     * @param request - HrbrainImportPerfEvalRequest
     * @returns HrbrainImportPerfEvalResponse
     */
    async hrbrainImportPerfEval(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportPerfEvalHeaders({});
        return await this.hrbrainImportPerfEvalWithOptions(request, headers, runtime);
    }
    /**
     * 集成晋升记录
     *
     * @param request - HrbrainImportPromEvalRequest
     * @param headers - HrbrainImportPromEvalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportPromEvalResponse
     */
    async hrbrainImportPromEvalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportPromEval",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/promRecords/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportPromEvalResponse({}));
    }
    /**
     * 集成晋升记录
     *
     * @param request - HrbrainImportPromEvalRequest
     * @returns HrbrainImportPromEvalResponse
     */
    async hrbrainImportPromEval(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportPromEvalHeaders({});
        return await this.hrbrainImportPromEvalWithOptions(request, headers, runtime);
    }
    /**
     * 集成处分记录
     *
     * @param request - HrbrainImportPunDetailRequest
     * @param headers - HrbrainImportPunDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportPunDetailResponse
     */
    async hrbrainImportPunDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportPunDetail",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/punDetails/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportPunDetailResponse({}));
    }
    /**
     * 集成处分记录
     *
     * @param request - HrbrainImportPunDetailRequest
     * @returns HrbrainImportPunDetailResponse
     */
    async hrbrainImportPunDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportPunDetailHeaders({});
        return await this.hrbrainImportPunDetailWithOptions(request, headers, runtime);
    }
    /**
     * 集成入职信息
     *
     * @param request - HrbrainImportRegistRequest
     * @param headers - HrbrainImportRegistHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportRegistResponse
     */
    async hrbrainImportRegistWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportRegist",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/registerInfos/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportRegistResponse({}));
    }
    /**
     * 集成入职信息
     *
     * @param request - HrbrainImportRegistRequest
     * @returns HrbrainImportRegistResponse
     */
    async hrbrainImportRegist(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportRegistHeaders({});
        return await this.hrbrainImportRegistWithOptions(request, headers, runtime);
    }
    /**
     * 集成异动记录
     *
     * @param request - HrbrainImportTransferEvalRequest
     * @param headers - HrbrainImportTransferEvalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportTransferEvalResponse
     */
    async hrbrainImportTransferEvalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportTransferEval",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/changeRecords/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportTransferEvalResponse({}));
    }
    /**
     * 集成异动记录
     *
     * @param request - HrbrainImportTransferEvalRequest
     * @returns HrbrainImportTransferEvalResponse
     */
    async hrbrainImportTransferEval(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportTransferEvalHeaders({});
        return await this.hrbrainImportTransferEvalWithOptions(request, headers, runtime);
    }
    /**
     * 集成工作经历
     *
     * @param request - HrbrainImportWorkExpRequest
     * @param headers - HrbrainImportWorkExpHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HrbrainImportWorkExpResponse
     */
    async hrbrainImportWorkExpWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "HrbrainImportWorkExp",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/workExperiences/import`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HrbrainImportWorkExpResponse({}));
    }
    /**
     * 集成工作经历
     *
     * @param request - HrbrainImportWorkExpRequest
     * @returns HrbrainImportWorkExpResponse
     */
    async hrbrainImportWorkExp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HrbrainImportWorkExpHeaders({});
        return await this.hrbrainImportWorkExpWithOptions(request, headers, runtime);
    }
    /**
     * 人员标签查询
     *
     * @param request - StaffLabelRecordsQueryRequest
     * @param headers - StaffLabelRecordsQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StaffLabelRecordsQueryResponse
     */
    async staffLabelRecordsQueryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dingCorpId)) {
            query["dingCorpId"] = request.dingCorpId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "StaffLabelRecordsQuery",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas/labelRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StaffLabelRecordsQueryResponse({}));
    }
    /**
     * 人员标签查询
     *
     * @param request - StaffLabelRecordsQueryRequest
     * @returns StaffLabelRecordsQueryResponse
     */
    async staffLabelRecordsQuery(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StaffLabelRecordsQueryHeaders({});
        return await this.staffLabelRecordsQueryWithOptions(request, headers, runtime);
    }
    /**
     * 同步统计基础数据
     *
     * @param request - SyncDataRequest
     * @param headers - SyncDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SyncDataResponse
     */
    async syncDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.dataId)) {
            body["dataId"] = request.dataId;
        }
        if (!tea_util_1.default.isUnset(request.etlTime)) {
            body["etlTime"] = request.etlTime;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.schemaId)) {
            body["schemaId"] = request.schemaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SyncData",
            version: "hrbrain_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/hrbrain/datas`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SyncDataResponse({}));
    }
    /**
     * 同步统计基础数据
     *
     * @param request - SyncDataRequest
     * @returns SyncDataResponse
     */
    async syncData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SyncDataHeaders({});
        return await this.syncDataWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map