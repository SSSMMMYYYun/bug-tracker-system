/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ContractBenefitConsumeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * esign
     */
    benefitPoint?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sjdaujii129w9qej2nqas
     */
    bizRequestId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20
     */
    consumeQuota?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1231ndu29923312
     */
    corpId?: string;
    extParams?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding12939912nduaejjwe
     */
    isvCorpId?: string;
    /**
     * @example
     * djauihjauiwnkndjknkjanaae
     */
    optUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeResponseBody extends $tea.Model {
    result?: ContractBenefitConsumeResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ContractBenefitConsumeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskRequest extends $tea.Model {
    comparativeFile?: CreateContractCompareTaskRequestComparativeFile;
    comparativeFileDownloadUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    comparativeFileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileSource?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    standardFile?: CreateContractCompareTaskRequestStandardFile;
    standardFileDownloadUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    standardFileName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskResponseBody extends $tea.Model {
    result?: CreateContractCompareTaskResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateContractCompareTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskRequest extends $tea.Model {
    /**
     * **if can be null:**
     * false
     */
    contractFile?: CreateContractExtractTaskRequestContractFile;
    contractFileDownloadUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    contractFileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    extractKeys?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    fileSource?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskResponseBody extends $tea.Model {
    result?: CreateContractExtractTaskResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateContractExtractTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskRequest extends $tea.Model {
    /**
     * **if can be null:**
     * false
     */
    contractFile?: CreateContractReviewTaskRequestContractFile;
    contractFileDownloadUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 采购合同.doc
     */
    contractFileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileSource?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    reviewCustomRules?: CreateContractReviewTaskRequestReviewCustomRules[];
    /**
     * @example
     * model
     */
    ruleType?: string;
    /**
     * @example
     * 0
     */
    standpoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskResponseBody extends $tea.Model {
    result?: CreateContractReviewTaskResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateContractReviewTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoRequest extends $tea.Model {
    /**
     * @example
     * dingd0c871e2dfc941a34ac5d6980864d335
     */
    corpId?: string;
    /**
     * @example
     * 5556ae0359c64c4b9491c0c3c339341f
     */
    esignFlowId?: string;
    /**
     * @example
     * PbnhW6rVXRg8u6T4NiiOwwQiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoResponseBody extends $tea.Model {
    result?: EsignQueryApprovalInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignQueryApprovalInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoRequest extends $tea.Model {
    /**
     * @example
     * dingd0c871e2dfc941a34ac5d6980864d335
     */
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    /**
     * @example
     * PbnhW6rVXRg8u6T4NiiOwwQiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoResponseBody extends $tea.Model {
    result?: EsignQueryGrantInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignQueryGrantInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingd0c871e2dfc941a34ac5d6980864d335
     */
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * feb4b8e5-d6d9-4d22-a6b8-c8e26823a73a
     */
    ticket?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketResponseBody extends $tea.Model {
    result?: EsignQueryIdentityByTicketResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignQueryIdentityByTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * openEsign
     */
    action?: string;
    /**
     * @example
     * dingd0c871e2dfc941a34ac5d6980864d335
     */
    corpId?: string;
    /**
     * @example
     * {"name": "名字"}
     */
    esignData?: string;
    extension?: {
        [key: string]: string;
    };
    /**
     * @example
     * PbnhW6rVXRg8u6T4NiiOwwQiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventResponseBody extends $tea.Model {
    result?: EsignSyncEventResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignSyncEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignUserVerifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignUserVerifyRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingbfc7ac3ddee0c1acffe93478753d9884
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1Wgkx59vuKA8u6T4NiiOwwQiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignUserVerifyResponseBody extends $tea.Model {
    result?: EsignUserVerifyResponseBodyResult;
    /**
     * @remarks
     * This parameter is required.
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignUserVerifyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignUserVerifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishReviewOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishReviewOrderRequest extends $tea.Model {
    endFiles?: FinishReviewOrderRequestEndFiles[];
    /**
     * @example
     * {}
     */
    extension?: string;
    /**
     * @example
     * 12345678
     */
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishReviewOrderResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishReviewOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FinishReviewOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionRequest extends $tea.Model {
    /**
     * @example
     * dingff048f704a8b6d8e4ac5d6980864d335
     */
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionResponseBody extends $tea.Model {
    result?: QueryAdvancedContractVersionResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAdvancedContractVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    compareTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponseBody extends $tea.Model {
    result?: QueryContractCompareResultResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryContractCompareResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    extractTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultResponseBody extends $tea.Model {
    result?: QueryContractExtractResultResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryContractExtractResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    reviewTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBody extends $tea.Model {
    result?: QueryContractReviewResultResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryContractReviewResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * signing
     */
    cardType?: string;
    contractInfo?: SendContractCardRequestContractInfo;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding5f62ac8a3c24952ebc961a6cb783455b
     */
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    /**
     * @example
     * PROC_Xxxxxxxx
     */
    processInstanceId?: string;
    receiveGroups?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    receivers?: SendContractCardRequestReceivers[];
    /**
     * @remarks
     * This parameter is required.
     */
    sender?: SendContractCardRequestSender;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    syncSingleChat?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendContractCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeResponseBodyResult extends $tea.Model {
    consumeResult?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskRequestComparativeFile extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileSize?: number;
    fileType?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskRequestStandardFile extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileSize?: number;
    fileType?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskResponseBodyResultData extends $tea.Model {
    compareTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractCompareTaskResponseBodyResult extends $tea.Model {
    data?: CreateContractCompareTaskResponseBodyResultData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskRequestContractFile extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileSize?: number;
    fileType?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskResponseBodyResultData extends $tea.Model {
    extractTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractExtractTaskResponseBodyResult extends $tea.Model {
    data?: CreateContractExtractTaskResponseBodyResultData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskRequestContractFile extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileSize?: number;
    fileType?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskRequestReviewCustomRules extends $tea.Model {
    /**
     * @example
     * high
     */
    riskLevel?: string;
    /**
     * @example
     * 审查合同金额大小，不得低于1000元
     */
    ruleDesc?: string;
    /**
     * @example
     * 1.1
     */
    ruleSequence?: string;
    /**
     * @example
     * 金额相关规则
     */
    ruleTag?: string;
    /**
     * @example
     * 合同金额校验
     */
    ruleTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskResponseBodyResultData extends $tea.Model {
    reviewTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateContractReviewTaskResponseBodyResult extends $tea.Model {
    data?: CreateContractReviewTaskResponseBodyResultData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 202311081619000455501
     */
    bpmsProcessBusinessId?: string;
    /**
     * @example
     * O6wNhB4wTMajvNW8Dc_Rjg09301699431585
     */
    bpmsProcessInstanceId?: string;
    /**
     * @example
     * https://aflow.dingtalk.com/dingtalk/pc/query/pchomepage.htm?corpid=ding6c3948a9e37c439c35c2f4657eb6378f&swfrom=https://n.dingtalk.com/dingding/h5-contract/contractPC/index.html#/approval?procInstId=O6wNhB4wTMajvNW8Dc_Rjg09301699431585
     */
    bpmsProcessInstanceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 何一兵
     */
    legalPerson?: string;
    /**
     * @example
     * 18667021101
     */
    mobilePhoneNumber?: string;
    /**
     * @example
     * 杭州天谷信息科技有限公司
     */
    orgName?: string;
    /**
     * @example
     * 86
     */
    stateCode?: string;
    /**
     * @example
     * 913301087458306077
     */
    unifiedSocialCredit?: string;
    /**
     * @example
     * 某人名
     */
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketResponseBodyResult extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 外部服务异常
     */
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignUserVerifyResponseBodyResult extends $tea.Model {
    canAccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FinishReviewOrderRequestEndFiles extends $tea.Model {
    /**
     * @example
     * 合同文件
     */
    fileName?: string;
    /**
     * @example
     * 12
     */
    fileSize?: string;
    /**
     * @example
     * word
     */
    fileType?: string;
    /**
     * @example
     * 0
     */
    fileVersion?: number;
    /**
     * @example
     * http://oss.com
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionResponseBodyResult extends $tea.Model {
    enableEsignAttachmentSign?: boolean;
    extension?: {
        [key: string]: string;
    };
    /**
     * @example
     * advanced
     */
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponseBodyResultDataCompareDetailDetails extends $tea.Model {
    compareWords?: string;
    originalWords?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount extends $tea.Model {
    add?: number;
    delete?: number;
    replace?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponseBodyResultDataCompareDetail extends $tea.Model {
    details?: QueryContractCompareResultResponseBodyResultDataCompareDetailDetails[];
    differenceCount?: QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponseBodyResultData extends $tea.Model {
    compareDetail?: QueryContractCompareResultResponseBodyResultDataCompareDetail;
    compareDetailUrl?: string;
    compareStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractCompareResultResponseBodyResult extends $tea.Model {
    data?: QueryContractCompareResultResponseBodyResultData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultResponseBodyResultDataExtractEntities extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultResponseBodyResultData extends $tea.Model {
    extractEntities?: QueryContractExtractResultResponseBodyResultDataExtractEntities[];
    extractStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractExtractResultResponseBodyResult extends $tea.Model {
    data?: QueryContractExtractResultResponseBodyResultData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks extends $tea.Model {
    originalContent?: string;
    resultContent?: string;
    resultType?: string;
    riskBrief?: string;
    riskClause?: string;
    riskExplain?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBodyResultDataReviewRiskDetail extends $tea.Model {
    examineBrief?: string;
    examineResult?: string;
    examineStatus?: string;
    riskLevel?: string;
    ruleSequence?: string;
    ruleTag?: string;
    ruleTitle?: string;
    subRisks?: QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBodyResultDataReviewRiskOverview extends $tea.Model {
    hasRisk?: boolean;
    highRisk?: number;
    lowRisk?: number;
    mediumRisk?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBodyResultDataReviewStatus extends $tea.Model {
    overview?: string;
    result?: string;
    rule?: string;
    stage?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBodyResultData extends $tea.Model {
    reviewRiskDetail?: QueryContractReviewResultResponseBodyResultDataReviewRiskDetail[];
    reviewRiskOverview?: QueryContractReviewResultResponseBodyResultDataReviewRiskOverview;
    reviewStatus?: QueryContractReviewResultResponseBodyResultDataReviewStatus;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryContractReviewResultResponseBodyResult extends $tea.Model {
    data?: QueryContractReviewResultResponseBodyResultData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequestContractInfo extends $tea.Model {
    /**
     * @example
     * HT_xxxxxxx
     */
    contractCode?: string;
    /**
     * @example
     * 合同
     */
    contractName?: string;
    /**
     * @example
     * 1242153453
     */
    createTime?: number;
    /**
     * @example
     * 张三
     */
    signUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequestReceivers extends $tea.Model {
    /**
     * @example
     * ding5f62ac8a3c24952ebc961a6cb783455b
     */
    corpId?: string;
    /**
     * @example
     * 1622265907855672
     */
    userId?: string;
    /**
     * @example
     * 可以为空
     */
    userType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequestSender extends $tea.Model {
    /**
     * @example
     * ding5f62ac8a3c24952ebc961a6cb783455b
     */
    corpId?: string;
    /**
     * @example
     * 1622265907855672
     */
    userId?: string;
    /**
     * @example
     * 可以为空
     */
    userType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 合同权益核销
     *
     * @param request - ContractBenefitConsumeRequest
     * @param headers - ContractBenefitConsumeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ContractBenefitConsumeResponse
     */
    contractBenefitConsumeWithOptions(request: ContractBenefitConsumeRequest, headers: ContractBenefitConsumeHeaders, runtime: $Util.RuntimeOptions): Promise<ContractBenefitConsumeResponse>;
    /**
     * 合同权益核销
     *
     * @param request - ContractBenefitConsumeRequest
     * @returns ContractBenefitConsumeResponse
     */
    contractBenefitConsume(request: ContractBenefitConsumeRequest): Promise<ContractBenefitConsumeResponse>;
    /**
     * 创建合同比对任务
     *
     * @param request - CreateContractCompareTaskRequest
     * @param headers - CreateContractCompareTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateContractCompareTaskResponse
     */
    createContractCompareTaskWithOptions(request: CreateContractCompareTaskRequest, headers: CreateContractCompareTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateContractCompareTaskResponse>;
    /**
     * 创建合同比对任务
     *
     * @param request - CreateContractCompareTaskRequest
     * @returns CreateContractCompareTaskResponse
     */
    createContractCompareTask(request: CreateContractCompareTaskRequest): Promise<CreateContractCompareTaskResponse>;
    /**
     * 创建合同提取任务
     *
     * @param request - CreateContractExtractTaskRequest
     * @param headers - CreateContractExtractTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateContractExtractTaskResponse
     */
    createContractExtractTaskWithOptions(request: CreateContractExtractTaskRequest, headers: CreateContractExtractTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateContractExtractTaskResponse>;
    /**
     * 创建合同提取任务
     *
     * @param request - CreateContractExtractTaskRequest
     * @returns CreateContractExtractTaskResponse
     */
    createContractExtractTask(request: CreateContractExtractTaskRequest): Promise<CreateContractExtractTaskResponse>;
    /**
     * 创建合同审查任务
     *
     * @param request - CreateContractReviewTaskRequest
     * @param headers - CreateContractReviewTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateContractReviewTaskResponse
     */
    createContractReviewTaskWithOptions(request: CreateContractReviewTaskRequest, headers: CreateContractReviewTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateContractReviewTaskResponse>;
    /**
     * 创建合同审查任务
     *
     * @param request - CreateContractReviewTaskRequest
     * @returns CreateContractReviewTaskResponse
     */
    createContractReviewTask(request: CreateContractReviewTaskRequest): Promise<CreateContractReviewTaskResponse>;
    /**
     * 天谷侧查询审批单
     *
     * @param request - EsignQueryApprovalInfoRequest
     * @param headers - EsignQueryApprovalInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignQueryApprovalInfoResponse
     */
    esignQueryApprovalInfoWithOptions(request: EsignQueryApprovalInfoRequest, headers: EsignQueryApprovalInfoHeaders, runtime: $Util.RuntimeOptions): Promise<EsignQueryApprovalInfoResponse>;
    /**
     * 天谷侧查询审批单
     *
     * @param request - EsignQueryApprovalInfoRequest
     * @returns EsignQueryApprovalInfoResponse
     */
    esignQueryApprovalInfo(request: EsignQueryApprovalInfoRequest): Promise<EsignQueryApprovalInfoResponse>;
    /**
     * 天谷侧查询授权信息接口
     *
     * @param request - EsignQueryGrantInfoRequest
     * @param headers - EsignQueryGrantInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignQueryGrantInfoResponse
     */
    esignQueryGrantInfoWithOptions(request: EsignQueryGrantInfoRequest, headers: EsignQueryGrantInfoHeaders, runtime: $Util.RuntimeOptions): Promise<EsignQueryGrantInfoResponse>;
    /**
     * 天谷侧查询授权信息接口
     *
     * @param request - EsignQueryGrantInfoRequest
     * @returns EsignQueryGrantInfoResponse
     */
    esignQueryGrantInfo(request: EsignQueryGrantInfoRequest): Promise<EsignQueryGrantInfoResponse>;
    /**
     * 天谷侧查询获取免登信息
     *
     * @param request - EsignQueryIdentityByTicketRequest
     * @param headers - EsignQueryIdentityByTicketHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignQueryIdentityByTicketResponse
     */
    esignQueryIdentityByTicketWithOptions(request: EsignQueryIdentityByTicketRequest, headers: EsignQueryIdentityByTicketHeaders, runtime: $Util.RuntimeOptions): Promise<EsignQueryIdentityByTicketResponse>;
    /**
     * 天谷侧查询获取免登信息
     *
     * @param request - EsignQueryIdentityByTicketRequest
     * @returns EsignQueryIdentityByTicketResponse
     */
    esignQueryIdentityByTicket(request: EsignQueryIdentityByTicketRequest): Promise<EsignQueryIdentityByTicketResponse>;
    /**
     * e签宝电子签事件同步回传接口
     *
     * @param request - EsignSyncEventRequest
     * @param headers - EsignSyncEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignSyncEventResponse
     */
    esignSyncEventWithOptions(request: EsignSyncEventRequest, headers: EsignSyncEventHeaders, runtime: $Util.RuntimeOptions): Promise<EsignSyncEventResponse>;
    /**
     * e签宝电子签事件同步回传接口
     *
     * @param request - EsignSyncEventRequest
     * @returns EsignSyncEventResponse
     */
    esignSyncEvent(request: EsignSyncEventRequest): Promise<EsignSyncEventResponse>;
    /**
     * 校验钉钉用户能否访问e签宝页面接口
     *
     * @param request - EsignUserVerifyRequest
     * @param headers - EsignUserVerifyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignUserVerifyResponse
     */
    esignUserVerifyWithOptions(request: EsignUserVerifyRequest, headers: EsignUserVerifyHeaders, runtime: $Util.RuntimeOptions): Promise<EsignUserVerifyResponse>;
    /**
     * 校验钉钉用户能否访问e签宝页面接口
     *
     * @param request - EsignUserVerifyRequest
     * @returns EsignUserVerifyResponse
     */
    esignUserVerify(request: EsignUserVerifyRequest): Promise<EsignUserVerifyResponse>;
    /**
     * 完成工单审查接口
     *
     * @param request - FinishReviewOrderRequest
     * @param headers - FinishReviewOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FinishReviewOrderResponse
     */
    finishReviewOrderWithOptions(request: FinishReviewOrderRequest, headers: FinishReviewOrderHeaders, runtime: $Util.RuntimeOptions): Promise<FinishReviewOrderResponse>;
    /**
     * 完成工单审查接口
     *
     * @param request - FinishReviewOrderRequest
     * @returns FinishReviewOrderResponse
     */
    finishReviewOrder(request: FinishReviewOrderRequest): Promise<FinishReviewOrderResponse>;
    /**
     * e签宝查询智能合同版本接口
     *
     * @param request - QueryAdvancedContractVersionRequest
     * @param headers - QueryAdvancedContractVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAdvancedContractVersionResponse
     */
    queryAdvancedContractVersionWithOptions(request: QueryAdvancedContractVersionRequest, headers: QueryAdvancedContractVersionHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAdvancedContractVersionResponse>;
    /**
     * e签宝查询智能合同版本接口
     *
     * @param request - QueryAdvancedContractVersionRequest
     * @returns QueryAdvancedContractVersionResponse
     */
    queryAdvancedContractVersion(request: QueryAdvancedContractVersionRequest): Promise<QueryAdvancedContractVersionResponse>;
    /**
     * 查询合同比对结果
     *
     * @param request - QueryContractCompareResultRequest
     * @param headers - QueryContractCompareResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryContractCompareResultResponse
     */
    queryContractCompareResultWithOptions(request: QueryContractCompareResultRequest, headers: QueryContractCompareResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryContractCompareResultResponse>;
    /**
     * 查询合同比对结果
     *
     * @param request - QueryContractCompareResultRequest
     * @returns QueryContractCompareResultResponse
     */
    queryContractCompareResult(request: QueryContractCompareResultRequest): Promise<QueryContractCompareResultResponse>;
    /**
     * 查询合同提取结果
     *
     * @param request - QueryContractExtractResultRequest
     * @param headers - QueryContractExtractResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryContractExtractResultResponse
     */
    queryContractExtractResultWithOptions(request: QueryContractExtractResultRequest, headers: QueryContractExtractResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryContractExtractResultResponse>;
    /**
     * 查询合同提取结果
     *
     * @param request - QueryContractExtractResultRequest
     * @returns QueryContractExtractResultResponse
     */
    queryContractExtractResult(request: QueryContractExtractResultRequest): Promise<QueryContractExtractResultResponse>;
    /**
     * 查询合同审查结果
     *
     * @param request - QueryContractReviewResultRequest
     * @param headers - QueryContractReviewResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryContractReviewResultResponse
     */
    queryContractReviewResultWithOptions(request: QueryContractReviewResultRequest, headers: QueryContractReviewResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryContractReviewResultResponse>;
    /**
     * 查询合同审查结果
     *
     * @param request - QueryContractReviewResultRequest
     * @returns QueryContractReviewResultResponse
     */
    queryContractReviewResult(request: QueryContractReviewResultRequest): Promise<QueryContractReviewResultResponse>;
    /**
     * 发送合同相关卡片
     *
     * @param request - SendContractCardRequest
     * @param headers - SendContractCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendContractCardResponse
     */
    sendContractCardWithOptions(request: SendContractCardRequest, headers: SendContractCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendContractCardResponse>;
    /**
     * 发送合同相关卡片
     *
     * @param request - SendContractCardRequest
     * @returns SendContractCardResponse
     */
    sendContractCard(request: SendContractCardRequest): Promise<SendContractCardResponse>;
}
