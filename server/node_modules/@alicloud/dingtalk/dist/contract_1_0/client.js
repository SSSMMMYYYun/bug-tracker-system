"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryContractExtractResultRequest = exports.QueryContractExtractResultHeaders = exports.QueryContractCompareResultResponse = exports.QueryContractCompareResultResponseBody = exports.QueryContractCompareResultRequest = exports.QueryContractCompareResultHeaders = exports.QueryAdvancedContractVersionResponse = exports.QueryAdvancedContractVersionResponseBody = exports.QueryAdvancedContractVersionRequest = exports.QueryAdvancedContractVersionHeaders = exports.FinishReviewOrderResponse = exports.FinishReviewOrderResponseBody = exports.FinishReviewOrderRequest = exports.FinishReviewOrderHeaders = exports.EsignUserVerifyResponse = exports.EsignUserVerifyResponseBody = exports.EsignUserVerifyRequest = exports.EsignUserVerifyHeaders = exports.EsignSyncEventResponse = exports.EsignSyncEventResponseBody = exports.EsignSyncEventRequest = exports.EsignSyncEventHeaders = exports.EsignQueryIdentityByTicketResponse = exports.EsignQueryIdentityByTicketResponseBody = exports.EsignQueryIdentityByTicketRequest = exports.EsignQueryIdentityByTicketHeaders = exports.EsignQueryGrantInfoResponse = exports.EsignQueryGrantInfoResponseBody = exports.EsignQueryGrantInfoRequest = exports.EsignQueryGrantInfoHeaders = exports.EsignQueryApprovalInfoResponse = exports.EsignQueryApprovalInfoResponseBody = exports.EsignQueryApprovalInfoRequest = exports.EsignQueryApprovalInfoHeaders = exports.CreateContractReviewTaskResponse = exports.CreateContractReviewTaskResponseBody = exports.CreateContractReviewTaskRequest = exports.CreateContractReviewTaskHeaders = exports.CreateContractExtractTaskResponse = exports.CreateContractExtractTaskResponseBody = exports.CreateContractExtractTaskRequest = exports.CreateContractExtractTaskHeaders = exports.CreateContractCompareTaskResponse = exports.CreateContractCompareTaskResponseBody = exports.CreateContractCompareTaskRequest = exports.CreateContractCompareTaskHeaders = exports.ContractBenefitConsumeResponse = exports.ContractBenefitConsumeResponseBody = exports.ContractBenefitConsumeRequest = exports.ContractBenefitConsumeHeaders = void 0;
exports.SendContractCardRequestSender = exports.SendContractCardRequestReceivers = exports.SendContractCardRequestContractInfo = exports.QueryContractReviewResultResponseBodyResult = exports.QueryContractReviewResultResponseBodyResultData = exports.QueryContractReviewResultResponseBodyResultDataReviewStatus = exports.QueryContractReviewResultResponseBodyResultDataReviewRiskOverview = exports.QueryContractReviewResultResponseBodyResultDataReviewRiskDetail = exports.QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks = exports.QueryContractExtractResultResponseBodyResult = exports.QueryContractExtractResultResponseBodyResultData = exports.QueryContractExtractResultResponseBodyResultDataExtractEntities = exports.QueryContractCompareResultResponseBodyResult = exports.QueryContractCompareResultResponseBodyResultData = exports.QueryContractCompareResultResponseBodyResultDataCompareDetail = exports.QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount = exports.QueryContractCompareResultResponseBodyResultDataCompareDetailDetails = exports.QueryAdvancedContractVersionResponseBodyResult = exports.FinishReviewOrderRequestEndFiles = exports.EsignUserVerifyResponseBodyResult = exports.EsignSyncEventResponseBodyResult = exports.EsignQueryIdentityByTicketResponseBodyResult = exports.EsignQueryGrantInfoResponseBodyResult = exports.EsignQueryApprovalInfoResponseBodyResult = exports.CreateContractReviewTaskResponseBodyResult = exports.CreateContractReviewTaskResponseBodyResultData = exports.CreateContractReviewTaskRequestReviewCustomRules = exports.CreateContractReviewTaskRequestContractFile = exports.CreateContractExtractTaskResponseBodyResult = exports.CreateContractExtractTaskResponseBodyResultData = exports.CreateContractExtractTaskRequestContractFile = exports.CreateContractCompareTaskResponseBodyResult = exports.CreateContractCompareTaskResponseBodyResultData = exports.CreateContractCompareTaskRequestStandardFile = exports.CreateContractCompareTaskRequestComparativeFile = exports.ContractBenefitConsumeResponseBodyResult = exports.SendContractCardResponse = exports.SendContractCardResponseBody = exports.SendContractCardRequest = exports.SendContractCardHeaders = exports.QueryContractReviewResultResponse = exports.QueryContractReviewResultResponseBody = exports.QueryContractReviewResultRequest = exports.QueryContractReviewResultHeaders = exports.QueryContractExtractResultResponse = exports.QueryContractExtractResultResponseBody = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ContractBenefitConsumeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractBenefitConsumeHeaders = ContractBenefitConsumeHeaders;
class ContractBenefitConsumeRequest extends $tea.Model {
    static names() {
        return {
            benefitPoint: 'benefitPoint',
            bizRequestId: 'bizRequestId',
            consumeQuota: 'consumeQuota',
            corpId: 'corpId',
            extParams: 'extParams',
            isvCorpId: 'isvCorpId',
            optUnionId: 'optUnionId',
        };
    }
    static types() {
        return {
            benefitPoint: 'string',
            bizRequestId: 'string',
            consumeQuota: 'number',
            corpId: 'string',
            extParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            isvCorpId: 'string',
            optUnionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractBenefitConsumeRequest = ContractBenefitConsumeRequest;
class ContractBenefitConsumeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: ContractBenefitConsumeResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractBenefitConsumeResponseBody = ContractBenefitConsumeResponseBody;
class ContractBenefitConsumeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ContractBenefitConsumeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractBenefitConsumeResponse = ContractBenefitConsumeResponse;
class CreateContractCompareTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskHeaders = CreateContractCompareTaskHeaders;
class CreateContractCompareTaskRequest extends $tea.Model {
    static names() {
        return {
            comparativeFile: 'comparativeFile',
            comparativeFileDownloadUrl: 'comparativeFileDownloadUrl',
            comparativeFileName: 'comparativeFileName',
            fileSource: 'fileSource',
            requestId: 'requestId',
            standardFile: 'standardFile',
            standardFileDownloadUrl: 'standardFileDownloadUrl',
            standardFileName: 'standardFileName',
        };
    }
    static types() {
        return {
            comparativeFile: CreateContractCompareTaskRequestComparativeFile,
            comparativeFileDownloadUrl: 'string',
            comparativeFileName: 'string',
            fileSource: 'string',
            requestId: 'string',
            standardFile: CreateContractCompareTaskRequestStandardFile,
            standardFileDownloadUrl: 'string',
            standardFileName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskRequest = CreateContractCompareTaskRequest;
class CreateContractCompareTaskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateContractCompareTaskResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskResponseBody = CreateContractCompareTaskResponseBody;
class CreateContractCompareTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateContractCompareTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskResponse = CreateContractCompareTaskResponse;
class CreateContractExtractTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskHeaders = CreateContractExtractTaskHeaders;
class CreateContractExtractTaskRequest extends $tea.Model {
    static names() {
        return {
            contractFile: 'contractFile',
            contractFileDownloadUrl: 'contractFileDownloadUrl',
            contractFileName: 'contractFileName',
            extractKeys: 'extractKeys',
            fileSource: 'fileSource',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            contractFile: CreateContractExtractTaskRequestContractFile,
            contractFileDownloadUrl: 'string',
            contractFileName: 'string',
            extractKeys: { 'type': 'array', 'itemType': 'string' },
            fileSource: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskRequest = CreateContractExtractTaskRequest;
class CreateContractExtractTaskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateContractExtractTaskResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskResponseBody = CreateContractExtractTaskResponseBody;
class CreateContractExtractTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateContractExtractTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskResponse = CreateContractExtractTaskResponse;
class CreateContractReviewTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskHeaders = CreateContractReviewTaskHeaders;
class CreateContractReviewTaskRequest extends $tea.Model {
    static names() {
        return {
            contractFile: 'contractFile',
            contractFileDownloadUrl: 'contractFileDownloadUrl',
            contractFileName: 'contractFileName',
            fileSource: 'fileSource',
            requestId: 'requestId',
            reviewCustomRules: 'reviewCustomRules',
            ruleType: 'ruleType',
            standpoint: 'standpoint',
        };
    }
    static types() {
        return {
            contractFile: CreateContractReviewTaskRequestContractFile,
            contractFileDownloadUrl: 'string',
            contractFileName: 'string',
            fileSource: 'string',
            requestId: 'string',
            reviewCustomRules: { 'type': 'array', 'itemType': CreateContractReviewTaskRequestReviewCustomRules },
            ruleType: 'string',
            standpoint: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskRequest = CreateContractReviewTaskRequest;
class CreateContractReviewTaskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateContractReviewTaskResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskResponseBody = CreateContractReviewTaskResponseBody;
class CreateContractReviewTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateContractReviewTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskResponse = CreateContractReviewTaskResponse;
class EsignQueryApprovalInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryApprovalInfoHeaders = EsignQueryApprovalInfoHeaders;
class EsignQueryApprovalInfoRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            esignFlowId: 'esignFlowId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            esignFlowId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryApprovalInfoRequest = EsignQueryApprovalInfoRequest;
class EsignQueryApprovalInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignQueryApprovalInfoResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryApprovalInfoResponseBody = EsignQueryApprovalInfoResponseBody;
class EsignQueryApprovalInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignQueryApprovalInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryApprovalInfoResponse = EsignQueryApprovalInfoResponse;
class EsignQueryGrantInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryGrantInfoHeaders = EsignQueryGrantInfoHeaders;
class EsignQueryGrantInfoRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            extension: 'extension',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryGrantInfoRequest = EsignQueryGrantInfoRequest;
class EsignQueryGrantInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignQueryGrantInfoResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryGrantInfoResponseBody = EsignQueryGrantInfoResponseBody;
class EsignQueryGrantInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignQueryGrantInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryGrantInfoResponse = EsignQueryGrantInfoResponse;
class EsignQueryIdentityByTicketHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryIdentityByTicketHeaders = EsignQueryIdentityByTicketHeaders;
class EsignQueryIdentityByTicketRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            extension: 'extension',
            ticket: 'ticket',
        };
    }
    static types() {
        return {
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            ticket: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryIdentityByTicketRequest = EsignQueryIdentityByTicketRequest;
class EsignQueryIdentityByTicketResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignQueryIdentityByTicketResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryIdentityByTicketResponseBody = EsignQueryIdentityByTicketResponseBody;
class EsignQueryIdentityByTicketResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignQueryIdentityByTicketResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryIdentityByTicketResponse = EsignQueryIdentityByTicketResponse;
class EsignSyncEventHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignSyncEventHeaders = EsignSyncEventHeaders;
class EsignSyncEventRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            corpId: 'corpId',
            esignData: 'esignData',
            extension: 'extension',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            action: 'string',
            corpId: 'string',
            esignData: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignSyncEventRequest = EsignSyncEventRequest;
class EsignSyncEventResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignSyncEventResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignSyncEventResponseBody = EsignSyncEventResponseBody;
class EsignSyncEventResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignSyncEventResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignSyncEventResponse = EsignSyncEventResponse;
class EsignUserVerifyHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignUserVerifyHeaders = EsignUserVerifyHeaders;
class EsignUserVerifyRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignUserVerifyRequest = EsignUserVerifyRequest;
class EsignUserVerifyResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignUserVerifyResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignUserVerifyResponseBody = EsignUserVerifyResponseBody;
class EsignUserVerifyResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignUserVerifyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignUserVerifyResponse = EsignUserVerifyResponse;
class FinishReviewOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishReviewOrderHeaders = FinishReviewOrderHeaders;
class FinishReviewOrderRequest extends $tea.Model {
    static names() {
        return {
            endFiles: 'endFiles',
            extension: 'extension',
            orderId: 'orderId',
        };
    }
    static types() {
        return {
            endFiles: { 'type': 'array', 'itemType': FinishReviewOrderRequestEndFiles },
            extension: 'string',
            orderId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishReviewOrderRequest = FinishReviewOrderRequest;
class FinishReviewOrderResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishReviewOrderResponseBody = FinishReviewOrderResponseBody;
class FinishReviewOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FinishReviewOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishReviewOrderResponse = FinishReviewOrderResponse;
class QueryAdvancedContractVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAdvancedContractVersionHeaders = QueryAdvancedContractVersionHeaders;
class QueryAdvancedContractVersionRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            extension: 'extension',
        };
    }
    static types() {
        return {
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAdvancedContractVersionRequest = QueryAdvancedContractVersionRequest;
class QueryAdvancedContractVersionResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryAdvancedContractVersionResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAdvancedContractVersionResponseBody = QueryAdvancedContractVersionResponseBody;
class QueryAdvancedContractVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAdvancedContractVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAdvancedContractVersionResponse = QueryAdvancedContractVersionResponse;
class QueryContractCompareResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultHeaders = QueryContractCompareResultHeaders;
class QueryContractCompareResultRequest extends $tea.Model {
    static names() {
        return {
            compareTaskId: 'compareTaskId',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            compareTaskId: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultRequest = QueryContractCompareResultRequest;
class QueryContractCompareResultResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryContractCompareResultResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponseBody = QueryContractCompareResultResponseBody;
class QueryContractCompareResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryContractCompareResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponse = QueryContractCompareResultResponse;
class QueryContractExtractResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultHeaders = QueryContractExtractResultHeaders;
class QueryContractExtractResultRequest extends $tea.Model {
    static names() {
        return {
            extractTaskId: 'extractTaskId',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            extractTaskId: 'string',
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultRequest = QueryContractExtractResultRequest;
class QueryContractExtractResultResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryContractExtractResultResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultResponseBody = QueryContractExtractResultResponseBody;
class QueryContractExtractResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryContractExtractResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultResponse = QueryContractExtractResultResponse;
class QueryContractReviewResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultHeaders = QueryContractReviewResultHeaders;
class QueryContractReviewResultRequest extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            reviewTaskId: 'reviewTaskId',
        };
    }
    static types() {
        return {
            requestId: 'string',
            reviewTaskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultRequest = QueryContractReviewResultRequest;
class QueryContractReviewResultResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryContractReviewResultResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBody = QueryContractReviewResultResponseBody;
class QueryContractReviewResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryContractReviewResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponse = QueryContractReviewResultResponse;
class SendContractCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardHeaders = SendContractCardHeaders;
class SendContractCardRequest extends $tea.Model {
    static names() {
        return {
            cardType: 'cardType',
            contractInfo: 'contractInfo',
            corpId: 'corpId',
            extension: 'extension',
            processInstanceId: 'processInstanceId',
            receiveGroups: 'receiveGroups',
            receivers: 'receivers',
            sender: 'sender',
            syncSingleChat: 'syncSingleChat',
        };
    }
    static types() {
        return {
            cardType: 'string',
            contractInfo: SendContractCardRequestContractInfo,
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            processInstanceId: 'string',
            receiveGroups: { 'type': 'array', 'itemType': 'string' },
            receivers: { 'type': 'array', 'itemType': SendContractCardRequestReceivers },
            sender: SendContractCardRequestSender,
            syncSingleChat: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardRequest = SendContractCardRequest;
class SendContractCardResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardResponseBody = SendContractCardResponseBody;
class SendContractCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendContractCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardResponse = SendContractCardResponse;
class ContractBenefitConsumeResponseBodyResult extends $tea.Model {
    static names() {
        return {
            consumeResult: 'consumeResult',
        };
    }
    static types() {
        return {
            consumeResult: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractBenefitConsumeResponseBodyResult = ContractBenefitConsumeResponseBodyResult;
class CreateContractCompareTaskRequestComparativeFile extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'number',
            fileType: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskRequestComparativeFile = CreateContractCompareTaskRequestComparativeFile;
class CreateContractCompareTaskRequestStandardFile extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'number',
            fileType: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskRequestStandardFile = CreateContractCompareTaskRequestStandardFile;
class CreateContractCompareTaskResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            compareTaskId: 'compareTaskId',
        };
    }
    static types() {
        return {
            compareTaskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskResponseBodyResultData = CreateContractCompareTaskResponseBodyResultData;
class CreateContractCompareTaskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            data: CreateContractCompareTaskResponseBodyResultData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractCompareTaskResponseBodyResult = CreateContractCompareTaskResponseBodyResult;
class CreateContractExtractTaskRequestContractFile extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'number',
            fileType: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskRequestContractFile = CreateContractExtractTaskRequestContractFile;
class CreateContractExtractTaskResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            extractTaskId: 'extractTaskId',
        };
    }
    static types() {
        return {
            extractTaskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskResponseBodyResultData = CreateContractExtractTaskResponseBodyResultData;
class CreateContractExtractTaskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            data: CreateContractExtractTaskResponseBodyResultData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractExtractTaskResponseBodyResult = CreateContractExtractTaskResponseBodyResult;
class CreateContractReviewTaskRequestContractFile extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'number',
            fileType: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskRequestContractFile = CreateContractReviewTaskRequestContractFile;
class CreateContractReviewTaskRequestReviewCustomRules extends $tea.Model {
    static names() {
        return {
            riskLevel: 'riskLevel',
            ruleDesc: 'ruleDesc',
            ruleSequence: 'ruleSequence',
            ruleTag: 'ruleTag',
            ruleTitle: 'ruleTitle',
        };
    }
    static types() {
        return {
            riskLevel: 'string',
            ruleDesc: 'string',
            ruleSequence: 'string',
            ruleTag: 'string',
            ruleTitle: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskRequestReviewCustomRules = CreateContractReviewTaskRequestReviewCustomRules;
class CreateContractReviewTaskResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            reviewTaskId: 'reviewTaskId',
        };
    }
    static types() {
        return {
            reviewTaskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskResponseBodyResultData = CreateContractReviewTaskResponseBodyResultData;
class CreateContractReviewTaskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            data: CreateContractReviewTaskResponseBodyResultData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateContractReviewTaskResponseBodyResult = CreateContractReviewTaskResponseBodyResult;
class EsignQueryApprovalInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            bpmsProcessBusinessId: 'bpmsProcessBusinessId',
            bpmsProcessInstanceId: 'bpmsProcessInstanceId',
            bpmsProcessInstanceUrl: 'bpmsProcessInstanceUrl',
        };
    }
    static types() {
        return {
            bpmsProcessBusinessId: 'string',
            bpmsProcessInstanceId: 'string',
            bpmsProcessInstanceUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryApprovalInfoResponseBodyResult = EsignQueryApprovalInfoResponseBodyResult;
class EsignQueryGrantInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            legalPerson: 'legalPerson',
            mobilePhoneNumber: 'mobilePhoneNumber',
            orgName: 'orgName',
            stateCode: 'stateCode',
            unifiedSocialCredit: 'unifiedSocialCredit',
            userName: 'userName',
        };
    }
    static types() {
        return {
            legalPerson: 'string',
            mobilePhoneNumber: 'string',
            orgName: 'string',
            stateCode: 'string',
            unifiedSocialCredit: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryGrantInfoResponseBodyResult = EsignQueryGrantInfoResponseBodyResult;
class EsignQueryIdentityByTicketResponseBodyResult extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignQueryIdentityByTicketResponseBodyResult = EsignQueryIdentityByTicketResponseBodyResult;
class EsignSyncEventResponseBodyResult extends $tea.Model {
    static names() {
        return {
            message: 'message',
        };
    }
    static types() {
        return {
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignSyncEventResponseBodyResult = EsignSyncEventResponseBodyResult;
class EsignUserVerifyResponseBodyResult extends $tea.Model {
    static names() {
        return {
            canAccess: 'canAccess',
        };
    }
    static types() {
        return {
            canAccess: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EsignUserVerifyResponseBodyResult = EsignUserVerifyResponseBodyResult;
class FinishReviewOrderRequestEndFiles extends $tea.Model {
    static names() {
        return {
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            fileVersion: 'fileVersion',
            url: 'url',
        };
    }
    static types() {
        return {
            fileName: 'string',
            fileSize: 'string',
            fileType: 'string',
            fileVersion: 'number',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishReviewOrderRequestEndFiles = FinishReviewOrderRequestEndFiles;
class QueryAdvancedContractVersionResponseBodyResult extends $tea.Model {
    static names() {
        return {
            enableEsignAttachmentSign: 'enableEsignAttachmentSign',
            extension: 'extension',
            version: 'version',
        };
    }
    static types() {
        return {
            enableEsignAttachmentSign: 'boolean',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAdvancedContractVersionResponseBodyResult = QueryAdvancedContractVersionResponseBodyResult;
class QueryContractCompareResultResponseBodyResultDataCompareDetailDetails extends $tea.Model {
    static names() {
        return {
            compareWords: 'compareWords',
            originalWords: 'originalWords',
            type: 'type',
        };
    }
    static types() {
        return {
            compareWords: 'string',
            originalWords: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponseBodyResultDataCompareDetailDetails = QueryContractCompareResultResponseBodyResultDataCompareDetailDetails;
class QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount extends $tea.Model {
    static names() {
        return {
            add: 'add',
            delete: 'delete',
            replace: 'replace',
            total: 'total',
        };
    }
    static types() {
        return {
            add: 'number',
            delete: 'number',
            replace: 'number',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount = QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount;
class QueryContractCompareResultResponseBodyResultDataCompareDetail extends $tea.Model {
    static names() {
        return {
            details: 'details',
            differenceCount: 'differenceCount',
        };
    }
    static types() {
        return {
            details: { 'type': 'array', 'itemType': QueryContractCompareResultResponseBodyResultDataCompareDetailDetails },
            differenceCount: QueryContractCompareResultResponseBodyResultDataCompareDetailDifferenceCount,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponseBodyResultDataCompareDetail = QueryContractCompareResultResponseBodyResultDataCompareDetail;
class QueryContractCompareResultResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            compareDetail: 'compareDetail',
            compareDetailUrl: 'compareDetailUrl',
            compareStatus: 'compareStatus',
        };
    }
    static types() {
        return {
            compareDetail: QueryContractCompareResultResponseBodyResultDataCompareDetail,
            compareDetailUrl: 'string',
            compareStatus: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponseBodyResultData = QueryContractCompareResultResponseBodyResultData;
class QueryContractCompareResultResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            data: QueryContractCompareResultResponseBodyResultData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractCompareResultResponseBodyResult = QueryContractCompareResultResponseBodyResult;
class QueryContractExtractResultResponseBodyResultDataExtractEntities extends $tea.Model {
    static names() {
        return {
            key: 'key',
            value: 'value',
        };
    }
    static types() {
        return {
            key: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultResponseBodyResultDataExtractEntities = QueryContractExtractResultResponseBodyResultDataExtractEntities;
class QueryContractExtractResultResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            extractEntities: 'extractEntities',
            extractStatus: 'extractStatus',
        };
    }
    static types() {
        return {
            extractEntities: { 'type': 'array', 'itemType': QueryContractExtractResultResponseBodyResultDataExtractEntities },
            extractStatus: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultResponseBodyResultData = QueryContractExtractResultResponseBodyResultData;
class QueryContractExtractResultResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            data: QueryContractExtractResultResponseBodyResultData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractExtractResultResponseBodyResult = QueryContractExtractResultResponseBodyResult;
class QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks extends $tea.Model {
    static names() {
        return {
            originalContent: 'originalContent',
            resultContent: 'resultContent',
            resultType: 'resultType',
            riskBrief: 'riskBrief',
            riskClause: 'riskClause',
            riskExplain: 'riskExplain',
        };
    }
    static types() {
        return {
            originalContent: 'string',
            resultContent: 'string',
            resultType: 'string',
            riskBrief: 'string',
            riskClause: 'string',
            riskExplain: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks = QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks;
class QueryContractReviewResultResponseBodyResultDataReviewRiskDetail extends $tea.Model {
    static names() {
        return {
            examineBrief: 'examineBrief',
            examineResult: 'examineResult',
            examineStatus: 'examineStatus',
            riskLevel: 'riskLevel',
            ruleSequence: 'ruleSequence',
            ruleTag: 'ruleTag',
            ruleTitle: 'ruleTitle',
            subRisks: 'subRisks',
        };
    }
    static types() {
        return {
            examineBrief: 'string',
            examineResult: 'string',
            examineStatus: 'string',
            riskLevel: 'string',
            ruleSequence: 'string',
            ruleTag: 'string',
            ruleTitle: 'string',
            subRisks: { 'type': 'array', 'itemType': QueryContractReviewResultResponseBodyResultDataReviewRiskDetailSubRisks },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBodyResultDataReviewRiskDetail = QueryContractReviewResultResponseBodyResultDataReviewRiskDetail;
class QueryContractReviewResultResponseBodyResultDataReviewRiskOverview extends $tea.Model {
    static names() {
        return {
            hasRisk: 'hasRisk',
            highRisk: 'highRisk',
            lowRisk: 'lowRisk',
            mediumRisk: 'mediumRisk',
        };
    }
    static types() {
        return {
            hasRisk: 'boolean',
            highRisk: 'number',
            lowRisk: 'number',
            mediumRisk: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBodyResultDataReviewRiskOverview = QueryContractReviewResultResponseBodyResultDataReviewRiskOverview;
class QueryContractReviewResultResponseBodyResultDataReviewStatus extends $tea.Model {
    static names() {
        return {
            overview: 'overview',
            result: 'result',
            rule: 'rule',
            stage: 'stage',
        };
    }
    static types() {
        return {
            overview: 'string',
            result: 'string',
            rule: 'string',
            stage: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBodyResultDataReviewStatus = QueryContractReviewResultResponseBodyResultDataReviewStatus;
class QueryContractReviewResultResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            reviewRiskDetail: 'reviewRiskDetail',
            reviewRiskOverview: 'reviewRiskOverview',
            reviewStatus: 'reviewStatus',
        };
    }
    static types() {
        return {
            reviewRiskDetail: { 'type': 'array', 'itemType': QueryContractReviewResultResponseBodyResultDataReviewRiskDetail },
            reviewRiskOverview: QueryContractReviewResultResponseBodyResultDataReviewRiskOverview,
            reviewStatus: QueryContractReviewResultResponseBodyResultDataReviewStatus,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBodyResultData = QueryContractReviewResultResponseBodyResultData;
class QueryContractReviewResultResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            data: QueryContractReviewResultResponseBodyResultData,
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryContractReviewResultResponseBodyResult = QueryContractReviewResultResponseBodyResult;
class SendContractCardRequestContractInfo extends $tea.Model {
    static names() {
        return {
            contractCode: 'contractCode',
            contractName: 'contractName',
            createTime: 'createTime',
            signUserName: 'signUserName',
        };
    }
    static types() {
        return {
            contractCode: 'string',
            contractName: 'string',
            createTime: 'number',
            signUserName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardRequestContractInfo = SendContractCardRequestContractInfo;
class SendContractCardRequestReceivers extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            userId: 'userId',
            userType: 'userType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            userId: 'string',
            userType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardRequestReceivers = SendContractCardRequestReceivers;
class SendContractCardRequestSender extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            userId: 'userId',
            userType: 'userType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            userId: 'string',
            userType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendContractCardRequestSender = SendContractCardRequestSender;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 合同权益核销
     *
     * @param request - ContractBenefitConsumeRequest
     * @param headers - ContractBenefitConsumeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ContractBenefitConsumeResponse
     */
    async contractBenefitConsumeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.benefitPoint)) {
            body["benefitPoint"] = request.benefitPoint;
        }
        if (!tea_util_1.default.isUnset(request.bizRequestId)) {
            body["bizRequestId"] = request.bizRequestId;
        }
        if (!tea_util_1.default.isUnset(request.consumeQuota)) {
            body["consumeQuota"] = request.consumeQuota;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extParams)) {
            body["extParams"] = request.extParams;
        }
        if (!tea_util_1.default.isUnset(request.isvCorpId)) {
            body["isvCorpId"] = request.isvCorpId;
        }
        if (!tea_util_1.default.isUnset(request.optUnionId)) {
            body["optUnionId"] = request.optUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ContractBenefitConsume",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/benefits/consume`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ContractBenefitConsumeResponse({}));
    }
    /**
     * 合同权益核销
     *
     * @param request - ContractBenefitConsumeRequest
     * @returns ContractBenefitConsumeResponse
     */
    async contractBenefitConsume(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ContractBenefitConsumeHeaders({});
        return await this.contractBenefitConsumeWithOptions(request, headers, runtime);
    }
    /**
     * 创建合同比对任务
     *
     * @param request - CreateContractCompareTaskRequest
     * @param headers - CreateContractCompareTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateContractCompareTaskResponse
     */
    async createContractCompareTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.comparativeFile)) {
            body["comparativeFile"] = request.comparativeFile;
        }
        if (!tea_util_1.default.isUnset(request.comparativeFileDownloadUrl)) {
            body["comparativeFileDownloadUrl"] = request.comparativeFileDownloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.comparativeFileName)) {
            body["comparativeFileName"] = request.comparativeFileName;
        }
        if (!tea_util_1.default.isUnset(request.fileSource)) {
            body["fileSource"] = request.fileSource;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        if (!tea_util_1.default.isUnset(request.standardFile)) {
            body["standardFile"] = request.standardFile;
        }
        if (!tea_util_1.default.isUnset(request.standardFileDownloadUrl)) {
            body["standardFileDownloadUrl"] = request.standardFileDownloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.standardFileName)) {
            body["standardFileName"] = request.standardFileName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateContractCompareTask",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/comparisonTasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateContractCompareTaskResponse({}));
    }
    /**
     * 创建合同比对任务
     *
     * @param request - CreateContractCompareTaskRequest
     * @returns CreateContractCompareTaskResponse
     */
    async createContractCompareTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateContractCompareTaskHeaders({});
        return await this.createContractCompareTaskWithOptions(request, headers, runtime);
    }
    /**
     * 创建合同提取任务
     *
     * @param request - CreateContractExtractTaskRequest
     * @param headers - CreateContractExtractTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateContractExtractTaskResponse
     */
    async createContractExtractTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.contractFile)) {
            body["contractFile"] = request.contractFile;
        }
        if (!tea_util_1.default.isUnset(request.contractFileDownloadUrl)) {
            body["contractFileDownloadUrl"] = request.contractFileDownloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.contractFileName)) {
            body["contractFileName"] = request.contractFileName;
        }
        if (!tea_util_1.default.isUnset(request.extractKeys)) {
            body["extractKeys"] = request.extractKeys;
        }
        if (!tea_util_1.default.isUnset(request.fileSource)) {
            body["fileSource"] = request.fileSource;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateContractExtractTask",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/extractTasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateContractExtractTaskResponse({}));
    }
    /**
     * 创建合同提取任务
     *
     * @param request - CreateContractExtractTaskRequest
     * @returns CreateContractExtractTaskResponse
     */
    async createContractExtractTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateContractExtractTaskHeaders({});
        return await this.createContractExtractTaskWithOptions(request, headers, runtime);
    }
    /**
     * 创建合同审查任务
     *
     * @param request - CreateContractReviewTaskRequest
     * @param headers - CreateContractReviewTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateContractReviewTaskResponse
     */
    async createContractReviewTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.contractFile)) {
            body["contractFile"] = request.contractFile;
        }
        if (!tea_util_1.default.isUnset(request.contractFileDownloadUrl)) {
            body["contractFileDownloadUrl"] = request.contractFileDownloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.contractFileName)) {
            body["contractFileName"] = request.contractFileName;
        }
        if (!tea_util_1.default.isUnset(request.fileSource)) {
            body["fileSource"] = request.fileSource;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        if (!tea_util_1.default.isUnset(request.reviewCustomRules)) {
            body["reviewCustomRules"] = request.reviewCustomRules;
        }
        if (!tea_util_1.default.isUnset(request.ruleType)) {
            body["ruleType"] = request.ruleType;
        }
        if (!tea_util_1.default.isUnset(request.standpoint)) {
            body["standpoint"] = request.standpoint;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateContractReviewTask",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/reviewTasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateContractReviewTaskResponse({}));
    }
    /**
     * 创建合同审查任务
     *
     * @param request - CreateContractReviewTaskRequest
     * @returns CreateContractReviewTaskResponse
     */
    async createContractReviewTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateContractReviewTaskHeaders({});
        return await this.createContractReviewTaskWithOptions(request, headers, runtime);
    }
    /**
     * 天谷侧查询审批单
     *
     * @param request - EsignQueryApprovalInfoRequest
     * @param headers - EsignQueryApprovalInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignQueryApprovalInfoResponse
     */
    async esignQueryApprovalInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.esignFlowId)) {
            body["esignFlowId"] = request.esignFlowId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignQueryApprovalInfo",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/approvalInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignQueryApprovalInfoResponse({}));
    }
    /**
     * 天谷侧查询审批单
     *
     * @param request - EsignQueryApprovalInfoRequest
     * @returns EsignQueryApprovalInfoResponse
     */
    async esignQueryApprovalInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignQueryApprovalInfoHeaders({});
        return await this.esignQueryApprovalInfoWithOptions(request, headers, runtime);
    }
    /**
     * 天谷侧查询授权信息接口
     *
     * @param request - EsignQueryGrantInfoRequest
     * @param headers - EsignQueryGrantInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignQueryGrantInfoResponse
     */
    async esignQueryGrantInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignQueryGrantInfo",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/anthInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignQueryGrantInfoResponse({}));
    }
    /**
     * 天谷侧查询授权信息接口
     *
     * @param request - EsignQueryGrantInfoRequest
     * @returns EsignQueryGrantInfoResponse
     */
    async esignQueryGrantInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignQueryGrantInfoHeaders({});
        return await this.esignQueryGrantInfoWithOptions(request, headers, runtime);
    }
    /**
     * 天谷侧查询获取免登信息
     *
     * @param request - EsignQueryIdentityByTicketRequest
     * @param headers - EsignQueryIdentityByTicketHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignQueryIdentityByTicketResponse
     */
    async esignQueryIdentityByTicketWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.ticket)) {
            body["ticket"] = request.ticket;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignQueryIdentityByTicket",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/tickets/identities/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignQueryIdentityByTicketResponse({}));
    }
    /**
     * 天谷侧查询获取免登信息
     *
     * @param request - EsignQueryIdentityByTicketRequest
     * @returns EsignQueryIdentityByTicketResponse
     */
    async esignQueryIdentityByTicket(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignQueryIdentityByTicketHeaders({});
        return await this.esignQueryIdentityByTicketWithOptions(request, headers, runtime);
    }
    /**
     * e签宝电子签事件同步回传接口
     *
     * @param request - EsignSyncEventRequest
     * @param headers - EsignSyncEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignSyncEventResponse
     */
    async esignSyncEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.esignData)) {
            body["esignData"] = request.esignData;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignSyncEvent",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/events/sync`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignSyncEventResponse({}));
    }
    /**
     * e签宝电子签事件同步回传接口
     *
     * @param request - EsignSyncEventRequest
     * @returns EsignSyncEventResponse
     */
    async esignSyncEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignSyncEventHeaders({});
        return await this.esignSyncEventWithOptions(request, headers, runtime);
    }
    /**
     * 校验钉钉用户能否访问e签宝页面接口
     *
     * @param request - EsignUserVerifyRequest
     * @param headers - EsignUserVerifyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EsignUserVerifyResponse
     */
    async esignUserVerifyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignUserVerify",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/user/verify`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignUserVerifyResponse({}));
    }
    /**
     * 校验钉钉用户能否访问e签宝页面接口
     *
     * @param request - EsignUserVerifyRequest
     * @returns EsignUserVerifyResponse
     */
    async esignUserVerify(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignUserVerifyHeaders({});
        return await this.esignUserVerifyWithOptions(request, headers, runtime);
    }
    /**
     * 完成工单审查接口
     *
     * @param request - FinishReviewOrderRequest
     * @param headers - FinishReviewOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FinishReviewOrderResponse
     */
    async finishReviewOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endFiles)) {
            body["endFiles"] = request.endFiles;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FinishReviewOrder",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/reviews/finish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FinishReviewOrderResponse({}));
    }
    /**
     * 完成工单审查接口
     *
     * @param request - FinishReviewOrderRequest
     * @returns FinishReviewOrderResponse
     */
    async finishReviewOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FinishReviewOrderHeaders({});
        return await this.finishReviewOrderWithOptions(request, headers, runtime);
    }
    /**
     * e签宝查询智能合同版本接口
     *
     * @param request - QueryAdvancedContractVersionRequest
     * @param headers - QueryAdvancedContractVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAdvancedContractVersionResponse
     */
    async queryAdvancedContractVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryAdvancedContractVersion",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/versions/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAdvancedContractVersionResponse({}));
    }
    /**
     * e签宝查询智能合同版本接口
     *
     * @param request - QueryAdvancedContractVersionRequest
     * @returns QueryAdvancedContractVersionResponse
     */
    async queryAdvancedContractVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAdvancedContractVersionHeaders({});
        return await this.queryAdvancedContractVersionWithOptions(request, headers, runtime);
    }
    /**
     * 查询合同比对结果
     *
     * @param request - QueryContractCompareResultRequest
     * @param headers - QueryContractCompareResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryContractCompareResultResponse
     */
    async queryContractCompareResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.compareTaskId)) {
            body["compareTaskId"] = request.compareTaskId;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryContractCompareResult",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/comparisonResults/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryContractCompareResultResponse({}));
    }
    /**
     * 查询合同比对结果
     *
     * @param request - QueryContractCompareResultRequest
     * @returns QueryContractCompareResultResponse
     */
    async queryContractCompareResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryContractCompareResultHeaders({});
        return await this.queryContractCompareResultWithOptions(request, headers, runtime);
    }
    /**
     * 查询合同提取结果
     *
     * @param request - QueryContractExtractResultRequest
     * @param headers - QueryContractExtractResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryContractExtractResultResponse
     */
    async queryContractExtractResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extractTaskId)) {
            body["extractTaskId"] = request.extractTaskId;
        }
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryContractExtractResult",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/extractResults/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryContractExtractResultResponse({}));
    }
    /**
     * 查询合同提取结果
     *
     * @param request - QueryContractExtractResultRequest
     * @returns QueryContractExtractResultResponse
     */
    async queryContractExtractResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryContractExtractResultHeaders({});
        return await this.queryContractExtractResultWithOptions(request, headers, runtime);
    }
    /**
     * 查询合同审查结果
     *
     * @param request - QueryContractReviewResultRequest
     * @param headers - QueryContractReviewResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryContractReviewResultResponse
     */
    async queryContractReviewResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.requestId)) {
            body["requestId"] = request.requestId;
        }
        if (!tea_util_1.default.isUnset(request.reviewTaskId)) {
            body["reviewTaskId"] = request.reviewTaskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryContractReviewResult",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/reviewResults/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryContractReviewResultResponse({}));
    }
    /**
     * 查询合同审查结果
     *
     * @param request - QueryContractReviewResultRequest
     * @returns QueryContractReviewResultResponse
     */
    async queryContractReviewResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryContractReviewResultHeaders({});
        return await this.queryContractReviewResultWithOptions(request, headers, runtime);
    }
    /**
     * 发送合同相关卡片
     *
     * @param request - SendContractCardRequest
     * @param headers - SendContractCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendContractCardResponse
     */
    async sendContractCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardType)) {
            body["cardType"] = request.cardType;
        }
        if (!tea_util_1.default.isUnset(request.contractInfo)) {
            body["contractInfo"] = request.contractInfo;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.receiveGroups)) {
            body["receiveGroups"] = request.receiveGroups;
        }
        if (!tea_util_1.default.isUnset(request.receivers)) {
            body["receivers"] = request.receivers;
        }
        if (!tea_util_1.default.isUnset(request.sender)) {
            body["sender"] = request.sender;
        }
        if (!tea_util_1.default.isUnset(request.syncSingleChat)) {
            body["syncSingleChat"] = request.syncSingleChat;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendContractCard",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/cards/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendContractCardResponse({}));
    }
    /**
     * 发送合同相关卡片
     *
     * @param request - SendContractCardRequest
     * @returns SendContractCardResponse
     */
    async sendContractCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendContractCardHeaders({});
        return await this.sendContractCardWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map