/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CheckInCrowdsByMobileRequest extends $tea.Model {
    /**
     * @example
     * 12520
     *
     * **if can be null:**
     * true
     */
    crowdIds?: Buffer;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * N5u3hS6KJeoUdopXW4GzFg==
     */
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInCrowdsByMobileResponseBody extends $tea.Model {
    data?: boolean;
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckInCrowdsByMobileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckInCrowdsByMobileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointRequest extends $tea.Model {
    body?: ConsumePointRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointShrinkRequest extends $tea.Model {
    bodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointResponseBody extends $tea.Model {
    result?: ConsumePointResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ConsumePointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeliveryPlanHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeliveryPlanRequest extends $tea.Model {
    content?: {
        [key: string]: any;
    };
    endTime?: number;
    /**
     * @example
     * 1028
     */
    resId?: string;
    startTime?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeliveryPlanResponseBody extends $tea.Model {
    arguments?: any[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeliveryPlanResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeliveryPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoRequest extends $tea.Model {
    pointPoolCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoResponseBody extends $tea.Model {
    result?: GetPointInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPointInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointRequest extends $tea.Model {
    body?: RevertPointRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointShrinkRequest extends $tea.Model {
    bodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointResponseBody extends $tea.Model {
    result?: RevertPointResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RevertPointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBannerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBannerRequest extends $tea.Model {
    content?: {
        [key: string]: any;
    };
    endTime?: number;
    startTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBannerResponseBody extends $tea.Model {
    arguments?: any[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendBannerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendBannerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPopupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPopupRequest extends $tea.Model {
    content?: {
        [key: string]: any;
    };
    endTime?: number;
    startTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPopupResponseBody extends $tea.Model {
    arguments?: any[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPopupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendPopupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSearchShadeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSearchShadeRequest extends $tea.Model {
    content?: {
        [key: string]: any;
    };
    endTime?: number;
    startTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSearchShadeResponseBody extends $tea.Model {
    arguments?: any[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendSearchShadeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendSearchShadeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointRequestBodyConsumeDetailBenefit extends $tea.Model {
    benefitId?: string;
    name?: string;
    supplierName?: string;
    useUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointRequestBodyConsumeDetail extends $tea.Model {
    benefit?: ConsumePointRequestBodyConsumeDetailBenefit;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointRequestBody extends $tea.Model {
    consumeDetail?: ConsumePointRequestBodyConsumeDetail;
    pointPoolCode?: string;
    points?: number;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointResponseBodyResult extends $tea.Model {
    consumedPoints?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoResponseBodyResult extends $tea.Model {
    userPoints?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointRequestBody extends $tea.Model {
    pointPoolCode?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RevertPointResponseBodyResult extends $tea.Model {
    revertedPoints?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 根据加密后的用户手机号检查该用户是否在某人群中
     *
     * @param request - CheckInCrowdsByMobileRequest
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckInCrowdsByMobileResponse
     */
    checkInCrowdsByMobileWithOptions(request: CheckInCrowdsByMobileRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CheckInCrowdsByMobileResponse>;
    /**
     * 根据加密后的用户手机号检查该用户是否在某人群中
     *
     * @param request - CheckInCrowdsByMobileRequest
     * @returns CheckInCrowdsByMobileResponse
     */
    checkInCrowdsByMobile(request: CheckInCrowdsByMobileRequest): Promise<CheckInCrowdsByMobileResponse>;
    /**
     * 消耗用户积分
     *
     * @param tmpReq - ConsumePointRequest
     * @param headers - ConsumePointHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ConsumePointResponse
     */
    consumePointWithOptions(tmpReq: ConsumePointRequest, headers: ConsumePointHeaders, runtime: $Util.RuntimeOptions): Promise<ConsumePointResponse>;
    /**
     * 消耗用户积分
     *
     * @param request - ConsumePointRequest
     * @returns ConsumePointResponse
     */
    consumePoint(request: ConsumePointRequest): Promise<ConsumePointResponse>;
    /**
     * 发布钉钉投放任务（搜索穹顶、搜索发现、搜索关键字）
     *
     * @param request - CreateDeliveryPlanRequest
     * @param headers - CreateDeliveryPlanHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDeliveryPlanResponse
     */
    createDeliveryPlanWithOptions(request: CreateDeliveryPlanRequest, headers: CreateDeliveryPlanHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeliveryPlanResponse>;
    /**
     * 发布钉钉投放任务（搜索穹顶、搜索发现、搜索关键字）
     *
     * @param request - CreateDeliveryPlanRequest
     * @returns CreateDeliveryPlanResponse
     */
    createDeliveryPlan(request: CreateDeliveryPlanRequest): Promise<CreateDeliveryPlanResponse>;
    /**
     * 查询用户积分
     *
     * @param request - GetPointInfoRequest
     * @param headers - GetPointInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPointInfoResponse
     */
    getPointInfoWithOptions(request: GetPointInfoRequest, headers: GetPointInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPointInfoResponse>;
    /**
     * 查询用户积分
     *
     * @param request - GetPointInfoRequest
     * @returns GetPointInfoResponse
     */
    getPointInfo(request: GetPointInfoRequest): Promise<GetPointInfoResponse>;
    /**
     * 撤销用户单笔积分消耗
     *
     * @param tmpReq - RevertPointRequest
     * @param headers - RevertPointHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RevertPointResponse
     */
    revertPointWithOptions(tmpReq: RevertPointRequest, headers: RevertPointHeaders, runtime: $Util.RuntimeOptions): Promise<RevertPointResponse>;
    /**
     * 撤销用户单笔积分消耗
     *
     * @param request - RevertPointRequest
     * @returns RevertPointResponse
     */
    revertPoint(request: RevertPointRequest): Promise<RevertPointResponse>;
    /**
     * 发送钉钉统一引导Banner
     *
     * @param request - SendBannerRequest
     * @param headers - SendBannerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendBannerResponse
     */
    sendBannerWithOptions(request: SendBannerRequest, headers: SendBannerHeaders, runtime: $Util.RuntimeOptions): Promise<SendBannerResponse>;
    /**
     * 发送钉钉统一引导Banner
     *
     * @param request - SendBannerRequest
     * @returns SendBannerResponse
     */
    sendBanner(request: SendBannerRequest): Promise<SendBannerResponse>;
    /**
     * 发送钉钉首页弹窗
     *
     * @param request - SendPopupRequest
     * @param headers - SendPopupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendPopupResponse
     */
    sendPopupWithOptions(request: SendPopupRequest, headers: SendPopupHeaders, runtime: $Util.RuntimeOptions): Promise<SendPopupResponse>;
    /**
     * 发送钉钉首页弹窗
     *
     * @param request - SendPopupRequest
     * @returns SendPopupResponse
     */
    sendPopup(request: SendPopupRequest): Promise<SendPopupResponse>;
    /**
     * 发送钉钉搜索底纹
     *
     * @param request - SendSearchShadeRequest
     * @param headers - SendSearchShadeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendSearchShadeResponse
     */
    sendSearchShadeWithOptions(request: SendSearchShadeRequest, headers: SendSearchShadeHeaders, runtime: $Util.RuntimeOptions): Promise<SendSearchShadeResponse>;
    /**
     * 发送钉钉搜索底纹
     *
     * @param request - SendSearchShadeRequest
     * @returns SendSearchShadeResponse
     */
    sendSearchShade(request: SendSearchShadeRequest): Promise<SendSearchShadeResponse>;
}
