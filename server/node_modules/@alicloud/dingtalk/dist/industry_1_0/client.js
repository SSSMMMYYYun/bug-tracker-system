"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CampusGetRenterResponseBody = exports.CampusGetRenterRequest = exports.CampusGetRenterHeaders = exports.CampusGetCampusGroupResponse = exports.CampusGetCampusGroupResponseBody = exports.CampusGetCampusGroupRequest = exports.CampusGetCampusGroupHeaders = exports.CampusGetCampusResponse = exports.CampusGetCampusResponseBody = exports.CampusGetCampusRequest = exports.CampusGetCampusHeaders = exports.CampusDeleteRenterResponse = exports.CampusDeleteRenterRequest = exports.CampusDeleteRenterHeaders = exports.CampusDeleteCampusGroupResponse = exports.CampusDeleteCampusGroupResponseBody = exports.CampusDeleteCampusGroupRequest = exports.CampusDeleteCampusGroupHeaders = exports.CampusDelRenterMemberResponse = exports.CampusDelRenterMemberResponseBody = exports.CampusDelRenterMemberRequest = exports.CampusDelRenterMemberHeaders = exports.CampusCreateRenterResponse = exports.CampusCreateRenterResponseBody = exports.CampusCreateRenterRequest = exports.CampusCreateRenterHeaders = exports.CampusCreateCampusGroupResponse = exports.CampusCreateCampusGroupResponseBody = exports.CampusCreateCampusGroupRequest = exports.CampusCreateCampusGroupHeaders = exports.CampusCreateCampusResponse = exports.CampusCreateCampusResponseBody = exports.CampusCreateCampusRequest = exports.CampusCreateCampusHeaders = exports.CampusAddRenterMemberResponse = exports.CampusAddRenterMemberResponseBody = exports.CampusAddRenterMemberRequest = exports.CampusAddRenterMemberHeaders = exports.BusinessMatchResultResponse = exports.BusinessMatchResultResponseBody = exports.BusinessMatchResultRequest = exports.BusinessMatchResultHeaders = exports.BusinessMatchResponse = exports.BusinessMatchResponseBody = exports.BusinessMatchRequest = exports.BusinessMatchHeaders = exports.BatchGetTaskResultResponse = exports.BatchGetTaskResultResponseBody = exports.BatchGetTaskResultRequest = exports.BatchGetTaskResultHeaders = void 0;
exports.ChatAIRemoveDatasetPermissionResponseBody = exports.ChatAIRemoveDatasetPermissionRequest = exports.ChatAIRemoveDatasetPermissionHeaders = exports.ChatAIQueryDatasetPermissionResponse = exports.ChatAIQueryDatasetPermissionResponseBody = exports.ChatAIQueryDatasetPermissionRequest = exports.ChatAIQueryDatasetPermissionHeaders = exports.ChatAIListDatasetResponse = exports.ChatAIListDatasetResponseBody = exports.ChatAIListDatasetRequest = exports.ChatAIListDatasetHeaders = exports.ChatAIAddDatasetPermissionResponse = exports.ChatAIAddDatasetPermissionResponseBody = exports.ChatAIAddDatasetPermissionRequest = exports.ChatAIAddDatasetPermissionHeaders = exports.CampusUpdateRenterMemberResponse = exports.CampusUpdateRenterMemberResponseBody = exports.CampusUpdateRenterMemberRequest = exports.CampusUpdateRenterMemberHeaders = exports.CampusUpdateRenterResponse = exports.CampusUpdateRenterResponseBody = exports.CampusUpdateRenterRequest = exports.CampusUpdateRenterHeaders = exports.CampusUpdateCampusGroupResponse = exports.CampusUpdateCampusGroupResponseBody = exports.CampusUpdateCampusGroupRequest = exports.CampusUpdateCampusGroupHeaders = exports.CampusUpdateCampusResponse = exports.CampusUpdateCampusResponseBody = exports.CampusUpdateCampusRequest = exports.CampusUpdateCampusHeaders = exports.CampusListRenterMembersResponse = exports.CampusListRenterMembersResponseBody = exports.CampusListRenterMembersRequest = exports.CampusListRenterMembersHeaders = exports.CampusListRenterResponse = exports.CampusListRenterResponseBody = exports.CampusListRenterHeaders = exports.CampusListCampusGroupResponse = exports.CampusListCampusGroupResponseBody = exports.CampusListCampusGroupHeaders = exports.CampusListCampusResponse = exports.CampusListCampusResponseBody = exports.CampusListCampusRequest = exports.CampusListCampusHeaders = exports.CampusGetRenterMemberResponse = exports.CampusGetRenterMemberResponseBody = exports.CampusGetRenterMemberRequest = exports.CampusGetRenterMemberHeaders = exports.CampusGetRenterResponse = void 0;
exports.ChatMemoGetFileListHeaders = exports.ChatMemoFaqListResponse = exports.ChatMemoFaqListResponseBody = exports.ChatMemoFaqListRequest = exports.ChatMemoFaqListHeaders = exports.ChatMemoFaqDeleteResponse = exports.ChatMemoFaqDeleteResponseBody = exports.ChatMemoFaqDeleteRequest = exports.ChatMemoFaqDeleteHeaders = exports.ChatMemoFaqAddResponse = exports.ChatMemoFaqAddResponseBody = exports.ChatMemoFaqAddRequest = exports.ChatMemoFaqAddHeaders = exports.ChatMemoDeleteKnowledgeGraphRelationResponse = exports.ChatMemoDeleteKnowledgeGraphRelationResponseBody = exports.ChatMemoDeleteKnowledgeGraphRelationRequest = exports.ChatMemoDeleteKnowledgeGraphRelationHeaders = exports.ChatMemoDeleteKnowledgeGraphNodeResponse = exports.ChatMemoDeleteKnowledgeGraphNodeResponseBody = exports.ChatMemoDeleteKnowledgeGraphNodeRequest = exports.ChatMemoDeleteKnowledgeGraphNodeHeaders = exports.ChatMemoDeleteGeneralFileResponse = exports.ChatMemoDeleteGeneralFileResponseBody = exports.ChatMemoDeleteGeneralFileRequest = exports.ChatMemoDeleteGeneralFileHeaders = exports.ChatMemoAddKnowledgeGraphRelationResponse = exports.ChatMemoAddKnowledgeGraphRelationResponseBody = exports.ChatMemoAddKnowledgeGraphRelationRequest = exports.ChatMemoAddKnowledgeGraphRelationHeaders = exports.ChatMemoAddKnowledgeGraphNodeResponse = exports.ChatMemoAddKnowledgeGraphNodeResponseBody = exports.ChatMemoAddKnowledgeGraphNodeRequest = exports.ChatMemoAddKnowledgeGraphNodeHeaders = exports.ChatMemoAddGeneralFileResponse = exports.ChatMemoAddGeneralFileResponseBody = exports.ChatMemoAddGeneralFileRequest = exports.ChatMemoAddGeneralFileHeaders = exports.ChatFormGetDataForApiAccessResponse = exports.ChatFormGetDataForApiAccessResponseBody = exports.ChatFormGetDataForApiAccessRequest = exports.ChatFormGetDataForApiAccessHeaders = exports.ChatAiTravelListResponse = exports.ChatAiTravelListResponseBody = exports.ChatAiTravelListRequest = exports.ChatAiTravelListHeaders = exports.ChatAITextSentimentAnalysisResponse = exports.ChatAITextSentimentAnalysisResponseBody = exports.ChatAITextSentimentAnalysisRequest = exports.ChatAITextSentimentAnalysisHeaders = exports.ChatAIRemoveDatasetPermissionResponse = void 0;
exports.CollegeListCollegeSubDeptResponseBody = exports.CollegeListCollegeSubDeptRequest = exports.CollegeListCollegeSubDeptHeaders = exports.CollegeDeleteCollegeDeptResponse = exports.CollegeDeleteCollegeDeptResponseBody = exports.CollegeDeleteCollegeDeptRequest = exports.CollegeDeleteCollegeDeptHeaders = exports.CollegeChangeStudentDeptResponse = exports.CollegeChangeStudentDeptResponseBody = exports.CollegeChangeStudentDeptRequest = exports.CollegeChangeStudentDeptHeaders = exports.CollegeAddStudentResponse = exports.CollegeAddStudentResponseBody = exports.CollegeAddStudentRequest = exports.CollegeAddStudentHeaders = exports.CollegeAddManagerResponse = exports.CollegeAddManagerResponseBody = exports.CollegeAddManagerRequest = exports.CollegeAddManagerHeaders = exports.CollegeAddCollegeDeptResponse = exports.CollegeAddCollegeDeptResponseBody = exports.CollegeAddCollegeDeptRequest = exports.CollegeAddCollegeDeptHeaders = exports.CollegeActiveCollegeDeptGroupResponse = exports.CollegeActiveCollegeDeptGroupResponseBody = exports.CollegeActiveCollegeDeptGroupRequest = exports.CollegeActiveCollegeDeptGroupHeaders = exports.ChatMemoUpdateKnowledgeGraphRelationResponse = exports.ChatMemoUpdateKnowledgeGraphRelationResponseBody = exports.ChatMemoUpdateKnowledgeGraphRelationRequest = exports.ChatMemoUpdateKnowledgeGraphRelationHeaders = exports.ChatMemoUpdateKnowledgeGraphNodeResponse = exports.ChatMemoUpdateKnowledgeGraphNodeResponseBody = exports.ChatMemoUpdateKnowledgeGraphNodeRequest = exports.ChatMemoUpdateKnowledgeGraphNodeHeaders = exports.ChatMemoQueryKnowledgeGraphRelationResponse = exports.ChatMemoQueryKnowledgeGraphRelationResponseBody = exports.ChatMemoQueryKnowledgeGraphRelationRequest = exports.ChatMemoQueryKnowledgeGraphRelationHeaders = exports.ChatMemoQueryKnowledgeGraphNodeResponse = exports.ChatMemoQueryKnowledgeGraphNodeResponseBody = exports.ChatMemoQueryKnowledgeGraphNodeRequest = exports.ChatMemoQueryKnowledgeGraphNodeHeaders = exports.ChatMemoGetFileStatusResponse = exports.ChatMemoGetFileStatusResponseBody = exports.ChatMemoGetFileStatusRequest = exports.ChatMemoGetFileStatusHeaders = exports.ChatMemoGetFileListResponse = exports.ChatMemoGetFileListResponseBody = exports.ChatMemoGetFileListRequest = void 0;
exports.CollegeUpdateStudentInfoHeaders = exports.CollegeUpdateStudentDeptInfoResponse = exports.CollegeUpdateStudentDeptInfoResponseBody = exports.CollegeUpdateStudentDeptInfoRequest = exports.CollegeUpdateStudentDeptInfoHeaders = exports.CollegeUpdateCollegeDeptResponse = exports.CollegeUpdateCollegeDeptResponseBody = exports.CollegeUpdateCollegeDeptRequest = exports.CollegeUpdateCollegeDeptHeaders = exports.CollegeRemoveStudentResponse = exports.CollegeRemoveStudentResponseBody = exports.CollegeRemoveStudentRequest = exports.CollegeRemoveStudentHeaders = exports.CollegeRemoveManagerResponse = exports.CollegeRemoveManagerResponseBody = exports.CollegeRemoveManagerRequest = exports.CollegeRemoveManagerHeaders = exports.CollegeQueryStudentInfoByStudentIdResponse = exports.CollegeQueryStudentInfoByStudentIdResponseBody = exports.CollegeQueryStudentInfoByStudentIdRequest = exports.CollegeQueryStudentInfoByStudentIdHeaders = exports.CollegeQueryStudentInfoByMobileResponse = exports.CollegeQueryStudentInfoByMobileResponseBody = exports.CollegeQueryStudentInfoByMobileRequest = exports.CollegeQueryStudentInfoByMobileHeaders = exports.CollegeQueryStudentInfoByDeptResponse = exports.CollegeQueryStudentInfoByDeptResponseBody = exports.CollegeQueryStudentInfoByDeptRequest = exports.CollegeQueryStudentInfoByDeptHeaders = exports.CollegeQueryCollegeDeptInfoResponse = exports.CollegeQueryCollegeDeptInfoResponseBody = exports.CollegeQueryCollegeDeptInfoRequest = exports.CollegeQueryCollegeDeptInfoHeaders = exports.CollegeQueryCollegeDeptGroupInfoResponse = exports.CollegeQueryCollegeDeptGroupInfoResponseBody = exports.CollegeQueryCollegeDeptGroupInfoRequest = exports.CollegeQueryCollegeDeptGroupInfoHeaders = exports.CollegeListUncheckedStudentResponse = exports.CollegeListUncheckedStudentResponseBody = exports.CollegeListUncheckedStudentRequest = exports.CollegeListUncheckedStudentHeaders = exports.CollegeListStudentInfoResponse = exports.CollegeListStudentInfoResponseBody = exports.CollegeListStudentInfoRequest = exports.CollegeListStudentInfoHeaders = exports.CollegeListDeptManagerResponse = exports.CollegeListDeptManagerResponseBody = exports.CollegeListDeptManagerRequest = exports.CollegeListDeptManagerHeaders = exports.CollegeListCollegeSubDeptResponse = void 0;
exports.CustomizeContactEmpListResponseBody = exports.CustomizeContactEmpListRequest = exports.CustomizeContactEmpListHeaders = exports.CustomizeContactEmpDeleteResponse = exports.CustomizeContactEmpDeleteResponseBody = exports.CustomizeContactEmpDeleteRequest = exports.CustomizeContactEmpDeleteHeaders = exports.CustomizeContactEmpAddResponse = exports.CustomizeContactEmpAddResponseBody = exports.CustomizeContactEmpAddRequest = exports.CustomizeContactEmpAddHeaders = exports.CustomizeContactDeptUpdateResponse = exports.CustomizeContactDeptUpdateResponseBody = exports.CustomizeContactDeptUpdateRequest = exports.CustomizeContactDeptUpdateHeaders = exports.CustomizeContactDeptListResponse = exports.CustomizeContactDeptListResponseBody = exports.CustomizeContactDeptListRequest = exports.CustomizeContactDeptListHeaders = exports.CustomizeContactDeptInfoResponse = exports.CustomizeContactDeptInfoResponseBody = exports.CustomizeContactDeptInfoRequest = exports.CustomizeContactDeptInfoHeaders = exports.CustomizeContactDeptGroupCreateResponse = exports.CustomizeContactDeptGroupCreateResponseBody = exports.CustomizeContactDeptGroupCreateRequest = exports.CustomizeContactDeptGroupCreateHeaders = exports.CustomizeContactDeptDeleteResponse = exports.CustomizeContactDeptDeleteResponseBody = exports.CustomizeContactDeptDeleteRequest = exports.CustomizeContactDeptDeleteHeaders = exports.CustomizeContactDeptCreateResponse = exports.CustomizeContactDeptCreateResponseBody = exports.CustomizeContactDeptCreateRequest = exports.CustomizeContactDeptCreateHeaders = exports.CustomizeContactDeleteResponse = exports.CustomizeContactDeleteResponseBody = exports.CustomizeContactDeleteRequest = exports.CustomizeContactDeleteHeaders = exports.CustomizeContactCreateResponse = exports.CustomizeContactCreateResponseBody = exports.CustomizeContactCreateRequest = exports.CustomizeContactCreateHeaders = exports.CollegeUpdateStudentMoblieResponse = exports.CollegeUpdateStudentMoblieResponseBody = exports.CollegeUpdateStudentMoblieRequest = exports.CollegeUpdateStudentMoblieHeaders = exports.CollegeUpdateStudentInfoResponse = exports.CollegeUpdateStudentInfoResponseBody = exports.CollegeUpdateStudentInfoRequest = void 0;
exports.DigitalStoreSceneScopeHeaders = exports.DigitalStoreRolesResponse = exports.DigitalStoreRolesResponseBody = exports.DigitalStoreRolesHeaders = exports.DigitalStoreRightsInfoResponse = exports.DigitalStoreRightsInfoResponseBody = exports.DigitalStoreRightsInfoHeaders = exports.DigitalStoreNodeInfoResponse = exports.DigitalStoreNodeInfoResponseBody = exports.DigitalStoreNodeInfoRequest = exports.DigitalStoreNodeInfoHeaders = exports.DigitalStoreGroupsResponse = exports.DigitalStoreGroupsResponseBody = exports.DigitalStoreGroupsHeaders = exports.DigitalStoreGroupInfoResponse = exports.DigitalStoreGroupInfoResponseBody = exports.DigitalStoreGroupInfoRequest = exports.DigitalStoreGroupInfoHeaders = exports.DigitalStoreExportCardRecordDetailResponse = exports.DigitalStoreExportCardRecordDetailResponseBody = exports.DigitalStoreExportCardRecordDetailRequest = exports.DigitalStoreExportCardRecordDetailHeaders = exports.DigitalStoreExportCardRecordResponse = exports.DigitalStoreExportCardRecordResponseBody = exports.DigitalStoreExportCardRecordRequest = exports.DigitalStoreExportCardRecordHeaders = exports.DigitalStoreConversationsResponse = exports.DigitalStoreConversationsResponseBody = exports.DigitalStoreConversationsRequest = exports.DigitalStoreConversationsHeaders = exports.DigitalStoreContactInfoResponse = exports.DigitalStoreContactInfoResponseBody = exports.DigitalStoreContactInfoHeaders = exports.DigitalStoreCardRecordResponse = exports.DigitalStoreCardRecordResponseBody = exports.DigitalStoreCardRecordRequest = exports.DigitalStoreCardRecordHeaders = exports.DIgitalStoreMessagePushResponse = exports.DIgitalStoreMessagePushResponseBody = exports.DIgitalStoreMessagePushShrinkRequest = exports.DIgitalStoreMessagePushRequest = exports.DIgitalStoreMessagePushHeaders = exports.CustomizeContactUpdateResponse = exports.CustomizeContactUpdateResponseBody = exports.CustomizeContactUpdateRequest = exports.CustomizeContactUpdateHeaders = exports.CustomizeContactListResponse = exports.CustomizeContactListResponseBody = exports.CustomizeContactListHeaders = exports.CustomizeContactEmpListResponse = void 0;
exports.IndustryManufactureCommonEventResponseBody = exports.IndustryManufactureCommonEventRequest = exports.IndustryManufactureCommonEventHeaders = exports.HospitalDataCheckResponse = exports.HospitalDataCheckResponseBody = exports.HospitalDataCheckRequest = exports.HospitalDataCheckHeaders = exports.GetTaskPackageResultResponse = exports.GetTaskPackageResultResponseBody = exports.GetTaskPackageResultRequest = exports.GetTaskPackageResultHeaders = exports.ExternalQueryExternalOrgsResponse = exports.ExternalQueryExternalOrgsResponseBody = exports.ExternalQueryExternalOrgsRequest = exports.ExternalQueryExternalOrgsHeaders = exports.ExternalQueryExternalBelongMainOrgResponse = exports.ExternalQueryExternalBelongMainOrgResponseBody = exports.ExternalQueryExternalBelongMainOrgRequest = exports.ExternalQueryExternalBelongMainOrgHeaders = exports.ExternalQueryExternalAppOrgsResponse = exports.ExternalQueryExternalAppOrgsResponseBody = exports.ExternalQueryExternalAppOrgsRequest = exports.ExternalQueryExternalAppOrgsHeaders = exports.DigitalStorelistExportTaskRecordResponse = exports.DigitalStorelistExportTaskRecordResponseBody = exports.DigitalStorelistExportTaskRecordRequest = exports.DigitalStorelistExportTaskRecordHeaders = exports.DigitalStoreUsersResponse = exports.DigitalStoreUsersResponseBody = exports.DigitalStoreUsersRequest = exports.DigitalStoreUsersHeaders = exports.DigitalStoreUserInfoResponse = exports.DigitalStoreUserInfoResponseBody = exports.DigitalStoreUserInfoRequest = exports.DigitalStoreUserInfoHeaders = exports.DigitalStoreUpdateAuthInfoResponse = exports.DigitalStoreUpdateAuthInfoResponseBody = exports.DigitalStoreUpdateAuthInfoRequest = exports.DigitalStoreUpdateAuthInfoHeaders = exports.DigitalStoreSubNodesResponse = exports.DigitalStoreSubNodesResponseBody = exports.DigitalStoreSubNodesRequest = exports.DigitalStoreSubNodesHeaders = exports.DigitalStoreStoreInfoResponse = exports.DigitalStoreStoreInfoResponseBody = exports.DigitalStoreStoreInfoRequest = exports.DigitalStoreStoreInfoHeaders = exports.DigitalStoreSceneScopeResponse = exports.DigitalStoreSceneScopeResponseBody = exports.DigitalStoreSceneScopeRequest = void 0;
exports.IndustryMmanufactureMaterialCostGetHeaders = exports.IndustryManufactureMesTeamMgmtResponse = exports.IndustryManufactureMesTeamMgmtResponseBody = exports.IndustryManufactureMesTeamMgmtRequest = exports.IndustryManufactureMesTeamMgmtHeaders = exports.IndustryManufactureMesSubCooperationTeamResponse = exports.IndustryManufactureMesSubCooperationTeamResponseBody = exports.IndustryManufactureMesSubCooperationTeamRequest = exports.IndustryManufactureMesSubCooperationTeamHeaders = exports.IndustryManufactureMesProductionPlanResponse = exports.IndustryManufactureMesProductionPlanResponseBody = exports.IndustryManufactureMesProductionPlanRequest = exports.IndustryManufactureMesProductionPlanHeaders = exports.IndustryManufactureMesProcessResponse = exports.IndustryManufactureMesProcessResponseBody = exports.IndustryManufactureMesProcessRequest = exports.IndustryManufactureMesProcessHeaders = exports.IndustryManufactureMesOutputResponse = exports.IndustryManufactureMesOutputResponseBody = exports.IndustryManufactureMesOutputRequest = exports.IndustryManufactureMesOutputHeaders = exports.IndustryManufactureMesOutPlanResponse = exports.IndustryManufactureMesOutPlanResponseBody = exports.IndustryManufactureMesOutPlanRequest = exports.IndustryManufactureMesOutPlanHeaders = exports.IndustryManufactureMesMaterialResponse = exports.IndustryManufactureMesMaterialResponseBody = exports.IndustryManufactureMesMaterialRequest = exports.IndustryManufactureMesMaterialHeaders = exports.IndustryManufactureMesDispatchTaskResponse = exports.IndustryManufactureMesDispatchTaskResponseBody = exports.IndustryManufactureMesDispatchTaskRequest = exports.IndustryManufactureMesDispatchTaskHeaders = exports.IndustryManufactureMaterialListResponse = exports.IndustryManufactureMaterialListResponseBody = exports.IndustryManufactureMaterialListRequest = exports.IndustryManufactureMaterialListHeaders = exports.IndustryManufactureLabourCostResponse = exports.IndustryManufactureLabourCostResponseBody = exports.IndustryManufactureLabourCostRequest = exports.IndustryManufactureLabourCostHeaders = exports.IndustryManufactureFeeListGetResponse = exports.IndustryManufactureFeeListGetResponseBody = exports.IndustryManufactureFeeListGetRequest = exports.IndustryManufactureFeeListGetHeaders = exports.IndustryManufactureCostRecordListGetResponse = exports.IndustryManufactureCostRecordListGetResponseBody = exports.IndustryManufactureCostRecordListGetRequest = exports.IndustryManufactureCostRecordListGetHeaders = exports.IndustryManufactureCommonEventResponse = void 0;
exports.QueryDoctorDetailsByJobNumberResponse = exports.QueryDoctorDetailsByJobNumberResponseBody = exports.QueryDoctorDetailsByJobNumberRequest = exports.QueryDoctorDetailsByJobNumberHeaders = exports.QueryDepartmentInfoResponse = exports.QueryDepartmentInfoResponseBody = exports.QueryDepartmentInfoHeaders = exports.QueryDepartmentExtendInfoResponse = exports.QueryDepartmentExtendInfoResponseBody = exports.QueryDepartmentExtendInfoRequest = exports.QueryDepartmentExtendInfoHeaders = exports.QueryChatAIOXMInfoResponse = exports.QueryChatAIOXMInfoResponseBody = exports.QueryChatAIOXMInfoRequest = exports.QueryChatAIOXMInfoHeaders = exports.QueryBizOptLogResponse = exports.QueryBizOptLogResponseBody = exports.QueryBizOptLogRequest = exports.QueryBizOptLogHeaders = exports.QueryAllMemberByGroupResponse = exports.QueryAllMemberByGroupResponseBody = exports.QueryAllMemberByGroupRequest = exports.QueryAllMemberByGroupHeaders = exports.QueryAllMemberByDeptResponse = exports.QueryAllMemberByDeptResponseBody = exports.QueryAllMemberByDeptRequest = exports.QueryAllMemberByDeptHeaders = exports.QueryAllGroupsInDeptResponse = exports.QueryAllGroupsInDeptResponseBody = exports.QueryAllGroupsInDeptRequest = exports.QueryAllGroupsInDeptHeaders = exports.QueryAllGroupResponse = exports.QueryAllGroupResponseBody = exports.QueryAllGroupRequest = exports.QueryAllGroupHeaders = exports.QueryAllDoctorsResponse = exports.QueryAllDoctorsResponseBody = exports.QueryAllDoctorsRequest = exports.QueryAllDoctorsHeaders = exports.QueryAllDepartmentResponse = exports.QueryAllDepartmentResponseBody = exports.QueryAllDepartmentRequest = exports.QueryAllDepartmentHeaders = exports.PushDingMessageResponse = exports.PushDingMessageResponseBody = exports.PushDingMessageRequest = exports.PushDingMessageHeaders = exports.IndustryMmanufactureMaterialCostGetResponse = exports.IndustryMmanufactureMaterialCostGetResponseBody = exports.IndustryMmanufactureMaterialCostGetRequest = void 0;
exports.SubmitTaskRequest = exports.SubmitTaskHeaders = exports.SaveUserExtendValuesResponse = exports.SaveUserExtendValuesResponseBody = exports.SaveUserExtendValuesRequest = exports.SaveUserExtendValuesHeaders = exports.QueryUserRolesResponse = exports.QueryUserRolesResponseBody = exports.QueryUserRolesHeaders = exports.QueryUserProbCodeDictionaryResponse = exports.QueryUserProbCodeDictionaryResponseBody = exports.QueryUserProbCodeDictionaryHeaders = exports.QueryUserInfoResponse = exports.QueryUserInfoResponseBody = exports.QueryUserInfoRequest = exports.QueryUserInfoHeaders = exports.QueryUserExtendValuesResponse = exports.QueryUserExtendValuesResponseBody = exports.QueryUserExtendValuesRequest = exports.QueryUserExtendValuesHeaders = exports.QueryUserExtInfoResponse = exports.QueryUserExtInfoResponseBody = exports.QueryUserExtInfoHeaders = exports.QueryUserCredentialsResponse = exports.QueryUserCredentialsResponseBody = exports.QueryUserCredentialsRequest = exports.QueryUserCredentialsHeaders = exports.QueryMedicalEventsResponse = exports.QueryMedicalEventsResponseBody = exports.QueryMedicalEventsHeaders = exports.QueryJobStatusCodeDictionaryResponse = exports.QueryJobStatusCodeDictionaryResponseBody = exports.QueryJobStatusCodeDictionaryHeaders = exports.QueryJobCodeDictionaryResponse = exports.QueryJobCodeDictionaryResponseBody = exports.QueryJobCodeDictionaryHeaders = exports.QueryHospitalRolesResponse = exports.QueryHospitalRolesResponseBody = exports.QueryHospitalRolesHeaders = exports.QueryHospitalRoleUserInfoResponse = exports.QueryHospitalRoleUserInfoResponseBody = exports.QueryHospitalRoleUserInfoRequest = exports.QueryHospitalRoleUserInfoHeaders = exports.QueryHospitalDistrictInfoResponse = exports.QueryHospitalDistrictInfoResponseBody = exports.QueryHospitalDistrictInfoRequest = exports.QueryHospitalDistrictInfoHeaders = exports.QueryGroupInfoResponse = exports.QueryGroupInfoResponseBody = exports.QueryGroupInfoHeaders = void 0;
exports.SupplyDeletePartnerAdminsResponse = exports.SupplyDeletePartnerAdminsResponseBody = exports.SupplyDeletePartnerAdminsRequest = exports.SupplyDeletePartnerAdminsHeaders = exports.SupplyDeleteMemberResponse = exports.SupplyDeleteMemberResponseBody = exports.SupplyDeleteMemberRequest = exports.SupplyDeleteMemberHeaders = exports.SupplyChainUpdateDeptInfoResponse = exports.SupplyChainUpdateDeptInfoResponseBody = exports.SupplyChainUpdateDeptInfoRequest = exports.SupplyChainUpdateDeptInfoHeaders = exports.SupplyChainQueryDeptInfoResponse = exports.SupplyChainQueryDeptInfoResponseBody = exports.SupplyChainQueryDeptInfoRequest = exports.SupplyChainQueryDeptInfoHeaders = exports.SupplyChainDeleteDeptResponse = exports.SupplyChainDeleteDeptResponseBody = exports.SupplyChainDeleteDeptRequest = exports.SupplyChainDeleteDeptHeaders = exports.SupplyAddPartnerTypeResponse = exports.SupplyAddPartnerTypeResponseBody = exports.SupplyAddPartnerTypeRequest = exports.SupplyAddPartnerTypeHeaders = exports.SupplyAddPartnerManagersResponse = exports.SupplyAddPartnerManagersResponseBody = exports.SupplyAddPartnerManagersRequest = exports.SupplyAddPartnerManagersHeaders = exports.SupplyAddPartnerAdminsResponse = exports.SupplyAddPartnerAdminsResponseBody = exports.SupplyAddPartnerAdminsRequest = exports.SupplyAddPartnerAdminsHeaders = exports.SupplyAddMemberResponse = exports.SupplyAddMemberResponseBody = exports.SupplyAddMemberRequest = exports.SupplyAddMemberHeaders = exports.SupplyAddDeptResponse = exports.SupplyAddDeptResponseBody = exports.SupplyAddDeptRequest = exports.SupplyAddDeptHeaders = exports.SupplAddRoleResponse = exports.SupplAddRoleResponseBody = exports.SupplAddRoleRequest = exports.SupplAddRoleHeaders = exports.SubmitTaskPackageResponse = exports.SubmitTaskPackageResponseBody = exports.SubmitTaskPackageRequest = exports.SubmitTaskPackageHeaders = exports.SubmitTaskResponse = exports.SubmitTaskResponseBody = void 0;
exports.SupplyUpdatePartnerTypeRequest = exports.SupplyUpdatePartnerTypeHeaders = exports.SupplyUpdateMemberResponse = exports.SupplyUpdateMemberResponseBody = exports.SupplyUpdateMemberRequest = exports.SupplyUpdateMemberHeaders = exports.SupplyQueryPartnerTypeResponse = exports.SupplyQueryPartnerTypeResponseBody = exports.SupplyQueryPartnerTypeRequest = exports.SupplyQueryPartnerTypeHeaders = exports.SupplyListSubDeptResponse = exports.SupplyListSubDeptResponseBody = exports.SupplyListSubDeptRequest = exports.SupplyListSubDeptHeaders = exports.SupplyListRoleResponse = exports.SupplyListRoleResponseBody = exports.SupplyListRoleRequest = exports.SupplyListRoleHeaders = exports.SupplyListPartnerTypeResponse = exports.SupplyListPartnerTypeResponseBody = exports.SupplyListPartnerTypeRequest = exports.SupplyListPartnerTypeHeaders = exports.SupplyListPartnerManagersResponse = exports.SupplyListPartnerManagersResponseBody = exports.SupplyListPartnerManagersRequest = exports.SupplyListPartnerManagersHeaders = exports.SupplyListPartnerAdminsResponse = exports.SupplyListPartnerAdminsResponseBody = exports.SupplyListPartnerAdminsRequest = exports.SupplyListPartnerAdminsHeaders = exports.SupplyListDeptMembersResponse = exports.SupplyListDeptMembersResponseBody = exports.SupplyListDeptMembersRequest = exports.SupplyListDeptMembersHeaders = exports.SupplyGetMemberResponse = exports.SupplyGetMemberResponseBody = exports.SupplyGetMemberRequest = exports.SupplyGetMemberHeaders = exports.SupplyDeleteRoleResponse = exports.SupplyDeleteRoleResponseBody = exports.SupplyDeleteRoleRequest = exports.SupplyDeleteRoleHeaders = exports.SupplyDeletePartnerTypeResponse = exports.SupplyDeletePartnerTypeResponseBody = exports.SupplyDeletePartnerTypeRequest = exports.SupplyDeletePartnerTypeHeaders = exports.SupplyDeletePartnerManagersResponse = exports.SupplyDeletePartnerManagersResponseBody = exports.SupplyDeletePartnerManagersRequest = exports.SupplyDeletePartnerManagersHeaders = void 0;
exports.DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList = exports.DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList = exports.DigitalStoreSubNodesResponseBodyContent = exports.DigitalStoreRolesResponseBodyContent = exports.DigitalStoreGroupsResponseBodyContent = exports.DigitalStoreConversationsResponseBodyContent = exports.DigitalStoreCardRecordResponseBodyContent = exports.DigitalStoreCardRecordResponseBodyContentDetailList = exports.DIgitalStoreMessagePushRequestMessageDataList = exports.CustomizeContactListResponseBodyContent = exports.CustomizeContactEmpListResponseBodyContent = exports.CustomizeContactDeptListResponseBodyContent = exports.CustomizeContactDeptInfoResponseBodyContent = exports.CustomizeContactCreateResponseBodyContent = exports.CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList = exports.CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList = exports.CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList = exports.CollegeListStudentInfoResponseBodyStudentInfoSimpleList = exports.CollegeListDeptManagerResponseBodyManagerInfoSimpleList = exports.CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList = exports.ChatMemoUpdateKnowledgeGraphRelationRequestRelationInfo = exports.ChatMemoUpdateKnowledgeGraphNodeRequestNodeInfo = exports.ChatMemoQueryKnowledgeGraphRelationResponseBodyRelationInfo = exports.ChatMemoQueryKnowledgeGraphNodeResponseBodyNodeInfo = exports.ChatMemoGetFileListResponseBodyData = exports.ChatMemoFaqListResponseBodyData = exports.ChatMemoAddKnowledgeGraphRelationRequestRelationInfo = exports.ChatMemoAddKnowledgeGraphNodeRequestNodeInfo = exports.ChatMemoAddGeneralFileRequestTagList = exports.ChatAiTravelListRequestParamList = exports.ChatAITextSentimentAnalysisResponseBodyResult = exports.ChatAIQueryDatasetPermissionResponseBodyPermissionInfos = exports.ChatAIListDatasetResponseBodyResult = exports.CampusListRenterMembersResponseBodyResult = exports.CampusListRenterResponseBodyResult = exports.CampusListCampusGroupResponseBodyResult = exports.CampusListCampusResponseBodyResult = exports.BatchGetTaskResultResponseBodyTasks = exports.BatchGetTaskResultResponseBodyTasksResult = exports.BatchGetTaskResultResponseBodyTasksResultItems = exports.BatchGetTaskResultResponseBodyTasksResultItemsSubs = exports.UpdateUserExtendInfoResponse = exports.UpdateUserExtendInfoRequest = exports.UpdateUserExtendInfoHeaders = exports.SupplyUpdateRoleResponse = exports.SupplyUpdateRoleResponseBody = exports.SupplyUpdateRoleRequest = exports.SupplyUpdateRoleHeaders = exports.SupplyUpdatePartnerTypeResponse = exports.SupplyUpdatePartnerTypeResponseBody = void 0;
exports.QueryDepartmentInfoResponseBodyContentExtendInfos = exports.QueryDepartmentInfoResponseBodyContentDepartment = exports.QueryDepartmentExtendInfoResponseBodyContent = exports.QueryBizOptLogResponseBodyContent = exports.QueryAllMemberByGroupResponseBodyContent = exports.QueryAllMemberByDeptResponseBodyContent = exports.QueryAllGroupsInDeptResponseBodyContent = exports.QueryAllGroupResponseBodyContent = exports.QueryAllDoctorsResponseBodyContent = exports.QueryAllDepartmentResponseBodyContent = exports.QueryAllDepartmentResponseBodyContentGroupAndExtList = exports.QueryAllDepartmentResponseBodyContentGroupAndExtListGroup = exports.QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader = exports.QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos = exports.QueryAllDepartmentResponseBodyContentDeptAndExt = exports.QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos = exports.QueryAllDepartmentResponseBodyContentDeptAndExtDepartment = exports.IndustryMmanufactureMaterialCostGetResponseBodyList = exports.IndustryManufactureMesTeamMgmtResponseBodyResult = exports.IndustryManufactureMesTeamMgmtRequestMembers = exports.IndustryManufactureMesTeamMgmtRequestLeaders = exports.IndustryManufactureMesTeamMgmtRequestGroupPlugins = exports.IndustryManufactureMesTeamMgmtRequestExtendData = exports.IndustryManufactureMesSubCooperationTeamResponseBodyResult = exports.IndustryManufactureMesSubCooperationTeamRequestMembers = exports.IndustryManufactureMesSubCooperationTeamRequestLeaders = exports.IndustryManufactureMesSubCooperationTeamRequestGroupPlugins = exports.IndustryManufactureMesSubCooperationTeamRequestExtendData = exports.IndustryManufactureMesProductionPlanResponseBodyResult = exports.IndustryManufactureMesProductionPlanRequestExtendData = exports.IndustryManufactureMesProcessResponseBodyResult = exports.IndustryManufactureMesProcessRequestExtendData = exports.IndustryManufactureMesOutputResponseBodyResult = exports.IndustryManufactureMesOutPlanResponseBodyResult = exports.IndustryManufactureMesMaterialResponseBodyResult = exports.IndustryManufactureMesMaterialRequestExtendData = exports.IndustryManufactureMesDispatchTaskResponseBodyResult = exports.IndustryManufactureMaterialListResponseBodyList = exports.IndustryManufactureLabourCostResponseBodyList = exports.IndustryManufactureFeeListGetResponseBodyList = exports.IndustryManufactureCostRecordListGetResponseBodyList = exports.IndustryManufactureCommonEventResponseBodyResult = exports.GetTaskPackageResultResponseBodyTasks = exports.GetTaskPackageResultResponseBodyTasksResult = exports.GetTaskPackageResultResponseBodyTasksResultItems = exports.ExternalQueryExternalOrgsResponseBodyResult = exports.ExternalQueryExternalAppOrgsResponseBodyResult = exports.DigitalStorelistExportTaskRecordResponseBodyContent = exports.DigitalStoreUsersResponseBodyContent = exports.DigitalStoreUpdateAuthInfoRequestUpdateUserList = void 0;
exports.SupplyQueryPartnerTypeResponseBodyResult = exports.SupplyListSubDeptResponseBodyResult = exports.SupplyListSubDeptResponseBodyResultPartnerTypeInfoList = exports.SupplyListRoleResponseBodyResult = exports.SupplyListPartnerTypeResponseBodyResult = exports.SupplyListPartnerManagersResponseBodyResult = exports.SupplyListPartnerAdminsResponseBodyResult = exports.SupplyListDeptMembersResponseBodyList = exports.SupplyGetMemberResponseBodyResult = exports.SupplyGetMemberResponseBodyResultRoleInfoList = exports.SupplyChainQueryDeptInfoResponseBodyResult = exports.SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList = exports.SupplyAddMemberResponseBodyResult = exports.SupplyAddDeptResponseBodyResult = exports.SubmitTaskPackageRequestData = exports.SubmitTaskResponseBodyTasks = exports.SubmitTaskRequestData = exports.QueryUserRolesResponseBodyContent = exports.QueryUserProbCodeDictionaryResponseBodyContent = exports.QueryUserInfoResponseBodyContent = exports.QueryUserInfoResponseBodyContentUserProb = exports.QueryUserInfoResponseBodyContentJobStatusList = exports.QueryUserInfoResponseBodyContentJobStatus = exports.QueryUserInfoResponseBodyContentJob = exports.QueryUserInfoResponseBodyContentGroup = exports.QueryUserInfoResponseBodyContentDept = exports.QueryUserExtendValuesResponseBodyContent = exports.QueryUserExtInfoResponseBodyContent = exports.QueryUserCredentialsResponseBodyContent = exports.QueryUserCredentialsResponseBodyContentCredentialList = exports.QueryMedicalEventsResponseBodyContent = exports.QueryJobStatusCodeDictionaryResponseBodyContent = exports.QueryJobCodeDictionaryResponseBodyContent = exports.QueryHospitalRolesResponseBodyContent = exports.QueryHospitalRoleUserInfoResponseBodyContent = exports.QueryHospitalDistrictInfoResponseBodyContent = exports.QueryGroupInfoResponseBodyContent = exports.QueryGroupInfoResponseBodyContentGroup = exports.QueryGroupInfoResponseBodyContentGroupLeader = exports.QueryGroupInfoResponseBodyContentExtendInfos = exports.QueryDoctorDetailsByJobNumberResponseBodyContent = exports.QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList = exports.QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle = exports.QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus = exports.QueryDoctorDetailsByJobNumberResponseBodyContentGroupList = exports.QueryDoctorDetailsByJobNumberResponseBodyContentDeptList = exports.QueryDepartmentInfoResponseBodyContent = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BatchGetTaskResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultHeaders = BatchGetTaskResultHeaders;
class BatchGetTaskResultRequest extends $tea.Model {
    static names() {
        return {
            taskIds: 'taskIds',
        };
    }
    static types() {
        return {
            taskIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultRequest = BatchGetTaskResultRequest;
class BatchGetTaskResultResponseBody extends $tea.Model {
    static names() {
        return {
            tasks: 'tasks',
        };
    }
    static types() {
        return {
            tasks: { 'type': 'array', 'itemType': BatchGetTaskResultResponseBodyTasks },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultResponseBody = BatchGetTaskResultResponseBody;
class BatchGetTaskResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchGetTaskResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultResponse = BatchGetTaskResultResponse;
class BusinessMatchHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchHeaders = BusinessMatchHeaders;
class BusinessMatchRequest extends $tea.Model {
    static names() {
        return {
            businessInfo: 'businessInfo',
            corpName: 'corpName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            businessInfo: 'string',
            corpName: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchRequest = BusinessMatchRequest;
class BusinessMatchResponseBody extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchResponseBody = BusinessMatchResponseBody;
class BusinessMatchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BusinessMatchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchResponse = BusinessMatchResponse;
class BusinessMatchResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchResultHeaders = BusinessMatchResultHeaders;
class BusinessMatchResultRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            taskId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchResultRequest = BusinessMatchResultRequest;
class BusinessMatchResultResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            isMatched: 'isMatched',
            status: 'status',
        };
    }
    static types() {
        return {
            content: 'string',
            isMatched: 'boolean',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchResultResponseBody = BusinessMatchResultResponseBody;
class BusinessMatchResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BusinessMatchResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BusinessMatchResultResponse = BusinessMatchResultResponse;
class CampusAddRenterMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusAddRenterMemberHeaders = CampusAddRenterMemberHeaders;
class CampusAddRenterMemberRequest extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            mobile: 'mobile',
            name: 'name',
            renterId: 'renterId',
            type: 'type',
        };
    }
    static types() {
        return {
            extend: 'string',
            mobile: 'string',
            name: 'string',
            renterId: 'number',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusAddRenterMemberRequest = CampusAddRenterMemberRequest;
class CampusAddRenterMemberResponseBody extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
            userId: 'userId',
            userState: 'userState',
        };
    }
    static types() {
        return {
            unionId: 'string',
            userId: 'string',
            userState: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusAddRenterMemberResponseBody = CampusAddRenterMemberResponseBody;
class CampusAddRenterMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusAddRenterMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusAddRenterMemberResponse = CampusAddRenterMemberResponse;
class CampusCreateCampusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusHeaders = CampusCreateCampusHeaders;
class CampusCreateCampusRequest extends $tea.Model {
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusName: 'campusName',
            capacity: 'capacity',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            creatorUnionId: 'creatorUnionId',
            description: 'description',
            extend: 'extend',
            location: 'location',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'number',
            campusName: 'string',
            capacity: 'number',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            creatorUnionId: 'string',
            description: 'string',
            extend: 'string',
            location: 'string',
            orderEndTime: 'number',
            orderInfo: 'string',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusRequest = CampusCreateCampusRequest;
class CampusCreateCampusResponseBody extends $tea.Model {
    static names() {
        return {
            campusCorpId: 'campusCorpId',
            campusDeptId: 'campusDeptId',
        };
    }
    static types() {
        return {
            campusCorpId: 'string',
            campusDeptId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusResponseBody = CampusCreateCampusResponseBody;
class CampusCreateCampusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusCreateCampusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusResponse = CampusCreateCampusResponse;
class CampusCreateCampusGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusGroupHeaders = CampusCreateCampusGroupHeaders;
class CampusCreateCampusGroupRequest extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            name: 'name',
        };
    }
    static types() {
        return {
            extend: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusGroupRequest = CampusCreateCampusGroupRequest;
class CampusCreateCampusGroupResponseBody extends $tea.Model {
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusGroupResponseBody = CampusCreateCampusGroupResponseBody;
class CampusCreateCampusGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusCreateCampusGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateCampusGroupResponse = CampusCreateCampusGroupResponse;
class CampusCreateRenterHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateRenterHeaders = CampusCreateRenterHeaders;
class CampusCreateRenterRequest extends $tea.Model {
    static names() {
        return {
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            startTime: 'number',
            state: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateRenterRequest = CampusCreateRenterRequest;
class CampusCreateRenterResponseBody extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateRenterResponseBody = CampusCreateRenterResponseBody;
class CampusCreateRenterResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusCreateRenterResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusCreateRenterResponse = CampusCreateRenterResponse;
class CampusDelRenterMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDelRenterMemberHeaders = CampusDelRenterMemberHeaders;
class CampusDelRenterMemberRequest extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            renterId: 'number',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDelRenterMemberRequest = CampusDelRenterMemberRequest;
class CampusDelRenterMemberResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDelRenterMemberResponseBody = CampusDelRenterMemberResponseBody;
class CampusDelRenterMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusDelRenterMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDelRenterMemberResponse = CampusDelRenterMemberResponse;
class CampusDeleteCampusGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteCampusGroupHeaders = CampusDeleteCampusGroupHeaders;
class CampusDeleteCampusGroupRequest extends $tea.Model {
    static names() {
        return {
            campusProjectGroupId: 'campusProjectGroupId',
        };
    }
    static types() {
        return {
            campusProjectGroupId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteCampusGroupRequest = CampusDeleteCampusGroupRequest;
class CampusDeleteCampusGroupResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteCampusGroupResponseBody = CampusDeleteCampusGroupResponseBody;
class CampusDeleteCampusGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusDeleteCampusGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteCampusGroupResponse = CampusDeleteCampusGroupResponse;
class CampusDeleteRenterHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteRenterHeaders = CampusDeleteRenterHeaders;
class CampusDeleteRenterRequest extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteRenterRequest = CampusDeleteRenterRequest;
class CampusDeleteRenterResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusDeleteRenterResponse = CampusDeleteRenterResponse;
class CampusGetCampusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusHeaders = CampusGetCampusHeaders;
class CampusGetCampusRequest extends $tea.Model {
    static names() {
        return {
            campusDeptId: 'campusDeptId',
        };
    }
    static types() {
        return {
            campusDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusRequest = CampusGetCampusRequest;
class CampusGetCampusResponseBody extends $tea.Model {
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusCorpId: 'campusCorpId',
            campusDeptId: 'campusDeptId',
            campusName: 'campusName',
            capacity: 'capacity',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            description: 'description',
            extend: 'extend',
            location: 'location',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'string',
            campusCorpId: 'string',
            campusDeptId: 'number',
            campusName: 'string',
            capacity: 'string',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            description: 'string',
            extend: 'string',
            location: 'string',
            orderEndTime: 'number',
            orderInfo: 'string',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusResponseBody = CampusGetCampusResponseBody;
class CampusGetCampusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusGetCampusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusResponse = CampusGetCampusResponse;
class CampusGetCampusGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusGroupHeaders = CampusGetCampusGroupHeaders;
class CampusGetCampusGroupRequest extends $tea.Model {
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusGroupRequest = CampusGetCampusGroupRequest;
class CampusGetCampusGroupResponseBody extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            projectGroupName: 'projectGroupName',
        };
    }
    static types() {
        return {
            extend: 'string',
            projectGroupName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusGroupResponseBody = CampusGetCampusGroupResponseBody;
class CampusGetCampusGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusGetCampusGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetCampusGroupResponse = CampusGetCampusGroupResponse;
class CampusGetRenterHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterHeaders = CampusGetRenterHeaders;
class CampusGetRenterRequest extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterRequest = CampusGetRenterRequest;
class CampusGetRenterResponseBody extends $tea.Model {
    static names() {
        return {
            bindRenterCorpId: 'bindRenterCorpId',
            bindTime: 'bindTime',
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            renterDeptId: 'renterDeptId',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            bindRenterCorpId: 'string',
            bindTime: 'number',
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            renterDeptId: 'number',
            startTime: 'number',
            state: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterResponseBody = CampusGetRenterResponseBody;
class CampusGetRenterResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusGetRenterResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterResponse = CampusGetRenterResponse;
class CampusGetRenterMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterMemberHeaders = CampusGetRenterMemberHeaders;
class CampusGetRenterMemberRequest extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            renterId: 'number',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterMemberRequest = CampusGetRenterMemberRequest;
class CampusGetRenterMemberResponseBody extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            inviteState: 'inviteState',
            name: 'name',
            state: 'state',
            type: 'type',
            userId: 'userId',
        };
    }
    static types() {
        return {
            extend: 'string',
            inviteState: 'number',
            name: 'string',
            state: 'string',
            type: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterMemberResponseBody = CampusGetRenterMemberResponseBody;
class CampusGetRenterMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusGetRenterMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusGetRenterMemberResponse = CampusGetRenterMemberResponse;
class CampusListCampusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusHeaders = CampusListCampusHeaders;
class CampusListCampusRequest extends $tea.Model {
    static names() {
        return {
            groupDeptId: 'groupDeptId',
        };
    }
    static types() {
        return {
            groupDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusRequest = CampusListCampusRequest;
class CampusListCampusResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListCampusResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusResponseBody = CampusListCampusResponseBody;
class CampusListCampusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusListCampusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusResponse = CampusListCampusResponse;
class CampusListCampusGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusGroupHeaders = CampusListCampusGroupHeaders;
class CampusListCampusGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListCampusGroupResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusGroupResponseBody = CampusListCampusGroupResponseBody;
class CampusListCampusGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusListCampusGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusGroupResponse = CampusListCampusGroupResponse;
class CampusListRenterHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterHeaders = CampusListRenterHeaders;
class CampusListRenterResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListRenterResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterResponseBody = CampusListRenterResponseBody;
class CampusListRenterResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusListRenterResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterResponse = CampusListRenterResponse;
class CampusListRenterMembersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterMembersHeaders = CampusListRenterMembersHeaders;
class CampusListRenterMembersRequest extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterMembersRequest = CampusListRenterMembersRequest;
class CampusListRenterMembersResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': CampusListRenterMembersResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterMembersResponseBody = CampusListRenterMembersResponseBody;
class CampusListRenterMembersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusListRenterMembersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterMembersResponse = CampusListRenterMembersResponse;
class CampusUpdateCampusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusHeaders = CampusUpdateCampusHeaders;
class CampusUpdateCampusRequest extends $tea.Model {
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusDeptId: 'campusDeptId',
            campusName: 'campusName',
            capacity: 'capacity',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            description: 'description',
            extend: 'extend',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'number',
            campusDeptId: 'number',
            campusName: 'string',
            capacity: 'number',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            description: 'string',
            extend: 'string',
            orderEndTime: 'number',
            orderInfo: 'number',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusRequest = CampusUpdateCampusRequest;
class CampusUpdateCampusResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusResponseBody = CampusUpdateCampusResponseBody;
class CampusUpdateCampusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusUpdateCampusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusResponse = CampusUpdateCampusResponse;
class CampusUpdateCampusGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusGroupHeaders = CampusUpdateCampusGroupHeaders;
class CampusUpdateCampusGroupRequest extends $tea.Model {
    static names() {
        return {
            campusProjectGroupId: 'campusProjectGroupId',
            extend: 'extend',
            name: 'name',
        };
    }
    static types() {
        return {
            campusProjectGroupId: 'number',
            extend: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusGroupRequest = CampusUpdateCampusGroupRequest;
class CampusUpdateCampusGroupResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusGroupResponseBody = CampusUpdateCampusGroupResponseBody;
class CampusUpdateCampusGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusUpdateCampusGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateCampusGroupResponse = CampusUpdateCampusGroupResponse;
class CampusUpdateRenterHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterHeaders = CampusUpdateRenterHeaders;
class CampusUpdateRenterRequest extends $tea.Model {
    static names() {
        return {
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            renterId: 'renterId',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            renterId: 'number',
            startTime: 'number',
            state: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterRequest = CampusUpdateRenterRequest;
class CampusUpdateRenterResponseBody extends $tea.Model {
    static names() {
        return {
            renterId: 'renterId',
        };
    }
    static types() {
        return {
            renterId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterResponseBody = CampusUpdateRenterResponseBody;
class CampusUpdateRenterResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusUpdateRenterResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterResponse = CampusUpdateRenterResponse;
class CampusUpdateRenterMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterMemberHeaders = CampusUpdateRenterMemberHeaders;
class CampusUpdateRenterMemberRequest extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            name: 'name',
            renterId: 'renterId',
            type: 'type',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            extend: 'string',
            name: 'string',
            renterId: 'number',
            type: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterMemberRequest = CampusUpdateRenterMemberRequest;
class CampusUpdateRenterMemberResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterMemberResponseBody = CampusUpdateRenterMemberResponseBody;
class CampusUpdateRenterMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CampusUpdateRenterMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusUpdateRenterMemberResponse = CampusUpdateRenterMemberResponse;
class ChatAIAddDatasetPermissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIAddDatasetPermissionHeaders = ChatAIAddDatasetPermissionHeaders;
class ChatAIAddDatasetPermissionRequest extends $tea.Model {
    static names() {
        return {
            authorizationType: 'authorizationType',
            authorizedObjectId: 'authorizedObjectId',
            datasetId: 'datasetId',
            optUser: 'optUser',
        };
    }
    static types() {
        return {
            authorizationType: 'string',
            authorizedObjectId: { 'type': 'array', 'itemType': 'string' },
            datasetId: 'number',
            optUser: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIAddDatasetPermissionRequest = ChatAIAddDatasetPermissionRequest;
class ChatAIAddDatasetPermissionResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIAddDatasetPermissionResponseBody = ChatAIAddDatasetPermissionResponseBody;
class ChatAIAddDatasetPermissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatAIAddDatasetPermissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIAddDatasetPermissionResponse = ChatAIAddDatasetPermissionResponse;
class ChatAIListDatasetHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIListDatasetHeaders = ChatAIListDatasetHeaders;
class ChatAIListDatasetRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
        };
    }
    static types() {
        return {
            appId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIListDatasetRequest = ChatAIListDatasetRequest;
class ChatAIListDatasetResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ChatAIListDatasetResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIListDatasetResponseBody = ChatAIListDatasetResponseBody;
class ChatAIListDatasetResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatAIListDatasetResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIListDatasetResponse = ChatAIListDatasetResponse;
class ChatAIQueryDatasetPermissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIQueryDatasetPermissionHeaders = ChatAIQueryDatasetPermissionHeaders;
class ChatAIQueryDatasetPermissionRequest extends $tea.Model {
    static names() {
        return {
            datasetId: 'datasetId',
        };
    }
    static types() {
        return {
            datasetId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIQueryDatasetPermissionRequest = ChatAIQueryDatasetPermissionRequest;
class ChatAIQueryDatasetPermissionResponseBody extends $tea.Model {
    static names() {
        return {
            permissionInfos: 'permissionInfos',
        };
    }
    static types() {
        return {
            permissionInfos: { 'type': 'array', 'itemType': ChatAIQueryDatasetPermissionResponseBodyPermissionInfos },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIQueryDatasetPermissionResponseBody = ChatAIQueryDatasetPermissionResponseBody;
class ChatAIQueryDatasetPermissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatAIQueryDatasetPermissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIQueryDatasetPermissionResponse = ChatAIQueryDatasetPermissionResponse;
class ChatAIRemoveDatasetPermissionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIRemoveDatasetPermissionHeaders = ChatAIRemoveDatasetPermissionHeaders;
class ChatAIRemoveDatasetPermissionRequest extends $tea.Model {
    static names() {
        return {
            authorizationType: 'authorizationType',
            authorizedObjectId: 'authorizedObjectId',
            datasetId: 'datasetId',
            optUser: 'optUser',
        };
    }
    static types() {
        return {
            authorizationType: 'string',
            authorizedObjectId: { 'type': 'array', 'itemType': 'string' },
            datasetId: 'number',
            optUser: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIRemoveDatasetPermissionRequest = ChatAIRemoveDatasetPermissionRequest;
class ChatAIRemoveDatasetPermissionResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIRemoveDatasetPermissionResponseBody = ChatAIRemoveDatasetPermissionResponseBody;
class ChatAIRemoveDatasetPermissionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatAIRemoveDatasetPermissionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIRemoveDatasetPermissionResponse = ChatAIRemoveDatasetPermissionResponse;
class ChatAITextSentimentAnalysisHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAITextSentimentAnalysisHeaders = ChatAITextSentimentAnalysisHeaders;
class ChatAITextSentimentAnalysisRequest extends $tea.Model {
    static names() {
        return {
            history: 'history',
            text: 'text',
        };
    }
    static types() {
        return {
            history: { 'type': 'array', 'itemType': 'string' },
            text: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAITextSentimentAnalysisRequest = ChatAITextSentimentAnalysisRequest;
class ChatAITextSentimentAnalysisResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: ChatAITextSentimentAnalysisResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAITextSentimentAnalysisResponseBody = ChatAITextSentimentAnalysisResponseBody;
class ChatAITextSentimentAnalysisResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatAITextSentimentAnalysisResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAITextSentimentAnalysisResponse = ChatAITextSentimentAnalysisResponse;
class ChatAiTravelListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAiTravelListHeaders = ChatAiTravelListHeaders;
class ChatAiTravelListRequest extends $tea.Model {
    static names() {
        return {
            paramList: 'paramList',
            travelId: 'travelId',
        };
    }
    static types() {
        return {
            paramList: { 'type': 'array', 'itemType': ChatAiTravelListRequestParamList },
            travelId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAiTravelListRequest = ChatAiTravelListRequest;
class ChatAiTravelListResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAiTravelListResponseBody = ChatAiTravelListResponseBody;
class ChatAiTravelListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatAiTravelListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAiTravelListResponse = ChatAiTravelListResponse;
class ChatFormGetDataForApiAccessHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatFormGetDataForApiAccessHeaders = ChatFormGetDataForApiAccessHeaders;
class ChatFormGetDataForApiAccessRequest extends $tea.Model {
    static names() {
        return {
            dingTalkTraceId: 'dingTalkTraceId',
        };
    }
    static types() {
        return {
            dingTalkTraceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatFormGetDataForApiAccessRequest = ChatFormGetDataForApiAccessRequest;
class ChatFormGetDataForApiAccessResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatFormGetDataForApiAccessResponseBody = ChatFormGetDataForApiAccessResponseBody;
class ChatFormGetDataForApiAccessResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatFormGetDataForApiAccessResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatFormGetDataForApiAccessResponse = ChatFormGetDataForApiAccessResponse;
class ChatMemoAddGeneralFileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddGeneralFileHeaders = ChatMemoAddGeneralFileHeaders;
class ChatMemoAddGeneralFileRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            downloadUrl: 'downloadUrl',
            fileDesc: 'fileDesc',
            fileName: 'fileName',
            tagList: 'tagList',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            downloadUrl: 'string',
            fileDesc: 'string',
            fileName: 'string',
            tagList: { 'type': 'array', 'itemType': ChatMemoAddGeneralFileRequestTagList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddGeneralFileRequest = ChatMemoAddGeneralFileRequest;
class ChatMemoAddGeneralFileResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddGeneralFileResponseBody = ChatMemoAddGeneralFileResponseBody;
class ChatMemoAddGeneralFileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoAddGeneralFileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddGeneralFileResponse = ChatMemoAddGeneralFileResponse;
class ChatMemoAddKnowledgeGraphNodeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphNodeHeaders = ChatMemoAddKnowledgeGraphNodeHeaders;
class ChatMemoAddKnowledgeGraphNodeRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            nodeInfo: 'nodeInfo',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            nodeInfo: ChatMemoAddKnowledgeGraphNodeRequestNodeInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphNodeRequest = ChatMemoAddKnowledgeGraphNodeRequest;
class ChatMemoAddKnowledgeGraphNodeResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphNodeResponseBody = ChatMemoAddKnowledgeGraphNodeResponseBody;
class ChatMemoAddKnowledgeGraphNodeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoAddKnowledgeGraphNodeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphNodeResponse = ChatMemoAddKnowledgeGraphNodeResponse;
class ChatMemoAddKnowledgeGraphRelationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphRelationHeaders = ChatMemoAddKnowledgeGraphRelationHeaders;
class ChatMemoAddKnowledgeGraphRelationRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            relationInfo: 'relationInfo',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            relationInfo: ChatMemoAddKnowledgeGraphRelationRequestRelationInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphRelationRequest = ChatMemoAddKnowledgeGraphRelationRequest;
class ChatMemoAddKnowledgeGraphRelationResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphRelationResponseBody = ChatMemoAddKnowledgeGraphRelationResponseBody;
class ChatMemoAddKnowledgeGraphRelationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoAddKnowledgeGraphRelationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphRelationResponse = ChatMemoAddKnowledgeGraphRelationResponse;
class ChatMemoDeleteGeneralFileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteGeneralFileHeaders = ChatMemoDeleteGeneralFileHeaders;
class ChatMemoDeleteGeneralFileRequest extends $tea.Model {
    static names() {
        return {
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteGeneralFileRequest = ChatMemoDeleteGeneralFileRequest;
class ChatMemoDeleteGeneralFileResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteGeneralFileResponseBody = ChatMemoDeleteGeneralFileResponseBody;
class ChatMemoDeleteGeneralFileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoDeleteGeneralFileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteGeneralFileResponse = ChatMemoDeleteGeneralFileResponse;
class ChatMemoDeleteKnowledgeGraphNodeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphNodeHeaders = ChatMemoDeleteKnowledgeGraphNodeHeaders;
class ChatMemoDeleteKnowledgeGraphNodeRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphNodeRequest = ChatMemoDeleteKnowledgeGraphNodeRequest;
class ChatMemoDeleteKnowledgeGraphNodeResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            success: 'success',
        };
    }
    static types() {
        return {
            bizId: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphNodeResponseBody = ChatMemoDeleteKnowledgeGraphNodeResponseBody;
class ChatMemoDeleteKnowledgeGraphNodeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoDeleteKnowledgeGraphNodeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphNodeResponse = ChatMemoDeleteKnowledgeGraphNodeResponse;
class ChatMemoDeleteKnowledgeGraphRelationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphRelationHeaders = ChatMemoDeleteKnowledgeGraphRelationHeaders;
class ChatMemoDeleteKnowledgeGraphRelationRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphRelationRequest = ChatMemoDeleteKnowledgeGraphRelationRequest;
class ChatMemoDeleteKnowledgeGraphRelationResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            success: 'success',
        };
    }
    static types() {
        return {
            bizId: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphRelationResponseBody = ChatMemoDeleteKnowledgeGraphRelationResponseBody;
class ChatMemoDeleteKnowledgeGraphRelationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoDeleteKnowledgeGraphRelationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoDeleteKnowledgeGraphRelationResponse = ChatMemoDeleteKnowledgeGraphRelationResponse;
class ChatMemoFaqAddHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqAddHeaders = ChatMemoFaqAddHeaders;
class ChatMemoFaqAddRequest extends $tea.Model {
    static names() {
        return {
            answer: 'answer',
            bizId: 'bizId',
            datasetId: 'datasetId',
            question: 'question',
            redirection: 'redirection',
        };
    }
    static types() {
        return {
            answer: 'string',
            bizId: 'string',
            datasetId: 'number',
            question: 'string',
            redirection: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqAddRequest = ChatMemoFaqAddRequest;
class ChatMemoFaqAddResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqAddResponseBody = ChatMemoFaqAddResponseBody;
class ChatMemoFaqAddResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoFaqAddResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqAddResponse = ChatMemoFaqAddResponse;
class ChatMemoFaqDeleteHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqDeleteHeaders = ChatMemoFaqDeleteHeaders;
class ChatMemoFaqDeleteRequest extends $tea.Model {
    static names() {
        return {
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqDeleteRequest = ChatMemoFaqDeleteRequest;
class ChatMemoFaqDeleteResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqDeleteResponseBody = ChatMemoFaqDeleteResponseBody;
class ChatMemoFaqDeleteResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoFaqDeleteResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqDeleteResponse = ChatMemoFaqDeleteResponse;
class ChatMemoFaqListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqListHeaders = ChatMemoFaqListHeaders;
class ChatMemoFaqListRequest extends $tea.Model {
    static names() {
        return {
            datasetId: 'datasetId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            datasetId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqListRequest = ChatMemoFaqListRequest;
class ChatMemoFaqListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            total: 'total',
            totalPage: 'totalPage',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': ChatMemoFaqListResponseBodyData },
            pageNumber: 'number',
            pageSize: 'number',
            total: 'number',
            totalPage: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqListResponseBody = ChatMemoFaqListResponseBody;
class ChatMemoFaqListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoFaqListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqListResponse = ChatMemoFaqListResponse;
class ChatMemoGetFileListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileListHeaders = ChatMemoGetFileListHeaders;
class ChatMemoGetFileListRequest extends $tea.Model {
    static names() {
        return {
            datasetId: 'datasetId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            datasetId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileListRequest = ChatMemoGetFileListRequest;
class ChatMemoGetFileListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            total: 'total',
            totalPage: 'totalPage',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': ChatMemoGetFileListResponseBodyData },
            pageNumber: 'number',
            pageSize: 'number',
            total: 'number',
            totalPage: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileListResponseBody = ChatMemoGetFileListResponseBody;
class ChatMemoGetFileListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoGetFileListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileListResponse = ChatMemoGetFileListResponse;
class ChatMemoGetFileStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileStatusHeaders = ChatMemoGetFileStatusHeaders;
class ChatMemoGetFileStatusRequest extends $tea.Model {
    static names() {
        return {
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileStatusRequest = ChatMemoGetFileStatusRequest;
class ChatMemoGetFileStatusResponseBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
            statusDesc: 'statusDesc',
        };
    }
    static types() {
        return {
            status: 'number',
            statusDesc: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileStatusResponseBody = ChatMemoGetFileStatusResponseBody;
class ChatMemoGetFileStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoGetFileStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileStatusResponse = ChatMemoGetFileStatusResponse;
class ChatMemoQueryKnowledgeGraphNodeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphNodeHeaders = ChatMemoQueryKnowledgeGraphNodeHeaders;
class ChatMemoQueryKnowledgeGraphNodeRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphNodeRequest = ChatMemoQueryKnowledgeGraphNodeRequest;
class ChatMemoQueryKnowledgeGraphNodeResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            nodeInfo: 'nodeInfo',
        };
    }
    static types() {
        return {
            bizId: 'string',
            nodeInfo: ChatMemoQueryKnowledgeGraphNodeResponseBodyNodeInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphNodeResponseBody = ChatMemoQueryKnowledgeGraphNodeResponseBody;
class ChatMemoQueryKnowledgeGraphNodeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoQueryKnowledgeGraphNodeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphNodeResponse = ChatMemoQueryKnowledgeGraphNodeResponse;
class ChatMemoQueryKnowledgeGraphRelationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphRelationHeaders = ChatMemoQueryKnowledgeGraphRelationHeaders;
class ChatMemoQueryKnowledgeGraphRelationRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphRelationRequest = ChatMemoQueryKnowledgeGraphRelationRequest;
class ChatMemoQueryKnowledgeGraphRelationResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            relationInfo: 'relationInfo',
        };
    }
    static types() {
        return {
            bizId: 'string',
            relationInfo: ChatMemoQueryKnowledgeGraphRelationResponseBodyRelationInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphRelationResponseBody = ChatMemoQueryKnowledgeGraphRelationResponseBody;
class ChatMemoQueryKnowledgeGraphRelationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoQueryKnowledgeGraphRelationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphRelationResponse = ChatMemoQueryKnowledgeGraphRelationResponse;
class ChatMemoUpdateKnowledgeGraphNodeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphNodeHeaders = ChatMemoUpdateKnowledgeGraphNodeHeaders;
class ChatMemoUpdateKnowledgeGraphNodeRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            nodeInfo: 'nodeInfo',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            nodeInfo: ChatMemoUpdateKnowledgeGraphNodeRequestNodeInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphNodeRequest = ChatMemoUpdateKnowledgeGraphNodeRequest;
class ChatMemoUpdateKnowledgeGraphNodeResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            success: 'success',
        };
    }
    static types() {
        return {
            bizId: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphNodeResponseBody = ChatMemoUpdateKnowledgeGraphNodeResponseBody;
class ChatMemoUpdateKnowledgeGraphNodeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoUpdateKnowledgeGraphNodeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphNodeResponse = ChatMemoUpdateKnowledgeGraphNodeResponse;
class ChatMemoUpdateKnowledgeGraphRelationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphRelationHeaders = ChatMemoUpdateKnowledgeGraphRelationHeaders;
class ChatMemoUpdateKnowledgeGraphRelationRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            datasetId: 'datasetId',
            relationInfo: 'relationInfo',
        };
    }
    static types() {
        return {
            bizId: 'string',
            datasetId: 'number',
            relationInfo: ChatMemoUpdateKnowledgeGraphRelationRequestRelationInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphRelationRequest = ChatMemoUpdateKnowledgeGraphRelationRequest;
class ChatMemoUpdateKnowledgeGraphRelationResponseBody extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            success: 'success',
        };
    }
    static types() {
        return {
            bizId: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphRelationResponseBody = ChatMemoUpdateKnowledgeGraphRelationResponseBody;
class ChatMemoUpdateKnowledgeGraphRelationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatMemoUpdateKnowledgeGraphRelationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphRelationResponse = ChatMemoUpdateKnowledgeGraphRelationResponse;
class CollegeActiveCollegeDeptGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeActiveCollegeDeptGroupHeaders = CollegeActiveCollegeDeptGroupHeaders;
class CollegeActiveCollegeDeptGroupRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeActiveCollegeDeptGroupRequest = CollegeActiveCollegeDeptGroupRequest;
class CollegeActiveCollegeDeptGroupResponseBody extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeActiveCollegeDeptGroupResponseBody = CollegeActiveCollegeDeptGroupResponseBody;
class CollegeActiveCollegeDeptGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeActiveCollegeDeptGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeActiveCollegeDeptGroupResponse = CollegeActiveCollegeDeptGroupResponse;
class CollegeAddCollegeDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddCollegeDeptHeaders = CollegeAddCollegeDeptHeaders;
class CollegeAddCollegeDeptRequest extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            deptType: 'deptType',
            sortFactor: 'sortFactor',
            superId: 'superId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            deptType: 'string',
            sortFactor: 'number',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddCollegeDeptRequest = CollegeAddCollegeDeptRequest;
class CollegeAddCollegeDeptResponseBody extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddCollegeDeptResponseBody = CollegeAddCollegeDeptResponseBody;
class CollegeAddCollegeDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeAddCollegeDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddCollegeDeptResponse = CollegeAddCollegeDeptResponse;
class CollegeAddManagerHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddManagerHeaders = CollegeAddManagerHeaders;
class CollegeAddManagerRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddManagerRequest = CollegeAddManagerRequest;
class CollegeAddManagerResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddManagerResponseBody = CollegeAddManagerResponseBody;
class CollegeAddManagerResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeAddManagerResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddManagerResponse = CollegeAddManagerResponse;
class CollegeAddStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddStudentHeaders = CollegeAddStudentHeaders;
class CollegeAddStudentRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            empExtension: 'empExtension',
            gender: 'gender',
            identifyId: 'identifyId',
            mobile: 'mobile',
            startYear: 'startYear',
            studentName: 'studentName',
            studentNumber: 'studentNumber',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            empExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            gender: 'string',
            identifyId: 'string',
            mobile: 'string',
            startYear: 'string',
            studentName: 'string',
            studentNumber: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddStudentRequest = CollegeAddStudentRequest;
class CollegeAddStudentResponseBody extends $tea.Model {
    static names() {
        return {
            dingMemberStatus: 'dingMemberStatus',
            isActive: 'isActive',
            studentId: 'studentId',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dingMemberStatus: 'string',
            isActive: 'boolean',
            studentId: 'number',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddStudentResponseBody = CollegeAddStudentResponseBody;
class CollegeAddStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeAddStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeAddStudentResponse = CollegeAddStudentResponse;
class CollegeChangeStudentDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeChangeStudentDeptHeaders = CollegeChangeStudentDeptHeaders;
class CollegeChangeStudentDeptRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            newDeptId: 'newDeptId',
            studentId: 'studentId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            newDeptId: 'number',
            studentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeChangeStudentDeptRequest = CollegeChangeStudentDeptRequest;
class CollegeChangeStudentDeptResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeChangeStudentDeptResponseBody = CollegeChangeStudentDeptResponseBody;
class CollegeChangeStudentDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeChangeStudentDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeChangeStudentDeptResponse = CollegeChangeStudentDeptResponse;
class CollegeDeleteCollegeDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeDeleteCollegeDeptHeaders = CollegeDeleteCollegeDeptHeaders;
class CollegeDeleteCollegeDeptRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeDeleteCollegeDeptRequest = CollegeDeleteCollegeDeptRequest;
class CollegeDeleteCollegeDeptResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeDeleteCollegeDeptResponseBody = CollegeDeleteCollegeDeptResponseBody;
class CollegeDeleteCollegeDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeDeleteCollegeDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeDeleteCollegeDeptResponse = CollegeDeleteCollegeDeptResponse;
class CollegeListCollegeSubDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListCollegeSubDeptHeaders = CollegeListCollegeSubDeptHeaders;
class CollegeListCollegeSubDeptRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListCollegeSubDeptRequest = CollegeListCollegeSubDeptRequest;
class CollegeListCollegeSubDeptResponseBody extends $tea.Model {
    static names() {
        return {
            collegeDeptInfoSimpleList: 'collegeDeptInfoSimpleList',
        };
    }
    static types() {
        return {
            collegeDeptInfoSimpleList: { 'type': 'array', 'itemType': CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListCollegeSubDeptResponseBody = CollegeListCollegeSubDeptResponseBody;
class CollegeListCollegeSubDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeListCollegeSubDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListCollegeSubDeptResponse = CollegeListCollegeSubDeptResponse;
class CollegeListDeptManagerHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListDeptManagerHeaders = CollegeListDeptManagerHeaders;
class CollegeListDeptManagerRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            deptId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListDeptManagerRequest = CollegeListDeptManagerRequest;
class CollegeListDeptManagerResponseBody extends $tea.Model {
    static names() {
        return {
            managerInfoSimpleList: 'managerInfoSimpleList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            managerInfoSimpleList: { 'type': 'array', 'itemType': CollegeListDeptManagerResponseBodyManagerInfoSimpleList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListDeptManagerResponseBody = CollegeListDeptManagerResponseBody;
class CollegeListDeptManagerResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeListDeptManagerResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListDeptManagerResponse = CollegeListDeptManagerResponse;
class CollegeListStudentInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListStudentInfoHeaders = CollegeListStudentInfoHeaders;
class CollegeListStudentInfoRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            dingStudentStatus: 'dingStudentStatus',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            deptId: 'number',
            dingStudentStatus: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListStudentInfoRequest = CollegeListStudentInfoRequest;
class CollegeListStudentInfoResponseBody extends $tea.Model {
    static names() {
        return {
            studentInfoSimpleList: 'studentInfoSimpleList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            studentInfoSimpleList: { 'type': 'array', 'itemType': CollegeListStudentInfoResponseBodyStudentInfoSimpleList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListStudentInfoResponseBody = CollegeListStudentInfoResponseBody;
class CollegeListStudentInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeListStudentInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListStudentInfoResponse = CollegeListStudentInfoResponse;
class CollegeListUncheckedStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListUncheckedStudentHeaders = CollegeListUncheckedStudentHeaders;
class CollegeListUncheckedStudentRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            deptId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListUncheckedStudentRequest = CollegeListUncheckedStudentRequest;
class CollegeListUncheckedStudentResponseBody extends $tea.Model {
    static names() {
        return {
            studentInfoSimpleList: 'studentInfoSimpleList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            studentInfoSimpleList: { 'type': 'array', 'itemType': CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListUncheckedStudentResponseBody = CollegeListUncheckedStudentResponseBody;
class CollegeListUncheckedStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeListUncheckedStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListUncheckedStudentResponse = CollegeListUncheckedStudentResponse;
class CollegeQueryCollegeDeptGroupInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptGroupInfoHeaders = CollegeQueryCollegeDeptGroupInfoHeaders;
class CollegeQueryCollegeDeptGroupInfoRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptGroupInfoRequest = CollegeQueryCollegeDeptGroupInfoRequest;
class CollegeQueryCollegeDeptGroupInfoResponseBody extends $tea.Model {
    static names() {
        return {
            groupName: 'groupName',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptGroupInfoResponseBody = CollegeQueryCollegeDeptGroupInfoResponseBody;
class CollegeQueryCollegeDeptGroupInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeQueryCollegeDeptGroupInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptGroupInfoResponse = CollegeQueryCollegeDeptGroupInfoResponse;
class CollegeQueryCollegeDeptInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptInfoHeaders = CollegeQueryCollegeDeptInfoHeaders;
class CollegeQueryCollegeDeptInfoRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptInfoRequest = CollegeQueryCollegeDeptInfoRequest;
class CollegeQueryCollegeDeptInfoResponseBody extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            deptType: 'deptType',
            sortFactor: 'sortFactor',
            superId: 'superId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            deptType: 'string',
            sortFactor: 'number',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptInfoResponseBody = CollegeQueryCollegeDeptInfoResponseBody;
class CollegeQueryCollegeDeptInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeQueryCollegeDeptInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryCollegeDeptInfoResponse = CollegeQueryCollegeDeptInfoResponse;
class CollegeQueryStudentInfoByDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByDeptHeaders = CollegeQueryStudentInfoByDeptHeaders;
class CollegeQueryStudentInfoByDeptRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            studentId: 'studentId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            studentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByDeptRequest = CollegeQueryStudentInfoByDeptRequest;
class CollegeQueryStudentInfoByDeptResponseBody extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            dingMemberStatus: 'dingMemberStatus',
            empExtension: 'empExtension',
            gender: 'gender',
            identifyId: 'identifyId',
            isActive: 'isActive',
            startYear: 'startYear',
            studentId: 'studentId',
            studentName: 'studentName',
            studentNumber: 'studentNumber',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            dingMemberStatus: 'string',
            empExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            gender: 'string',
            identifyId: 'string',
            isActive: 'boolean',
            startYear: 'string',
            studentId: 'number',
            studentName: 'string',
            studentNumber: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByDeptResponseBody = CollegeQueryStudentInfoByDeptResponseBody;
class CollegeQueryStudentInfoByDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeQueryStudentInfoByDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByDeptResponse = CollegeQueryStudentInfoByDeptResponse;
class CollegeQueryStudentInfoByMobileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByMobileHeaders = CollegeQueryStudentInfoByMobileHeaders;
class CollegeQueryStudentInfoByMobileRequest extends $tea.Model {
    static names() {
        return {
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            mobile: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByMobileRequest = CollegeQueryStudentInfoByMobileRequest;
class CollegeQueryStudentInfoByMobileResponseBody extends $tea.Model {
    static names() {
        return {
            deptStudentInfoList: 'deptStudentInfoList',
            dingMemberStatus: 'dingMemberStatus',
            empExtension: 'empExtension',
            gender: 'gender',
            identifyId: 'identifyId',
            isActive: 'isActive',
            startYear: 'startYear',
            studentId: 'studentId',
            studentName: 'studentName',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptStudentInfoList: { 'type': 'array', 'itemType': CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList },
            dingMemberStatus: 'string',
            empExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            gender: 'string',
            identifyId: 'string',
            isActive: 'boolean',
            startYear: 'string',
            studentId: 'number',
            studentName: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByMobileResponseBody = CollegeQueryStudentInfoByMobileResponseBody;
class CollegeQueryStudentInfoByMobileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeQueryStudentInfoByMobileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByMobileResponse = CollegeQueryStudentInfoByMobileResponse;
class CollegeQueryStudentInfoByStudentIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByStudentIdHeaders = CollegeQueryStudentInfoByStudentIdHeaders;
class CollegeQueryStudentInfoByStudentIdRequest extends $tea.Model {
    static names() {
        return {
            studentId: 'studentId',
        };
    }
    static types() {
        return {
            studentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByStudentIdRequest = CollegeQueryStudentInfoByStudentIdRequest;
class CollegeQueryStudentInfoByStudentIdResponseBody extends $tea.Model {
    static names() {
        return {
            deptStudentInfoList: 'deptStudentInfoList',
            dingMemberStatus: 'dingMemberStatus',
            empExtension: 'empExtension',
            gender: 'gender',
            identifyId: 'identifyId',
            isActive: 'isActive',
            startYear: 'startYear',
            studentId: 'studentId',
            studentName: 'studentName',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptStudentInfoList: { 'type': 'array', 'itemType': CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList },
            dingMemberStatus: 'string',
            empExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            gender: 'string',
            identifyId: 'string',
            isActive: 'boolean',
            startYear: 'string',
            studentId: 'number',
            studentName: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByStudentIdResponseBody = CollegeQueryStudentInfoByStudentIdResponseBody;
class CollegeQueryStudentInfoByStudentIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeQueryStudentInfoByStudentIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByStudentIdResponse = CollegeQueryStudentInfoByStudentIdResponse;
class CollegeRemoveManagerHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveManagerHeaders = CollegeRemoveManagerHeaders;
class CollegeRemoveManagerRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            isForce: 'isForce',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            isForce: 'boolean',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveManagerRequest = CollegeRemoveManagerRequest;
class CollegeRemoveManagerResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveManagerResponseBody = CollegeRemoveManagerResponseBody;
class CollegeRemoveManagerResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeRemoveManagerResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveManagerResponse = CollegeRemoveManagerResponse;
class CollegeRemoveStudentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveStudentHeaders = CollegeRemoveStudentHeaders;
class CollegeRemoveStudentRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            studentId: 'studentId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            studentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveStudentRequest = CollegeRemoveStudentRequest;
class CollegeRemoveStudentResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveStudentResponseBody = CollegeRemoveStudentResponseBody;
class CollegeRemoveStudentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeRemoveStudentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeRemoveStudentResponse = CollegeRemoveStudentResponse;
class CollegeUpdateCollegeDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateCollegeDeptHeaders = CollegeUpdateCollegeDeptHeaders;
class CollegeUpdateCollegeDeptRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            sortFactor: 'sortFactor',
            superId: 'superId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            sortFactor: 'number',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateCollegeDeptRequest = CollegeUpdateCollegeDeptRequest;
class CollegeUpdateCollegeDeptResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateCollegeDeptResponseBody = CollegeUpdateCollegeDeptResponseBody;
class CollegeUpdateCollegeDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeUpdateCollegeDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateCollegeDeptResponse = CollegeUpdateCollegeDeptResponse;
class CollegeUpdateStudentDeptInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentDeptInfoHeaders = CollegeUpdateStudentDeptInfoHeaders;
class CollegeUpdateStudentDeptInfoRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            studentId: 'studentId',
            studentNumber: 'studentNumber',
        };
    }
    static types() {
        return {
            deptId: 'number',
            studentId: 'number',
            studentNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentDeptInfoRequest = CollegeUpdateStudentDeptInfoRequest;
class CollegeUpdateStudentDeptInfoResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentDeptInfoResponseBody = CollegeUpdateStudentDeptInfoResponseBody;
class CollegeUpdateStudentDeptInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeUpdateStudentDeptInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentDeptInfoResponse = CollegeUpdateStudentDeptInfoResponse;
class CollegeUpdateStudentInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentInfoHeaders = CollegeUpdateStudentInfoHeaders;
class CollegeUpdateStudentInfoRequest extends $tea.Model {
    static names() {
        return {
            empExtension: 'empExtension',
            gender: 'gender',
            identifyId: 'identifyId',
            startYear: 'startYear',
            studentId: 'studentId',
            studentName: 'studentName',
        };
    }
    static types() {
        return {
            empExtension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            gender: 'string',
            identifyId: 'string',
            startYear: 'string',
            studentId: 'number',
            studentName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentInfoRequest = CollegeUpdateStudentInfoRequest;
class CollegeUpdateStudentInfoResponseBody extends $tea.Model {
    static names() {
        return {
            isSuccessful: 'isSuccessful',
        };
    }
    static types() {
        return {
            isSuccessful: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentInfoResponseBody = CollegeUpdateStudentInfoResponseBody;
class CollegeUpdateStudentInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeUpdateStudentInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentInfoResponse = CollegeUpdateStudentInfoResponse;
class CollegeUpdateStudentMoblieHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentMoblieHeaders = CollegeUpdateStudentMoblieHeaders;
class CollegeUpdateStudentMoblieRequest extends $tea.Model {
    static names() {
        return {
            isForce: 'isForce',
            newMobile: 'newMobile',
            studentId: 'studentId',
        };
    }
    static types() {
        return {
            isForce: 'boolean',
            newMobile: 'string',
            studentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentMoblieRequest = CollegeUpdateStudentMoblieRequest;
class CollegeUpdateStudentMoblieResponseBody extends $tea.Model {
    static names() {
        return {
            updateResult: 'updateResult',
        };
    }
    static types() {
        return {
            updateResult: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentMoblieResponseBody = CollegeUpdateStudentMoblieResponseBody;
class CollegeUpdateStudentMoblieResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CollegeUpdateStudentMoblieResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeUpdateStudentMoblieResponse = CollegeUpdateStudentMoblieResponse;
class CustomizeContactCreateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactCreateHeaders = CustomizeContactCreateHeaders;
class CustomizeContactCreateRequest extends $tea.Model {
    static names() {
        return {
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
        };
    }
    static types() {
        return {
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactCreateRequest = CustomizeContactCreateRequest;
class CustomizeContactCreateResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: CustomizeContactCreateResponseBodyContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactCreateResponseBody = CustomizeContactCreateResponseBody;
class CustomizeContactCreateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactCreateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactCreateResponse = CustomizeContactCreateResponse;
class CustomizeContactDeleteHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeleteHeaders = CustomizeContactDeleteHeaders;
class CustomizeContactDeleteRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeleteRequest = CustomizeContactDeleteRequest;
class CustomizeContactDeleteResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeleteResponseBody = CustomizeContactDeleteResponseBody;
class CustomizeContactDeleteResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeleteResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeleteResponse = CustomizeContactDeleteResponse;
class CustomizeContactDeptCreateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptCreateHeaders = CustomizeContactDeptCreateHeaders;
class CustomizeContactDeptCreateRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
            refId: 'refId',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
            refId: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptCreateRequest = CustomizeContactDeptCreateRequest;
class CustomizeContactDeptCreateResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptCreateResponseBody = CustomizeContactDeptCreateResponseBody;
class CustomizeContactDeptCreateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeptCreateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptCreateResponse = CustomizeContactDeptCreateResponse;
class CustomizeContactDeptDeleteHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptDeleteHeaders = CustomizeContactDeptDeleteHeaders;
class CustomizeContactDeptDeleteRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptDeleteRequest = CustomizeContactDeptDeleteRequest;
class CustomizeContactDeptDeleteResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptDeleteResponseBody = CustomizeContactDeptDeleteResponseBody;
class CustomizeContactDeptDeleteResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeptDeleteResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptDeleteResponse = CustomizeContactDeptDeleteResponse;
class CustomizeContactDeptGroupCreateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptGroupCreateHeaders = CustomizeContactDeptGroupCreateHeaders;
class CustomizeContactDeptGroupCreateRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptGroupCreateRequest = CustomizeContactDeptGroupCreateRequest;
class CustomizeContactDeptGroupCreateResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptGroupCreateResponseBody = CustomizeContactDeptGroupCreateResponseBody;
class CustomizeContactDeptGroupCreateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeptGroupCreateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptGroupCreateResponse = CustomizeContactDeptGroupCreateResponse;
class CustomizeContactDeptInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptInfoHeaders = CustomizeContactDeptInfoHeaders;
class CustomizeContactDeptInfoRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptInfoRequest = CustomizeContactDeptInfoRequest;
class CustomizeContactDeptInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: CustomizeContactDeptInfoResponseBodyContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptInfoResponseBody = CustomizeContactDeptInfoResponseBody;
class CustomizeContactDeptInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeptInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptInfoResponse = CustomizeContactDeptInfoResponse;
class CustomizeContactDeptListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptListHeaders = CustomizeContactDeptListHeaders;
class CustomizeContactDeptListRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptListRequest = CustomizeContactDeptListRequest;
class CustomizeContactDeptListResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CustomizeContactDeptListResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptListResponseBody = CustomizeContactDeptListResponseBody;
class CustomizeContactDeptListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeptListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptListResponse = CustomizeContactDeptListResponse;
class CustomizeContactDeptUpdateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptUpdateHeaders = CustomizeContactDeptUpdateHeaders;
class CustomizeContactDeptUpdateRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptUpdateRequest = CustomizeContactDeptUpdateRequest;
class CustomizeContactDeptUpdateResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptUpdateResponseBody = CustomizeContactDeptUpdateResponseBody;
class CustomizeContactDeptUpdateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactDeptUpdateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptUpdateResponse = CustomizeContactDeptUpdateResponse;
class CustomizeContactEmpAddHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpAddHeaders = CustomizeContactEmpAddHeaders;
class CustomizeContactEmpAddRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpAddRequest = CustomizeContactEmpAddRequest;
class CustomizeContactEmpAddResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpAddResponseBody = CustomizeContactEmpAddResponseBody;
class CustomizeContactEmpAddResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactEmpAddResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpAddResponse = CustomizeContactEmpAddResponse;
class CustomizeContactEmpDeleteHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpDeleteHeaders = CustomizeContactEmpDeleteHeaders;
class CustomizeContactEmpDeleteRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            deptId: 'deptId',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            code: 'string',
            deptId: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpDeleteRequest = CustomizeContactEmpDeleteRequest;
class CustomizeContactEmpDeleteResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpDeleteResponseBody = CustomizeContactEmpDeleteResponseBody;
class CustomizeContactEmpDeleteResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactEmpDeleteResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpDeleteResponse = CustomizeContactEmpDeleteResponse;
class CustomizeContactEmpListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpListHeaders = CustomizeContactEmpListHeaders;
class CustomizeContactEmpListRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpListRequest = CustomizeContactEmpListRequest;
class CustomizeContactEmpListResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CustomizeContactEmpListResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpListResponseBody = CustomizeContactEmpListResponseBody;
class CustomizeContactEmpListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactEmpListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpListResponse = CustomizeContactEmpListResponse;
class CustomizeContactListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactListHeaders = CustomizeContactListHeaders;
class CustomizeContactListResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CustomizeContactListResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactListResponseBody = CustomizeContactListResponseBody;
class CustomizeContactListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactListResponse = CustomizeContactListResponse;
class CustomizeContactUpdateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactUpdateHeaders = CustomizeContactUpdateHeaders;
class CustomizeContactUpdateRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
        };
    }
    static types() {
        return {
            code: 'string',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactUpdateRequest = CustomizeContactUpdateRequest;
class CustomizeContactUpdateResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactUpdateResponseBody = CustomizeContactUpdateResponseBody;
class CustomizeContactUpdateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CustomizeContactUpdateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactUpdateResponse = CustomizeContactUpdateResponse;
class DIgitalStoreMessagePushHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DIgitalStoreMessagePushHeaders = DIgitalStoreMessagePushHeaders;
class DIgitalStoreMessagePushRequest extends $tea.Model {
    static names() {
        return {
            messageDataList: 'messageDataList',
        };
    }
    static types() {
        return {
            messageDataList: { 'type': 'array', 'itemType': DIgitalStoreMessagePushRequestMessageDataList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DIgitalStoreMessagePushRequest = DIgitalStoreMessagePushRequest;
class DIgitalStoreMessagePushShrinkRequest extends $tea.Model {
    static names() {
        return {
            messageDataListShrink: 'messageDataList',
        };
    }
    static types() {
        return {
            messageDataListShrink: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DIgitalStoreMessagePushShrinkRequest = DIgitalStoreMessagePushShrinkRequest;
class DIgitalStoreMessagePushResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DIgitalStoreMessagePushResponseBody = DIgitalStoreMessagePushResponseBody;
class DIgitalStoreMessagePushResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DIgitalStoreMessagePushResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DIgitalStoreMessagePushResponse = DIgitalStoreMessagePushResponse;
class DigitalStoreCardRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreCardRecordHeaders = DigitalStoreCardRecordHeaders;
class DigitalStoreCardRecordRequest extends $tea.Model {
    static names() {
        return {
            beginTime: 'beginTime',
            endTime: 'endTime',
            ids: 'ids',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            sceneCardName: 'sceneCardName',
        };
    }
    static types() {
        return {
            beginTime: 'number',
            endTime: 'number',
            ids: { 'type': 'array', 'itemType': 'number' },
            pageNumber: 'number',
            pageSize: 'number',
            sceneCardName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreCardRecordRequest = DigitalStoreCardRecordRequest;
class DigitalStoreCardRecordResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreCardRecordResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreCardRecordResponseBody = DigitalStoreCardRecordResponseBody;
class DigitalStoreCardRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreCardRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreCardRecordResponse = DigitalStoreCardRecordResponse;
class DigitalStoreContactInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreContactInfoHeaders = DigitalStoreContactInfoHeaders;
class DigitalStoreContactInfoResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            dingDeptId: 'dingDeptId',
            name: 'name',
            rootDeptId: 'rootDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            dingDeptId: 'number',
            name: 'string',
            rootDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreContactInfoResponseBody = DigitalStoreContactInfoResponseBody;
class DigitalStoreContactInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreContactInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreContactInfoResponse = DigitalStoreContactInfoResponse;
class DigitalStoreConversationsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreConversationsHeaders = DigitalStoreConversationsHeaders;
class DigitalStoreConversationsRequest extends $tea.Model {
    static names() {
        return {
            conversationTitle: 'conversationTitle',
            conversationType: 'conversationType',
        };
    }
    static types() {
        return {
            conversationTitle: 'string',
            conversationType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreConversationsRequest = DigitalStoreConversationsRequest;
class DigitalStoreConversationsResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreConversationsResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreConversationsResponseBody = DigitalStoreConversationsResponseBody;
class DigitalStoreConversationsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreConversationsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreConversationsResponse = DigitalStoreConversationsResponse;
class DigitalStoreExportCardRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordHeaders = DigitalStoreExportCardRecordHeaders;
class DigitalStoreExportCardRecordRequest extends $tea.Model {
    static names() {
        return {
            beginTime: 'beginTime',
            endTime: 'endTime',
            ids: 'ids',
            sceneCardName: 'sceneCardName',
        };
    }
    static types() {
        return {
            beginTime: 'number',
            endTime: 'number',
            ids: { 'type': 'array', 'itemType': 'number' },
            sceneCardName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordRequest = DigitalStoreExportCardRecordRequest;
class DigitalStoreExportCardRecordResponseBody extends $tea.Model {
    static names() {
        return {
            fileName: 'fileName',
            fileType: 'fileType',
            fileUrl: 'fileUrl',
            id: 'id',
            isImport: 'isImport',
            remark: 'remark',
            status: 'status',
            successNum: 'successNum',
            totalNum: 'totalNum',
        };
    }
    static types() {
        return {
            fileName: 'string',
            fileType: 'string',
            fileUrl: 'string',
            id: 'string',
            isImport: 'string',
            remark: 'string',
            status: 'string',
            successNum: 'string',
            totalNum: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordResponseBody = DigitalStoreExportCardRecordResponseBody;
class DigitalStoreExportCardRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreExportCardRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordResponse = DigitalStoreExportCardRecordResponse;
class DigitalStoreExportCardRecordDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordDetailHeaders = DigitalStoreExportCardRecordDetailHeaders;
class DigitalStoreExportCardRecordDetailRequest extends $tea.Model {
    static names() {
        return {
            beginTime: 'beginTime',
            endTime: 'endTime',
            ids: 'ids',
            sceneCardName: 'sceneCardName',
        };
    }
    static types() {
        return {
            beginTime: 'number',
            endTime: 'number',
            ids: { 'type': 'array', 'itemType': 'number' },
            sceneCardName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordDetailRequest = DigitalStoreExportCardRecordDetailRequest;
class DigitalStoreExportCardRecordDetailResponseBody extends $tea.Model {
    static names() {
        return {
            fileName: 'fileName',
            fileType: 'fileType',
            fileUrl: 'fileUrl',
            id: 'id',
            isImport: 'isImport',
            remark: 'remark',
            status: 'status',
            successNum: 'successNum',
            totalNum: 'totalNum',
        };
    }
    static types() {
        return {
            fileName: 'string',
            fileType: 'string',
            fileUrl: 'string',
            id: 'string',
            isImport: 'string',
            remark: 'string',
            status: 'string',
            successNum: 'string',
            totalNum: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordDetailResponseBody = DigitalStoreExportCardRecordDetailResponseBody;
class DigitalStoreExportCardRecordDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreExportCardRecordDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreExportCardRecordDetailResponse = DigitalStoreExportCardRecordDetailResponse;
class DigitalStoreGroupInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupInfoHeaders = DigitalStoreGroupInfoHeaders;
class DigitalStoreGroupInfoRequest extends $tea.Model {
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupInfoRequest = DigitalStoreGroupInfoRequest;
class DigitalStoreGroupInfoResponseBody extends $tea.Model {
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            storeIdList: 'storeIdList',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            storeIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupInfoResponseBody = DigitalStoreGroupInfoResponseBody;
class DigitalStoreGroupInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreGroupInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupInfoResponse = DigitalStoreGroupInfoResponse;
class DigitalStoreGroupsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupsHeaders = DigitalStoreGroupsHeaders;
class DigitalStoreGroupsResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreGroupsResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupsResponseBody = DigitalStoreGroupsResponseBody;
class DigitalStoreGroupsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreGroupsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupsResponse = DigitalStoreGroupsResponse;
class DigitalStoreNodeInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreNodeInfoHeaders = DigitalStoreNodeInfoHeaders;
class DigitalStoreNodeInfoRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            nodeId: 'nodeId',
        };
    }
    static types() {
        return {
            code: 'string',
            nodeId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreNodeInfoRequest = DigitalStoreNodeInfoRequest;
class DigitalStoreNodeInfoResponseBody extends $tea.Model {
    static names() {
        return {
            dingDeptId: 'dingDeptId',
            id: 'id',
            name: 'name',
            parentId: 'parentId',
            type: 'type',
        };
    }
    static types() {
        return {
            dingDeptId: 'number',
            id: 'number',
            name: 'string',
            parentId: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreNodeInfoResponseBody = DigitalStoreNodeInfoResponseBody;
class DigitalStoreNodeInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreNodeInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreNodeInfoResponse = DigitalStoreNodeInfoResponse;
class DigitalStoreRightsInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRightsInfoHeaders = DigitalStoreRightsInfoHeaders;
class DigitalStoreRightsInfoResponseBody extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            quantity: 'quantity',
            rightsCode: 'rightsCode',
            rightsName: 'rightsName',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            quantity: 'number',
            rightsCode: 'string',
            rightsName: 'string',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRightsInfoResponseBody = DigitalStoreRightsInfoResponseBody;
class DigitalStoreRightsInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreRightsInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRightsInfoResponse = DigitalStoreRightsInfoResponse;
class DigitalStoreRolesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRolesHeaders = DigitalStoreRolesHeaders;
class DigitalStoreRolesResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreRolesResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRolesResponseBody = DigitalStoreRolesResponseBody;
class DigitalStoreRolesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreRolesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRolesResponse = DigitalStoreRolesResponse;
class DigitalStoreSceneScopeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSceneScopeHeaders = DigitalStoreSceneScopeHeaders;
class DigitalStoreSceneScopeRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
            sceneCode: 'sceneCode',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            sceneCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSceneScopeRequest = DigitalStoreSceneScopeRequest;
class DigitalStoreSceneScopeResponseBody extends $tea.Model {
    static names() {
        return {
            groupConversationType: 'groupConversationType',
            scopeId: 'scopeId',
        };
    }
    static types() {
        return {
            groupConversationType: 'string',
            scopeId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSceneScopeResponseBody = DigitalStoreSceneScopeResponseBody;
class DigitalStoreSceneScopeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreSceneScopeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSceneScopeResponse = DigitalStoreSceneScopeResponse;
class DigitalStoreStoreInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreStoreInfoHeaders = DigitalStoreStoreInfoHeaders;
class DigitalStoreStoreInfoRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            storeId: 'storeId',
        };
    }
    static types() {
        return {
            code: 'string',
            storeId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreStoreInfoRequest = DigitalStoreStoreInfoRequest;
class DigitalStoreStoreInfoResponseBody extends $tea.Model {
    static names() {
        return {
            address: 'address',
            businessHours: 'businessHours',
            dingDeptId: 'dingDeptId',
            latitude: 'latitude',
            locationAddress: 'locationAddress',
            longitude: 'longitude',
            name: 'name',
            parentId: 'parentId',
            status: 'status',
            storeAcreage: 'storeAcreage',
            storeBandwidth: 'storeBandwidth',
            storeCode: 'storeCode',
            storeId: 'storeId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            businessHours: 'string',
            dingDeptId: 'number',
            latitude: 'string',
            locationAddress: 'string',
            longitude: 'string',
            name: 'string',
            parentId: 'number',
            status: 'string',
            storeAcreage: 'string',
            storeBandwidth: 'string',
            storeCode: 'string',
            storeId: 'number',
            telephone: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreStoreInfoResponseBody = DigitalStoreStoreInfoResponseBody;
class DigitalStoreStoreInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreStoreInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreStoreInfoResponse = DigitalStoreStoreInfoResponse;
class DigitalStoreSubNodesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSubNodesHeaders = DigitalStoreSubNodesHeaders;
class DigitalStoreSubNodesRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            nodeId: 'nodeId',
        };
    }
    static types() {
        return {
            code: 'string',
            nodeId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSubNodesRequest = DigitalStoreSubNodesRequest;
class DigitalStoreSubNodesResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreSubNodesResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSubNodesResponseBody = DigitalStoreSubNodesResponseBody;
class DigitalStoreSubNodesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreSubNodesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSubNodesResponse = DigitalStoreSubNodesResponse;
class DigitalStoreUpdateAuthInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoHeaders = DigitalStoreUpdateAuthInfoHeaders;
class DigitalStoreUpdateAuthInfoRequest extends $tea.Model {
    static names() {
        return {
            updateUserList: 'updateUserList',
        };
    }
    static types() {
        return {
            updateUserList: { 'type': 'array', 'itemType': DigitalStoreUpdateAuthInfoRequestUpdateUserList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoRequest = DigitalStoreUpdateAuthInfoRequest;
class DigitalStoreUpdateAuthInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoResponseBody = DigitalStoreUpdateAuthInfoResponseBody;
class DigitalStoreUpdateAuthInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreUpdateAuthInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoResponse = DigitalStoreUpdateAuthInfoResponse;
class DigitalStoreUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUserInfoHeaders = DigitalStoreUserInfoHeaders;
class DigitalStoreUserInfoRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            userId: 'userId',
        };
    }
    static types() {
        return {
            code: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUserInfoRequest = DigitalStoreUserInfoRequest;
class DigitalStoreUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            name: 'name',
            roleIdList: 'roleIdList',
            scopeList: 'scopeList',
            storeList: 'storeList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            roleIdList: { 'type': 'array', 'itemType': 'number' },
            scopeList: { 'type': 'array', 'itemType': 'number' },
            storeList: { 'type': 'array', 'itemType': 'number' },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUserInfoResponseBody = DigitalStoreUserInfoResponseBody;
class DigitalStoreUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUserInfoResponse = DigitalStoreUserInfoResponse;
class DigitalStoreUsersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUsersHeaders = DigitalStoreUsersHeaders;
class DigitalStoreUsersRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            nodeId: 'nodeId',
        };
    }
    static types() {
        return {
            code: 'string',
            nodeId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUsersRequest = DigitalStoreUsersRequest;
class DigitalStoreUsersResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStoreUsersResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUsersResponseBody = DigitalStoreUsersResponseBody;
class DigitalStoreUsersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStoreUsersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUsersResponse = DigitalStoreUsersResponse;
class DigitalStorelistExportTaskRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStorelistExportTaskRecordHeaders = DigitalStorelistExportTaskRecordHeaders;
class DigitalStorelistExportTaskRecordRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStorelistExportTaskRecordRequest = DigitalStorelistExportTaskRecordRequest;
class DigitalStorelistExportTaskRecordResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': DigitalStorelistExportTaskRecordResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStorelistExportTaskRecordResponseBody = DigitalStorelistExportTaskRecordResponseBody;
class DigitalStorelistExportTaskRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DigitalStorelistExportTaskRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStorelistExportTaskRecordResponse = DigitalStorelistExportTaskRecordResponse;
class ExternalQueryExternalAppOrgsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalAppOrgsHeaders = ExternalQueryExternalAppOrgsHeaders;
class ExternalQueryExternalAppOrgsRequest extends $tea.Model {
    static names() {
        return {
            externalType: 'externalType',
        };
    }
    static types() {
        return {
            externalType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalAppOrgsRequest = ExternalQueryExternalAppOrgsRequest;
class ExternalQueryExternalAppOrgsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ExternalQueryExternalAppOrgsResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalAppOrgsResponseBody = ExternalQueryExternalAppOrgsResponseBody;
class ExternalQueryExternalAppOrgsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExternalQueryExternalAppOrgsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalAppOrgsResponse = ExternalQueryExternalAppOrgsResponse;
class ExternalQueryExternalBelongMainOrgHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalBelongMainOrgHeaders = ExternalQueryExternalBelongMainOrgHeaders;
class ExternalQueryExternalBelongMainOrgRequest extends $tea.Model {
    static names() {
        return {
            externalType: 'externalType',
        };
    }
    static types() {
        return {
            externalType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalBelongMainOrgRequest = ExternalQueryExternalBelongMainOrgRequest;
class ExternalQueryExternalBelongMainOrgResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalBelongMainOrgResponseBody = ExternalQueryExternalBelongMainOrgResponseBody;
class ExternalQueryExternalBelongMainOrgResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExternalQueryExternalBelongMainOrgResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalBelongMainOrgResponse = ExternalQueryExternalBelongMainOrgResponse;
class ExternalQueryExternalOrgsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalOrgsHeaders = ExternalQueryExternalOrgsHeaders;
class ExternalQueryExternalOrgsRequest extends $tea.Model {
    static names() {
        return {
            externalType: 'externalType',
        };
    }
    static types() {
        return {
            externalType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalOrgsRequest = ExternalQueryExternalOrgsRequest;
class ExternalQueryExternalOrgsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ExternalQueryExternalOrgsResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalOrgsResponseBody = ExternalQueryExternalOrgsResponseBody;
class ExternalQueryExternalOrgsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExternalQueryExternalOrgsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalOrgsResponse = ExternalQueryExternalOrgsResponse;
class GetTaskPackageResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultHeaders = GetTaskPackageResultHeaders;
class GetTaskPackageResultRequest extends $tea.Model {
    static names() {
        return {
            bizCode: 'bizCode',
            taskPackageId: 'taskPackageId',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            taskPackageId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultRequest = GetTaskPackageResultRequest;
class GetTaskPackageResultResponseBody extends $tea.Model {
    static names() {
        return {
            taskPackageId: 'taskPackageId',
            tasks: 'tasks',
        };
    }
    static types() {
        return {
            taskPackageId: 'string',
            tasks: { 'type': 'array', 'itemType': GetTaskPackageResultResponseBodyTasks },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultResponseBody = GetTaskPackageResultResponseBody;
class GetTaskPackageResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTaskPackageResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultResponse = GetTaskPackageResultResponse;
class HospitalDataCheckHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HospitalDataCheckHeaders = HospitalDataCheckHeaders;
class HospitalDataCheckRequest extends $tea.Model {
    static names() {
        return {
            allDeptCount: 'allDeptCount',
            allDeptUserCount: 'allDeptUserCount',
            allGroupCount: 'allGroupCount',
            allGroupUserCount: 'allGroupUserCount',
            deptCount: 'deptCount',
            deptUserCount: 'deptUserCount',
            groupCount: 'groupCount',
            groupUserCount: 'groupUserCount',
        };
    }
    static types() {
        return {
            allDeptCount: 'number',
            allDeptUserCount: 'number',
            allGroupCount: 'number',
            allGroupUserCount: 'number',
            deptCount: 'number',
            deptUserCount: 'number',
            groupCount: 'number',
            groupUserCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HospitalDataCheckRequest = HospitalDataCheckRequest;
class HospitalDataCheckResponseBody extends $tea.Model {
    static names() {
        return {
            allDeptCount: 'allDeptCount',
            allDeptUserCount: 'allDeptUserCount',
            allGroupCount: 'allGroupCount',
            allGroupUserCount: 'allGroupUserCount',
            deptCount: 'deptCount',
            deptUserCount: 'deptUserCount',
            groupCount: 'groupCount',
            groupUserCount: 'groupUserCount',
            match: 'match',
        };
    }
    static types() {
        return {
            allDeptCount: 'number',
            allDeptUserCount: 'number',
            allGroupCount: 'number',
            allGroupUserCount: 'number',
            deptCount: 'number',
            deptUserCount: 'number',
            groupCount: 'number',
            groupUserCount: 'number',
            match: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HospitalDataCheckResponseBody = HospitalDataCheckResponseBody;
class HospitalDataCheckResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: HospitalDataCheckResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.HospitalDataCheckResponse = HospitalDataCheckResponse;
class IndustryManufactureCommonEventHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCommonEventHeaders = IndustryManufactureCommonEventHeaders;
class IndustryManufactureCommonEventRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            bizData: 'bizData',
            eventType: 'eventType',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            bizData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            eventType: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCommonEventRequest = IndustryManufactureCommonEventRequest;
class IndustryManufactureCommonEventResponseBody extends $tea.Model {
    static names() {
        return {
            errorMsg: 'errorMsg',
            requestId: 'requestId',
            result: 'result',
        };
    }
    static types() {
        return {
            errorMsg: 'string',
            requestId: 'string',
            result: IndustryManufactureCommonEventResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCommonEventResponseBody = IndustryManufactureCommonEventResponseBody;
class IndustryManufactureCommonEventResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureCommonEventResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCommonEventResponse = IndustryManufactureCommonEventResponse;
class IndustryManufactureCostRecordListGetHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCostRecordListGetHeaders = IndustryManufactureCostRecordListGetHeaders;
class IndustryManufactureCostRecordListGetRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            instanceId: 'instanceId',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orderNo: 'orderNo',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            productionTaskNo: 'productionTaskNo',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            instanceId: 'string',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orderNo: 'string',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            productionTaskNo: 'string',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCostRecordListGetRequest = IndustryManufactureCostRecordListGetRequest;
class IndustryManufactureCostRecordListGetResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureCostRecordListGetResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCostRecordListGetResponseBody = IndustryManufactureCostRecordListGetResponseBody;
class IndustryManufactureCostRecordListGetResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureCostRecordListGetResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCostRecordListGetResponse = IndustryManufactureCostRecordListGetResponse;
class IndustryManufactureFeeListGetHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureFeeListGetHeaders = IndustryManufactureFeeListGetHeaders;
class IndustryManufactureFeeListGetRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            productionTaskNo: 'productionTaskNo',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
            type: 'type',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            productionTaskNo: 'string',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureFeeListGetRequest = IndustryManufactureFeeListGetRequest;
class IndustryManufactureFeeListGetResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureFeeListGetResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureFeeListGetResponseBody = IndustryManufactureFeeListGetResponseBody;
class IndustryManufactureFeeListGetResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureFeeListGetResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureFeeListGetResponse = IndustryManufactureFeeListGetResponse;
class IndustryManufactureLabourCostHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureLabourCostHeaders = IndustryManufactureLabourCostHeaders;
class IndustryManufactureLabourCostRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processNo: 'processNo',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            isvOrgId: 'string',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            processNo: 'string',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureLabourCostRequest = IndustryManufactureLabourCostRequest;
class IndustryManufactureLabourCostResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureLabourCostResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureLabourCostResponseBody = IndustryManufactureLabourCostResponseBody;
class IndustryManufactureLabourCostResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureLabourCostResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureLabourCostResponse = IndustryManufactureLabourCostResponse;
class IndustryManufactureMaterialListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMaterialListHeaders = IndustryManufactureMaterialListHeaders;
class IndustryManufactureMaterialListRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            currentPage: 'currentPage',
            cursor: 'cursor',
            endTime: 'endTime',
            instanceId: 'instanceId',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageSize: 'pageSize',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            currentPage: 'number',
            cursor: 'number',
            endTime: 'number',
            instanceId: 'string',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageSize: 'number',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMaterialListRequest = IndustryManufactureMaterialListRequest;
class IndustryManufactureMaterialListResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryManufactureMaterialListResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMaterialListResponseBody = IndustryManufactureMaterialListResponseBody;
class IndustryManufactureMaterialListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMaterialListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMaterialListResponse = IndustryManufactureMaterialListResponse;
class IndustryManufactureMesDispatchTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesDispatchTaskHeaders = IndustryManufactureMesDispatchTaskHeaders;
class IndustryManufactureMesDispatchTaskRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            defectsAmount: 'defectsAmount',
            dispatchStaffName: 'dispatchStaffName',
            dispatchStaffNo: 'dispatchStaffNo',
            fineAmount: 'fineAmount',
            overdue: 'overdue',
            planQuantity: 'planQuantity',
            priority: 'priority',
            processName: 'processName',
            processUuid: 'processUuid',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            projectCode: 'projectCode',
            projectId: 'projectId',
            projectStatus: 'projectStatus',
            taskOperators: 'taskOperators',
            taskPlanEndTime: 'taskPlanEndTime',
            taskPlanStartTime: 'taskPlanStartTime',
            taskStatus: 'taskStatus',
            taskType: 'taskType',
            teamId: 'teamId',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            defectsAmount: 'string',
            dispatchStaffName: 'string',
            dispatchStaffNo: 'string',
            fineAmount: 'string',
            overdue: 'number',
            planQuantity: 'number',
            priority: 'number',
            processName: 'string',
            processUuid: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            projectCode: 'string',
            projectId: 'string',
            projectStatus: 'string',
            taskOperators: 'string',
            taskPlanEndTime: 'string',
            taskPlanStartTime: 'string',
            taskStatus: 'string',
            taskType: 'string',
            teamId: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesDispatchTaskRequest = IndustryManufactureMesDispatchTaskRequest;
class IndustryManufactureMesDispatchTaskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesDispatchTaskResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesDispatchTaskResponseBody = IndustryManufactureMesDispatchTaskResponseBody;
class IndustryManufactureMesDispatchTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesDispatchTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesDispatchTaskResponse = IndustryManufactureMesDispatchTaskResponse;
class IndustryManufactureMesMaterialHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesMaterialHeaders = IndustryManufactureMesMaterialHeaders;
class IndustryManufactureMesMaterialRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            category: 'category',
            extendData: 'extendData',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            prop: 'prop',
            unit: 'unit',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            category: 'string',
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesMaterialRequestExtendData },
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            prop: 'string',
            unit: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesMaterialRequest = IndustryManufactureMesMaterialRequest;
class IndustryManufactureMesMaterialResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesMaterialResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesMaterialResponseBody = IndustryManufactureMesMaterialResponseBody;
class IndustryManufactureMesMaterialResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesMaterialResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesMaterialResponse = IndustryManufactureMesMaterialResponse;
class IndustryManufactureMesOutPlanHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutPlanHeaders = IndustryManufactureMesOutPlanHeaders;
class IndustryManufactureMesOutPlanRequest extends $tea.Model {
    static names() {
        return {
            approvalStatus: 'approvalStatus',
            approver: 'approver',
            baseDataName: 'baseDataName',
            outSourceProjectCode: 'outSourceProjectCode',
            outSourceTeamId: 'outSourceTeamId',
            price: 'price',
            processIdentificationCode: 'processIdentificationCode',
            processUuids: 'processUuids',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            projectCode: 'projectCode',
            projectId: 'projectId',
            sendPlanQuantity: 'sendPlanQuantity',
            supplierCode: 'supplierCode',
            supplierName: 'supplierName',
            totalWage: 'totalWage',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            approvalStatus: 'string',
            approver: 'string',
            baseDataName: 'string',
            outSourceProjectCode: 'string',
            outSourceTeamId: 'string',
            price: 'string',
            processIdentificationCode: 'string',
            processUuids: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            projectCode: 'string',
            projectId: 'string',
            sendPlanQuantity: 'string',
            supplierCode: 'string',
            supplierName: 'string',
            totalWage: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutPlanRequest = IndustryManufactureMesOutPlanRequest;
class IndustryManufactureMesOutPlanResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesOutPlanResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutPlanResponseBody = IndustryManufactureMesOutPlanResponseBody;
class IndustryManufactureMesOutPlanResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesOutPlanResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutPlanResponse = IndustryManufactureMesOutPlanResponse;
class IndustryManufactureMesOutputHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutputHeaders = IndustryManufactureMesOutputHeaders;
class IndustryManufactureMesOutputRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            approveStatus: 'approveStatus',
            baseDataName: 'baseDataName',
            defectsAmount: 'defectsAmount',
            defectsReason: 'defectsReason',
            fineAmount: 'fineAmount',
            hasQualityTest: 'hasQualityTest',
            overdue: 'overdue',
            planQuantity: 'planQuantity',
            priority: 'priority',
            processName: 'processName',
            processUuid: 'processUuid',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            projectCode: 'projectCode',
            projectId: 'projectId',
            projectStatus: 'projectStatus',
            qualityTestStatus: 'qualityTestStatus',
            taskPlanEndTime: 'taskPlanEndTime',
            taskPlanStartTime: 'taskPlanStartTime',
            taskStatus: 'taskStatus',
            taskType: 'taskType',
            taskUuid: 'taskUuid',
            teamId: 'teamId',
            userId: 'userId',
            userName: 'userName',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            approveStatus: 'string',
            baseDataName: 'string',
            defectsAmount: 'string',
            defectsReason: 'string',
            fineAmount: 'string',
            hasQualityTest: 'string',
            overdue: 'number',
            planQuantity: 'number',
            priority: 'number',
            processName: 'string',
            processUuid: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            projectCode: 'string',
            projectId: 'string',
            projectStatus: 'string',
            qualityTestStatus: 'string',
            taskPlanEndTime: 'string',
            taskPlanStartTime: 'string',
            taskStatus: 'string',
            taskType: 'string',
            taskUuid: 'string',
            teamId: 'string',
            userId: 'string',
            userName: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutputRequest = IndustryManufactureMesOutputRequest;
class IndustryManufactureMesOutputResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesOutputResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutputResponseBody = IndustryManufactureMesOutputResponseBody;
class IndustryManufactureMesOutputResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesOutputResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutputResponse = IndustryManufactureMesOutputResponse;
class IndustryManufactureMesProcessHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProcessHeaders = IndustryManufactureMesProcessHeaders;
class IndustryManufactureMesProcessRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            extendData: 'extendData',
            name: 'name',
            needDispatch: 'needDispatch',
            needQualityTest: 'needQualityTest',
            no: 'no',
            price: 'price',
            prop: 'prop',
            remark: 'remark',
            sop: 'sop',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesProcessRequestExtendData },
            name: 'string',
            needDispatch: 'string',
            needQualityTest: 'string',
            no: 'string',
            price: 'string',
            prop: 'string',
            remark: 'string',
            sop: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProcessRequest = IndustryManufactureMesProcessRequest;
class IndustryManufactureMesProcessResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesProcessResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProcessResponseBody = IndustryManufactureMesProcessResponseBody;
class IndustryManufactureMesProcessResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesProcessResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProcessResponse = IndustryManufactureMesProcessResponse;
class IndustryManufactureMesProductionPlanHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProductionPlanHeaders = IndustryManufactureMesProductionPlanHeaders;
class IndustryManufactureMesProductionPlanRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            actualEndTime: 'actualEndTime',
            actualStartTime: 'actualStartTime',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            bomUuid: 'bomUuid',
            events: 'events',
            extendData: 'extendData',
            no: 'no',
            overdue: 'overdue',
            planEndTime: 'planEndTime',
            planQuantity: 'planQuantity',
            planStartTime: 'planStartTime',
            processUuids: 'processUuids',
            productCode: 'productCode',
            productName: 'productName',
            productSpecification: 'productSpecification',
            qualifiedQuantity: 'qualifiedQuantity',
            sellOrderNo: 'sellOrderNo',
            status: 'status',
            teamList: 'teamList',
            title: 'title',
            type: 'type',
            unit: 'unit',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            actualEndTime: 'string',
            actualStartTime: 'string',
            appKey: 'string',
            baseDataName: 'string',
            bomUuid: 'string',
            events: { 'type': 'array', 'itemType': 'string' },
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesProductionPlanRequestExtendData },
            no: 'string',
            overdue: 'string',
            planEndTime: 'string',
            planQuantity: 'string',
            planStartTime: 'string',
            processUuids: 'string',
            productCode: 'string',
            productName: 'string',
            productSpecification: 'string',
            qualifiedQuantity: 'string',
            sellOrderNo: 'string',
            status: 'string',
            teamList: 'string',
            title: 'string',
            type: 'string',
            unit: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProductionPlanRequest = IndustryManufactureMesProductionPlanRequest;
class IndustryManufactureMesProductionPlanResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesProductionPlanResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProductionPlanResponseBody = IndustryManufactureMesProductionPlanResponseBody;
class IndustryManufactureMesProductionPlanResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesProductionPlanResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProductionPlanResponse = IndustryManufactureMesProductionPlanResponse;
class IndustryManufactureMesSubCooperationTeamHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamHeaders = IndustryManufactureMesSubCooperationTeamHeaders;
class IndustryManufactureMesSubCooperationTeamRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            events: 'events',
            extendData: 'extendData',
            groupPlugins: 'groupPlugins',
            groupType: 'groupType',
            leaders: 'leaders',
            members: 'members',
            name: 'name',
            outCorpId: 'outCorpId',
            processIds: 'processIds',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            events: { 'type': 'array', 'itemType': 'string' },
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestExtendData },
            groupPlugins: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestGroupPlugins },
            groupType: 'string',
            leaders: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestLeaders },
            members: { 'type': 'array', 'itemType': IndustryManufactureMesSubCooperationTeamRequestMembers },
            name: 'string',
            outCorpId: 'string',
            processIds: { 'type': 'array', 'itemType': 'string' },
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequest = IndustryManufactureMesSubCooperationTeamRequest;
class IndustryManufactureMesSubCooperationTeamResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: IndustryManufactureMesSubCooperationTeamResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamResponseBody = IndustryManufactureMesSubCooperationTeamResponseBody;
class IndustryManufactureMesSubCooperationTeamResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesSubCooperationTeamResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamResponse = IndustryManufactureMesSubCooperationTeamResponse;
class IndustryManufactureMesTeamMgmtHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtHeaders = IndustryManufactureMesTeamMgmtHeaders;
class IndustryManufactureMesTeamMgmtRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            appKey: 'appKey',
            baseDataName: 'baseDataName',
            events: 'events',
            extendData: 'extendData',
            groupConfig: 'groupConfig',
            groupPlugins: 'groupPlugins',
            groupType: 'groupType',
            id: 'id',
            leaders: 'leaders',
            members: 'members',
            name: 'name',
            processIds: 'processIds',
            tagKey: 'tagKey',
            tagValues: 'tagValues',
        };
    }
    static types() {
        return {
            action: 'string',
            appKey: 'string',
            baseDataName: 'string',
            events: { 'type': 'array', 'itemType': 'string' },
            extendData: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestExtendData },
            groupConfig: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            groupPlugins: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestGroupPlugins },
            groupType: 'string',
            id: 'string',
            leaders: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestLeaders },
            members: { 'type': 'array', 'itemType': IndustryManufactureMesTeamMgmtRequestMembers },
            name: 'string',
            processIds: { 'type': 'array', 'itemType': 'string' },
            tagKey: 'string',
            tagValues: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtRequest = IndustryManufactureMesTeamMgmtRequest;
class IndustryManufactureMesTeamMgmtResponseBody extends $tea.Model {
    static names() {
        return {
            dingOpenErrcode: 'dingOpenErrcode',
            errorMsg: 'errorMsg',
            result: 'result',
        };
    }
    static types() {
        return {
            dingOpenErrcode: 'number',
            errorMsg: 'string',
            result: IndustryManufactureMesTeamMgmtResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtResponseBody = IndustryManufactureMesTeamMgmtResponseBody;
class IndustryManufactureMesTeamMgmtResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryManufactureMesTeamMgmtResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtResponse = IndustryManufactureMesTeamMgmtResponse;
class IndustryMmanufactureMaterialCostGetHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryMmanufactureMaterialCostGetHeaders = IndustryMmanufactureMaterialCostGetHeaders;
class IndustryMmanufactureMaterialCostGetRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            appIds: 'appIds',
            appName: 'appName',
            corpId: 'corpId',
            cursor: 'cursor',
            endTime: 'endTime',
            instanceId: 'instanceId',
            isvOrgId: 'isvOrgId',
            materialNo: 'materialNo',
            microappAgentId: 'microappAgentId',
            orgId: 'orgId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            suiteKey: 'suiteKey',
            tokenGrantType: 'tokenGrantType',
        };
    }
    static types() {
        return {
            appId: 'number',
            appIds: { 'type': 'array', 'itemType': 'number' },
            appName: 'string',
            corpId: 'string',
            cursor: 'number',
            endTime: 'number',
            instanceId: 'string',
            isvOrgId: 'number',
            materialNo: 'string',
            microappAgentId: 'number',
            orgId: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            suiteKey: 'string',
            tokenGrantType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryMmanufactureMaterialCostGetRequest = IndustryMmanufactureMaterialCostGetRequest;
class IndustryMmanufactureMaterialCostGetResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': IndustryMmanufactureMaterialCostGetResponseBodyList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryMmanufactureMaterialCostGetResponseBody = IndustryMmanufactureMaterialCostGetResponseBody;
class IndustryMmanufactureMaterialCostGetResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IndustryMmanufactureMaterialCostGetResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryMmanufactureMaterialCostGetResponse = IndustryMmanufactureMaterialCostGetResponse;
class PushDingMessageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushDingMessageHeaders = PushDingMessageHeaders;
class PushDingMessageRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            content: 'content',
            messageType: 'messageType',
            messageUrl: 'messageUrl',
            pictureUrl: 'pictureUrl',
            singleTitle: 'singleTitle',
            singleUrl: 'singleUrl',
            title: 'title',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            appId: 'number',
            content: 'string',
            messageType: 'string',
            messageUrl: 'string',
            pictureUrl: 'string',
            singleTitle: 'string',
            singleUrl: 'string',
            title: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushDingMessageRequest = PushDingMessageRequest;
class PushDingMessageResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            success: 'success',
        };
    }
    static types() {
        return {
            content: 'number',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushDingMessageResponseBody = PushDingMessageResponseBody;
class PushDingMessageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushDingMessageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushDingMessageResponse = PushDingMessageResponse;
class QueryAllDepartmentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentHeaders = QueryAllDepartmentHeaders;
class QueryAllDepartmentRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentRequest = QueryAllDepartmentRequest;
class QueryAllDepartmentResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBody = QueryAllDepartmentResponseBody;
class QueryAllDepartmentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllDepartmentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponse = QueryAllDepartmentResponse;
class QueryAllDoctorsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDoctorsHeaders = QueryAllDoctorsHeaders;
class QueryAllDoctorsRequest extends $tea.Model {
    static names() {
        return {
            monthMark: 'monthMark',
            pageNum: 'pageNum',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            monthMark: 'string',
            pageNum: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDoctorsRequest = QueryAllDoctorsRequest;
class QueryAllDoctorsResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllDoctorsResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDoctorsResponseBody = QueryAllDoctorsResponseBody;
class QueryAllDoctorsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllDoctorsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDoctorsResponse = QueryAllDoctorsResponse;
class QueryAllGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupHeaders = QueryAllGroupHeaders;
class QueryAllGroupRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupRequest = QueryAllGroupRequest;
class QueryAllGroupResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllGroupResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupResponseBody = QueryAllGroupResponseBody;
class QueryAllGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupResponse = QueryAllGroupResponse;
class QueryAllGroupsInDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupsInDeptHeaders = QueryAllGroupsInDeptHeaders;
class QueryAllGroupsInDeptRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupsInDeptRequest = QueryAllGroupsInDeptRequest;
class QueryAllGroupsInDeptResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllGroupsInDeptResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupsInDeptResponseBody = QueryAllGroupsInDeptResponseBody;
class QueryAllGroupsInDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllGroupsInDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupsInDeptResponse = QueryAllGroupsInDeptResponse;
class QueryAllMemberByDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByDeptHeaders = QueryAllMemberByDeptHeaders;
class QueryAllMemberByDeptRequest extends $tea.Model {
    static names() {
        return {
            monthMark: 'monthMark',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            monthMark: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByDeptRequest = QueryAllMemberByDeptRequest;
class QueryAllMemberByDeptResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllMemberByDeptResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByDeptResponseBody = QueryAllMemberByDeptResponseBody;
class QueryAllMemberByDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllMemberByDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByDeptResponse = QueryAllMemberByDeptResponse;
class QueryAllMemberByGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByGroupHeaders = QueryAllMemberByGroupHeaders;
class QueryAllMemberByGroupRequest extends $tea.Model {
    static names() {
        return {
            monthMark: 'monthMark',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            monthMark: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByGroupRequest = QueryAllMemberByGroupRequest;
class QueryAllMemberByGroupResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryAllMemberByGroupResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByGroupResponseBody = QueryAllMemberByGroupResponseBody;
class QueryAllMemberByGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAllMemberByGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByGroupResponse = QueryAllMemberByGroupResponse;
class QueryBizOptLogHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBizOptLogHeaders = QueryBizOptLogHeaders;
class QueryBizOptLogRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBizOptLogRequest = QueryBizOptLogRequest;
class QueryBizOptLogResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryBizOptLogResponseBodyContent },
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBizOptLogResponseBody = QueryBizOptLogResponseBody;
class QueryBizOptLogResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryBizOptLogResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBizOptLogResponse = QueryBizOptLogResponse;
class QueryChatAIOXMInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChatAIOXMInfoHeaders = QueryChatAIOXMInfoHeaders;
class QueryChatAIOXMInfoRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChatAIOXMInfoRequest = QueryChatAIOXMInfoRequest;
class QueryChatAIOXMInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChatAIOXMInfoResponseBody = QueryChatAIOXMInfoResponseBody;
class QueryChatAIOXMInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryChatAIOXMInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChatAIOXMInfoResponse = QueryChatAIOXMInfoResponse;
class QueryDepartmentExtendInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentExtendInfoHeaders = QueryDepartmentExtendInfoHeaders;
class QueryDepartmentExtendInfoRequest extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            propCode: 'propCode',
        };
    }
    static types() {
        return {
            deptCode: 'number',
            propCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentExtendInfoRequest = QueryDepartmentExtendInfoRequest;
class QueryDepartmentExtendInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryDepartmentExtendInfoResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentExtendInfoResponseBody = QueryDepartmentExtendInfoResponseBody;
class QueryDepartmentExtendInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDepartmentExtendInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentExtendInfoResponse = QueryDepartmentExtendInfoResponse;
class QueryDepartmentInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentInfoHeaders = QueryDepartmentInfoHeaders;
class QueryDepartmentInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryDepartmentInfoResponseBodyContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentInfoResponseBody = QueryDepartmentInfoResponseBody;
class QueryDepartmentInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDepartmentInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentInfoResponse = QueryDepartmentInfoResponse;
class QueryDoctorDetailsByJobNumberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberHeaders = QueryDoctorDetailsByJobNumberHeaders;
class QueryDoctorDetailsByJobNumberRequest extends $tea.Model {
    static names() {
        return {
            monthMark: 'monthMark',
        };
    }
    static types() {
        return {
            monthMark: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberRequest = QueryDoctorDetailsByJobNumberRequest;
class QueryDoctorDetailsByJobNumberResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryDoctorDetailsByJobNumberResponseBodyContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBody = QueryDoctorDetailsByJobNumberResponseBody;
class QueryDoctorDetailsByJobNumberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDoctorDetailsByJobNumberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponse = QueryDoctorDetailsByJobNumberResponse;
class QueryGroupInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoHeaders = QueryGroupInfoHeaders;
class QueryGroupInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryGroupInfoResponseBodyContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoResponseBody = QueryGroupInfoResponseBody;
class QueryGroupInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoResponse = QueryGroupInfoResponse;
class QueryHospitalDistrictInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalDistrictInfoHeaders = QueryHospitalDistrictInfoHeaders;
class QueryHospitalDistrictInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalDistrictInfoRequest = QueryHospitalDistrictInfoRequest;
class QueryHospitalDistrictInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryHospitalDistrictInfoResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalDistrictInfoResponseBody = QueryHospitalDistrictInfoResponseBody;
class QueryHospitalDistrictInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryHospitalDistrictInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalDistrictInfoResponse = QueryHospitalDistrictInfoResponse;
class QueryHospitalRoleUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRoleUserInfoHeaders = QueryHospitalRoleUserInfoHeaders;
class QueryHospitalRoleUserInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRoleUserInfoRequest = QueryHospitalRoleUserInfoRequest;
class QueryHospitalRoleUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            currentPage: 'currentPage',
            totalCount: 'totalCount',
            totalPages: 'totalPages',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryHospitalRoleUserInfoResponseBodyContent },
            currentPage: 'number',
            totalCount: 'number',
            totalPages: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRoleUserInfoResponseBody = QueryHospitalRoleUserInfoResponseBody;
class QueryHospitalRoleUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryHospitalRoleUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRoleUserInfoResponse = QueryHospitalRoleUserInfoResponse;
class QueryHospitalRolesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRolesHeaders = QueryHospitalRolesHeaders;
class QueryHospitalRolesResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryHospitalRolesResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRolesResponseBody = QueryHospitalRolesResponseBody;
class QueryHospitalRolesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryHospitalRolesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRolesResponse = QueryHospitalRolesResponse;
class QueryJobCodeDictionaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobCodeDictionaryHeaders = QueryJobCodeDictionaryHeaders;
class QueryJobCodeDictionaryResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryJobCodeDictionaryResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobCodeDictionaryResponseBody = QueryJobCodeDictionaryResponseBody;
class QueryJobCodeDictionaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryJobCodeDictionaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobCodeDictionaryResponse = QueryJobCodeDictionaryResponse;
class QueryJobStatusCodeDictionaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobStatusCodeDictionaryHeaders = QueryJobStatusCodeDictionaryHeaders;
class QueryJobStatusCodeDictionaryResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryJobStatusCodeDictionaryResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobStatusCodeDictionaryResponseBody = QueryJobStatusCodeDictionaryResponseBody;
class QueryJobStatusCodeDictionaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryJobStatusCodeDictionaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobStatusCodeDictionaryResponse = QueryJobStatusCodeDictionaryResponse;
class QueryMedicalEventsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMedicalEventsHeaders = QueryMedicalEventsHeaders;
class QueryMedicalEventsResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            success: 'success',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryMedicalEventsResponseBodyContent },
            success: 'boolean',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMedicalEventsResponseBody = QueryMedicalEventsResponseBody;
class QueryMedicalEventsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMedicalEventsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMedicalEventsResponse = QueryMedicalEventsResponse;
class QueryUserCredentialsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserCredentialsHeaders = QueryUserCredentialsHeaders;
class QueryUserCredentialsRequest extends $tea.Model {
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserCredentialsRequest = QueryUserCredentialsRequest;
class QueryUserCredentialsResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserCredentialsResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserCredentialsResponseBody = QueryUserCredentialsResponseBody;
class QueryUserCredentialsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserCredentialsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserCredentialsResponse = QueryUserCredentialsResponse;
class QueryUserExtInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtInfoHeaders = QueryUserExtInfoHeaders;
class QueryUserExtInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserExtInfoResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtInfoResponseBody = QueryUserExtInfoResponseBody;
class QueryUserExtInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserExtInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtInfoResponse = QueryUserExtInfoResponse;
class QueryUserExtendValuesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtendValuesHeaders = QueryUserExtendValuesHeaders;
class QueryUserExtendValuesRequest extends $tea.Model {
    static names() {
        return {
            userExtendKey: 'userExtendKey',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userExtendKey: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtendValuesRequest = QueryUserExtendValuesRequest;
class QueryUserExtendValuesResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            success: 'success',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserExtendValuesResponseBodyContent },
            success: 'boolean',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtendValuesResponseBody = QueryUserExtendValuesResponseBody;
class QueryUserExtendValuesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserExtendValuesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtendValuesResponse = QueryUserExtendValuesResponse;
class QueryUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoHeaders = QueryUserInfoHeaders;
class QueryUserInfoRequest extends $tea.Model {
    static names() {
        return {
            monthMark: 'monthMark',
        };
    }
    static types() {
        return {
            monthMark: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoRequest = QueryUserInfoRequest;
class QueryUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: QueryUserInfoResponseBodyContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBody = QueryUserInfoResponseBody;
class QueryUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponse = QueryUserInfoResponse;
class QueryUserProbCodeDictionaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserProbCodeDictionaryHeaders = QueryUserProbCodeDictionaryHeaders;
class QueryUserProbCodeDictionaryResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserProbCodeDictionaryResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserProbCodeDictionaryResponseBody = QueryUserProbCodeDictionaryResponseBody;
class QueryUserProbCodeDictionaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserProbCodeDictionaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserProbCodeDictionaryResponse = QueryUserProbCodeDictionaryResponse;
class QueryUserRolesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRolesHeaders = QueryUserRolesHeaders;
class QueryUserRolesResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryUserRolesResponseBodyContent },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRolesResponseBody = QueryUserRolesResponseBody;
class QueryUserRolesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserRolesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRolesResponse = QueryUserRolesResponse;
class SaveUserExtendValuesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveUserExtendValuesHeaders = SaveUserExtendValuesHeaders;
class SaveUserExtendValuesRequest extends $tea.Model {
    static names() {
        return {
            userDisplayName: 'userDisplayName',
            userExtendKey: 'userExtendKey',
            userExtendValue: 'userExtendValue',
        };
    }
    static types() {
        return {
            userDisplayName: 'string',
            userExtendKey: 'string',
            userExtendValue: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveUserExtendValuesRequest = SaveUserExtendValuesRequest;
class SaveUserExtendValuesResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveUserExtendValuesResponseBody = SaveUserExtendValuesResponseBody;
class SaveUserExtendValuesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveUserExtendValuesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveUserExtendValuesResponse = SaveUserExtendValuesResponse;
class SubmitTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskHeaders = SubmitTaskHeaders;
class SubmitTaskRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            bizCode: 'bizCode',
            data: 'data',
        };
    }
    static types() {
        return {
            appId: 'number',
            bizCode: 'string',
            data: { 'type': 'array', 'itemType': SubmitTaskRequestData },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskRequest = SubmitTaskRequest;
class SubmitTaskResponseBody extends $tea.Model {
    static names() {
        return {
            tasks: 'tasks',
        };
    }
    static types() {
        return {
            tasks: { 'type': 'array', 'itemType': SubmitTaskResponseBodyTasks },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskResponseBody = SubmitTaskResponseBody;
class SubmitTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubmitTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskResponse = SubmitTaskResponse;
class SubmitTaskPackageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskPackageHeaders = SubmitTaskPackageHeaders;
class SubmitTaskPackageRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            appSecret: 'appSecret',
            bizCode: 'bizCode',
            data: 'data',
            desc: 'desc',
            fileType: 'fileType',
            taskPackageName: 'taskPackageName',
            version: 'version',
        };
    }
    static types() {
        return {
            appId: 'number',
            appSecret: 'string',
            bizCode: 'string',
            data: { 'type': 'array', 'itemType': SubmitTaskPackageRequestData },
            desc: 'string',
            fileType: 'string',
            taskPackageName: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskPackageRequest = SubmitTaskPackageRequest;
class SubmitTaskPackageResponseBody extends $tea.Model {
    static names() {
        return {
            taskIdList: 'taskIdList',
            taskPackageId: 'taskPackageId',
        };
    }
    static types() {
        return {
            taskIdList: { 'type': 'array', 'itemType': 'string' },
            taskPackageId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskPackageResponseBody = SubmitTaskPackageResponseBody;
class SubmitTaskPackageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubmitTaskPackageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskPackageResponse = SubmitTaskPackageResponse;
class SupplAddRoleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplAddRoleHeaders = SupplAddRoleHeaders;
class SupplAddRoleRequest extends $tea.Model {
    static names() {
        return {
            parentRoleGroupId: 'parentRoleGroupId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            parentRoleGroupId: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplAddRoleRequest = SupplAddRoleRequest;
class SupplAddRoleResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplAddRoleResponseBody = SupplAddRoleResponseBody;
class SupplAddRoleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplAddRoleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplAddRoleResponse = SupplAddRoleResponse;
class SupplyAddDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddDeptHeaders = SupplyAddDeptHeaders;
class SupplyAddDeptRequest extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            partnerNumber: 'partnerNumber',
            superDeptId: 'superDeptId',
            supplyDeptType: 'supplyDeptType',
        };
    }
    static types() {
        return {
            deptName: 'string',
            partnerNumber: 'string',
            superDeptId: 'number',
            supplyDeptType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddDeptRequest = SupplyAddDeptRequest;
class SupplyAddDeptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SupplyAddDeptResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddDeptResponseBody = SupplyAddDeptResponseBody;
class SupplyAddDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyAddDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddDeptResponse = SupplyAddDeptResponse;
class SupplyAddMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddMemberHeaders = SupplyAddMemberHeaders;
class SupplyAddMemberRequest extends $tea.Model {
    static names() {
        return {
            isPartnerManager: 'isPartnerManager',
            memberMobile: 'memberMobile',
            memberName: 'memberName',
            memberTitle: 'memberTitle',
            memberWorkNumber: 'memberWorkNumber',
            supplyDeptId: 'supplyDeptId',
        };
    }
    static types() {
        return {
            isPartnerManager: 'boolean',
            memberMobile: 'string',
            memberName: 'string',
            memberTitle: 'string',
            memberWorkNumber: 'string',
            supplyDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddMemberRequest = SupplyAddMemberRequest;
class SupplyAddMemberResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SupplyAddMemberResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddMemberResponseBody = SupplyAddMemberResponseBody;
class SupplyAddMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyAddMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddMemberResponse = SupplyAddMemberResponse;
class SupplyAddPartnerAdminsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerAdminsHeaders = SupplyAddPartnerAdminsHeaders;
class SupplyAddPartnerAdminsRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerAdminsRequest = SupplyAddPartnerAdminsRequest;
class SupplyAddPartnerAdminsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerAdminsResponseBody = SupplyAddPartnerAdminsResponseBody;
class SupplyAddPartnerAdminsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyAddPartnerAdminsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerAdminsResponse = SupplyAddPartnerAdminsResponse;
class SupplyAddPartnerManagersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerManagersHeaders = SupplyAddPartnerManagersHeaders;
class SupplyAddPartnerManagersRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            interfaceId: 'interfaceId',
            interfaceType: 'interfaceType',
        };
    }
    static types() {
        return {
            deptId: 'number',
            interfaceId: 'string',
            interfaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerManagersRequest = SupplyAddPartnerManagersRequest;
class SupplyAddPartnerManagersResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerManagersResponseBody = SupplyAddPartnerManagersResponseBody;
class SupplyAddPartnerManagersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyAddPartnerManagersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerManagersResponse = SupplyAddPartnerManagersResponse;
class SupplyAddPartnerTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerTypeHeaders = SupplyAddPartnerTypeHeaders;
class SupplyAddPartnerTypeRequest extends $tea.Model {
    static names() {
        return {
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerTypeRequest = SupplyAddPartnerTypeRequest;
class SupplyAddPartnerTypeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerTypeResponseBody = SupplyAddPartnerTypeResponseBody;
class SupplyAddPartnerTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyAddPartnerTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddPartnerTypeResponse = SupplyAddPartnerTypeResponse;
class SupplyChainDeleteDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainDeleteDeptHeaders = SupplyChainDeleteDeptHeaders;
class SupplyChainDeleteDeptRequest extends $tea.Model {
    static names() {
        return {
            supplyDeptId: 'supplyDeptId',
        };
    }
    static types() {
        return {
            supplyDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainDeleteDeptRequest = SupplyChainDeleteDeptRequest;
class SupplyChainDeleteDeptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainDeleteDeptResponseBody = SupplyChainDeleteDeptResponseBody;
class SupplyChainDeleteDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyChainDeleteDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainDeleteDeptResponse = SupplyChainDeleteDeptResponse;
class SupplyChainQueryDeptInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainQueryDeptInfoHeaders = SupplyChainQueryDeptInfoHeaders;
class SupplyChainQueryDeptInfoRequest extends $tea.Model {
    static names() {
        return {
            supplyDeptId: 'supplyDeptId',
        };
    }
    static types() {
        return {
            supplyDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainQueryDeptInfoRequest = SupplyChainQueryDeptInfoRequest;
class SupplyChainQueryDeptInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SupplyChainQueryDeptInfoResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainQueryDeptInfoResponseBody = SupplyChainQueryDeptInfoResponseBody;
class SupplyChainQueryDeptInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyChainQueryDeptInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainQueryDeptInfoResponse = SupplyChainQueryDeptInfoResponse;
class SupplyChainUpdateDeptInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainUpdateDeptInfoHeaders = SupplyChainUpdateDeptInfoHeaders;
class SupplyChainUpdateDeptInfoRequest extends $tea.Model {
    static names() {
        return {
            name: 'name',
            partnerNumber: 'partnerNumber',
            partnerTypeList: 'partnerTypeList',
            superId: 'superId',
            supplyDeptId: 'supplyDeptId',
        };
    }
    static types() {
        return {
            name: 'string',
            partnerNumber: 'string',
            partnerTypeList: { 'type': 'array', 'itemType': 'number' },
            superId: 'number',
            supplyDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainUpdateDeptInfoRequest = SupplyChainUpdateDeptInfoRequest;
class SupplyChainUpdateDeptInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainUpdateDeptInfoResponseBody = SupplyChainUpdateDeptInfoResponseBody;
class SupplyChainUpdateDeptInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyChainUpdateDeptInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainUpdateDeptInfoResponse = SupplyChainUpdateDeptInfoResponse;
class SupplyDeleteMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteMemberHeaders = SupplyDeleteMemberHeaders;
class SupplyDeleteMemberRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            mobile: 'mobile',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            mobile: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteMemberRequest = SupplyDeleteMemberRequest;
class SupplyDeleteMemberResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteMemberResponseBody = SupplyDeleteMemberResponseBody;
class SupplyDeleteMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyDeleteMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteMemberResponse = SupplyDeleteMemberResponse;
class SupplyDeletePartnerAdminsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerAdminsHeaders = SupplyDeletePartnerAdminsHeaders;
class SupplyDeletePartnerAdminsRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerAdminsRequest = SupplyDeletePartnerAdminsRequest;
class SupplyDeletePartnerAdminsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerAdminsResponseBody = SupplyDeletePartnerAdminsResponseBody;
class SupplyDeletePartnerAdminsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyDeletePartnerAdminsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerAdminsResponse = SupplyDeletePartnerAdminsResponse;
class SupplyDeletePartnerManagersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerManagersHeaders = SupplyDeletePartnerManagersHeaders;
class SupplyDeletePartnerManagersRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            interfaceId: 'interfaceId',
            interfaceType: 'interfaceType',
        };
    }
    static types() {
        return {
            deptId: 'number',
            interfaceId: 'string',
            interfaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerManagersRequest = SupplyDeletePartnerManagersRequest;
class SupplyDeletePartnerManagersResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerManagersResponseBody = SupplyDeletePartnerManagersResponseBody;
class SupplyDeletePartnerManagersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyDeletePartnerManagersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerManagersResponse = SupplyDeletePartnerManagersResponse;
class SupplyDeletePartnerTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerTypeHeaders = SupplyDeletePartnerTypeHeaders;
class SupplyDeletePartnerTypeRequest extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
        };
    }
    static types() {
        return {
            labelId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerTypeRequest = SupplyDeletePartnerTypeRequest;
class SupplyDeletePartnerTypeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerTypeResponseBody = SupplyDeletePartnerTypeResponseBody;
class SupplyDeletePartnerTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyDeletePartnerTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeletePartnerTypeResponse = SupplyDeletePartnerTypeResponse;
class SupplyDeleteRoleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteRoleHeaders = SupplyDeleteRoleHeaders;
class SupplyDeleteRoleRequest extends $tea.Model {
    static names() {
        return {
            isRoleGroup: 'isRoleGroup',
            roleId: 'roleId',
        };
    }
    static types() {
        return {
            isRoleGroup: 'boolean',
            roleId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteRoleRequest = SupplyDeleteRoleRequest;
class SupplyDeleteRoleResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteRoleResponseBody = SupplyDeleteRoleResponseBody;
class SupplyDeleteRoleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyDeleteRoleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyDeleteRoleResponse = SupplyDeleteRoleResponse;
class SupplyGetMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyGetMemberHeaders = SupplyGetMemberHeaders;
class SupplyGetMemberRequest extends $tea.Model {
    static names() {
        return {
            mobile: 'mobile',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            mobile: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyGetMemberRequest = SupplyGetMemberRequest;
class SupplyGetMemberResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SupplyGetMemberResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyGetMemberResponseBody = SupplyGetMemberResponseBody;
class SupplyGetMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyGetMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyGetMemberResponse = SupplyGetMemberResponse;
class SupplyListDeptMembersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListDeptMembersHeaders = SupplyListDeptMembersHeaders;
class SupplyListDeptMembersRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            supplyDeptId: 'supplyDeptId',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            supplyDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListDeptMembersRequest = SupplyListDeptMembersRequest;
class SupplyListDeptMembersResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': SupplyListDeptMembersResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListDeptMembersResponseBody = SupplyListDeptMembersResponseBody;
class SupplyListDeptMembersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyListDeptMembersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListDeptMembersResponse = SupplyListDeptMembersResponse;
class SupplyListPartnerAdminsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerAdminsHeaders = SupplyListPartnerAdminsHeaders;
class SupplyListPartnerAdminsRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerAdminsRequest = SupplyListPartnerAdminsRequest;
class SupplyListPartnerAdminsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': SupplyListPartnerAdminsResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerAdminsResponseBody = SupplyListPartnerAdminsResponseBody;
class SupplyListPartnerAdminsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyListPartnerAdminsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerAdminsResponse = SupplyListPartnerAdminsResponse;
class SupplyListPartnerManagersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerManagersHeaders = SupplyListPartnerManagersHeaders;
class SupplyListPartnerManagersRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerManagersRequest = SupplyListPartnerManagersRequest;
class SupplyListPartnerManagersResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': SupplyListPartnerManagersResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerManagersResponseBody = SupplyListPartnerManagersResponseBody;
class SupplyListPartnerManagersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyListPartnerManagersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerManagersResponse = SupplyListPartnerManagersResponse;
class SupplyListPartnerTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerTypeHeaders = SupplyListPartnerTypeHeaders;
class SupplyListPartnerTypeRequest extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
        };
    }
    static types() {
        return {
            labelId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerTypeRequest = SupplyListPartnerTypeRequest;
class SupplyListPartnerTypeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': SupplyListPartnerTypeResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerTypeResponseBody = SupplyListPartnerTypeResponseBody;
class SupplyListPartnerTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyListPartnerTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerTypeResponse = SupplyListPartnerTypeResponse;
class SupplyListRoleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListRoleHeaders = SupplyListRoleHeaders;
class SupplyListRoleRequest extends $tea.Model {
    static names() {
        return {
            parentRoleId: 'parentRoleId',
        };
    }
    static types() {
        return {
            parentRoleId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListRoleRequest = SupplyListRoleRequest;
class SupplyListRoleResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': SupplyListRoleResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListRoleResponseBody = SupplyListRoleResponseBody;
class SupplyListRoleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyListRoleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListRoleResponse = SupplyListRoleResponse;
class SupplyListSubDeptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListSubDeptHeaders = SupplyListSubDeptHeaders;
class SupplyListSubDeptRequest extends $tea.Model {
    static names() {
        return {
            supplyDeptId: 'supplyDeptId',
        };
    }
    static types() {
        return {
            supplyDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListSubDeptRequest = SupplyListSubDeptRequest;
class SupplyListSubDeptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': SupplyListSubDeptResponseBodyResult },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListSubDeptResponseBody = SupplyListSubDeptResponseBody;
class SupplyListSubDeptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyListSubDeptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListSubDeptResponse = SupplyListSubDeptResponse;
class SupplyQueryPartnerTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyQueryPartnerTypeHeaders = SupplyQueryPartnerTypeHeaders;
class SupplyQueryPartnerTypeRequest extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
        };
    }
    static types() {
        return {
            labelId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyQueryPartnerTypeRequest = SupplyQueryPartnerTypeRequest;
class SupplyQueryPartnerTypeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SupplyQueryPartnerTypeResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyQueryPartnerTypeResponseBody = SupplyQueryPartnerTypeResponseBody;
class SupplyQueryPartnerTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyQueryPartnerTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyQueryPartnerTypeResponse = SupplyQueryPartnerTypeResponse;
class SupplyUpdateMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateMemberHeaders = SupplyUpdateMemberHeaders;
class SupplyUpdateMemberRequest extends $tea.Model {
    static names() {
        return {
            isCopyDept: 'isCopyDept',
            memberTitle: 'memberTitle',
            memberWorkNumber: 'memberWorkNumber',
            mobile: 'mobile',
            newDeptId: 'newDeptId',
            oldDeptId: 'oldDeptId',
            roleIdList: 'roleIdList',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            isCopyDept: 'boolean',
            memberTitle: 'string',
            memberWorkNumber: 'string',
            mobile: 'string',
            newDeptId: 'number',
            oldDeptId: 'number',
            roleIdList: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateMemberRequest = SupplyUpdateMemberRequest;
class SupplyUpdateMemberResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateMemberResponseBody = SupplyUpdateMemberResponseBody;
class SupplyUpdateMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyUpdateMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateMemberResponse = SupplyUpdateMemberResponse;
class SupplyUpdatePartnerTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdatePartnerTypeHeaders = SupplyUpdatePartnerTypeHeaders;
class SupplyUpdatePartnerTypeRequest extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            labelId: 'number',
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdatePartnerTypeRequest = SupplyUpdatePartnerTypeRequest;
class SupplyUpdatePartnerTypeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdatePartnerTypeResponseBody = SupplyUpdatePartnerTypeResponseBody;
class SupplyUpdatePartnerTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyUpdatePartnerTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdatePartnerTypeResponse = SupplyUpdatePartnerTypeResponse;
class SupplyUpdateRoleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateRoleHeaders = SupplyUpdateRoleHeaders;
class SupplyUpdateRoleRequest extends $tea.Model {
    static names() {
        return {
            isRoleGroup: 'isRoleGroup',
            roleId: 'roleId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            isRoleGroup: 'boolean',
            roleId: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateRoleRequest = SupplyUpdateRoleRequest;
class SupplyUpdateRoleResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateRoleResponseBody = SupplyUpdateRoleResponseBody;
class SupplyUpdateRoleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SupplyUpdateRoleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyUpdateRoleResponse = SupplyUpdateRoleResponse;
class UpdateUserExtendInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUserExtendInfoHeaders = UpdateUserExtendInfoHeaders;
class UpdateUserExtendInfoRequest extends $tea.Model {
    static names() {
        return {
            comments: 'comments',
            jobCode: 'jobCode',
            jobStatusCode: 'jobStatusCode',
            userProbCode: 'userProbCode',
        };
    }
    static types() {
        return {
            comments: 'string',
            jobCode: 'string',
            jobStatusCode: { 'type': 'array', 'itemType': 'string' },
            userProbCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUserExtendInfoRequest = UpdateUserExtendInfoRequest;
class UpdateUserExtendInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateUserExtendInfoResponse = UpdateUserExtendInfoResponse;
class BatchGetTaskResultResponseBodyTasksResultItemsSubs extends $tea.Model {
    static names() {
        return {
            point: 'point',
            reference: 'reference',
            referenceFrame: 'referenceFrame',
            subInfo: 'subInfo',
            subName: 'subName',
        };
    }
    static types() {
        return {
            point: 'number',
            reference: 'string',
            referenceFrame: { 'type': 'array', 'itemType': 'string' },
            subInfo: 'string',
            subName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultResponseBodyTasksResultItemsSubs = BatchGetTaskResultResponseBodyTasksResultItemsSubs;
class BatchGetTaskResultResponseBodyTasksResultItems extends $tea.Model {
    static names() {
        return {
            info: 'info',
            name: 'name',
            point: 'point',
            reference: 'reference',
            referenceFrame: 'referenceFrame',
            subs: 'subs',
        };
    }
    static types() {
        return {
            info: 'string',
            name: 'string',
            point: 'number',
            reference: 'string',
            referenceFrame: { 'type': 'array', 'itemType': 'string' },
            subs: { 'type': 'array', 'itemType': BatchGetTaskResultResponseBodyTasksResultItemsSubs },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultResponseBodyTasksResultItems = BatchGetTaskResultResponseBodyTasksResultItems;
class BatchGetTaskResultResponseBodyTasksResult extends $tea.Model {
    static names() {
        return {
            audioText: 'audioText',
            audioTextFormatted: 'audioTextFormatted',
            date: 'date',
            desc: 'desc',
            id: 'id',
            items: 'items',
            name: 'name',
            summary: 'summary',
            total: 'total',
        };
    }
    static types() {
        return {
            audioText: 'string',
            audioTextFormatted: 'string',
            date: 'string',
            desc: 'string',
            id: 'number',
            items: { 'type': 'array', 'itemType': BatchGetTaskResultResponseBodyTasksResultItems },
            name: 'string',
            summary: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultResponseBodyTasksResult = BatchGetTaskResultResponseBodyTasksResult;
class BatchGetTaskResultResponseBodyTasks extends $tea.Model {
    static names() {
        return {
            result: 'result',
            status: 'status',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            result: BatchGetTaskResultResponseBodyTasksResult,
            status: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchGetTaskResultResponseBodyTasks = BatchGetTaskResultResponseBodyTasks;
class CampusListCampusResponseBodyResult extends $tea.Model {
    static names() {
        return {
            address: 'address',
            area: 'area',
            belongProjectGroupId: 'belongProjectGroupId',
            campusCorpId: 'campusCorpId',
            campusDeptId: 'campusDeptId',
            campusName: 'campusName',
            cityId: 'cityId',
            country: 'country',
            countyId: 'countyId',
            description: 'description',
            extend: 'extend',
            location: 'location',
            orderEndTime: 'orderEndTime',
            orderInfo: 'orderInfo',
            orderStartTime: 'orderStartTime',
            provId: 'provId',
            telephone: 'telephone',
        };
    }
    static types() {
        return {
            address: 'string',
            area: 'number',
            belongProjectGroupId: 'number',
            campusCorpId: 'string',
            campusDeptId: 'number',
            campusName: 'string',
            cityId: 'number',
            country: 'string',
            countyId: 'number',
            description: 'string',
            extend: 'string',
            location: 'string',
            orderEndTime: 'number',
            orderInfo: 'string',
            orderStartTime: 'number',
            provId: 'number',
            telephone: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusResponseBodyResult = CampusListCampusResponseBodyResult;
class CampusListCampusGroupResponseBodyResult extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            groupDeptId: 'groupDeptId',
            groupName: 'groupName',
        };
    }
    static types() {
        return {
            extend: 'string',
            groupDeptId: 'number',
            groupName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListCampusGroupResponseBodyResult = CampusListCampusGroupResponseBodyResult;
class CampusListRenterResponseBodyResult extends $tea.Model {
    static names() {
        return {
            bindRenterCorpId: 'bindRenterCorpId',
            bindTime: 'bindTime',
            creditCode: 'creditCode',
            endTime: 'endTime',
            extend: 'extend',
            name: 'name',
            renterDeptId: 'renterDeptId',
            startTime: 'startTime',
            state: 'state',
        };
    }
    static types() {
        return {
            bindRenterCorpId: 'string',
            bindTime: 'number',
            creditCode: 'string',
            endTime: 'number',
            extend: 'string',
            name: 'string',
            renterDeptId: 'number',
            startTime: 'number',
            state: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterResponseBodyResult = CampusListRenterResponseBodyResult;
class CampusListRenterMembersResponseBodyResult extends $tea.Model {
    static names() {
        return {
            extend: 'extend',
            inviteState: 'inviteState',
            name: 'name',
            state: 'state',
            type: 'type',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            extend: 'string',
            inviteState: 'string',
            name: 'string',
            state: 'string',
            type: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CampusListRenterMembersResponseBodyResult = CampusListRenterMembersResponseBodyResult;
class ChatAIListDatasetResponseBodyResult extends $tea.Model {
    static names() {
        return {
            datasetDesc: 'datasetDesc',
            datasetId: 'datasetId',
            datasetName: 'datasetName',
            memoType: 'memoType',
            resourceType: 'resourceType',
        };
    }
    static types() {
        return {
            datasetDesc: 'string',
            datasetId: 'number',
            datasetName: 'string',
            memoType: 'string',
            resourceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIListDatasetResponseBodyResult = ChatAIListDatasetResponseBodyResult;
class ChatAIQueryDatasetPermissionResponseBodyPermissionInfos extends $tea.Model {
    static names() {
        return {
            permissionType: 'permissionType',
            permissionValues: 'permissionValues',
        };
    }
    static types() {
        return {
            permissionType: 'string',
            permissionValues: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAIQueryDatasetPermissionResponseBodyPermissionInfos = ChatAIQueryDatasetPermissionResponseBodyPermissionInfos;
class ChatAITextSentimentAnalysisResponseBodyResult extends $tea.Model {
    static names() {
        return {
            sentiment: 'sentiment',
        };
    }
    static types() {
        return {
            sentiment: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAITextSentimentAnalysisResponseBodyResult = ChatAITextSentimentAnalysisResponseBodyResult;
class ChatAiTravelListRequestParamList extends $tea.Model {
    static names() {
        return {
            itineraryId: 'itineraryId',
            value: 'value',
        };
    }
    static types() {
        return {
            itineraryId: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatAiTravelListRequestParamList = ChatAiTravelListRequestParamList;
class ChatMemoAddGeneralFileRequestTagList extends $tea.Model {
    static names() {
        return {
            tagName: 'tagName',
            tagValueList: 'tagValueList',
        };
    }
    static types() {
        return {
            tagName: 'string',
            tagValueList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddGeneralFileRequestTagList = ChatMemoAddGeneralFileRequestTagList;
class ChatMemoAddKnowledgeGraphNodeRequestNodeInfo extends $tea.Model {
    static names() {
        return {
            nodeLabel: 'nodeLabel',
            nodeName: 'nodeName',
            propertiesString: 'propertiesString',
        };
    }
    static types() {
        return {
            nodeLabel: 'string',
            nodeName: 'string',
            propertiesString: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphNodeRequestNodeInfo = ChatMemoAddKnowledgeGraphNodeRequestNodeInfo;
class ChatMemoAddKnowledgeGraphRelationRequestRelationInfo extends $tea.Model {
    static names() {
        return {
            endId: 'endId',
            propertiesString: 'propertiesString',
            relationName: 'relationName',
            startId: 'startId',
        };
    }
    static types() {
        return {
            endId: 'string',
            propertiesString: 'string',
            relationName: 'string',
            startId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoAddKnowledgeGraphRelationRequestRelationInfo = ChatMemoAddKnowledgeGraphRelationRequestRelationInfo;
class ChatMemoFaqListResponseBodyData extends $tea.Model {
    static names() {
        return {
            answer: 'answer',
            bizId: 'bizId',
            mediaId: 'mediaId',
            question: 'question',
            redirection: 'redirection',
        };
    }
    static types() {
        return {
            answer: 'string',
            bizId: 'string',
            mediaId: 'string',
            question: 'string',
            redirection: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoFaqListResponseBodyData = ChatMemoFaqListResponseBodyData;
class ChatMemoGetFileListResponseBodyData extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            fileDesc: 'fileDesc',
            fileName: 'fileName',
            mediaId: 'mediaId',
            tagMap: 'tagMap',
        };
    }
    static types() {
        return {
            bizId: 'string',
            fileDesc: 'string',
            fileName: 'string',
            mediaId: 'string',
            tagMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': 'string' } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoGetFileListResponseBodyData = ChatMemoGetFileListResponseBodyData;
class ChatMemoQueryKnowledgeGraphNodeResponseBodyNodeInfo extends $tea.Model {
    static names() {
        return {
            mediaId: 'mediaId',
            nodeLabel: 'nodeLabel',
            nodeName: 'nodeName',
            propertiesString: 'propertiesString',
        };
    }
    static types() {
        return {
            mediaId: 'string',
            nodeLabel: 'string',
            nodeName: 'string',
            propertiesString: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphNodeResponseBodyNodeInfo = ChatMemoQueryKnowledgeGraphNodeResponseBodyNodeInfo;
class ChatMemoQueryKnowledgeGraphRelationResponseBodyRelationInfo extends $tea.Model {
    static names() {
        return {
            endId: 'endId',
            mediaId: 'mediaId',
            propertiesString: 'propertiesString',
            relationName: 'relationName',
            startId: 'startId',
        };
    }
    static types() {
        return {
            endId: 'string',
            mediaId: 'string',
            propertiesString: 'string',
            relationName: 'string',
            startId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoQueryKnowledgeGraphRelationResponseBodyRelationInfo = ChatMemoQueryKnowledgeGraphRelationResponseBodyRelationInfo;
class ChatMemoUpdateKnowledgeGraphNodeRequestNodeInfo extends $tea.Model {
    static names() {
        return {
            mediaId: 'mediaId',
            propertiesString: 'propertiesString',
        };
    }
    static types() {
        return {
            mediaId: 'string',
            propertiesString: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphNodeRequestNodeInfo = ChatMemoUpdateKnowledgeGraphNodeRequestNodeInfo;
class ChatMemoUpdateKnowledgeGraphRelationRequestRelationInfo extends $tea.Model {
    static names() {
        return {
            mediaId: 'mediaId',
            propertiesString: 'propertiesString',
        };
    }
    static types() {
        return {
            mediaId: 'string',
            propertiesString: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChatMemoUpdateKnowledgeGraphRelationRequestRelationInfo = ChatMemoUpdateKnowledgeGraphRelationRequestRelationInfo;
class CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            deptType: 'deptType',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            deptType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList = CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList;
class CollegeListDeptManagerResponseBodyManagerInfoSimpleList extends $tea.Model {
    static names() {
        return {
            isActive: 'isActive',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            isActive: 'boolean',
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListDeptManagerResponseBodyManagerInfoSimpleList = CollegeListDeptManagerResponseBodyManagerInfoSimpleList;
class CollegeListStudentInfoResponseBodyStudentInfoSimpleList extends $tea.Model {
    static names() {
        return {
            dingMemberStatus: 'dingMemberStatus',
            isActive: 'isActive',
            studentId: 'studentId',
            studentName: 'studentName',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dingMemberStatus: 'string',
            isActive: 'boolean',
            studentId: 'number',
            studentName: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListStudentInfoResponseBodyStudentInfoSimpleList = CollegeListStudentInfoResponseBodyStudentInfoSimpleList;
class CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList extends $tea.Model {
    static names() {
        return {
            dingMemberStatus: 'dingMemberStatus',
            isActive: 'isActive',
            studentId: 'studentId',
            studentName: 'studentName',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dingMemberStatus: 'string',
            isActive: 'boolean',
            studentId: 'number',
            studentName: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList = CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList;
class CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            memberType: 'memberType',
            studentNumber: 'studentNumber',
        };
    }
    static types() {
        return {
            deptId: 'number',
            memberType: 'string',
            studentNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList = CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList;
class CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            memberType: 'memberType',
            studentNumber: 'studentNumber',
        };
    }
    static types() {
        return {
            deptId: 'number',
            memberType: 'string',
            studentNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList = CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList;
class CustomizeContactCreateResponseBodyContent extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            order: 'order',
            rootDeptId: 'rootDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            order: 'number',
            rootDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactCreateResponseBodyContent = CustomizeContactCreateResponseBodyContent;
class CustomizeContactDeptInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            code: 'code',
            id: 'id',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
            refId: 'refId',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            id: 'number',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
            refId: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptInfoResponseBodyContent = CustomizeContactDeptInfoResponseBodyContent;
class CustomizeContactDeptListResponseBodyContent extends $tea.Model {
    static names() {
        return {
            code: 'code',
            id: 'id',
            managerIdList: 'managerIdList',
            name: 'name',
            order: 'order',
            parentDeptId: 'parentDeptId',
            refId: 'refId',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            id: 'number',
            managerIdList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            order: 'number',
            parentDeptId: 'number',
            refId: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactDeptListResponseBodyContent = CustomizeContactDeptListResponseBodyContent;
class CustomizeContactEmpListResponseBodyContent extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactEmpListResponseBodyContent = CustomizeContactEmpListResponseBodyContent;
class CustomizeContactListResponseBodyContent extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            order: 'order',
            rootDeptId: 'rootDeptId',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            order: 'number',
            rootDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CustomizeContactListResponseBodyContent = CustomizeContactListResponseBodyContent;
class DIgitalStoreMessagePushRequestMessageDataList extends $tea.Model {
    static names() {
        return {
            callbackKey: 'callbackKey',
            content: 'content',
            newCard: 'newCard',
            outTraceId: 'outTraceId',
            sceneCardCode: 'sceneCardCode',
            sceneScope: 'sceneScope',
            sendNow: 'sendNow',
        };
    }
    static types() {
        return {
            callbackKey: 'string',
            content: 'string',
            newCard: 'boolean',
            outTraceId: 'string',
            sceneCardCode: 'string',
            sceneScope: 'number',
            sendNow: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DIgitalStoreMessagePushRequestMessageDataList = DIgitalStoreMessagePushRequestMessageDataList;
class DigitalStoreCardRecordResponseBodyContentDetailList extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            readStatusStr: 'readStatusStr',
            readTime: 'readTime',
            roleName: 'roleName',
            userName: 'userName',
        };
    }
    static types() {
        return {
            deptName: 'string',
            readStatusStr: 'string',
            readTime: 'number',
            roleName: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreCardRecordResponseBodyContentDetailList = DigitalStoreCardRecordResponseBodyContentDetailList;
class DigitalStoreCardRecordResponseBodyContent extends $tea.Model {
    static names() {
        return {
            conversationTitle: 'conversationTitle',
            detailList: 'detailList',
            id: 'id',
            memberNum: 'memberNum',
            readNum: 'readNum',
            readPercent: 'readPercent',
            receiveNum: 'receiveNum',
            sceneCardName: 'sceneCardName',
            sendStatus: 'sendStatus',
            sendTime: 'sendTime',
        };
    }
    static types() {
        return {
            conversationTitle: 'string',
            detailList: { 'type': 'array', 'itemType': DigitalStoreCardRecordResponseBodyContentDetailList },
            id: 'number',
            memberNum: 'number',
            readNum: 'number',
            readPercent: 'string',
            receiveNum: 'number',
            sceneCardName: 'string',
            sendStatus: 'string',
            sendTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreCardRecordResponseBodyContent = DigitalStoreCardRecordResponseBodyContent;
class DigitalStoreConversationsResponseBodyContent extends $tea.Model {
    static names() {
        return {
            conversationTitle: 'conversationTitle',
            conversationType: 'conversationType',
            id: 'id',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            conversationTitle: 'string',
            conversationType: 'string',
            id: 'number',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreConversationsResponseBodyContent = DigitalStoreConversationsResponseBodyContent;
class DigitalStoreGroupsResponseBodyContent extends $tea.Model {
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreGroupsResponseBodyContent = DigitalStoreGroupsResponseBodyContent;
class DigitalStoreRolesResponseBodyContent extends $tea.Model {
    static names() {
        return {
            level: 'level',
            roleCode: 'roleCode',
            roleId: 'roleId',
            roleName: 'roleName',
            source: 'source',
        };
    }
    static types() {
        return {
            level: 'number',
            roleCode: 'string',
            roleId: 'number',
            roleName: 'string',
            source: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreRolesResponseBodyContent = DigitalStoreRolesResponseBodyContent;
class DigitalStoreSubNodesResponseBodyContent extends $tea.Model {
    static names() {
        return {
            dingDeptId: 'dingDeptId',
            id: 'id',
            name: 'name',
            parentId: 'parentId',
            type: 'type',
        };
    }
    static types() {
        return {
            dingDeptId: 'number',
            id: 'number',
            name: 'string',
            parentId: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreSubNodesResponseBodyContent = DigitalStoreSubNodesResponseBodyContent;
class DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList extends $tea.Model {
    static names() {
        return {
            roleName: 'roleName',
            sourceRoleId: 'sourceRoleId',
        };
    }
    static types() {
        return {
            roleName: 'string',
            sourceRoleId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList = DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList;
class DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList extends $tea.Model {
    static names() {
        return {
            dingDeptId: 'dingDeptId',
            sourceDeptId: 'sourceDeptId',
        };
    }
    static types() {
        return {
            dingDeptId: 'string',
            sourceDeptId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList = DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList;
class DigitalStoreUpdateAuthInfoRequestUpdateUserList extends $tea.Model {
    static names() {
        return {
            roleList: 'roleList',
            userAuthList: 'userAuthList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            roleList: { 'type': 'array', 'itemType': DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList },
            userAuthList: { 'type': 'array', 'itemType': DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUpdateAuthInfoRequestUpdateUserList = DigitalStoreUpdateAuthInfoRequestUpdateUserList;
class DigitalStoreUsersResponseBodyContent extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStoreUsersResponseBodyContent = DigitalStoreUsersResponseBodyContent;
class DigitalStorelistExportTaskRecordResponseBodyContent extends $tea.Model {
    static names() {
        return {
            fileName: 'fileName',
            fileType: 'fileType',
            fileUrl: 'fileUrl',
            id: 'id',
            isImport: 'isImport',
            remark: 'remark',
            status: 'status',
            successNum: 'successNum',
            totalNum: 'totalNum',
        };
    }
    static types() {
        return {
            fileName: 'string',
            fileType: 'string',
            fileUrl: 'string',
            id: 'string',
            isImport: 'string',
            remark: 'string',
            status: 'string',
            successNum: 'string',
            totalNum: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DigitalStorelistExportTaskRecordResponseBodyContent = DigitalStorelistExportTaskRecordResponseBodyContent;
class ExternalQueryExternalAppOrgsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalAppOrgsResponseBodyResult = ExternalQueryExternalAppOrgsResponseBodyResult;
class ExternalQueryExternalOrgsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExternalQueryExternalOrgsResponseBodyResult = ExternalQueryExternalOrgsResponseBodyResult;
class GetTaskPackageResultResponseBodyTasksResultItems extends $tea.Model {
    static names() {
        return {
            advantages: 'advantages',
            fabReference: 'fabReference',
            info: 'info',
            name: 'name',
            point: 'point',
            reference: 'reference',
            res: 'res',
            suggestion: 'suggestion',
        };
    }
    static types() {
        return {
            advantages: 'string',
            fabReference: 'string',
            info: 'string',
            name: 'string',
            point: 'number',
            reference: 'string',
            res: 'boolean',
            suggestion: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultResponseBodyTasksResultItems = GetTaskPackageResultResponseBodyTasksResultItems;
class GetTaskPackageResultResponseBodyTasksResult extends $tea.Model {
    static names() {
        return {
            audioText: 'audioText',
            audioTextFormatted: 'audioTextFormatted',
            date: 'date',
            desc: 'desc',
            id: 'id',
            items: 'items',
            name: 'name',
            summary: 'summary',
            total: 'total',
        };
    }
    static types() {
        return {
            audioText: 'string',
            audioTextFormatted: 'string',
            date: 'string',
            desc: 'string',
            id: 'number',
            items: { 'type': 'array', 'itemType': GetTaskPackageResultResponseBodyTasksResultItems },
            name: 'string',
            summary: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultResponseBodyTasksResult = GetTaskPackageResultResponseBodyTasksResult;
class GetTaskPackageResultResponseBodyTasks extends $tea.Model {
    static names() {
        return {
            result: 'result',
            status: 'status',
            statusInfo: 'statusInfo',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            result: GetTaskPackageResultResponseBodyTasksResult,
            status: 'string',
            statusInfo: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTaskPackageResultResponseBodyTasks = GetTaskPackageResultResponseBodyTasks;
class IndustryManufactureCommonEventResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
            httpCode: 'httpCode',
        };
    }
    static types() {
        return {
            content: 'string',
            httpCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCommonEventResponseBodyResult = IndustryManufactureCommonEventResponseBodyResult;
class IndustryManufactureCostRecordListGetResponseBodyList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            count: 'count',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            instanceId: 'instanceId',
            isDeleted: 'isDeleted',
            materialCostRecordNo: 'materialCostRecordNo',
            materialName: 'materialName',
            materialNo: 'materialNo',
            memo: 'memo',
            orderNo: 'orderNo',
            price: 'price',
            processCode: 'processCode',
            productionTaskNo: 'productionTaskNo',
            realCount: 'realCount',
            realPrice: 'realPrice',
            type: 'type',
            unit: 'unit',
        };
    }
    static types() {
        return {
            corpId: 'string',
            count: 'number',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            instanceId: 'string',
            isDeleted: 'string',
            materialCostRecordNo: 'string',
            materialName: 'string',
            materialNo: 'string',
            memo: 'string',
            orderNo: 'string',
            price: 'number',
            processCode: 'string',
            productionTaskNo: 'string',
            realCount: 'number',
            realPrice: 'number',
            type: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureCostRecordListGetResponseBodyList = IndustryManufactureCostRecordListGetResponseBodyList;
class IndustryManufactureFeeListGetResponseBodyList extends $tea.Model {
    static names() {
        return {
            amount: 'amount',
            corpId: 'corpId',
            count: 'count',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            instanceId: 'instanceId',
            isDeleted: 'isDeleted',
            materialName: 'materialName',
            materialNo: 'materialNo',
            perAmount: 'perAmount',
            processCode: 'processCode',
            productionTaskNo: 'productionTaskNo',
            title: 'title',
            type: 'type',
            unit: 'unit',
        };
    }
    static types() {
        return {
            amount: 'string',
            corpId: 'string',
            count: 'number',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            id: 'number',
            instanceId: 'string',
            isDeleted: 'string',
            materialName: 'string',
            materialNo: 'string',
            perAmount: 'number',
            processCode: 'string',
            productionTaskNo: 'string',
            title: 'string',
            type: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureFeeListGetResponseBodyList = IndustryManufactureFeeListGetResponseBodyList;
class IndustryManufactureLabourCostResponseBodyList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            instanceId: 'instanceId',
            labourCostName: 'labourCostName',
            labourCostNo: 'labourCostNo',
            materialName: 'materialName',
            materialNo: 'materialNo',
            processCode: 'processCode',
            processName: 'processName',
            processNo: 'processNo',
            qualifiedPrice: 'qualifiedPrice',
            unQualifiedInfo: 'unQualifiedInfo',
            unQualifiedPrice1: 'unQualifiedPrice1',
            unQualifiedPrice2: 'unQualifiedPrice2',
            unQualifiedReason1: 'unQualifiedReason1',
            unQualifiedReason2: 'unQualifiedReason2',
        };
    }
    static types() {
        return {
            corpId: 'string',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            instanceId: 'string',
            labourCostName: 'string',
            labourCostNo: 'string',
            materialName: 'string',
            materialNo: 'string',
            processCode: 'string',
            processName: 'string',
            processNo: 'string',
            qualifiedPrice: 'number',
            unQualifiedInfo: 'string',
            unQualifiedPrice1: 'number',
            unQualifiedPrice2: 'number',
            unQualifiedReason1: 'string',
            unQualifiedReason2: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureLabourCostResponseBodyList = IndustryManufactureLabourCostResponseBodyList;
class IndustryManufactureMaterialListResponseBodyList extends $tea.Model {
    static names() {
        return {
            category: 'category',
            corpId: 'corpId',
            ext: 'ext',
            instanceId: 'instanceId',
            materialName: 'materialName',
            materialNo: 'materialNo',
            processCode: 'processCode',
            specification: 'specification',
            stockMaxWarn: 'stockMaxWarn',
            stockMinWarn: 'stockMinWarn',
            type: 'type',
            unit: 'unit',
        };
    }
    static types() {
        return {
            category: 'string',
            corpId: 'string',
            ext: 'string',
            instanceId: 'string',
            materialName: 'string',
            materialNo: 'string',
            processCode: 'string',
            specification: 'string',
            stockMaxWarn: 'number',
            stockMinWarn: 'number',
            type: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMaterialListResponseBodyList = IndustryManufactureMaterialListResponseBodyList;
class IndustryManufactureMesDispatchTaskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesDispatchTaskResponseBodyResult = IndustryManufactureMesDispatchTaskResponseBodyResult;
class IndustryManufactureMesMaterialRequestExtendData extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesMaterialRequestExtendData = IndustryManufactureMesMaterialRequestExtendData;
class IndustryManufactureMesMaterialResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesMaterialResponseBodyResult = IndustryManufactureMesMaterialResponseBodyResult;
class IndustryManufactureMesOutPlanResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutPlanResponseBodyResult = IndustryManufactureMesOutPlanResponseBodyResult;
class IndustryManufactureMesOutputResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesOutputResponseBodyResult = IndustryManufactureMesOutputResponseBodyResult;
class IndustryManufactureMesProcessRequestExtendData extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProcessRequestExtendData = IndustryManufactureMesProcessRequestExtendData;
class IndustryManufactureMesProcessResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProcessResponseBodyResult = IndustryManufactureMesProcessResponseBodyResult;
class IndustryManufactureMesProductionPlanRequestExtendData extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProductionPlanRequestExtendData = IndustryManufactureMesProductionPlanRequestExtendData;
class IndustryManufactureMesProductionPlanResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesProductionPlanResponseBodyResult = IndustryManufactureMesProductionPlanResponseBodyResult;
class IndustryManufactureMesSubCooperationTeamRequestExtendData extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestExtendData = IndustryManufactureMesSubCooperationTeamRequestExtendData;
class IndustryManufactureMesSubCooperationTeamRequestGroupPlugins extends $tea.Model {
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestGroupPlugins = IndustryManufactureMesSubCooperationTeamRequestGroupPlugins;
class IndustryManufactureMesSubCooperationTeamRequestLeaders extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestLeaders = IndustryManufactureMesSubCooperationTeamRequestLeaders;
class IndustryManufactureMesSubCooperationTeamRequestMembers extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamRequestMembers = IndustryManufactureMesSubCooperationTeamRequestMembers;
class IndustryManufactureMesSubCooperationTeamResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesSubCooperationTeamResponseBodyResult = IndustryManufactureMesSubCooperationTeamResponseBodyResult;
class IndustryManufactureMesTeamMgmtRequestExtendData extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
            value: 'value',
            valueType: 'valueType',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
            value: 'string',
            valueType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtRequestExtendData = IndustryManufactureMesTeamMgmtRequestExtendData;
class IndustryManufactureMesTeamMgmtRequestGroupPlugins extends $tea.Model {
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtRequestGroupPlugins = IndustryManufactureMesTeamMgmtRequestGroupPlugins;
class IndustryManufactureMesTeamMgmtRequestLeaders extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtRequestLeaders = IndustryManufactureMesTeamMgmtRequestLeaders;
class IndustryManufactureMesTeamMgmtRequestMembers extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtRequestMembers = IndustryManufactureMesTeamMgmtRequestMembers;
class IndustryManufactureMesTeamMgmtResponseBodyResult extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryManufactureMesTeamMgmtResponseBodyResult = IndustryManufactureMesTeamMgmtResponseBodyResult;
class IndustryMmanufactureMaterialCostGetResponseBodyList extends $tea.Model {
    static names() {
        return {
            actPrice: 'actPrice',
            corpId: 'corpId',
            count: 'count',
            ext: 'ext',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            instanceId: 'instanceId',
            materialCostNo: 'materialCostNo',
            materialName: 'materialName',
            materialNo: 'materialNo',
            memo: 'memo',
            price: 'price',
            processCode: 'processCode',
            unit: 'unit',
        };
    }
    static types() {
        return {
            actPrice: 'number',
            corpId: 'string',
            count: 'number',
            ext: 'string',
            gmtCreate: 'number',
            gmtModified: 'number',
            instanceId: 'string',
            materialCostNo: 'string',
            materialName: 'string',
            materialNo: 'string',
            memo: 'string',
            price: 'number',
            processCode: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IndustryMmanufactureMaterialCostGetResponseBodyList = IndustryMmanufactureMaterialCostGetResponseBodyList;
class QueryAllDepartmentResponseBodyContentDeptAndExtDepartment extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            deptOrder: 'deptOrder',
            deptStatus: 'deptStatus',
            deptType: 'deptType',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
            wardIdList: 'wardIdList',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            deptOrder: 'number',
            deptStatus: 'number',
            deptType: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
            wardIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentDeptAndExtDepartment = QueryAllDepartmentResponseBodyContentDeptAndExtDepartment;
class QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos = QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos;
class QueryAllDepartmentResponseBodyContentDeptAndExt extends $tea.Model {
    static names() {
        return {
            department: 'department',
            extendInfos: 'extendInfos',
        };
    }
    static types() {
        return {
            department: QueryAllDepartmentResponseBodyContentDeptAndExtDepartment,
            extendInfos: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentDeptAndExt = QueryAllDepartmentResponseBodyContentDeptAndExt;
class QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos = QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos;
class QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader extends $tea.Model {
    static names() {
        return {
            jobNumber: 'jobNumber',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            jobNumber: 'string',
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader = QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader;
class QueryAllDepartmentResponseBodyContentGroupAndExtListGroup extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptStatus: 'deptStatus',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            leader: 'leader',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptStatus: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            leader: QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader,
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtListGroup = QueryAllDepartmentResponseBodyContentGroupAndExtListGroup;
class QueryAllDepartmentResponseBodyContentGroupAndExtList extends $tea.Model {
    static names() {
        return {
            extendInfos: 'extendInfos',
            group: 'group',
        };
    }
    static types() {
        return {
            extendInfos: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos },
            group: QueryAllDepartmentResponseBodyContentGroupAndExtListGroup,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContentGroupAndExtList = QueryAllDepartmentResponseBodyContentGroupAndExtList;
class QueryAllDepartmentResponseBodyContent extends $tea.Model {
    static names() {
        return {
            deptAndExt: 'deptAndExt',
            groupAndExtList: 'groupAndExtList',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            deptAndExt: QueryAllDepartmentResponseBodyContentDeptAndExt,
            groupAndExtList: { 'type': 'array', 'itemType': QueryAllDepartmentResponseBodyContentGroupAndExtList },
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDepartmentResponseBodyContent = QueryAllDepartmentResponseBodyContent;
class QueryAllDoctorsResponseBodyContent extends $tea.Model {
    static names() {
        return {
            assessGroupId: 'assessGroupId',
            assessGroupName: 'assessGroupName',
            deptCode: 'deptCode',
            deptType: 'deptType',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            jobNum: 'jobNum',
            status: 'status',
            uid: 'uid',
            userCode: 'userCode',
            userName: 'userName',
        };
    }
    static types() {
        return {
            assessGroupId: 'string',
            assessGroupName: 'string',
            deptCode: 'string',
            deptType: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            jobNum: 'string',
            status: 'number',
            uid: 'string',
            userCode: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllDoctorsResponseBodyContent = QueryAllDoctorsResponseBodyContent;
class QueryAllGroupResponseBodyContent extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupResponseBodyContent = QueryAllGroupResponseBodyContent;
class QueryAllGroupsInDeptResponseBodyContent extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllGroupsInDeptResponseBodyContent = QueryAllGroupsInDeptResponseBodyContent;
class QueryAllMemberByDeptResponseBodyContent extends $tea.Model {
    static names() {
        return {
            jobNum: 'jobNum',
            uid: 'uid',
            userName: 'userName',
        };
    }
    static types() {
        return {
            jobNum: 'string',
            uid: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByDeptResponseBodyContent = QueryAllMemberByDeptResponseBodyContent;
class QueryAllMemberByGroupResponseBodyContent extends $tea.Model {
    static names() {
        return {
            jobNum: 'jobNum',
            uid: 'uid',
            userName: 'userName',
        };
    }
    static types() {
        return {
            jobNum: 'string',
            uid: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAllMemberByGroupResponseBodyContent = QueryAllMemberByGroupResponseBodyContent;
class QueryBizOptLogResponseBodyContent extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            dataType: 'dataType',
            id: 'id',
            optAfterData: 'optAfterData',
            optBeforeData: 'optBeforeData',
            optBizType: 'optBizType',
            optExtend: 'optExtend',
            optJobNumber: 'optJobNumber',
            optObjectCode: 'optObjectCode',
            optObjectName: 'optObjectName',
            optObjectUserJobNo: 'optObjectUserJobNo',
            optSuccess: 'optSuccess',
            optTime: 'optTime',
            optType: 'optType',
            optUserCode: 'optUserCode',
            optUserName: 'optUserName',
            remark: 'remark',
        };
    }
    static types() {
        return {
            bizType: 'number',
            dataType: 'number',
            id: 'number',
            optAfterData: 'string',
            optBeforeData: 'string',
            optBizType: 'number',
            optExtend: 'string',
            optJobNumber: 'string',
            optObjectCode: 'string',
            optObjectName: 'string',
            optObjectUserJobNo: 'string',
            optSuccess: 'number',
            optTime: 'number',
            optType: 'number',
            optUserCode: 'string',
            optUserName: 'string',
            remark: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBizOptLogResponseBodyContent = QueryBizOptLogResponseBodyContent;
class QueryDepartmentExtendInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentExtendInfoResponseBodyContent = QueryDepartmentExtendInfoResponseBodyContent;
class QueryDepartmentInfoResponseBodyContentDepartment extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            deptOrder: 'deptOrder',
            deptStatus: 'deptStatus',
            deptType: 'deptType',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
            wardIdList: 'wardIdList',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            deptOrder: 'number',
            deptStatus: 'number',
            deptType: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
            wardIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentInfoResponseBodyContentDepartment = QueryDepartmentInfoResponseBodyContentDepartment;
class QueryDepartmentInfoResponseBodyContentExtendInfos extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentInfoResponseBodyContentExtendInfos = QueryDepartmentInfoResponseBodyContentExtendInfos;
class QueryDepartmentInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            department: 'department',
            extendInfos: 'extendInfos',
        };
    }
    static types() {
        return {
            department: QueryDepartmentInfoResponseBodyContentDepartment,
            extendInfos: { 'type': 'array', 'itemType': QueryDepartmentInfoResponseBodyContentExtendInfos },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDepartmentInfoResponseBodyContent = QueryDepartmentInfoResponseBodyContent;
class QueryDoctorDetailsByJobNumberResponseBodyContentDeptList extends $tea.Model {
    static names() {
        return {
            categoryName: 'categoryName',
            deptId: 'deptId',
            deptName: 'deptName',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            relationId: 'relationId',
        };
    }
    static types() {
        return {
            categoryName: 'string',
            deptId: 'number',
            deptName: 'string',
            gmtCreate: 'string',
            gmtModified: 'string',
            relationId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBodyContentDeptList = QueryDoctorDetailsByJobNumberResponseBodyContentDeptList;
class QueryDoctorDetailsByJobNumberResponseBodyContentGroupList extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            groupId: 'groupId',
            groupName: 'groupName',
            isAssessGroup: 'isAssessGroup',
            isLeader: 'isLeader',
            relationId: 'relationId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            groupId: 'number',
            groupName: 'string',
            isAssessGroup: 'string',
            isLeader: 'boolean',
            relationId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBodyContentGroupList = QueryDoctorDetailsByJobNumberResponseBodyContentGroupList;
class QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus extends $tea.Model {
    static names() {
        return {
            code: 'code',
            statusName: 'statusName',
        };
    }
    static types() {
        return {
            code: 'string',
            statusName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus = QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus;
class QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle extends $tea.Model {
    static names() {
        return {
            code: 'code',
            professionalTitleCategory: 'professionalTitleCategory',
            professionalTitleDetail: 'professionalTitleDetail',
        };
    }
    static types() {
        return {
            code: 'string',
            professionalTitleCategory: 'string',
            professionalTitleDetail: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle = QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle;
class QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            userPropertyName: 'userPropertyName',
        };
    }
    static types() {
        return {
            code: 'string',
            userPropertyName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList = QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList;
class QueryDoctorDetailsByJobNumberResponseBodyContent extends $tea.Model {
    static names() {
        return {
            deptList: 'deptList',
            groupList: 'groupList',
            jobNumber: 'jobNumber',
            jobStatus: 'jobStatus',
            professionalTitle: 'professionalTitle',
            userId: 'userId',
            userName: 'userName',
            userProbList: 'userProbList',
        };
    }
    static types() {
        return {
            deptList: { 'type': 'array', 'itemType': QueryDoctorDetailsByJobNumberResponseBodyContentDeptList },
            groupList: { 'type': 'array', 'itemType': QueryDoctorDetailsByJobNumberResponseBodyContentGroupList },
            jobNumber: 'string',
            jobStatus: { 'type': 'array', 'itemType': QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus },
            professionalTitle: QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle,
            userId: 'string',
            userName: 'string',
            userProbList: { 'type': 'array', 'itemType': QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDoctorDetailsByJobNumberResponseBodyContent = QueryDoctorDetailsByJobNumberResponseBodyContent;
class QueryGroupInfoResponseBodyContentExtendInfos extends $tea.Model {
    static names() {
        return {
            deptCode: 'deptCode',
            deptExtendDisplayName: 'deptExtendDisplayName',
            deptExtendKey: 'deptExtendKey',
            deptExtendValue: 'deptExtendValue',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            status: 'status',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptExtendDisplayName: 'string',
            deptExtendKey: 'string',
            deptExtendValue: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoResponseBodyContentExtendInfos = QueryGroupInfoResponseBodyContentExtendInfos;
class QueryGroupInfoResponseBodyContentGroupLeader extends $tea.Model {
    static names() {
        return {
            jobNumber: 'jobNumber',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            jobNumber: 'string',
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoResponseBodyContentGroupLeader = QueryGroupInfoResponseBodyContentGroupLeader;
class QueryGroupInfoResponseBodyContentGroup extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptStatus: 'deptStatus',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            leader: 'leader',
            name: 'name',
            parentDeptCode: 'parentDeptCode',
            remark: 'remark',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptStatus: 'number',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            leader: QueryGroupInfoResponseBodyContentGroupLeader,
            name: 'string',
            parentDeptCode: 'string',
            remark: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoResponseBodyContentGroup = QueryGroupInfoResponseBodyContentGroup;
class QueryGroupInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            extendInfos: 'extendInfos',
            group: 'group',
        };
    }
    static types() {
        return {
            extendInfos: { 'type': 'array', 'itemType': QueryGroupInfoResponseBodyContentExtendInfos },
            group: QueryGroupInfoResponseBodyContentGroup,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupInfoResponseBodyContent = QueryGroupInfoResponseBodyContent;
class QueryHospitalDistrictInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            address: 'address',
            deleted: 'deleted',
            districtName: 'districtName',
            districtType: 'districtType',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            parentDistrictId: 'parentDistrictId',
        };
    }
    static types() {
        return {
            address: 'string',
            deleted: 'number',
            districtName: 'string',
            districtType: 'number',
            gmtCreate: 'string',
            gmtModified: 'string',
            id: 'number',
            parentDistrictId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalDistrictInfoResponseBodyContent = QueryHospitalDistrictInfoResponseBodyContent;
class QueryHospitalRoleUserInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            jobNumber: 'jobNumber',
            roleCode: 'roleCode',
            roleName: 'roleName',
            status: 'status',
            userCode: 'userCode',
            userName: 'userName',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            jobNumber: 'string',
            roleCode: 'string',
            roleName: 'string',
            status: 'number',
            userCode: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRoleUserInfoResponseBodyContent = QueryHospitalRoleUserInfoResponseBodyContent;
class QueryHospitalRolesResponseBodyContent extends $tea.Model {
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            id: 'id',
            isDeleted: 'isDeleted',
            readOnly: 'readOnly',
            remark: 'remark',
            roleCode: 'roleCode',
            roleName: 'roleName',
            sort: 'sort',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            id: 'number',
            isDeleted: 'number',
            readOnly: 'number',
            remark: 'string',
            roleCode: 'string',
            roleName: 'string',
            sort: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHospitalRolesResponseBodyContent = QueryHospitalRolesResponseBodyContent;
class QueryJobCodeDictionaryResponseBodyContent extends $tea.Model {
    static names() {
        return {
            category: 'category',
            code: 'code',
            displayName: 'displayName',
            doctorType: 'doctorType',
        };
    }
    static types() {
        return {
            category: 'string',
            code: 'string',
            displayName: 'string',
            doctorType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobCodeDictionaryResponseBodyContent = QueryJobCodeDictionaryResponseBodyContent;
class QueryJobStatusCodeDictionaryResponseBodyContent extends $tea.Model {
    static names() {
        return {
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryJobStatusCodeDictionaryResponseBodyContent = QueryJobStatusCodeDictionaryResponseBodyContent;
class QueryMedicalEventsResponseBodyContent extends $tea.Model {
    static names() {
        return {
            code: 'code',
            content: 'content',
            eventId: 'eventId',
        };
    }
    static types() {
        return {
            code: 'string',
            content: 'string',
            eventId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMedicalEventsResponseBodyContent = QueryMedicalEventsResponseBodyContent;
class QueryUserCredentialsResponseBodyContentCredentialList extends $tea.Model {
    static names() {
        return {
            credentialName: 'credentialName',
            credentialType: 'credentialType',
            termOfValidity: 'termOfValidity',
        };
    }
    static types() {
        return {
            credentialName: 'string',
            credentialType: 'number',
            termOfValidity: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserCredentialsResponseBodyContentCredentialList = QueryUserCredentialsResponseBodyContentCredentialList;
class QueryUserCredentialsResponseBodyContent extends $tea.Model {
    static names() {
        return {
            credentialList: 'credentialList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            credentialList: { 'type': 'array', 'itemType': QueryUserCredentialsResponseBodyContentCredentialList },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserCredentialsResponseBodyContent = QueryUserCredentialsResponseBodyContent;
class QueryUserExtInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            status: 'status',
            userCode: 'userCode',
            userExtendDisplayName: 'userExtendDisplayName',
            userExtendKey: 'userExtendKey',
            userExtendValue: 'userExtendValue',
        };
    }
    static types() {
        return {
            gmtCreate: 'string',
            gmtModified: 'string',
            status: 'number',
            userCode: 'string',
            userExtendDisplayName: 'string',
            userExtendKey: 'string',
            userExtendValue: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtInfoResponseBodyContent = QueryUserExtInfoResponseBodyContent;
class QueryUserExtendValuesResponseBodyContent extends $tea.Model {
    static names() {
        return {
            userCode: 'userCode',
            userExtendDisplayName: 'userExtendDisplayName',
            userExtendKey: 'userExtendKey',
            userExtendValue: 'userExtendValue',
        };
    }
    static types() {
        return {
            userCode: 'string',
            userExtendDisplayName: 'string',
            userExtendKey: 'string',
            userExtendValue: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserExtendValuesResponseBodyContent = QueryUserExtendValuesResponseBodyContent;
class QueryUserInfoResponseBodyContentDept extends $tea.Model {
    static names() {
        return {
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            relId: 'relId',
        };
    }
    static types() {
        return {
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            relId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContentDept = QueryUserInfoResponseBodyContentDept;
class QueryUserInfoResponseBodyContentGroup extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            gmtCreateStr: 'gmtCreateStr',
            gmtModifiedStr: 'gmtModifiedStr',
            id: 'id',
            name: 'name',
            relId: 'relId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptName: 'string',
            gmtCreateStr: 'string',
            gmtModifiedStr: 'string',
            id: 'number',
            name: 'string',
            relId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContentGroup = QueryUserInfoResponseBodyContentGroup;
class QueryUserInfoResponseBodyContentJob extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContentJob = QueryUserInfoResponseBodyContentJob;
class QueryUserInfoResponseBodyContentJobStatus extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContentJobStatus = QueryUserInfoResponseBodyContentJobStatus;
class QueryUserInfoResponseBodyContentJobStatusList extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContentJobStatusList = QueryUserInfoResponseBodyContentJobStatusList;
class QueryUserInfoResponseBodyContentUserProb extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            bizType: 'string',
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContentUserProb = QueryUserInfoResponseBodyContentUserProb;
class QueryUserInfoResponseBodyContent extends $tea.Model {
    static names() {
        return {
            comments: 'comments',
            dept: 'dept',
            group: 'group',
            job: 'job',
            jobNum: 'jobNum',
            jobStatus: 'jobStatus',
            jobStatusList: 'jobStatusList',
            uid: 'uid',
            userName: 'userName',
            userProb: 'userProb',
        };
    }
    static types() {
        return {
            comments: 'string',
            dept: { 'type': 'array', 'itemType': QueryUserInfoResponseBodyContentDept },
            group: { 'type': 'array', 'itemType': QueryUserInfoResponseBodyContentGroup },
            job: QueryUserInfoResponseBodyContentJob,
            jobNum: 'string',
            jobStatus: QueryUserInfoResponseBodyContentJobStatus,
            jobStatusList: { 'type': 'array', 'itemType': QueryUserInfoResponseBodyContentJobStatusList },
            uid: 'string',
            userName: 'string',
            userProb: QueryUserInfoResponseBodyContentUserProb,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserInfoResponseBodyContent = QueryUserInfoResponseBodyContent;
class QueryUserProbCodeDictionaryResponseBodyContent extends $tea.Model {
    static names() {
        return {
            category: 'category',
            code: 'code',
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            category: 'string',
            code: 'string',
            displayName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserProbCodeDictionaryResponseBodyContent = QueryUserProbCodeDictionaryResponseBodyContent;
class QueryUserRolesResponseBodyContent extends $tea.Model {
    static names() {
        return {
            roleCode: 'roleCode',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            roleCode: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRolesResponseBodyContent = QueryUserRolesResponseBodyContent;
class SubmitTaskRequestData extends $tea.Model {
    static names() {
        return {
            date: 'date',
            desc: 'desc',
            extension: 'extension',
            fileType: 'fileType',
            fileUrl: 'fileUrl',
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            date: 'string',
            desc: 'string',
            extension: 'string',
            fileType: 'string',
            fileUrl: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskRequestData = SubmitTaskRequestData;
class SubmitTaskResponseBodyTasks extends $tea.Model {
    static names() {
        return {
            id: 'id',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            id: 'number',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskResponseBodyTasks = SubmitTaskResponseBodyTasks;
class SubmitTaskPackageRequestData extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            fileUrl: 'fileUrl',
            fileUrls: 'fileUrls',
            taskName: 'taskName',
            textContent: 'textContent',
        };
    }
    static types() {
        return {
            extension: 'string',
            fileUrl: 'string',
            fileUrls: { 'type': 'array', 'itemType': 'string' },
            taskName: 'string',
            textContent: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitTaskPackageRequestData = SubmitTaskPackageRequestData;
class SupplyAddDeptResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            deptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddDeptResponseBodyResult = SupplyAddDeptResponseBodyResult;
class SupplyAddMemberResponseBodyResult extends $tea.Model {
    static names() {
        return {
            dingMemberStatus: 'dingMemberStatus',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dingMemberStatus: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyAddMemberResponseBodyResult = SupplyAddMemberResponseBodyResult;
class SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
            superId: 'superId',
            superName: 'superName',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
            superId: 'number',
            superName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList = SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList;
class SupplyChainQueryDeptInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptType: 'deptType',
            hasSubDept: 'hasSubDept',
            name: 'name',
            partnerNumber: 'partnerNumber',
            partnerTypeInfoList: 'partnerTypeInfoList',
            superId: 'superId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptType: 'string',
            hasSubDept: 'boolean',
            name: 'string',
            partnerNumber: 'string',
            partnerTypeInfoList: { 'type': 'array', 'itemType': SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList },
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyChainQueryDeptInfoResponseBodyResult = SupplyChainQueryDeptInfoResponseBodyResult;
class SupplyGetMemberResponseBodyResultRoleInfoList extends $tea.Model {
    static names() {
        return {
            roleId: 'roleId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            roleId: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyGetMemberResponseBodyResultRoleInfoList = SupplyGetMemberResponseBodyResultRoleInfoList;
class SupplyGetMemberResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptIdList: 'deptIdList',
            dingMemberStatus: 'dingMemberStatus',
            isActive: 'isActive',
            memberName: 'memberName',
            memberTitle: 'memberTitle',
            memberWorkNumber: 'memberWorkNumber',
            roleInfoList: 'roleInfoList',
            supplyNodeList: 'supplyNodeList',
        };
    }
    static types() {
        return {
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            dingMemberStatus: 'string',
            isActive: 'boolean',
            memberName: 'string',
            memberTitle: 'string',
            memberWorkNumber: 'string',
            roleInfoList: { 'type': 'array', 'itemType': SupplyGetMemberResponseBodyResultRoleInfoList },
            supplyNodeList: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyGetMemberResponseBodyResult = SupplyGetMemberResponseBodyResult;
class SupplyListDeptMembersResponseBodyList extends $tea.Model {
    static names() {
        return {
            dingMemberStatus: 'dingMemberStatus',
            isActive: 'isActive',
            memberName: 'memberName',
            memberTitle: 'memberTitle',
            memberWorkNumber: 'memberWorkNumber',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dingMemberStatus: 'string',
            isActive: 'boolean',
            memberName: 'string',
            memberTitle: 'string',
            memberWorkNumber: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListDeptMembersResponseBodyList = SupplyListDeptMembersResponseBodyList;
class SupplyListPartnerAdminsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerAdminsResponseBodyResult = SupplyListPartnerAdminsResponseBodyResult;
class SupplyListPartnerManagersResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            interfaceType: 'interfaceType',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            interfaceType: 'string',
            userId: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerManagersResponseBodyResult = SupplyListPartnerManagersResponseBodyResult;
class SupplyListPartnerTypeResponseBodyResult extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            labelId: 'number',
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListPartnerTypeResponseBodyResult = SupplyListPartnerTypeResponseBodyResult;
class SupplyListRoleResponseBodyResult extends $tea.Model {
    static names() {
        return {
            isRoleGroup: 'isRoleGroup',
            roleId: 'roleId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            isRoleGroup: 'boolean',
            roleId: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListRoleResponseBodyResult = SupplyListRoleResponseBodyResult;
class SupplyListSubDeptResponseBodyResultPartnerTypeInfoList extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
            superId: 'superId',
            superName: 'superName',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
            superId: 'number',
            superName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListSubDeptResponseBodyResultPartnerTypeInfoList = SupplyListSubDeptResponseBodyResultPartnerTypeInfoList;
class SupplyListSubDeptResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptType: 'deptType',
            hasSubDept: 'hasSubDept',
            name: 'name',
            partnerNumber: 'partnerNumber',
            partnerTypeInfoList: 'partnerTypeInfoList',
            superId: 'superId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            deptType: 'string',
            hasSubDept: 'boolean',
            name: 'string',
            partnerNumber: 'string',
            partnerTypeInfoList: { 'type': 'array', 'itemType': SupplyListSubDeptResponseBodyResultPartnerTypeInfoList },
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyListSubDeptResponseBodyResult = SupplyListSubDeptResponseBodyResult;
class SupplyQueryPartnerTypeResponseBodyResult extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            name: 'name',
            superId: 'superId',
        };
    }
    static types() {
        return {
            labelId: 'number',
            name: 'string',
            superId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SupplyQueryPartnerTypeResponseBodyResult = SupplyQueryPartnerTypeResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 批量查询任务结果
     *
     * @param request - BatchGetTaskResultRequest
     * @param headers - BatchGetTaskResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchGetTaskResultResponse
     */
    async batchGetTaskResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.taskIds)) {
            body["taskIds"] = request.taskIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetTaskResult",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/ai/taskResults/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchGetTaskResultResponse({}));
    }
    /**
     * 批量查询任务结果
     *
     * @param request - BatchGetTaskResultRequest
     * @returns BatchGetTaskResultResponse
     */
    async batchGetTaskResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchGetTaskResultHeaders({});
        return await this.batchGetTaskResultWithOptions(request, headers, runtime);
    }
    /**
     * 商机匹配
     *
     * @param request - BusinessMatchRequest
     * @param headers - BusinessMatchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BusinessMatchResponse
     */
    async businessMatchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.businessInfo)) {
            body["businessInfo"] = request.businessInfo;
        }
        if (!tea_util_1.default.isUnset(request.corpName)) {
            body["corpName"] = request.corpName;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BusinessMatch",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/me/businesses/matching`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BusinessMatchResponse({}));
    }
    /**
     * 商机匹配
     *
     * @param request - BusinessMatchRequest
     * @returns BusinessMatchResponse
     */
    async businessMatch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BusinessMatchHeaders({});
        return await this.businessMatchWithOptions(request, headers, runtime);
    }
    /**
     * 商机匹配结果查询
     *
     * @param request - BusinessMatchResultRequest
     * @param headers - BusinessMatchResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BusinessMatchResultResponse
     */
    async businessMatchResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BusinessMatchResult",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/me/businesses/matchingResults`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BusinessMatchResultResponse({}));
    }
    /**
     * 商机匹配结果查询
     *
     * @param request - BusinessMatchResultRequest
     * @returns BusinessMatchResultResponse
     */
    async businessMatchResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BusinessMatchResultHeaders({});
        return await this.businessMatchResultWithOptions(request, headers, runtime);
    }
    /**
     * 添加租客下成员
     *
     * @param request - CampusAddRenterMemberRequest
     * @param headers - CampusAddRenterMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusAddRenterMemberResponse
     */
    async campusAddRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.renterId)) {
            body["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusAddRenterMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusAddRenterMemberResponse({}));
    }
    /**
     * 添加租客下成员
     *
     * @param request - CampusAddRenterMemberRequest
     * @returns CampusAddRenterMemberResponse
     */
    async campusAddRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusAddRenterMemberHeaders({});
        return await this.campusAddRenterMemberWithOptions(request, headers, runtime);
    }
    /**
     * 创建园区
     *
     * @param request - CampusCreateCampusRequest
     * @param headers - CampusCreateCampusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusCreateCampusResponse
     */
    async campusCreateCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.area)) {
            body["area"] = request.area;
        }
        if (!tea_util_1.default.isUnset(request.belongProjectGroupId)) {
            body["belongProjectGroupId"] = request.belongProjectGroupId;
        }
        if (!tea_util_1.default.isUnset(request.campusName)) {
            body["campusName"] = request.campusName;
        }
        if (!tea_util_1.default.isUnset(request.capacity)) {
            body["capacity"] = request.capacity;
        }
        if (!tea_util_1.default.isUnset(request.cityId)) {
            body["cityId"] = request.cityId;
        }
        if (!tea_util_1.default.isUnset(request.country)) {
            body["country"] = request.country;
        }
        if (!tea_util_1.default.isUnset(request.countyId)) {
            body["countyId"] = request.countyId;
        }
        if (!tea_util_1.default.isUnset(request.creatorUnionId)) {
            body["creatorUnionId"] = request.creatorUnionId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.orderEndTime)) {
            body["orderEndTime"] = request.orderEndTime;
        }
        if (!tea_util_1.default.isUnset(request.orderInfo)) {
            body["orderInfo"] = request.orderInfo;
        }
        if (!tea_util_1.default.isUnset(request.orderStartTime)) {
            body["orderStartTime"] = request.orderStartTime;
        }
        if (!tea_util_1.default.isUnset(request.provId)) {
            body["provId"] = request.provId;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusCreateCampus",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusCreateCampusResponse({}));
    }
    /**
     * 创建园区
     *
     * @param request - CampusCreateCampusRequest
     * @returns CampusCreateCampusResponse
     */
    async campusCreateCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusCreateCampusHeaders({});
        return await this.campusCreateCampusWithOptions(request, headers, runtime);
    }
    /**
     * 创建园区项目组
     *
     * @param request - CampusCreateCampusGroupRequest
     * @param headers - CampusCreateCampusGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusCreateCampusGroupResponse
     */
    async campusCreateCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusCreateCampusGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects/groups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusCreateCampusGroupResponse({}));
    }
    /**
     * 创建园区项目组
     *
     * @param request - CampusCreateCampusGroupRequest
     * @returns CampusCreateCampusGroupResponse
     */
    async campusCreateCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusCreateCampusGroupHeaders({});
        return await this.campusCreateCampusGroupWithOptions(request, headers, runtime);
    }
    /**
     * 创建租客
     *
     * @param request - CampusCreateRenterRequest
     * @param headers - CampusCreateRenterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusCreateRenterResponse
     */
    async campusCreateRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.creditCode)) {
            body["creditCode"] = request.creditCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["state"] = request.state;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusCreateRenter",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusCreateRenterResponse({}));
    }
    /**
     * 创建租客
     *
     * @param request - CampusCreateRenterRequest
     * @returns CampusCreateRenterResponse
     */
    async campusCreateRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusCreateRenterHeaders({});
        return await this.campusCreateRenterWithOptions(request, headers, runtime);
    }
    /**
     * 移除租客人员
     *
     * @param request - CampusDelRenterMemberRequest
     * @param headers - CampusDelRenterMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusDelRenterMemberResponse
     */
    async campusDelRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusDelRenterMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters/members`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusDelRenterMemberResponse({}));
    }
    /**
     * 移除租客人员
     *
     * @param request - CampusDelRenterMemberRequest
     * @returns CampusDelRenterMemberResponse
     */
    async campusDelRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusDelRenterMemberHeaders({});
        return await this.campusDelRenterMemberWithOptions(request, headers, runtime);
    }
    /**
     * 删除园区项目组
     *
     * @param request - CampusDeleteCampusGroupRequest
     * @param headers - CampusDeleteCampusGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusDeleteCampusGroupResponse
     */
    async campusDeleteCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.campusProjectGroupId)) {
            query["campusProjectGroupId"] = request.campusProjectGroupId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusDeleteCampusGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects/groups`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusDeleteCampusGroupResponse({}));
    }
    /**
     * 删除园区项目组
     *
     * @param request - CampusDeleteCampusGroupRequest
     * @returns CampusDeleteCampusGroupResponse
     */
    async campusDeleteCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusDeleteCampusGroupHeaders({});
        return await this.campusDeleteCampusGroupWithOptions(request, headers, runtime);
    }
    /**
     * 删除租客
     *
     * @param request - CampusDeleteRenterRequest
     * @param headers - CampusDeleteRenterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusDeleteRenterResponse
     */
    async campusDeleteRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusDeleteRenter",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusDeleteRenterResponse({}));
    }
    /**
     * 删除租客
     *
     * @param request - CampusDeleteRenterRequest
     * @returns CampusDeleteRenterResponse
     */
    async campusDeleteRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusDeleteRenterHeaders({});
        return await this.campusDeleteRenterWithOptions(request, headers, runtime);
    }
    /**
     * 查询园区详情
     *
     * @param request - CampusGetCampusRequest
     * @param headers - CampusGetCampusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusGetCampusResponse
     */
    async campusGetCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.campusDeptId)) {
            query["campusDeptId"] = request.campusDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusGetCampus",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projectInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusGetCampusResponse({}));
    }
    /**
     * 查询园区详情
     *
     * @param request - CampusGetCampusRequest
     * @returns CampusGetCampusResponse
     */
    async campusGetCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetCampusHeaders({});
        return await this.campusGetCampusWithOptions(request, headers, runtime);
    }
    /**
     * 查询园区项目组详情
     *
     * @param request - CampusGetCampusGroupRequest
     * @param headers - CampusGetCampusGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusGetCampusGroupResponse
     */
    async campusGetCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["groupId"] = request.groupId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusGetCampusGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects/groupInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusGetCampusGroupResponse({}));
    }
    /**
     * 查询园区项目组详情
     *
     * @param request - CampusGetCampusGroupRequest
     * @returns CampusGetCampusGroupResponse
     */
    async campusGetCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetCampusGroupHeaders({});
        return await this.campusGetCampusGroupWithOptions(request, headers, runtime);
    }
    /**
     * 获取租客详情
     *
     * @param request - CampusGetRenterRequest
     * @param headers - CampusGetRenterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusGetRenterResponse
     */
    async campusGetRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusGetRenter",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renterInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusGetRenterResponse({}));
    }
    /**
     * 获取租客详情
     *
     * @param request - CampusGetRenterRequest
     * @returns CampusGetRenterResponse
     */
    async campusGetRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetRenterHeaders({});
        return await this.campusGetRenterWithOptions(request, headers, runtime);
    }
    /**
     * 查询租客指定成员信息
     *
     * @param request - CampusGetRenterMemberRequest
     * @param headers - CampusGetRenterMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusGetRenterMemberResponse
     */
    async campusGetRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusGetRenterMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters/memberInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusGetRenterMemberResponse({}));
    }
    /**
     * 查询租客指定成员信息
     *
     * @param request - CampusGetRenterMemberRequest
     * @returns CampusGetRenterMemberResponse
     */
    async campusGetRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusGetRenterMemberHeaders({});
        return await this.campusGetRenterMemberWithOptions(request, headers, runtime);
    }
    /**
     * 查询园区列表
     *
     * @param request - CampusListCampusRequest
     * @param headers - CampusListCampusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusListCampusResponse
     */
    async campusListCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupDeptId)) {
            query["groupDeptId"] = request.groupDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusListCampus",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusListCampusResponse({}));
    }
    /**
     * 查询园区列表
     *
     * @param request - CampusListCampusRequest
     * @returns CampusListCampusResponse
     */
    async campusListCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListCampusHeaders({});
        return await this.campusListCampusWithOptions(request, headers, runtime);
    }
    /**
     * 查询园区项目组列表
     *
     * @param headers - CampusListCampusGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusListCampusGroupResponse
     */
    async campusListCampusGroupWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CampusListCampusGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects/groups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusListCampusGroupResponse({}));
    }
    /**
     * 查询园区项目组列表
     * @returns CampusListCampusGroupResponse
     */
    async campusListCampusGroup() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListCampusGroupHeaders({});
        return await this.campusListCampusGroupWithOptions(headers, runtime);
    }
    /**
     * 获取租客列表
     *
     * @param headers - CampusListRenterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusListRenterResponse
     */
    async campusListRenterWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CampusListRenter",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusListRenterResponse({}));
    }
    /**
     * 获取租客列表
     * @returns CampusListRenterResponse
     */
    async campusListRenter() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListRenterHeaders({});
        return await this.campusListRenterWithOptions(headers, runtime);
    }
    /**
     * 查询租客下所有成员
     *
     * @param request - CampusListRenterMembersRequest
     * @param headers - CampusListRenterMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusListRenterMembersResponse
     */
    async campusListRenterMembersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.renterId)) {
            query["renterId"] = request.renterId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CampusListRenterMembers",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusListRenterMembersResponse({}));
    }
    /**
     * 查询租客下所有成员
     *
     * @param request - CampusListRenterMembersRequest
     * @returns CampusListRenterMembersResponse
     */
    async campusListRenterMembers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusListRenterMembersHeaders({});
        return await this.campusListRenterMembersWithOptions(request, headers, runtime);
    }
    /**
     * 更新园区项目
     *
     * @param request - CampusUpdateCampusRequest
     * @param headers - CampusUpdateCampusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusUpdateCampusResponse
     */
    async campusUpdateCampusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.address)) {
            body["address"] = request.address;
        }
        if (!tea_util_1.default.isUnset(request.area)) {
            body["area"] = request.area;
        }
        if (!tea_util_1.default.isUnset(request.belongProjectGroupId)) {
            body["belongProjectGroupId"] = request.belongProjectGroupId;
        }
        if (!tea_util_1.default.isUnset(request.campusDeptId)) {
            body["campusDeptId"] = request.campusDeptId;
        }
        if (!tea_util_1.default.isUnset(request.campusName)) {
            body["campusName"] = request.campusName;
        }
        if (!tea_util_1.default.isUnset(request.capacity)) {
            body["capacity"] = request.capacity;
        }
        if (!tea_util_1.default.isUnset(request.cityId)) {
            body["cityId"] = request.cityId;
        }
        if (!tea_util_1.default.isUnset(request.country)) {
            body["country"] = request.country;
        }
        if (!tea_util_1.default.isUnset(request.countyId)) {
            body["countyId"] = request.countyId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.orderEndTime)) {
            body["orderEndTime"] = request.orderEndTime;
        }
        if (!tea_util_1.default.isUnset(request.orderInfo)) {
            body["orderInfo"] = request.orderInfo;
        }
        if (!tea_util_1.default.isUnset(request.orderStartTime)) {
            body["orderStartTime"] = request.orderStartTime;
        }
        if (!tea_util_1.default.isUnset(request.provId)) {
            body["provId"] = request.provId;
        }
        if (!tea_util_1.default.isUnset(request.telephone)) {
            body["telephone"] = request.telephone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusUpdateCampus",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusUpdateCampusResponse({}));
    }
    /**
     * 更新园区项目
     *
     * @param request - CampusUpdateCampusRequest
     * @returns CampusUpdateCampusResponse
     */
    async campusUpdateCampus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateCampusHeaders({});
        return await this.campusUpdateCampusWithOptions(request, headers, runtime);
    }
    /**
     * 更新园区项目组
     *
     * @param request - CampusUpdateCampusGroupRequest
     * @param headers - CampusUpdateCampusGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusUpdateCampusGroupResponse
     */
    async campusUpdateCampusGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.campusProjectGroupId)) {
            body["campusProjectGroupId"] = request.campusProjectGroupId;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusUpdateCampusGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/projects/groups`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusUpdateCampusGroupResponse({}));
    }
    /**
     * 更新园区项目组
     *
     * @param request - CampusUpdateCampusGroupRequest
     * @returns CampusUpdateCampusGroupResponse
     */
    async campusUpdateCampusGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateCampusGroupHeaders({});
        return await this.campusUpdateCampusGroupWithOptions(request, headers, runtime);
    }
    /**
     * 更新租客
     *
     * @param request - CampusUpdateRenterRequest
     * @param headers - CampusUpdateRenterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusUpdateRenterResponse
     */
    async campusUpdateRenterWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.creditCode)) {
            body["creditCode"] = request.creditCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.renterId)) {
            body["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["state"] = request.state;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusUpdateRenter",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusUpdateRenterResponse({}));
    }
    /**
     * 更新租客
     *
     * @param request - CampusUpdateRenterRequest
     * @returns CampusUpdateRenterResponse
     */
    async campusUpdateRenter(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateRenterHeaders({});
        return await this.campusUpdateRenterWithOptions(request, headers, runtime);
    }
    /**
     * 更新租客下成员
     *
     * @param request - CampusUpdateRenterMemberRequest
     * @param headers - CampusUpdateRenterMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CampusUpdateRenterMemberResponse
     */
    async campusUpdateRenterMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.extend)) {
            body["extend"] = request.extend;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.renterId)) {
            body["renterId"] = request.renterId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CampusUpdateRenterMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/campuses/renters/members`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CampusUpdateRenterMemberResponse({}));
    }
    /**
     * 更新租客下成员
     *
     * @param request - CampusUpdateRenterMemberRequest
     * @returns CampusUpdateRenterMemberResponse
     */
    async campusUpdateRenterMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CampusUpdateRenterMemberHeaders({});
        return await this.campusUpdateRenterMemberWithOptions(request, headers, runtime);
    }
    /**
     * 添加数据集权限
     *
     * @param request - ChatAIAddDatasetPermissionRequest
     * @param headers - ChatAIAddDatasetPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatAIAddDatasetPermissionResponse
     */
    async chatAIAddDatasetPermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.authorizationType)) {
            body["authorizationType"] = request.authorizationType;
        }
        if (!tea_util_1.default.isUnset(request.authorizedObjectId)) {
            body["authorizedObjectId"] = request.authorizedObjectId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.optUser)) {
            body["optUser"] = request.optUser;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatAIAddDatasetPermission",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatai/dataset/permissions/add`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatAIAddDatasetPermissionResponse({}));
    }
    /**
     * 添加数据集权限
     *
     * @param request - ChatAIAddDatasetPermissionRequest
     * @returns ChatAIAddDatasetPermissionResponse
     */
    async chatAIAddDatasetPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatAIAddDatasetPermissionHeaders({});
        return await this.chatAIAddDatasetPermissionWithOptions(request, headers, runtime);
    }
    /**
     * 获取chatAI应用下的数据集列表
     *
     * @param request - ChatAIListDatasetRequest
     * @param headers - ChatAIListDatasetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatAIListDatasetResponse
     */
    async chatAIListDatasetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["appId"] = request.appId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ChatAIListDataset",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatai/datasets`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatAIListDatasetResponse({}));
    }
    /**
     * 获取chatAI应用下的数据集列表
     *
     * @param request - ChatAIListDatasetRequest
     * @returns ChatAIListDatasetResponse
     */
    async chatAIListDataset(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatAIListDatasetHeaders({});
        return await this.chatAIListDatasetWithOptions(request, headers, runtime);
    }
    /**
     * 查询数据集权限明细
     *
     * @param request - ChatAIQueryDatasetPermissionRequest
     * @param headers - ChatAIQueryDatasetPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatAIQueryDatasetPermissionResponse
     */
    async chatAIQueryDatasetPermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            query["datasetId"] = request.datasetId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ChatAIQueryDatasetPermission",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatai/dataset/permissions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatAIQueryDatasetPermissionResponse({}));
    }
    /**
     * 查询数据集权限明细
     *
     * @param request - ChatAIQueryDatasetPermissionRequest
     * @returns ChatAIQueryDatasetPermissionResponse
     */
    async chatAIQueryDatasetPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatAIQueryDatasetPermissionHeaders({});
        return await this.chatAIQueryDatasetPermissionWithOptions(request, headers, runtime);
    }
    /**
     * 删除数据集权限
     *
     * @param request - ChatAIRemoveDatasetPermissionRequest
     * @param headers - ChatAIRemoveDatasetPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatAIRemoveDatasetPermissionResponse
     */
    async chatAIRemoveDatasetPermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.authorizationType)) {
            body["authorizationType"] = request.authorizationType;
        }
        if (!tea_util_1.default.isUnset(request.authorizedObjectId)) {
            body["authorizedObjectId"] = request.authorizedObjectId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.optUser)) {
            body["optUser"] = request.optUser;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatAIRemoveDatasetPermission",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatai/dataset/permissions/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatAIRemoveDatasetPermissionResponse({}));
    }
    /**
     * 删除数据集权限
     *
     * @param request - ChatAIRemoveDatasetPermissionRequest
     * @returns ChatAIRemoveDatasetPermissionResponse
     */
    async chatAIRemoveDatasetPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatAIRemoveDatasetPermissionHeaders({});
        return await this.chatAIRemoveDatasetPermissionWithOptions(request, headers, runtime);
    }
    /**
     * Chai文本情感分析
     *
     * @param request - ChatAITextSentimentAnalysisRequest
     * @param headers - ChatAITextSentimentAnalysisHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatAITextSentimentAnalysisResponse
     */
    async chatAITextSentimentAnalysisWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.history)) {
            body["history"] = request.history;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["text"] = request.text;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatAITextSentimentAnalysis",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatai/abilities/sentiments/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatAITextSentimentAnalysisResponse({}));
    }
    /**
     * Chai文本情感分析
     *
     * @param request - ChatAITextSentimentAnalysisRequest
     * @returns ChatAITextSentimentAnalysisResponse
     */
    async chatAITextSentimentAnalysis(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatAITextSentimentAnalysisHeaders({});
        return await this.chatAITextSentimentAnalysisWithOptions(request, headers, runtime);
    }
    /**
     * 获取差旅单列表
     *
     * @param request - ChatAiTravelListRequest
     * @param headers - ChatAiTravelListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatAiTravelListResponse
     */
    async chatAiTravelListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.paramList)) {
            body["paramList"] = request.paramList;
        }
        if (!tea_util_1.default.isUnset(request.travelId)) {
            body["travelId"] = request.travelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatAiTravelList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/ai/travelLists/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatAiTravelListResponse({}));
    }
    /**
     * 获取差旅单列表
     *
     * @param request - ChatAiTravelListRequest
     * @returns ChatAiTravelListResponse
     */
    async chatAiTravelList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatAiTravelListHeaders({});
        return await this.chatAiTravelListWithOptions(request, headers, runtime);
    }
    /**
     * ChatForm查询表单识别结果
     *
     * @param request - ChatFormGetDataForApiAccessRequest
     * @param headers - ChatFormGetDataForApiAccessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatFormGetDataForApiAccessResponse
     */
    async chatFormGetDataForApiAccessWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dingTalkTraceId)) {
            query["dingTalkTraceId"] = request.dingTalkTraceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ChatFormGetDataForApiAccess",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatform/datas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatFormGetDataForApiAccessResponse({}));
    }
    /**
     * ChatForm查询表单识别结果
     *
     * @param request - ChatFormGetDataForApiAccessRequest
     * @returns ChatFormGetDataForApiAccessResponse
     */
    async chatFormGetDataForApiAccess(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatFormGetDataForApiAccessHeaders({});
        return await this.chatFormGetDataForApiAccessWithOptions(request, headers, runtime);
    }
    /**
     * 新增普通文件
     *
     * @param request - ChatMemoAddGeneralFileRequest
     * @param headers - ChatMemoAddGeneralFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoAddGeneralFileResponse
     */
    async chatMemoAddGeneralFileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.downloadUrl)) {
            body["downloadUrl"] = request.downloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.fileDesc)) {
            body["fileDesc"] = request.fileDesc;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            body["fileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.tagList)) {
            body["tagList"] = request.tagList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoAddGeneralFile",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/files`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoAddGeneralFileResponse({}));
    }
    /**
     * 新增普通文件
     *
     * @param request - ChatMemoAddGeneralFileRequest
     * @returns ChatMemoAddGeneralFileResponse
     */
    async chatMemoAddGeneralFile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoAddGeneralFileHeaders({});
        return await this.chatMemoAddGeneralFileWithOptions(request, headers, runtime);
    }
    /**
     * 新增知识图谱节点
     *
     * @param request - ChatMemoAddKnowledgeGraphNodeRequest
     * @param headers - ChatMemoAddKnowledgeGraphNodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoAddKnowledgeGraphNodeResponse
     */
    async chatMemoAddKnowledgeGraphNodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.nodeInfo)) {
            body["nodeInfo"] = request.nodeInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoAddKnowledgeGraphNode",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/nodes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoAddKnowledgeGraphNodeResponse({}));
    }
    /**
     * 新增知识图谱节点
     *
     * @param request - ChatMemoAddKnowledgeGraphNodeRequest
     * @returns ChatMemoAddKnowledgeGraphNodeResponse
     */
    async chatMemoAddKnowledgeGraphNode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoAddKnowledgeGraphNodeHeaders({});
        return await this.chatMemoAddKnowledgeGraphNodeWithOptions(request, headers, runtime);
    }
    /**
     * 新增知识图谱关系
     *
     * @param request - ChatMemoAddKnowledgeGraphRelationRequest
     * @param headers - ChatMemoAddKnowledgeGraphRelationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoAddKnowledgeGraphRelationResponse
     */
    async chatMemoAddKnowledgeGraphRelationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.relationInfo)) {
            body["relationInfo"] = request.relationInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoAddKnowledgeGraphRelation",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/relations`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoAddKnowledgeGraphRelationResponse({}));
    }
    /**
     * 新增知识图谱关系
     *
     * @param request - ChatMemoAddKnowledgeGraphRelationRequest
     * @returns ChatMemoAddKnowledgeGraphRelationResponse
     */
    async chatMemoAddKnowledgeGraphRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoAddKnowledgeGraphRelationHeaders({});
        return await this.chatMemoAddKnowledgeGraphRelationWithOptions(request, headers, runtime);
    }
    /**
     * 删除普通文件
     *
     * @param request - ChatMemoDeleteGeneralFileRequest
     * @param headers - ChatMemoDeleteGeneralFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoDeleteGeneralFileResponse
     */
    async chatMemoDeleteGeneralFileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoDeleteGeneralFile",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/files/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoDeleteGeneralFileResponse({}));
    }
    /**
     * 删除普通文件
     *
     * @param request - ChatMemoDeleteGeneralFileRequest
     * @returns ChatMemoDeleteGeneralFileResponse
     */
    async chatMemoDeleteGeneralFile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoDeleteGeneralFileHeaders({});
        return await this.chatMemoDeleteGeneralFileWithOptions(request, headers, runtime);
    }
    /**
     * 删除知识图谱节点
     *
     * @param request - ChatMemoDeleteKnowledgeGraphNodeRequest
     * @param headers - ChatMemoDeleteKnowledgeGraphNodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoDeleteKnowledgeGraphNodeResponse
     */
    async chatMemoDeleteKnowledgeGraphNodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoDeleteKnowledgeGraphNode",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/nodes/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoDeleteKnowledgeGraphNodeResponse({}));
    }
    /**
     * 删除知识图谱节点
     *
     * @param request - ChatMemoDeleteKnowledgeGraphNodeRequest
     * @returns ChatMemoDeleteKnowledgeGraphNodeResponse
     */
    async chatMemoDeleteKnowledgeGraphNode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoDeleteKnowledgeGraphNodeHeaders({});
        return await this.chatMemoDeleteKnowledgeGraphNodeWithOptions(request, headers, runtime);
    }
    /**
     * 删除知识图谱关系
     *
     * @param request - ChatMemoDeleteKnowledgeGraphRelationRequest
     * @param headers - ChatMemoDeleteKnowledgeGraphRelationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoDeleteKnowledgeGraphRelationResponse
     */
    async chatMemoDeleteKnowledgeGraphRelationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoDeleteKnowledgeGraphRelation",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/relations/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoDeleteKnowledgeGraphRelationResponse({}));
    }
    /**
     * 删除知识图谱关系
     *
     * @param request - ChatMemoDeleteKnowledgeGraphRelationRequest
     * @returns ChatMemoDeleteKnowledgeGraphRelationResponse
     */
    async chatMemoDeleteKnowledgeGraphRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoDeleteKnowledgeGraphRelationHeaders({});
        return await this.chatMemoDeleteKnowledgeGraphRelationWithOptions(request, headers, runtime);
    }
    /**
     * 新增 FAQ
     *
     * @param request - ChatMemoFaqAddRequest
     * @param headers - ChatMemoFaqAddHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoFaqAddResponse
     */
    async chatMemoFaqAddWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.answer)) {
            body["answer"] = request.answer;
        }
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.question)) {
            body["question"] = request.question;
        }
        if (!tea_util_1.default.isUnset(request.redirection)) {
            body["redirection"] = request.redirection;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoFaqAdd",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/faq`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoFaqAddResponse({}));
    }
    /**
     * 新增 FAQ
     *
     * @param request - ChatMemoFaqAddRequest
     * @returns ChatMemoFaqAddResponse
     */
    async chatMemoFaqAdd(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoFaqAddHeaders({});
        return await this.chatMemoFaqAddWithOptions(request, headers, runtime);
    }
    /**
     * 删除指定数据集中的FAQ
     *
     * @param request - ChatMemoFaqDeleteRequest
     * @param headers - ChatMemoFaqDeleteHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoFaqDeleteResponse
     */
    async chatMemoFaqDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoFaqDelete",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/faq/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoFaqDeleteResponse({}));
    }
    /**
     * 删除指定数据集中的FAQ
     *
     * @param request - ChatMemoFaqDeleteRequest
     * @returns ChatMemoFaqDeleteResponse
     */
    async chatMemoFaqDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoFaqDeleteHeaders({});
        return await this.chatMemoFaqDeleteWithOptions(request, headers, runtime);
    }
    /**
     * 查询指定数据集中的FAQ列表
     *
     * @param request - ChatMemoFaqListRequest
     * @param headers - ChatMemoFaqListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoFaqListResponse
     */
    async chatMemoFaqListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            query["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoFaqList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/faq/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoFaqListResponse({}));
    }
    /**
     * 查询指定数据集中的FAQ列表
     *
     * @param request - ChatMemoFaqListRequest
     * @returns ChatMemoFaqListResponse
     */
    async chatMemoFaqList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoFaqListHeaders({});
        return await this.chatMemoFaqListWithOptions(request, headers, runtime);
    }
    /**
     * 查询指定数据集中的文件列表
     *
     * @param request - ChatMemoGetFileListRequest
     * @param headers - ChatMemoGetFileListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoGetFileListResponse
     */
    async chatMemoGetFileListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            query["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoGetFileList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/file/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoGetFileListResponse({}));
    }
    /**
     * 查询指定数据集中的文件列表
     *
     * @param request - ChatMemoGetFileListRequest
     * @returns ChatMemoGetFileListResponse
     */
    async chatMemoGetFileList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoGetFileListHeaders({});
        return await this.chatMemoGetFileListWithOptions(request, headers, runtime);
    }
    /**
     * 获取文件状态
     *
     * @param request - ChatMemoGetFileStatusRequest
     * @param headers - ChatMemoGetFileStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoGetFileStatusResponse
     */
    async chatMemoGetFileStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoGetFileStatus",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/files/statuses/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoGetFileStatusResponse({}));
    }
    /**
     * 获取文件状态
     *
     * @param request - ChatMemoGetFileStatusRequest
     * @returns ChatMemoGetFileStatusResponse
     */
    async chatMemoGetFileStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoGetFileStatusHeaders({});
        return await this.chatMemoGetFileStatusWithOptions(request, headers, runtime);
    }
    /**
     * 查询知识图谱节点
     *
     * @param request - ChatMemoQueryKnowledgeGraphNodeRequest
     * @param headers - ChatMemoQueryKnowledgeGraphNodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoQueryKnowledgeGraphNodeResponse
     */
    async chatMemoQueryKnowledgeGraphNodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoQueryKnowledgeGraphNode",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/nodes/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoQueryKnowledgeGraphNodeResponse({}));
    }
    /**
     * 查询知识图谱节点
     *
     * @param request - ChatMemoQueryKnowledgeGraphNodeRequest
     * @returns ChatMemoQueryKnowledgeGraphNodeResponse
     */
    async chatMemoQueryKnowledgeGraphNode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoQueryKnowledgeGraphNodeHeaders({});
        return await this.chatMemoQueryKnowledgeGraphNodeWithOptions(request, headers, runtime);
    }
    /**
     * 查询知识图谱关系
     *
     * @param request - ChatMemoQueryKnowledgeGraphRelationRequest
     * @param headers - ChatMemoQueryKnowledgeGraphRelationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoQueryKnowledgeGraphRelationResponse
     */
    async chatMemoQueryKnowledgeGraphRelationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.mediaId)) {
            body["mediaId"] = request.mediaId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoQueryKnowledgeGraphRelation",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/relations/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoQueryKnowledgeGraphRelationResponse({}));
    }
    /**
     * 查询知识图谱关系
     *
     * @param request - ChatMemoQueryKnowledgeGraphRelationRequest
     * @returns ChatMemoQueryKnowledgeGraphRelationResponse
     */
    async chatMemoQueryKnowledgeGraphRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoQueryKnowledgeGraphRelationHeaders({});
        return await this.chatMemoQueryKnowledgeGraphRelationWithOptions(request, headers, runtime);
    }
    /**
     * 更新知识图谱节点
     *
     * @param request - ChatMemoUpdateKnowledgeGraphNodeRequest
     * @param headers - ChatMemoUpdateKnowledgeGraphNodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoUpdateKnowledgeGraphNodeResponse
     */
    async chatMemoUpdateKnowledgeGraphNodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.nodeInfo)) {
            body["nodeInfo"] = request.nodeInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoUpdateKnowledgeGraphNode",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/nodes`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoUpdateKnowledgeGraphNodeResponse({}));
    }
    /**
     * 更新知识图谱节点
     *
     * @param request - ChatMemoUpdateKnowledgeGraphNodeRequest
     * @returns ChatMemoUpdateKnowledgeGraphNodeResponse
     */
    async chatMemoUpdateKnowledgeGraphNode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoUpdateKnowledgeGraphNodeHeaders({});
        return await this.chatMemoUpdateKnowledgeGraphNodeWithOptions(request, headers, runtime);
    }
    /**
     * 更新知识图谱关系
     *
     * @param request - ChatMemoUpdateKnowledgeGraphRelationRequest
     * @param headers - ChatMemoUpdateKnowledgeGraphRelationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatMemoUpdateKnowledgeGraphRelationResponse
     */
    async chatMemoUpdateKnowledgeGraphRelationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.datasetId)) {
            body["datasetId"] = request.datasetId;
        }
        if (!tea_util_1.default.isUnset(request.relationInfo)) {
            body["relationInfo"] = request.relationInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatMemoUpdateKnowledgeGraphRelation",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatmemo/relations`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatMemoUpdateKnowledgeGraphRelationResponse({}));
    }
    /**
     * 更新知识图谱关系
     *
     * @param request - ChatMemoUpdateKnowledgeGraphRelationRequest
     * @returns ChatMemoUpdateKnowledgeGraphRelationResponse
     */
    async chatMemoUpdateKnowledgeGraphRelation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatMemoUpdateKnowledgeGraphRelationHeaders({});
        return await this.chatMemoUpdateKnowledgeGraphRelationWithOptions(request, headers, runtime);
    }
    /**
     * 开启学段/学院/年级/专业\系/班级群
     *
     * @param request - CollegeActiveCollegeDeptGroupRequest
     * @param headers - CollegeActiveCollegeDeptGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeActiveCollegeDeptGroupResponse
     */
    async collegeActiveCollegeDeptGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeActiveCollegeDeptGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/depts/groups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeActiveCollegeDeptGroupResponse({}));
    }
    /**
     * 开启学段/学院/年级/专业\系/班级群
     *
     * @param request - CollegeActiveCollegeDeptGroupRequest
     * @returns CollegeActiveCollegeDeptGroupResponse
     */
    async collegeActiveCollegeDeptGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeActiveCollegeDeptGroupHeaders({});
        return await this.collegeActiveCollegeDeptGroupWithOptions(request, headers, runtime);
    }
    /**
     * 创建学段/学院/年级/专业\系/班级
     *
     * @param request - CollegeAddCollegeDeptRequest
     * @param headers - CollegeAddCollegeDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeAddCollegeDeptResponse
     */
    async collegeAddCollegeDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptName)) {
            query["deptName"] = request.deptName;
        }
        if (!tea_util_1.default.isUnset(request.deptType)) {
            query["deptType"] = request.deptType;
        }
        if (!tea_util_1.default.isUnset(request.sortFactor)) {
            query["sortFactor"] = request.sortFactor;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            query["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeAddCollegeDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/depts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeAddCollegeDeptResponse({}));
    }
    /**
     * 创建学段/学院/年级/专业\系/班级
     *
     * @param request - CollegeAddCollegeDeptRequest
     * @returns CollegeAddCollegeDeptResponse
     */
    async collegeAddCollegeDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeAddCollegeDeptHeaders({});
        return await this.collegeAddCollegeDeptWithOptions(request, headers, runtime);
    }
    /**
     * 往部门中添加负责人
     *
     * @param request - CollegeAddManagerRequest
     * @param headers - CollegeAddManagerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeAddManagerResponse
     */
    async collegeAddManagerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeAddManager",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/managers`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeAddManagerResponse({}));
    }
    /**
     * 往部门中添加负责人
     *
     * @param request - CollegeAddManagerRequest
     * @returns CollegeAddManagerResponse
     */
    async collegeAddManager(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeAddManagerHeaders({});
        return await this.collegeAddManagerWithOptions(request, headers, runtime);
    }
    /**
     * 在班级中添加人员
     *
     * @param request - CollegeAddStudentRequest
     * @param headers - CollegeAddStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeAddStudentResponse
     */
    async collegeAddStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.empExtension)) {
            body["empExtension"] = request.empExtension;
        }
        if (!tea_util_1.default.isUnset(request.gender)) {
            body["gender"] = request.gender;
        }
        if (!tea_util_1.default.isUnset(request.identifyId)) {
            body["identifyId"] = request.identifyId;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.startYear)) {
            body["startYear"] = request.startYear;
        }
        if (!tea_util_1.default.isUnset(request.studentName)) {
            body["studentName"] = request.studentName;
        }
        if (!tea_util_1.default.isUnset(request.studentNumber)) {
            body["studentNumber"] = request.studentNumber;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CollegeAddStudent",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/students`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeAddStudentResponse({}));
    }
    /**
     * 在班级中添加人员
     *
     * @param request - CollegeAddStudentRequest
     * @returns CollegeAddStudentResponse
     */
    async collegeAddStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeAddStudentHeaders({});
        return await this.collegeAddStudentWithOptions(request, headers, runtime);
    }
    /**
     * 移动学生到其他部门
     *
     * @param request - CollegeChangeStudentDeptRequest
     * @param headers - CollegeChangeStudentDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeChangeStudentDeptResponse
     */
    async collegeChangeStudentDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.newDeptId)) {
            query["newDeptId"] = request.newDeptId;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeChangeStudentDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/students/move`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeChangeStudentDeptResponse({}));
    }
    /**
     * 移动学生到其他部门
     *
     * @param request - CollegeChangeStudentDeptRequest
     * @returns CollegeChangeStudentDeptResponse
     */
    async collegeChangeStudentDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeChangeStudentDeptHeaders({});
        return await this.collegeChangeStudentDeptWithOptions(request, headers, runtime);
    }
    /**
     * 删除学段/学院/年级/专业\系/班级
     *
     * @param request - CollegeDeleteCollegeDeptRequest
     * @param headers - CollegeDeleteCollegeDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeDeleteCollegeDeptResponse
     */
    async collegeDeleteCollegeDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeDeleteCollegeDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/depts`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeDeleteCollegeDeptResponse({}));
    }
    /**
     * 删除学段/学院/年级/专业\系/班级
     *
     * @param request - CollegeDeleteCollegeDeptRequest
     * @returns CollegeDeleteCollegeDeptResponse
     */
    async collegeDeleteCollegeDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeDeleteCollegeDeptHeaders({});
        return await this.collegeDeleteCollegeDeptWithOptions(request, headers, runtime);
    }
    /**
     * 获取下级节点列表
     *
     * @param request - CollegeListCollegeSubDeptRequest
     * @param headers - CollegeListCollegeSubDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeListCollegeSubDeptResponse
     */
    async collegeListCollegeSubDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeListCollegeSubDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/subDepts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeListCollegeSubDeptResponse({}));
    }
    /**
     * 获取下级节点列表
     *
     * @param request - CollegeListCollegeSubDeptRequest
     * @returns CollegeListCollegeSubDeptResponse
     */
    async collegeListCollegeSubDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeListCollegeSubDeptHeaders({});
        return await this.collegeListCollegeSubDeptWithOptions(request, headers, runtime);
    }
    /**
     * 获取部门下所有负责人列表
     *
     * @param request - CollegeListDeptManagerRequest
     * @param headers - CollegeListDeptManagerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeListDeptManagerResponse
     */
    async collegeListDeptManagerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeListDeptManager",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/managers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeListDeptManagerResponse({}));
    }
    /**
     * 获取部门下所有负责人列表
     *
     * @param request - CollegeListDeptManagerRequest
     * @returns CollegeListDeptManagerResponse
     */
    async collegeListDeptManager(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeListDeptManagerHeaders({});
        return await this.collegeListDeptManagerWithOptions(request, headers, runtime);
    }
    /**
     * 分页获取班级下所有学生列表
     *
     * @param request - CollegeListStudentInfoRequest
     * @param headers - CollegeListStudentInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeListStudentInfoResponse
     */
    async collegeListStudentInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.dingStudentStatus)) {
            query["dingStudentStatus"] = request.dingStudentStatus;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeListStudentInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/students`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeListStudentInfoResponse({}));
    }
    /**
     * 分页获取班级下所有学生列表
     *
     * @param request - CollegeListStudentInfoRequest
     * @returns CollegeListStudentInfoResponse
     */
    async collegeListStudentInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeListStudentInfoHeaders({});
        return await this.collegeListStudentInfoWithOptions(request, headers, runtime);
    }
    /**
     * 分页查询未加入组织的学生列表
     *
     * @param request - CollegeListUncheckedStudentRequest
     * @param headers - CollegeListUncheckedStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeListUncheckedStudentResponse
     */
    async collegeListUncheckedStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeListUncheckedStudent",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/organizations/unjoinedStudents`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeListUncheckedStudentResponse({}));
    }
    /**
     * 分页查询未加入组织的学生列表
     *
     * @param request - CollegeListUncheckedStudentRequest
     * @returns CollegeListUncheckedStudentResponse
     */
    async collegeListUncheckedStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeListUncheckedStudentHeaders({});
        return await this.collegeListUncheckedStudentWithOptions(request, headers, runtime);
    }
    /**
     * 获取学段/学院/年级/专业\系/班级群群信息
     *
     * @param request - CollegeQueryCollegeDeptGroupInfoRequest
     * @param headers - CollegeQueryCollegeDeptGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeQueryCollegeDeptGroupInfoResponse
     */
    async collegeQueryCollegeDeptGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeQueryCollegeDeptGroupInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/depts/groupInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeQueryCollegeDeptGroupInfoResponse({}));
    }
    /**
     * 获取学段/学院/年级/专业\系/班级群群信息
     *
     * @param request - CollegeQueryCollegeDeptGroupInfoRequest
     * @returns CollegeQueryCollegeDeptGroupInfoResponse
     */
    async collegeQueryCollegeDeptGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeQueryCollegeDeptGroupInfoHeaders({});
        return await this.collegeQueryCollegeDeptGroupInfoWithOptions(request, headers, runtime);
    }
    /**
     * 获取学段/学院/年级/专业\系/班级信息
     *
     * @param request - CollegeQueryCollegeDeptInfoRequest
     * @param headers - CollegeQueryCollegeDeptInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeQueryCollegeDeptInfoResponse
     */
    async collegeQueryCollegeDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeQueryCollegeDeptInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/deptInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeQueryCollegeDeptInfoResponse({}));
    }
    /**
     * 获取学段/学院/年级/专业\系/班级信息
     *
     * @param request - CollegeQueryCollegeDeptInfoRequest
     * @returns CollegeQueryCollegeDeptInfoResponse
     */
    async collegeQueryCollegeDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeQueryCollegeDeptInfoHeaders({});
        return await this.collegeQueryCollegeDeptInfoWithOptions(request, headers, runtime);
    }
    /**
     * 获取指定部门下指定学生的信息
     *
     * @param request - CollegeQueryStudentInfoByDeptRequest
     * @param headers - CollegeQueryStudentInfoByDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeQueryStudentInfoByDeptResponse
     */
    async collegeQueryStudentInfoByDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeQueryStudentInfoByDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/studentinfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeQueryStudentInfoByDeptResponse({}));
    }
    /**
     * 获取指定部门下指定学生的信息
     *
     * @param request - CollegeQueryStudentInfoByDeptRequest
     * @returns CollegeQueryStudentInfoByDeptResponse
     */
    async collegeQueryStudentInfoByDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeQueryStudentInfoByDeptHeaders({});
        return await this.collegeQueryStudentInfoByDeptWithOptions(request, headers, runtime);
    }
    /**
     * 根据手机号查询学生信息
     *
     * @param request - CollegeQueryStudentInfoByMobileRequest
     * @param headers - CollegeQueryStudentInfoByMobileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeQueryStudentInfoByMobileResponse
     */
    async collegeQueryStudentInfoByMobileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeQueryStudentInfoByMobile",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/students/mobiles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeQueryStudentInfoByMobileResponse({}));
    }
    /**
     * 根据手机号查询学生信息
     *
     * @param request - CollegeQueryStudentInfoByMobileRequest
     * @returns CollegeQueryStudentInfoByMobileResponse
     */
    async collegeQueryStudentInfoByMobile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeQueryStudentInfoByMobileHeaders({});
        return await this.collegeQueryStudentInfoByMobileWithOptions(request, headers, runtime);
    }
    /**
     * 根据studentId查询学生信息
     *
     * @param request - CollegeQueryStudentInfoByStudentIdRequest
     * @param headers - CollegeQueryStudentInfoByStudentIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeQueryStudentInfoByStudentIdResponse
     */
    async collegeQueryStudentInfoByStudentIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeQueryStudentInfoByStudentId",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/students`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeQueryStudentInfoByStudentIdResponse({}));
    }
    /**
     * 根据studentId查询学生信息
     *
     * @param request - CollegeQueryStudentInfoByStudentIdRequest
     * @returns CollegeQueryStudentInfoByStudentIdResponse
     */
    async collegeQueryStudentInfoByStudentId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeQueryStudentInfoByStudentIdHeaders({});
        return await this.collegeQueryStudentInfoByStudentIdWithOptions(request, headers, runtime);
    }
    /**
     * 从部门中移除负责人
     *
     * @param request - CollegeRemoveManagerRequest
     * @param headers - CollegeRemoveManagerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeRemoveManagerResponse
     */
    async collegeRemoveManagerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.isForce)) {
            query["isForce"] = request.isForce;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeRemoveManager",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/managers`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeRemoveManagerResponse({}));
    }
    /**
     * 从部门中移除负责人
     *
     * @param request - CollegeRemoveManagerRequest
     * @returns CollegeRemoveManagerResponse
     */
    async collegeRemoveManager(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeRemoveManagerHeaders({});
        return await this.collegeRemoveManagerWithOptions(request, headers, runtime);
    }
    /**
     * 从部门中移除学生
     *
     * @param request - CollegeRemoveStudentRequest
     * @param headers - CollegeRemoveStudentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeRemoveStudentResponse
     */
    async collegeRemoveStudentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeRemoveStudent",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/students`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeRemoveStudentResponse({}));
    }
    /**
     * 从部门中移除学生
     *
     * @param request - CollegeRemoveStudentRequest
     * @returns CollegeRemoveStudentResponse
     */
    async collegeRemoveStudent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeRemoveStudentHeaders({});
        return await this.collegeRemoveStudentWithOptions(request, headers, runtime);
    }
    /**
     * 编辑学段/学院/年级/专业\系/班级
     *
     * @param request - CollegeUpdateCollegeDeptRequest
     * @param headers - CollegeUpdateCollegeDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeUpdateCollegeDeptResponse
     */
    async collegeUpdateCollegeDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.deptName)) {
            query["deptName"] = request.deptName;
        }
        if (!tea_util_1.default.isUnset(request.sortFactor)) {
            query["sortFactor"] = request.sortFactor;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            query["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeUpdateCollegeDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/depts`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeUpdateCollegeDeptResponse({}));
    }
    /**
     * 编辑学段/学院/年级/专业\系/班级
     *
     * @param request - CollegeUpdateCollegeDeptRequest
     * @returns CollegeUpdateCollegeDeptResponse
     */
    async collegeUpdateCollegeDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeUpdateCollegeDeptHeaders({});
        return await this.collegeUpdateCollegeDeptWithOptions(request, headers, runtime);
    }
    /**
     * 更新学生的部门相关信息
     *
     * @param request - CollegeUpdateStudentDeptInfoRequest
     * @param headers - CollegeUpdateStudentDeptInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeUpdateStudentDeptInfoResponse
     */
    async collegeUpdateStudentDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        if (!tea_util_1.default.isUnset(request.studentNumber)) {
            query["studentNumber"] = request.studentNumber;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeUpdateStudentDeptInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/deptInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeUpdateStudentDeptInfoResponse({}));
    }
    /**
     * 更新学生的部门相关信息
     *
     * @param request - CollegeUpdateStudentDeptInfoRequest
     * @returns CollegeUpdateStudentDeptInfoResponse
     */
    async collegeUpdateStudentDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeUpdateStudentDeptInfoHeaders({});
        return await this.collegeUpdateStudentDeptInfoWithOptions(request, headers, runtime);
    }
    /**
     * 更新班级下学生信息
     *
     * @param request - CollegeUpdateStudentInfoRequest
     * @param headers - CollegeUpdateStudentInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeUpdateStudentInfoResponse
     */
    async collegeUpdateStudentInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.empExtension)) {
            body["empExtension"] = request.empExtension;
        }
        if (!tea_util_1.default.isUnset(request.gender)) {
            body["gender"] = request.gender;
        }
        if (!tea_util_1.default.isUnset(request.identifyId)) {
            body["identifyId"] = request.identifyId;
        }
        if (!tea_util_1.default.isUnset(request.startYear)) {
            body["startYear"] = request.startYear;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            body["studentId"] = request.studentId;
        }
        if (!tea_util_1.default.isUnset(request.studentName)) {
            body["studentName"] = request.studentName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CollegeUpdateStudentInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/depts/students`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeUpdateStudentInfoResponse({}));
    }
    /**
     * 更新班级下学生信息
     *
     * @param request - CollegeUpdateStudentInfoRequest
     * @returns CollegeUpdateStudentInfoResponse
     */
    async collegeUpdateStudentInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeUpdateStudentInfoHeaders({});
        return await this.collegeUpdateStudentInfoWithOptions(request, headers, runtime);
    }
    /**
     * 修改学生手机号
     *
     * @param request - CollegeUpdateStudentMoblieRequest
     * @param headers - CollegeUpdateStudentMoblieHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CollegeUpdateStudentMoblieResponse
     */
    async collegeUpdateStudentMoblieWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isForce)) {
            query["isForce"] = request.isForce;
        }
        if (!tea_util_1.default.isUnset(request.newMobile)) {
            query["newMobile"] = request.newMobile;
        }
        if (!tea_util_1.default.isUnset(request.studentId)) {
            query["studentId"] = request.studentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CollegeUpdateStudentMoblie",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/colleges/members/students/mobiles`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CollegeUpdateStudentMoblieResponse({}));
    }
    /**
     * 修改学生手机号
     *
     * @param request - CollegeUpdateStudentMoblieRequest
     * @returns CollegeUpdateStudentMoblieResponse
     */
    async collegeUpdateStudentMoblie(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CollegeUpdateStudentMoblieHeaders({});
        return await this.collegeUpdateStudentMoblieWithOptions(request, headers, runtime);
    }
    /**
     * 创建自定义通讯录
     *
     * @param request - CustomizeContactCreateRequest
     * @param headers - CustomizeContactCreateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactCreateResponse
     */
    async customizeContactCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactCreate",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/contacts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactCreateResponse({}));
    }
    /**
     * 创建自定义通讯录
     *
     * @param request - CustomizeContactCreateRequest
     * @returns CustomizeContactCreateResponse
     */
    async customizeContactCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactCreateHeaders({});
        return await this.customizeContactCreateWithOptions(request, headers, runtime);
    }
    /**
     * 删除自定义通讯录
     *
     * @param request - CustomizeContactDeleteRequest
     * @param headers - CustomizeContactDeleteHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeleteResponse
     */
    async customizeContactDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDelete",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/contacts`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeleteResponse({}));
    }
    /**
     * 删除自定义通讯录
     *
     * @param request - CustomizeContactDeleteRequest
     * @returns CustomizeContactDeleteResponse
     */
    async customizeContactDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeleteHeaders({});
        return await this.customizeContactDeleteWithOptions(request, headers, runtime);
    }
    /**
     * 创建部门
     *
     * @param request - CustomizeContactDeptCreateRequest
     * @param headers - CustomizeContactDeptCreateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeptCreateResponse
     */
    async customizeContactDeptCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.parentDeptId)) {
            body["parentDeptId"] = request.parentDeptId;
        }
        if (!tea_util_1.default.isUnset(request.refId)) {
            body["refId"] = request.refId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDeptCreate",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/departments`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeptCreateResponse({}));
    }
    /**
     * 创建部门
     *
     * @param request - CustomizeContactDeptCreateRequest
     * @returns CustomizeContactDeptCreateResponse
     */
    async customizeContactDeptCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptCreateHeaders({});
        return await this.customizeContactDeptCreateWithOptions(request, headers, runtime);
    }
    /**
     * 删除部门
     *
     * @param request - CustomizeContactDeptDeleteRequest
     * @param headers - CustomizeContactDeptDeleteHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeptDeleteResponse
     */
    async customizeContactDeptDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDeptDelete",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/departments`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeptDeleteResponse({}));
    }
    /**
     * 删除部门
     *
     * @param request - CustomizeContactDeptDeleteRequest
     * @returns CustomizeContactDeptDeleteResponse
     */
    async customizeContactDeptDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptDeleteHeaders({});
        return await this.customizeContactDeptDeleteWithOptions(request, headers, runtime);
    }
    /**
     * 创建自定义通讯录某个部门的部门群
     *
     * @param request - CustomizeContactDeptGroupCreateRequest
     * @param headers - CustomizeContactDeptGroupCreateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeptGroupCreateResponse
     */
    async customizeContactDeptGroupCreateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDeptGroupCreate",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/departmentGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeptGroupCreateResponse({}));
    }
    /**
     * 创建自定义通讯录某个部门的部门群
     *
     * @param request - CustomizeContactDeptGroupCreateRequest
     * @returns CustomizeContactDeptGroupCreateResponse
     */
    async customizeContactDeptGroupCreate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptGroupCreateHeaders({});
        return await this.customizeContactDeptGroupCreateWithOptions(request, headers, runtime);
    }
    /**
     * 获取部门详情
     *
     * @param request - CustomizeContactDeptInfoRequest
     * @param headers - CustomizeContactDeptInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeptInfoResponse
     */
    async customizeContactDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDeptInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/departments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeptInfoResponse({}));
    }
    /**
     * 获取部门详情
     *
     * @param request - CustomizeContactDeptInfoRequest
     * @returns CustomizeContactDeptInfoResponse
     */
    async customizeContactDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptInfoHeaders({});
        return await this.customizeContactDeptInfoWithOptions(request, headers, runtime);
    }
    /**
     * 获取子部门列表
     *
     * @param request - CustomizeContactDeptListRequest
     * @param headers - CustomizeContactDeptListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeptListResponse
     */
    async customizeContactDeptListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDeptList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/subsidiaryDepartments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeptListResponse({}));
    }
    /**
     * 获取子部门列表
     *
     * @param request - CustomizeContactDeptListRequest
     * @returns CustomizeContactDeptListResponse
     */
    async customizeContactDeptList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptListHeaders({});
        return await this.customizeContactDeptListWithOptions(request, headers, runtime);
    }
    /**
     * 更新部门
     *
     * @param request - CustomizeContactDeptUpdateRequest
     * @param headers - CustomizeContactDeptUpdateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactDeptUpdateResponse
     */
    async customizeContactDeptUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        if (!tea_util_1.default.isUnset(request.parentDeptId)) {
            body["parentDeptId"] = request.parentDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactDeptUpdate",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/departments`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactDeptUpdateResponse({}));
    }
    /**
     * 更新部门
     *
     * @param request - CustomizeContactDeptUpdateRequest
     * @returns CustomizeContactDeptUpdateResponse
     */
    async customizeContactDeptUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactDeptUpdateHeaders({});
        return await this.customizeContactDeptUpdateWithOptions(request, headers, runtime);
    }
    /**
     * 普通部门下添加人员
     *
     * @param request - CustomizeContactEmpAddRequest
     * @param headers - CustomizeContactEmpAddHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactEmpAddResponse
     */
    async customizeContactEmpAddWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactEmpAdd",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/users`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactEmpAddResponse({}));
    }
    /**
     * 普通部门下添加人员
     *
     * @param request - CustomizeContactEmpAddRequest
     * @returns CustomizeContactEmpAddResponse
     */
    async customizeContactEmpAdd(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactEmpAddHeaders({});
        return await this.customizeContactEmpAddWithOptions(request, headers, runtime);
    }
    /**
     * 普通部门下移除人员
     *
     * @param request - CustomizeContactEmpDeleteRequest
     * @param headers - CustomizeContactEmpDeleteHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactEmpDeleteResponse
     */
    async customizeContactEmpDeleteWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactEmpDelete",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/users/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactEmpDeleteResponse({}));
    }
    /**
     * 普通部门下移除人员
     *
     * @param request - CustomizeContactEmpDeleteRequest
     * @returns CustomizeContactEmpDeleteResponse
     */
    async customizeContactEmpDelete(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactEmpDeleteHeaders({});
        return await this.customizeContactEmpDeleteWithOptions(request, headers, runtime);
    }
    /**
     * 查询部门下人员
     *
     * @param request - CustomizeContactEmpListRequest
     * @param headers - CustomizeContactEmpListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactEmpListResponse
     */
    async customizeContactEmpListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactEmpList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactEmpListResponse({}));
    }
    /**
     * 查询部门下人员
     *
     * @param request - CustomizeContactEmpListRequest
     * @returns CustomizeContactEmpListResponse
     */
    async customizeContactEmpList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactEmpListHeaders({});
        return await this.customizeContactEmpListWithOptions(request, headers, runtime);
    }
    /**
     * 获取自定义通讯录列表
     *
     * @param headers - CustomizeContactListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactListResponse
     */
    async customizeContactListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/contacts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactListResponse({}));
    }
    /**
     * 获取自定义通讯录列表
     * @returns CustomizeContactListResponse
     */
    async customizeContactList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactListHeaders({});
        return await this.customizeContactListWithOptions(headers, runtime);
    }
    /**
     * 更新自定义通讯录
     *
     * @param request - CustomizeContactUpdateRequest
     * @param headers - CustomizeContactUpdateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CustomizeContactUpdateResponse
     */
    async customizeContactUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.managerIdList)) {
            body["managerIdList"] = request.managerIdList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.order)) {
            body["order"] = request.order;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CustomizeContactUpdate",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/customizations/contacts`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CustomizeContactUpdateResponse({}));
    }
    /**
     * 更新自定义通讯录
     *
     * @param request - CustomizeContactUpdateRequest
     * @returns CustomizeContactUpdateResponse
     */
    async customizeContactUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CustomizeContactUpdateHeaders({});
        return await this.customizeContactUpdateWithOptions(request, headers, runtime);
    }
    /**
     * 门店通业务消息推送
     *
     * @param tmpReq - DIgitalStoreMessagePushRequest
     * @param headers - DIgitalStoreMessagePushHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DIgitalStoreMessagePushResponse
     */
    async dIgitalStoreMessagePushWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new DIgitalStoreMessagePushShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.messageDataList)) {
            request.messageDataListShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.messageDataList, "messageDataList", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.messageDataListShrink)) {
            query["messageDataList"] = request.messageDataListShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DIgitalStoreMessagePush",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/messages/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DIgitalStoreMessagePushResponse({}));
    }
    /**
     * 门店通业务消息推送
     *
     * @param request - DIgitalStoreMessagePushRequest
     * @returns DIgitalStoreMessagePushResponse
     */
    async dIgitalStoreMessagePush(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DIgitalStoreMessagePushHeaders({});
        return await this.dIgitalStoreMessagePushWithOptions(request, headers, runtime);
    }
    /**
     * 群运营-场景卡片发送记录列表
     *
     * @param request - DigitalStoreCardRecordRequest
     * @param headers - DigitalStoreCardRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreCardRecordResponse
     */
    async digitalStoreCardRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.beginTime)) {
            body["beginTime"] = request.beginTime;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.ids)) {
            body["ids"] = request.ids;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.sceneCardName)) {
            body["sceneCardName"] = request.sceneCardName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreCardRecord",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/cardSendRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreCardRecordResponse({}));
    }
    /**
     * 群运营-场景卡片发送记录列表
     *
     * @param request - DigitalStoreCardRecordRequest
     * @returns DigitalStoreCardRecordResponse
     */
    async digitalStoreCardRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreCardRecordHeaders({});
        return await this.digitalStoreCardRecordWithOptions(request, headers, runtime);
    }
    /**
     * 查询组织中门店通通讯录基础信息
     *
     * @param headers - DigitalStoreContactInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreContactInfoResponse
     */
    async digitalStoreContactInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreContactInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/contactInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreContactInfoResponse({}));
    }
    /**
     * 查询组织中门店通通讯录基础信息
     * @returns DigitalStoreContactInfoResponse
     */
    async digitalStoreContactInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreContactInfoHeaders({});
        return await this.digitalStoreContactInfoWithOptions(headers, runtime);
    }
    /**
     * 获取门店通相关会话列表（区域群、门店群）
     *
     * @param request - DigitalStoreConversationsRequest
     * @param headers - DigitalStoreConversationsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreConversationsResponse
     */
    async digitalStoreConversationsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.conversationTitle)) {
            query["conversationTitle"] = request.conversationTitle;
        }
        if (!tea_util_1.default.isUnset(request.conversationType)) {
            query["conversationType"] = request.conversationType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreConversations",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/conversations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreConversationsResponse({}));
    }
    /**
     * 获取门店通相关会话列表（区域群、门店群）
     *
     * @param request - DigitalStoreConversationsRequest
     * @returns DigitalStoreConversationsResponse
     */
    async digitalStoreConversations(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreConversationsHeaders({});
        return await this.digitalStoreConversationsWithOptions(request, headers, runtime);
    }
    /**
     * 群运营-数据监控-导出列表
     *
     * @param request - DigitalStoreExportCardRecordRequest
     * @param headers - DigitalStoreExportCardRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreExportCardRecordResponse
     */
    async digitalStoreExportCardRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.beginTime)) {
            body["beginTime"] = request.beginTime;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.ids)) {
            body["ids"] = request.ids;
        }
        if (!tea_util_1.default.isUnset(request.sceneCardName)) {
            body["sceneCardName"] = request.sceneCardName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreExportCardRecord",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/cardRecords/export`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreExportCardRecordResponse({}));
    }
    /**
     * 群运营-数据监控-导出列表
     *
     * @param request - DigitalStoreExportCardRecordRequest
     * @returns DigitalStoreExportCardRecordResponse
     */
    async digitalStoreExportCardRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreExportCardRecordHeaders({});
        return await this.digitalStoreExportCardRecordWithOptions(request, headers, runtime);
    }
    /**
     * 群运营-数据监控-导出明细
     *
     * @param request - DigitalStoreExportCardRecordDetailRequest
     * @param headers - DigitalStoreExportCardRecordDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreExportCardRecordDetailResponse
     */
    async digitalStoreExportCardRecordDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.beginTime)) {
            body["beginTime"] = request.beginTime;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.ids)) {
            body["ids"] = request.ids;
        }
        if (!tea_util_1.default.isUnset(request.sceneCardName)) {
            body["sceneCardName"] = request.sceneCardName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreExportCardRecordDetail",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/cardRecordDetails/export`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreExportCardRecordDetailResponse({}));
    }
    /**
     * 群运营-数据监控-导出明细
     *
     * @param request - DigitalStoreExportCardRecordDetailRequest
     * @returns DigitalStoreExportCardRecordDetailResponse
     */
    async digitalStoreExportCardRecordDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreExportCardRecordDetailHeaders({});
        return await this.digitalStoreExportCardRecordDetailWithOptions(request, headers, runtime);
    }
    /**
     * 查询门店通中的门店分组详情
     *
     * @param request - DigitalStoreGroupInfoRequest
     * @param headers - DigitalStoreGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreGroupInfoResponse
     */
    async digitalStoreGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["groupId"] = request.groupId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreGroupInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/groupInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreGroupInfoResponse({}));
    }
    /**
     * 查询门店通中的门店分组详情
     *
     * @param request - DigitalStoreGroupInfoRequest
     * @returns DigitalStoreGroupInfoResponse
     */
    async digitalStoreGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreGroupInfoHeaders({});
        return await this.digitalStoreGroupInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询门店通中的分组列表
     *
     * @param headers - DigitalStoreGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreGroupsResponse
     */
    async digitalStoreGroupsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreGroups",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/groups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreGroupsResponse({}));
    }
    /**
     * 查询门店通中的分组列表
     * @returns DigitalStoreGroupsResponse
     */
    async digitalStoreGroups() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreGroupsHeaders({});
        return await this.digitalStoreGroupsWithOptions(headers, runtime);
    }
    /**
     * 查询门店通讯录某个节点信息
     *
     * @param request - DigitalStoreNodeInfoRequest
     * @param headers - DigitalStoreNodeInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreNodeInfoResponse
     */
    async digitalStoreNodeInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.nodeId)) {
            query["nodeId"] = request.nodeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreNodeInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/nodeInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreNodeInfoResponse({}));
    }
    /**
     * 查询门店通讯录某个节点信息
     *
     * @param request - DigitalStoreNodeInfoRequest
     * @returns DigitalStoreNodeInfoResponse
     */
    async digitalStoreNodeInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreNodeInfoHeaders({});
        return await this.digitalStoreNodeInfoWithOptions(request, headers, runtime);
    }
    /**
     * 门店通权益信息查询
     *
     * @param headers - DigitalStoreRightsInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreRightsInfoResponse
     */
    async digitalStoreRightsInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreRightsInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/rightsInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreRightsInfoResponse({}));
    }
    /**
     * 门店通权益信息查询
     * @returns DigitalStoreRightsInfoResponse
     */
    async digitalStoreRightsInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreRightsInfoHeaders({});
        return await this.digitalStoreRightsInfoWithOptions(headers, runtime);
    }
    /**
     * 查询门店通中的角色列表
     *
     * @param headers - DigitalStoreRolesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreRolesResponse
     */
    async digitalStoreRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreRoles",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreRolesResponse({}));
    }
    /**
     * 查询门店通中的角色列表
     * @returns DigitalStoreRolesResponse
     */
    async digitalStoreRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreRolesHeaders({});
        return await this.digitalStoreRolesWithOptions(headers, runtime);
    }
    /**
     * 获取门店通场景群的业务范围
     *
     * @param request - DigitalStoreSceneScopeRequest
     * @param headers - DigitalStoreSceneScopeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreSceneScopeResponse
     */
    async digitalStoreSceneScopeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            query["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.sceneCode)) {
            query["sceneCode"] = request.sceneCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreSceneScope",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/sceneScopes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreSceneScopeResponse({}));
    }
    /**
     * 获取门店通场景群的业务范围
     *
     * @param request - DigitalStoreSceneScopeRequest
     * @returns DigitalStoreSceneScopeResponse
     */
    async digitalStoreSceneScope(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreSceneScopeHeaders({});
        return await this.digitalStoreSceneScopeWithOptions(request, headers, runtime);
    }
    /**
     * 查询门店通中的门店详情
     *
     * @param request - DigitalStoreStoreInfoRequest
     * @param headers - DigitalStoreStoreInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreStoreInfoResponse
     */
    async digitalStoreStoreInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.storeId)) {
            query["storeId"] = request.storeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreStoreInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/storeInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreStoreInfoResponse({}));
    }
    /**
     * 查询门店通中的门店详情
     *
     * @param request - DigitalStoreStoreInfoRequest
     * @returns DigitalStoreStoreInfoResponse
     */
    async digitalStoreStoreInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreStoreInfoHeaders({});
        return await this.digitalStoreStoreInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询门店通讯录某个节点下的子节点
     *
     * @param request - DigitalStoreSubNodesRequest
     * @param headers - DigitalStoreSubNodesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreSubNodesResponse
     */
    async digitalStoreSubNodesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.nodeId)) {
            query["nodeId"] = request.nodeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreSubNodes",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/subsidiaryNodes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreSubNodesResponse({}));
    }
    /**
     * 查询门店通讯录某个节点下的子节点
     *
     * @param request - DigitalStoreSubNodesRequest
     * @returns DigitalStoreSubNodesResponse
     */
    async digitalStoreSubNodes(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreSubNodesHeaders({});
        return await this.digitalStoreSubNodesWithOptions(request, headers, runtime);
    }
    /**
     * 修改人员管辖范围以及所属角色
     *
     * @param request - DigitalStoreUpdateAuthInfoRequest
     * @param headers - DigitalStoreUpdateAuthInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreUpdateAuthInfoResponse
     */
    async digitalStoreUpdateAuthInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.updateUserList)) {
            body["updateUserList"] = request.updateUserList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreUpdateAuthInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/authInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreUpdateAuthInfoResponse({}));
    }
    /**
     * 修改人员管辖范围以及所属角色
     *
     * @param request - DigitalStoreUpdateAuthInfoRequest
     * @returns DigitalStoreUpdateAuthInfoResponse
     */
    async digitalStoreUpdateAuthInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreUpdateAuthInfoHeaders({});
        return await this.digitalStoreUpdateAuthInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询门店通讯录人员信息
     *
     * @param request - DigitalStoreUserInfoRequest
     * @param headers - DigitalStoreUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreUserInfoResponse
     */
    async digitalStoreUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreUserInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/userInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreUserInfoResponse({}));
    }
    /**
     * 查询门店通讯录人员信息
     *
     * @param request - DigitalStoreUserInfoRequest
     * @returns DigitalStoreUserInfoResponse
     */
    async digitalStoreUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreUserInfoHeaders({});
        return await this.digitalStoreUserInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询门店通讯录某个节点下的所有人员
     *
     * @param request - DigitalStoreUsersRequest
     * @param headers - DigitalStoreUsersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStoreUsersResponse
     */
    async digitalStoreUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.nodeId)) {
            query["nodeId"] = request.nodeId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStoreUsers",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/nodes/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStoreUsersResponse({}));
    }
    /**
     * 查询门店通讯录某个节点下的所有人员
     *
     * @param request - DigitalStoreUsersRequest
     * @returns DigitalStoreUsersResponse
     */
    async digitalStoreUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStoreUsersHeaders({});
        return await this.digitalStoreUsersWithOptions(request, headers, runtime);
    }
    /**
     * 群运营-数据监控-查询导出任务的记录列表
     *
     * @param request - DigitalStorelistExportTaskRecordRequest
     * @param headers - DigitalStorelistExportTaskRecordHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DigitalStorelistExportTaskRecordResponse
     */
    async digitalStorelistExportTaskRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DigitalStorelistExportTaskRecord",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/digitalStores/exportTaskRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DigitalStorelistExportTaskRecordResponse({}));
    }
    /**
     * 群运营-数据监控-查询导出任务的记录列表
     *
     * @param request - DigitalStorelistExportTaskRecordRequest
     * @returns DigitalStorelistExportTaskRecordResponse
     */
    async digitalStorelistExportTaskRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DigitalStorelistExportTaskRecordHeaders({});
        return await this.digitalStorelistExportTaskRecordWithOptions(request, headers, runtime);
    }
    /**
     * 查询启用了当前应用的外部协作组织
     *
     * @param request - ExternalQueryExternalAppOrgsRequest
     * @param headers - ExternalQueryExternalAppOrgsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExternalQueryExternalAppOrgsResponse
     */
    async externalQueryExternalAppOrgsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.externalType)) {
            query["externalType"] = request.externalType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ExternalQueryExternalAppOrgs",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/externals/apps/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExternalQueryExternalAppOrgsResponse({}));
    }
    /**
     * 查询启用了当前应用的外部协作组织
     *
     * @param request - ExternalQueryExternalAppOrgsRequest
     * @returns ExternalQueryExternalAppOrgsResponse
     */
    async externalQueryExternalAppOrgs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExternalQueryExternalAppOrgsHeaders({});
        return await this.externalQueryExternalAppOrgsWithOptions(request, headers, runtime);
    }
    /**
     * 查询归属的主组织
     *
     * @param request - ExternalQueryExternalBelongMainOrgRequest
     * @param headers - ExternalQueryExternalBelongMainOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExternalQueryExternalBelongMainOrgResponse
     */
    async externalQueryExternalBelongMainOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.externalType)) {
            query["externalType"] = request.externalType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ExternalQueryExternalBelongMainOrg",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/externals/attributions/masterOrganizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExternalQueryExternalBelongMainOrgResponse({}));
    }
    /**
     * 查询归属的主组织
     *
     * @param request - ExternalQueryExternalBelongMainOrgRequest
     * @returns ExternalQueryExternalBelongMainOrgResponse
     */
    async externalQueryExternalBelongMainOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExternalQueryExternalBelongMainOrgHeaders({});
        return await this.externalQueryExternalBelongMainOrgWithOptions(request, headers, runtime);
    }
    /**
     * 查询外部协作组织
     *
     * @param request - ExternalQueryExternalOrgsRequest
     * @param headers - ExternalQueryExternalOrgsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExternalQueryExternalOrgsResponse
     */
    async externalQueryExternalOrgsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.externalType)) {
            query["externalType"] = request.externalType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ExternalQueryExternalOrgs",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/externals/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExternalQueryExternalOrgsResponse({}));
    }
    /**
     * 查询外部协作组织
     *
     * @param request - ExternalQueryExternalOrgsRequest
     * @returns ExternalQueryExternalOrgsResponse
     */
    async externalQueryExternalOrgs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExternalQueryExternalOrgsHeaders({});
        return await this.externalQueryExternalOrgsWithOptions(request, headers, runtime);
    }
    /**
     * getTaskPackageResult
     *
     * @param request - GetTaskPackageResultRequest
     * @param headers - GetTaskPackageResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskPackageResultResponse
     */
    async getTaskPackageResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.taskPackageId)) {
            body["taskPackageId"] = request.taskPackageId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTaskPackageResult",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/ai/taskPackages/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTaskPackageResultResponse({}));
    }
    /**
     * getTaskPackageResult
     *
     * @param request - GetTaskPackageResultRequest
     * @returns GetTaskPackageResultResponse
     */
    async getTaskPackageResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTaskPackageResultHeaders({});
        return await this.getTaskPackageResultWithOptions(request, headers, runtime);
    }
    /**
     * 医疗数据对账
     *
     * @param request - HospitalDataCheckRequest
     * @param headers - HospitalDataCheckHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HospitalDataCheckResponse
     */
    async hospitalDataCheckWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.allDeptCount)) {
            body["allDeptCount"] = request.allDeptCount;
        }
        if (!tea_util_1.default.isUnset(request.allDeptUserCount)) {
            body["allDeptUserCount"] = request.allDeptUserCount;
        }
        if (!tea_util_1.default.isUnset(request.allGroupCount)) {
            body["allGroupCount"] = request.allGroupCount;
        }
        if (!tea_util_1.default.isUnset(request.allGroupUserCount)) {
            body["allGroupUserCount"] = request.allGroupUserCount;
        }
        if (!tea_util_1.default.isUnset(request.deptCount)) {
            body["deptCount"] = request.deptCount;
        }
        if (!tea_util_1.default.isUnset(request.deptUserCount)) {
            body["deptUserCount"] = request.deptUserCount;
        }
        if (!tea_util_1.default.isUnset(request.groupCount)) {
            body["groupCount"] = request.groupCount;
        }
        if (!tea_util_1.default.isUnset(request.groupUserCount)) {
            body["groupUserCount"] = request.groupUserCount;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "HospitalDataCheck",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/datas/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new HospitalDataCheckResponse({}));
    }
    /**
     * 医疗数据对账
     *
     * @param request - HospitalDataCheckRequest
     * @returns HospitalDataCheckResponse
     */
    async hospitalDataCheck(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new HospitalDataCheckHeaders({});
        return await this.hospitalDataCheckWithOptions(request, headers, runtime);
    }
    /**
     * 行业化制造业事件中心
     *
     * @param request - IndustryManufactureCommonEventRequest
     * @param headers - IndustryManufactureCommonEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureCommonEventResponse
     */
    async industryManufactureCommonEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.bizData)) {
            body["bizData"] = request.bizData;
        }
        if (!tea_util_1.default.isUnset(request.eventType)) {
            body["eventType"] = request.eventType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureCommonEvent",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturing/bases/commons/events`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureCommonEventResponse({}));
    }
    /**
     * 行业化制造业事件中心
     *
     * @param request - IndustryManufactureCommonEventRequest
     * @returns IndustryManufactureCommonEventResponse
     */
    async industryManufactureCommonEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureCommonEventHeaders({});
        return await this.industryManufactureCommonEventWithOptions(request, headers, runtime);
    }
    /**
     * 物料成本开放服务
     *
     * @param request - IndustryManufactureCostRecordListGetRequest
     * @param headers - IndustryManufactureCostRecordListGetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureCostRecordListGetResponse
     */
    async industryManufactureCostRecordListGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            body["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productionTaskNo)) {
            body["productionTaskNo"] = request.productionTaskNo;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureCostRecordListGet",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufactures/materialCostRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureCostRecordListGetResponse({}));
    }
    /**
     * 物料成本开放服务
     *
     * @param request - IndustryManufactureCostRecordListGetRequest
     * @returns IndustryManufactureCostRecordListGetResponse
     */
    async industryManufactureCostRecordListGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureCostRecordListGetHeaders({});
        return await this.industryManufactureCostRecordListGetWithOptions(request, headers, runtime);
    }
    /**
     * 费用服务
     *
     * @param request - IndustryManufactureFeeListGetRequest
     * @param headers - IndustryManufactureFeeListGetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureFeeListGetResponse
     */
    async industryManufactureFeeListGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.productionTaskNo)) {
            body["productionTaskNo"] = request.productionTaskNo;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureFeeListGet",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufactures/fees/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureFeeListGetResponse({}));
    }
    /**
     * 费用服务
     *
     * @param request - IndustryManufactureFeeListGetRequest
     * @returns IndustryManufactureFeeListGetResponse
     */
    async industryManufactureFeeListGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureFeeListGetHeaders({});
        return await this.industryManufactureFeeListGetWithOptions(request, headers, runtime);
    }
    /**
     * 行业化-制造业工价接口
     *
     * @param request - IndustryManufactureLabourCostRequest
     * @param headers - IndustryManufactureLabourCostHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureLabourCostResponse
     */
    async industryManufactureLabourCostWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processNo)) {
            body["processNo"] = request.processNo;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureLabourCost",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufactures/labourCosts/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureLabourCostResponse({}));
    }
    /**
     * 行业化-制造业工价接口
     *
     * @param request - IndustryManufactureLabourCostRequest
     * @returns IndustryManufactureLabourCostResponse
     */
    async industryManufactureLabourCost(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureLabourCostHeaders({});
        return await this.industryManufactureLabourCostWithOptions(request, headers, runtime);
    }
    /**
     * 查询行业物料列表
     *
     * @param request - IndustryManufactureMaterialListRequest
     * @param headers - IndustryManufactureMaterialListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMaterialListResponse
     */
    async industryManufactureMaterialListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            body["currentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMaterialList",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufactures/materials/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMaterialListResponse({}));
    }
    /**
     * 查询行业物料列表
     *
     * @param request - IndustryManufactureMaterialListRequest
     * @returns IndustryManufactureMaterialListResponse
     */
    async industryManufactureMaterialList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMaterialListHeaders({});
        return await this.industryManufactureMaterialListWithOptions(request, headers, runtime);
    }
    /**
     * 派工任务管理
     *
     * @param request - IndustryManufactureMesDispatchTaskRequest
     * @param headers - IndustryManufactureMesDispatchTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesDispatchTaskResponse
     */
    async industryManufactureMesDispatchTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.defectsAmount)) {
            body["defectsAmount"] = request.defectsAmount;
        }
        if (!tea_util_1.default.isUnset(request.dispatchStaffName)) {
            body["dispatchStaffName"] = request.dispatchStaffName;
        }
        if (!tea_util_1.default.isUnset(request.dispatchStaffNo)) {
            body["dispatchStaffNo"] = request.dispatchStaffNo;
        }
        if (!tea_util_1.default.isUnset(request.fineAmount)) {
            body["fineAmount"] = request.fineAmount;
        }
        if (!tea_util_1.default.isUnset(request.overdue)) {
            body["overdue"] = request.overdue;
        }
        if (!tea_util_1.default.isUnset(request.planQuantity)) {
            body["planQuantity"] = request.planQuantity;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.processName)) {
            body["processName"] = request.processName;
        }
        if (!tea_util_1.default.isUnset(request.processUuid)) {
            body["processUuid"] = request.processUuid;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            body["projectCode"] = request.projectCode;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.projectStatus)) {
            body["projectStatus"] = request.projectStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskOperators)) {
            body["taskOperators"] = request.taskOperators;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanEndTime)) {
            body["taskPlanEndTime"] = request.taskPlanEndTime;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanStartTime)) {
            body["taskPlanStartTime"] = request.taskPlanStartTime;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            body["taskStatus"] = request.taskStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            body["taskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.teamId)) {
            body["teamId"] = request.teamId;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesDispatchTask",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/dispatchTasks/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesDispatchTaskResponse({}));
    }
    /**
     * 派工任务管理
     *
     * @param request - IndustryManufactureMesDispatchTaskRequest
     * @returns IndustryManufactureMesDispatchTaskResponse
     */
    async industryManufactureMesDispatchTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesDispatchTaskHeaders({});
        return await this.industryManufactureMesDispatchTaskWithOptions(request, headers, runtime);
    }
    /**
     * MES系统物料管理
     *
     * @param request - IndustryManufactureMesMaterialRequest
     * @param headers - IndustryManufactureMesMaterialHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesMaterialResponse
     */
    async industryManufactureMesMaterialWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.category)) {
            body["category"] = request.category;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.prop)) {
            body["prop"] = request.prop;
        }
        if (!tea_util_1.default.isUnset(request.unit)) {
            body["unit"] = request.unit;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesMaterial",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/materials/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesMaterialResponse({}));
    }
    /**
     * MES系统物料管理
     *
     * @param request - IndustryManufactureMesMaterialRequest
     * @returns IndustryManufactureMesMaterialResponse
     */
    async industryManufactureMesMaterial(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesMaterialHeaders({});
        return await this.industryManufactureMesMaterialWithOptions(request, headers, runtime);
    }
    /**
     * 生产委外工单管理
     *
     * @param request - IndustryManufactureMesOutPlanRequest
     * @param headers - IndustryManufactureMesOutPlanHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesOutPlanResponse
     */
    async industryManufactureMesOutPlanWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.approvalStatus)) {
            body["approvalStatus"] = request.approvalStatus;
        }
        if (!tea_util_1.default.isUnset(request.approver)) {
            body["approver"] = request.approver;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.outSourceProjectCode)) {
            body["outSourceProjectCode"] = request.outSourceProjectCode;
        }
        if (!tea_util_1.default.isUnset(request.outSourceTeamId)) {
            body["outSourceTeamId"] = request.outSourceTeamId;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.processIdentificationCode)) {
            body["processIdentificationCode"] = request.processIdentificationCode;
        }
        if (!tea_util_1.default.isUnset(request.processUuids)) {
            body["processUuids"] = request.processUuids;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            body["projectCode"] = request.projectCode;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.sendPlanQuantity)) {
            body["sendPlanQuantity"] = request.sendPlanQuantity;
        }
        if (!tea_util_1.default.isUnset(request.supplierCode)) {
            body["supplierCode"] = request.supplierCode;
        }
        if (!tea_util_1.default.isUnset(request.supplierName)) {
            body["supplierName"] = request.supplierName;
        }
        if (!tea_util_1.default.isUnset(request.totalWage)) {
            body["totalWage"] = request.totalWage;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesOutPlan",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/outPlans/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesOutPlanResponse({}));
    }
    /**
     * 生产委外工单管理
     *
     * @param request - IndustryManufactureMesOutPlanRequest
     * @returns IndustryManufactureMesOutPlanResponse
     */
    async industryManufactureMesOutPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesOutPlanHeaders({});
        return await this.industryManufactureMesOutPlanWithOptions(request, headers, runtime);
    }
    /**
     * 生产报工管理
     *
     * @param request - IndustryManufactureMesOutputRequest
     * @param headers - IndustryManufactureMesOutputHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesOutputResponse
     */
    async industryManufactureMesOutputWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.approveStatus)) {
            body["approveStatus"] = request.approveStatus;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.defectsAmount)) {
            body["defectsAmount"] = request.defectsAmount;
        }
        if (!tea_util_1.default.isUnset(request.defectsReason)) {
            body["defectsReason"] = request.defectsReason;
        }
        if (!tea_util_1.default.isUnset(request.fineAmount)) {
            body["fineAmount"] = request.fineAmount;
        }
        if (!tea_util_1.default.isUnset(request.hasQualityTest)) {
            body["hasQualityTest"] = request.hasQualityTest;
        }
        if (!tea_util_1.default.isUnset(request.overdue)) {
            body["overdue"] = request.overdue;
        }
        if (!tea_util_1.default.isUnset(request.planQuantity)) {
            body["planQuantity"] = request.planQuantity;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.processName)) {
            body["processName"] = request.processName;
        }
        if (!tea_util_1.default.isUnset(request.processUuid)) {
            body["processUuid"] = request.processUuid;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.projectCode)) {
            body["projectCode"] = request.projectCode;
        }
        if (!tea_util_1.default.isUnset(request.projectId)) {
            body["projectId"] = request.projectId;
        }
        if (!tea_util_1.default.isUnset(request.projectStatus)) {
            body["projectStatus"] = request.projectStatus;
        }
        if (!tea_util_1.default.isUnset(request.qualityTestStatus)) {
            body["qualityTestStatus"] = request.qualityTestStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanEndTime)) {
            body["taskPlanEndTime"] = request.taskPlanEndTime;
        }
        if (!tea_util_1.default.isUnset(request.taskPlanStartTime)) {
            body["taskPlanStartTime"] = request.taskPlanStartTime;
        }
        if (!tea_util_1.default.isUnset(request.taskStatus)) {
            body["taskStatus"] = request.taskStatus;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            body["taskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.taskUuid)) {
            body["taskUuid"] = request.taskUuid;
        }
        if (!tea_util_1.default.isUnset(request.teamId)) {
            body["teamId"] = request.teamId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userName)) {
            body["userName"] = request.userName;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesOutput",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/outputs/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesOutputResponse({}));
    }
    /**
     * 生产报工管理
     *
     * @param request - IndustryManufactureMesOutputRequest
     * @returns IndustryManufactureMesOutputResponse
     */
    async industryManufactureMesOutput(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesOutputHeaders({});
        return await this.industryManufactureMesOutputWithOptions(request, headers, runtime);
    }
    /**
     * MES系统工序管理
     *
     * @param request - IndustryManufactureMesProcessRequest
     * @param headers - IndustryManufactureMesProcessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesProcessResponse
     */
    async industryManufactureMesProcessWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.needDispatch)) {
            body["needDispatch"] = request.needDispatch;
        }
        if (!tea_util_1.default.isUnset(request.needQualityTest)) {
            body["needQualityTest"] = request.needQualityTest;
        }
        if (!tea_util_1.default.isUnset(request.no)) {
            body["no"] = request.no;
        }
        if (!tea_util_1.default.isUnset(request.price)) {
            body["price"] = request.price;
        }
        if (!tea_util_1.default.isUnset(request.prop)) {
            body["prop"] = request.prop;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.sop)) {
            body["sop"] = request.sop;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesProcess",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/processes/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesProcessResponse({}));
    }
    /**
     * MES系统工序管理
     *
     * @param request - IndustryManufactureMesProcessRequest
     * @returns IndustryManufactureMesProcessResponse
     */
    async industryManufactureMesProcess(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesProcessHeaders({});
        return await this.industryManufactureMesProcessWithOptions(request, headers, runtime);
    }
    /**
     * 生产工单管理
     *
     * @param request - IndustryManufactureMesProductionPlanRequest
     * @param headers - IndustryManufactureMesProductionPlanHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesProductionPlanResponse
     */
    async industryManufactureMesProductionPlanWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.actualEndTime)) {
            body["actualEndTime"] = request.actualEndTime;
        }
        if (!tea_util_1.default.isUnset(request.actualStartTime)) {
            body["actualStartTime"] = request.actualStartTime;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.bomUuid)) {
            body["bomUuid"] = request.bomUuid;
        }
        if (!tea_util_1.default.isUnset(request.events)) {
            body["events"] = request.events;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.no)) {
            body["no"] = request.no;
        }
        if (!tea_util_1.default.isUnset(request.overdue)) {
            body["overdue"] = request.overdue;
        }
        if (!tea_util_1.default.isUnset(request.planEndTime)) {
            body["planEndTime"] = request.planEndTime;
        }
        if (!tea_util_1.default.isUnset(request.planQuantity)) {
            body["planQuantity"] = request.planQuantity;
        }
        if (!tea_util_1.default.isUnset(request.planStartTime)) {
            body["planStartTime"] = request.planStartTime;
        }
        if (!tea_util_1.default.isUnset(request.processUuids)) {
            body["processUuids"] = request.processUuids;
        }
        if (!tea_util_1.default.isUnset(request.productCode)) {
            body["productCode"] = request.productCode;
        }
        if (!tea_util_1.default.isUnset(request.productName)) {
            body["productName"] = request.productName;
        }
        if (!tea_util_1.default.isUnset(request.productSpecification)) {
            body["productSpecification"] = request.productSpecification;
        }
        if (!tea_util_1.default.isUnset(request.qualifiedQuantity)) {
            body["qualifiedQuantity"] = request.qualifiedQuantity;
        }
        if (!tea_util_1.default.isUnset(request.sellOrderNo)) {
            body["sellOrderNo"] = request.sellOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.teamList)) {
            body["teamList"] = request.teamList;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.unit)) {
            body["unit"] = request.unit;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesProductionPlan",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/productionPlans/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesProductionPlanResponse({}));
    }
    /**
     * 生产工单管理
     *
     * @param request - IndustryManufactureMesProductionPlanRequest
     * @returns IndustryManufactureMesProductionPlanResponse
     */
    async industryManufactureMesProductionPlan(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesProductionPlanHeaders({});
        return await this.industryManufactureMesProductionPlanWithOptions(request, headers, runtime);
    }
    /**
     * 生产委外合作班组管理
     *
     * @param request - IndustryManufactureMesSubCooperationTeamRequest
     * @param headers - IndustryManufactureMesSubCooperationTeamHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesSubCooperationTeamResponse
     */
    async industryManufactureMesSubCooperationTeamWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.events)) {
            body["events"] = request.events;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.groupPlugins)) {
            body["groupPlugins"] = request.groupPlugins;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            body["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.leaders)) {
            body["leaders"] = request.leaders;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.outCorpId)) {
            body["outCorpId"] = request.outCorpId;
        }
        if (!tea_util_1.default.isUnset(request.processIds)) {
            body["processIds"] = request.processIds;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesSubCooperationTeam",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturings/outTeams/manage`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesSubCooperationTeamResponse({}));
    }
    /**
     * 生产委外合作班组管理
     *
     * @param request - IndustryManufactureMesSubCooperationTeamRequest
     * @returns IndustryManufactureMesSubCooperationTeamResponse
     */
    async industryManufactureMesSubCooperationTeam(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesSubCooperationTeamHeaders({});
        return await this.industryManufactureMesSubCooperationTeamWithOptions(request, headers, runtime);
    }
    /**
     * MES系统班组管理
     *
     * @param request - IndustryManufactureMesTeamMgmtRequest
     * @param headers - IndustryManufactureMesTeamMgmtHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryManufactureMesTeamMgmtResponse
     */
    async industryManufactureMesTeamMgmtWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.baseDataName)) {
            body["baseDataName"] = request.baseDataName;
        }
        if (!tea_util_1.default.isUnset(request.events)) {
            body["events"] = request.events;
        }
        if (!tea_util_1.default.isUnset(request.extendData)) {
            body["extendData"] = request.extendData;
        }
        if (!tea_util_1.default.isUnset(request.groupConfig)) {
            body["groupConfig"] = request.groupConfig;
        }
        if (!tea_util_1.default.isUnset(request.groupPlugins)) {
            body["groupPlugins"] = request.groupPlugins;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            body["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.leaders)) {
            body["leaders"] = request.leaders;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.processIds)) {
            body["processIds"] = request.processIds;
        }
        if (!tea_util_1.default.isUnset(request.tagKey)) {
            body["tagKey"] = request.tagKey;
        }
        if (!tea_util_1.default.isUnset(request.tagValues)) {
            body["tagValues"] = request.tagValues;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryManufactureMesTeamMgmt",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufacturing/base/data/team`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryManufactureMesTeamMgmtResponse({}));
    }
    /**
     * MES系统班组管理
     *
     * @param request - IndustryManufactureMesTeamMgmtRequest
     * @returns IndustryManufactureMesTeamMgmtResponse
     */
    async industryManufactureMesTeamMgmt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryManufactureMesTeamMgmtHeaders({});
        return await this.industryManufactureMesTeamMgmtWithOptions(request, headers, runtime);
    }
    /**
     * 物料成本查询服务
     *
     * @param request - IndustryMmanufactureMaterialCostGetRequest
     * @param headers - IndustryMmanufactureMaterialCostGetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IndustryMmanufactureMaterialCostGetResponse
     */
    async industryMmanufactureMaterialCostGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appIds)) {
            body["appIds"] = request.appIds;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.isvOrgId)) {
            body["isvOrgId"] = request.isvOrgId;
        }
        if (!tea_util_1.default.isUnset(request.materialNo)) {
            body["materialNo"] = request.materialNo;
        }
        if (!tea_util_1.default.isUnset(request.microappAgentId)) {
            body["microappAgentId"] = request.microappAgentId;
        }
        if (!tea_util_1.default.isUnset(request.orgId)) {
            body["orgId"] = request.orgId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.suiteKey)) {
            body["suiteKey"] = request.suiteKey;
        }
        if (!tea_util_1.default.isUnset(request.tokenGrantType)) {
            body["tokenGrantType"] = request.tokenGrantType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IndustryMmanufactureMaterialCostGet",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/manufactures/base/materialCosts/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IndustryMmanufactureMaterialCostGetResponse({}));
    }
    /**
     * 物料成本查询服务
     *
     * @param request - IndustryMmanufactureMaterialCostGetRequest
     * @returns IndustryMmanufactureMaterialCostGetResponse
     */
    async industryMmanufactureMaterialCostGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IndustryMmanufactureMaterialCostGetHeaders({});
        return await this.industryMmanufactureMaterialCostGetWithOptions(request, headers, runtime);
    }
    /**
     * 提供text和card两种形式工作通知消息
     *
     * @param request - PushDingMessageRequest
     * @param headers - PushDingMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushDingMessageResponse
     */
    async pushDingMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.messageType)) {
            body["messageType"] = request.messageType;
        }
        if (!tea_util_1.default.isUnset(request.messageUrl)) {
            body["messageUrl"] = request.messageUrl;
        }
        if (!tea_util_1.default.isUnset(request.pictureUrl)) {
            body["pictureUrl"] = request.pictureUrl;
        }
        if (!tea_util_1.default.isUnset(request.singleTitle)) {
            body["singleTitle"] = request.singleTitle;
        }
        if (!tea_util_1.default.isUnset(request.singleUrl)) {
            body["singleUrl"] = request.singleUrl;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PushDingMessage",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/works/notice`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PushDingMessageResponse({}));
    }
    /**
     * 提供text和card两种形式工作通知消息
     *
     * @param request - PushDingMessageRequest
     * @returns PushDingMessageResponse
     */
    async pushDingMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PushDingMessageHeaders({});
        return await this.pushDingMessageWithOptions(request, headers, runtime);
    }
    /**
     * 获取当前组织下的所有科室
     *
     * @param request - QueryAllDepartmentRequest
     * @param headers - QueryAllDepartmentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllDepartmentResponse
     */
    async queryAllDepartmentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllDepartment",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/departments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllDepartmentResponse({}));
    }
    /**
     * 获取当前组织下的所有科室
     *
     * @param request - QueryAllDepartmentRequest
     * @returns QueryAllDepartmentResponse
     */
    async queryAllDepartment(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllDepartmentHeaders({});
        return await this.queryAllDepartmentWithOptions(request, headers, runtime);
    }
    /**
     * 查询医院下的所有医生
     *
     * @param request - QueryAllDoctorsRequest
     * @param headers - QueryAllDoctorsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllDoctorsResponse
     */
    async queryAllDoctorsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        if (!tea_util_1.default.isUnset(request.pageNum)) {
            query["pageNum"] = request.pageNum;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllDoctors",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/doctors`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllDoctorsResponse({}));
    }
    /**
     * 查询医院下的所有医生
     *
     * @param request - QueryAllDoctorsRequest
     * @returns QueryAllDoctorsResponse
     */
    async queryAllDoctors(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllDoctorsHeaders({});
        return await this.queryAllDoctorsWithOptions(request, headers, runtime);
    }
    /**
     * 查询所有医疗组
     *
     * @param request - QueryAllGroupRequest
     * @param headers - QueryAllGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllGroupResponse
     */
    async queryAllGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/groups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllGroupResponse({}));
    }
    /**
     * 查询所有医疗组
     *
     * @param request - QueryAllGroupRequest
     * @returns QueryAllGroupResponse
     */
    async queryAllGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllGroupHeaders({});
        return await this.queryAllGroupWithOptions(request, headers, runtime);
    }
    /**
     * 查询科室下的所有医疗组
     *
     * @param request - QueryAllGroupsInDeptRequest
     * @param headers - QueryAllGroupsInDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllGroupsInDeptResponse
     */
    async queryAllGroupsInDeptWithOptions(deptId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllGroupsInDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/departments/${deptId}/groups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllGroupsInDeptResponse({}));
    }
    /**
     * 查询科室下的所有医疗组
     *
     * @param request - QueryAllGroupsInDeptRequest
     * @returns QueryAllGroupsInDeptResponse
     */
    async queryAllGroupsInDept(deptId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllGroupsInDeptHeaders({});
        return await this.queryAllGroupsInDeptWithOptions(deptId, request, headers, runtime);
    }
    /**
     * 查询科室下的所有人员
     *
     * @param request - QueryAllMemberByDeptRequest
     * @param headers - QueryAllMemberByDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllMemberByDeptResponse
     */
    async queryAllMemberByDeptWithOptions(deptId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllMemberByDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/departments/${deptId}/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllMemberByDeptResponse({}));
    }
    /**
     * 查询科室下的所有人员
     *
     * @param request - QueryAllMemberByDeptRequest
     * @returns QueryAllMemberByDeptResponse
     */
    async queryAllMemberByDept(deptId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllMemberByDeptHeaders({});
        return await this.queryAllMemberByDeptWithOptions(deptId, request, headers, runtime);
    }
    /**
     * 获取医疗组下面的所有成员
     *
     * @param request - QueryAllMemberByGroupRequest
     * @param headers - QueryAllMemberByGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllMemberByGroupResponse
     */
    async queryAllMemberByGroupWithOptions(groupId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAllMemberByGroup",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/groups/${groupId}/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAllMemberByGroupResponse({}));
    }
    /**
     * 获取医疗组下面的所有成员
     *
     * @param request - QueryAllMemberByGroupRequest
     * @returns QueryAllMemberByGroupResponse
     */
    async queryAllMemberByGroup(groupId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAllMemberByGroupHeaders({});
        return await this.queryAllMemberByGroupWithOptions(groupId, request, headers, runtime);
    }
    /**
     * 获取当前企业医疗通讯录的业务操作日志
     *
     * @param request - QueryBizOptLogRequest
     * @param headers - QueryBizOptLogHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryBizOptLogResponse
     */
    async queryBizOptLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryBizOptLog",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/bizOptLogs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryBizOptLogResponse({}));
    }
    /**
     * 获取当前企业医疗通讯录的业务操作日志
     *
     * @param request - QueryBizOptLogRequest
     * @returns QueryBizOptLogResponse
     */
    async queryBizOptLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBizOptLogHeaders({});
        return await this.queryBizOptLogWithOptions(request, headers, runtime);
    }
    /**
     * 获取专属AI平台信息
     *
     * @param request - QueryChatAIOXMInfoRequest
     * @param headers - QueryChatAIOXMInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryChatAIOXMInfoResponse
     */
    async queryChatAIOXMInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryChatAIOXMInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/chatai/oxm/infos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryChatAIOXMInfoResponse({}));
    }
    /**
     * 获取专属AI平台信息
     *
     * @param request - QueryChatAIOXMInfoRequest
     * @returns QueryChatAIOXMInfoResponse
     */
    async queryChatAIOXMInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryChatAIOXMInfoHeaders({});
        return await this.queryChatAIOXMInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询科室和医疗组的扩展信息
     *
     * @param request - QueryDepartmentExtendInfoRequest
     * @param headers - QueryDepartmentExtendInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDepartmentExtendInfoResponse
     */
    async queryDepartmentExtendInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            query["deptCode"] = request.deptCode;
        }
        if (!tea_util_1.default.isUnset(request.propCode)) {
            query["propCode"] = request.propCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDepartmentExtendInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/departments/extensions/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDepartmentExtendInfoResponse({}));
    }
    /**
     * 查询科室和医疗组的扩展信息
     *
     * @param request - QueryDepartmentExtendInfoRequest
     * @returns QueryDepartmentExtendInfoResponse
     */
    async queryDepartmentExtendInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDepartmentExtendInfoHeaders({});
        return await this.queryDepartmentExtendInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询部门详情
     *
     * @param headers - QueryDepartmentInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDepartmentInfoResponse
     */
    async queryDepartmentInfoWithOptions(deptId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryDepartmentInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/departments/${deptId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDepartmentInfoResponse({}));
    }
    /**
     * 查询部门详情
     * @returns QueryDepartmentInfoResponse
     */
    async queryDepartmentInfo(deptId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDepartmentInfoHeaders({});
        return await this.queryDepartmentInfoWithOptions(deptId, headers, runtime);
    }
    /**
     * 通过工号查询人员信息
     *
     * @param request - QueryDoctorDetailsByJobNumberRequest
     * @param headers - QueryDoctorDetailsByJobNumberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDoctorDetailsByJobNumberResponse
     */
    async queryDoctorDetailsByJobNumberWithOptions(jobNumber, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDoctorDetailsByJobNumber",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/doctors/${jobNumber}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDoctorDetailsByJobNumberResponse({}));
    }
    /**
     * 通过工号查询人员信息
     *
     * @param request - QueryDoctorDetailsByJobNumberRequest
     * @returns QueryDoctorDetailsByJobNumberResponse
     */
    async queryDoctorDetailsByJobNumber(jobNumber, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDoctorDetailsByJobNumberHeaders({});
        return await this.queryDoctorDetailsByJobNumberWithOptions(jobNumber, request, headers, runtime);
    }
    /**
     * 获取医疗组详情
     *
     * @param headers - QueryGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryGroupInfoResponse
     */
    async queryGroupInfoWithOptions(groupId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/groups/${groupId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupInfoResponse({}));
    }
    /**
     * 获取医疗组详情
     * @returns QueryGroupInfoResponse
     */
    async queryGroupInfo(groupId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupInfoHeaders({});
        return await this.queryGroupInfoWithOptions(groupId, headers, runtime);
    }
    /**
     * 查询医院的院区和病区信息
     *
     * @param request - QueryHospitalDistrictInfoRequest
     * @param headers - QueryHospitalDistrictInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryHospitalDistrictInfoResponse
     */
    async queryHospitalDistrictInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryHospitalDistrictInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/districts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryHospitalDistrictInfoResponse({}));
    }
    /**
     * 查询医院的院区和病区信息
     *
     * @param request - QueryHospitalDistrictInfoRequest
     * @returns QueryHospitalDistrictInfoResponse
     */
    async queryHospitalDistrictInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHospitalDistrictInfoHeaders({});
        return await this.queryHospitalDistrictInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询医院所有角色的人员
     *
     * @param request - QueryHospitalRoleUserInfoRequest
     * @param headers - QueryHospitalRoleUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryHospitalRoleUserInfoResponse
     */
    async queryHospitalRoleUserInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryHospitalRoleUserInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/roles/userInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryHospitalRoleUserInfoResponse({}));
    }
    /**
     * 查询医院所有角色的人员
     *
     * @param request - QueryHospitalRoleUserInfoRequest
     * @returns QueryHospitalRoleUserInfoResponse
     */
    async queryHospitalRoleUserInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHospitalRoleUserInfoHeaders({});
        return await this.queryHospitalRoleUserInfoWithOptions(request, headers, runtime);
    }
    /**
     * 查询医院的角色
     *
     * @param headers - QueryHospitalRolesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryHospitalRolesResponse
     */
    async queryHospitalRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryHospitalRoles",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryHospitalRolesResponse({}));
    }
    /**
     * 查询医院的角色
     * @returns QueryHospitalRolesResponse
     */
    async queryHospitalRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHospitalRolesHeaders({});
        return await this.queryHospitalRolesWithOptions(headers, runtime);
    }
    /**
     * 查询职称字典表
     *
     * @param headers - QueryJobCodeDictionaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryJobCodeDictionaryResponse
     */
    async queryJobCodeDictionaryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryJobCodeDictionary",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/jobCodes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryJobCodeDictionaryResponse({}));
    }
    /**
     * 查询职称字典表
     * @returns QueryJobCodeDictionaryResponse
     */
    async queryJobCodeDictionary() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryJobCodeDictionaryHeaders({});
        return await this.queryJobCodeDictionaryWithOptions(headers, runtime);
    }
    /**
     * 查询工作状态字典表
     *
     * @param headers - QueryJobStatusCodeDictionaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryJobStatusCodeDictionaryResponse
     */
    async queryJobStatusCodeDictionaryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryJobStatusCodeDictionary",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/jobStatusCodes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryJobStatusCodeDictionaryResponse({}));
    }
    /**
     * 查询工作状态字典表
     * @returns QueryJobStatusCodeDictionaryResponse
     */
    async queryJobStatusCodeDictionary() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryJobStatusCodeDictionaryHeaders({});
        return await this.queryJobStatusCodeDictionaryWithOptions(headers, runtime);
    }
    /**
     * 查询医疗行业事件
     *
     * @param headers - QueryMedicalEventsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMedicalEventsResponse
     */
    async queryMedicalEventsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryMedicalEvents",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/events`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMedicalEventsResponse({}));
    }
    /**
     * 查询医疗行业事件
     * @returns QueryMedicalEventsResponse
     */
    async queryMedicalEvents() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMedicalEventsHeaders({});
        return await this.queryMedicalEventsWithOptions(headers, runtime);
    }
    /**
     * 查询用户的证书
     *
     * @param request - QueryUserCredentialsRequest
     * @param headers - QueryUserCredentialsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserCredentialsResponse
     */
    async queryUserCredentialsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserCredentials",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/credentials/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserCredentialsResponse({}));
    }
    /**
     * 查询用户的证书
     *
     * @param request - QueryUserCredentialsRequest
     * @returns QueryUserCredentialsResponse
     */
    async queryUserCredentials(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserCredentialsHeaders({});
        return await this.queryUserCredentialsWithOptions(request, headers, runtime);
    }
    /**
     * 查询人员的扩展信息
     *
     * @param headers - QueryUserExtInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserExtInfoResponse
     */
    async queryUserExtInfoWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryUserExtInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/${userId}/extInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserExtInfoResponse({}));
    }
    /**
     * 查询人员的扩展信息
     * @returns QueryUserExtInfoResponse
     */
    async queryUserExtInfo(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserExtInfoHeaders({});
        return await this.queryUserExtInfoWithOptions(userId, headers, runtime);
    }
    /**
     * 获取用户拓展字段
     *
     * @param request - QueryUserExtendValuesRequest
     * @param headers - QueryUserExtendValuesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserExtendValuesResponse
     */
    async queryUserExtendValuesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userExtendKey)) {
            body["userExtendKey"] = request.userExtendKey;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserExtendValues",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/extends/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserExtendValuesResponse({}));
    }
    /**
     * 获取用户拓展字段
     *
     * @param request - QueryUserExtendValuesRequest
     * @returns QueryUserExtendValuesResponse
     */
    async queryUserExtendValues(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserExtendValuesHeaders({});
        return await this.queryUserExtendValuesWithOptions(request, headers, runtime);
    }
    /**
     * 查询人员详情
     *
     * @param request - QueryUserInfoRequest
     * @param headers - QueryUserInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserInfoResponse
     */
    async queryUserInfoWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.monthMark)) {
            query["monthMark"] = request.monthMark;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserInfoResponse({}));
    }
    /**
     * 查询人员详情
     *
     * @param request - QueryUserInfoRequest
     * @returns QueryUserInfoResponse
     */
    async queryUserInfo(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserInfoHeaders({});
        return await this.queryUserInfoWithOptions(userId, request, headers, runtime);
    }
    /**
     * 查询人员属性字典表
     *
     * @param headers - QueryUserProbCodeDictionaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserProbCodeDictionaryResponse
     */
    async queryUserProbCodeDictionaryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryUserProbCodeDictionary",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/userProbCodes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserProbCodeDictionaryResponse({}));
    }
    /**
     * 查询人员属性字典表
     * @returns QueryUserProbCodeDictionaryResponse
     */
    async queryUserProbCodeDictionary() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserProbCodeDictionaryHeaders({});
        return await this.queryUserProbCodeDictionaryWithOptions(headers, runtime);
    }
    /**
     * 查询人员权限
     *
     * @param headers - QueryUserRolesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserRolesResponse
     */
    async queryUserRolesWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryUserRoles",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/${userId}/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserRolesResponse({}));
    }
    /**
     * 查询人员权限
     * @returns QueryUserRolesResponse
     */
    async queryUserRoles(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserRolesHeaders({});
        return await this.queryUserRolesWithOptions(userId, headers, runtime);
    }
    /**
     * 保存用户拓展字段
     *
     * @param request - SaveUserExtendValuesRequest
     * @param headers - SaveUserExtendValuesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveUserExtendValuesResponse
     */
    async saveUserExtendValuesWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userDisplayName)) {
            query["userDisplayName"] = request.userDisplayName;
        }
        if (!tea_util_1.default.isUnset(request.userExtendKey)) {
            query["userExtendKey"] = request.userExtendKey;
        }
        if (!tea_util_1.default.isUnset(request.userExtendValue)) {
            query["userExtendValue"] = request.userExtendValue;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SaveUserExtendValues",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/${userId}/extends`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveUserExtendValuesResponse({}));
    }
    /**
     * 保存用户拓展字段
     *
     * @param request - SaveUserExtendValuesRequest
     * @returns SaveUserExtendValuesResponse
     */
    async saveUserExtendValues(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveUserExtendValuesHeaders({});
        return await this.saveUserExtendValuesWithOptions(userId, request, headers, runtime);
    }
    /**
     * 提交ai解析任务
     *
     * @param request - SubmitTaskRequest
     * @param headers - SubmitTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubmitTaskResponse
     */
    async submitTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SubmitTask",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/ai/tasks/submit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubmitTaskResponse({}));
    }
    /**
     * 提交ai解析任务
     *
     * @param request - SubmitTaskRequest
     * @returns SubmitTaskResponse
     */
    async submitTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubmitTaskHeaders({});
        return await this.submitTaskWithOptions(request, headers, runtime);
    }
    /**
     * submitTaskPackage
     *
     * @param request - SubmitTaskPackageRequest
     * @param headers - SubmitTaskPackageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubmitTaskPackageResponse
     */
    async submitTaskPackageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.appSecret)) {
            body["appSecret"] = request.appSecret;
        }
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.fileType)) {
            body["fileType"] = request.fileType;
        }
        if (!tea_util_1.default.isUnset(request.taskPackageName)) {
            body["taskPackageName"] = request.taskPackageName;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SubmitTaskPackage",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/ai/taskPackages/submit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubmitTaskPackageResponse({}));
    }
    /**
     * submitTaskPackage
     *
     * @param request - SubmitTaskPackageRequest
     * @returns SubmitTaskPackageResponse
     */
    async submitTaskPackage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubmitTaskPackageHeaders({});
        return await this.submitTaskPackageWithOptions(request, headers, runtime);
    }
    /**
     * 增加角色或角色组
     *
     * @param request - SupplAddRoleRequest
     * @param headers - SupplAddRoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplAddRoleResponse
     */
    async supplAddRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.parentRoleGroupId)) {
            query["parentRoleGroupId"] = request.parentRoleGroupId;
        }
        if (!tea_util_1.default.isUnset(request.roleName)) {
            query["roleName"] = request.roleName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplAddRole",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/roles`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplAddRoleResponse({}));
    }
    /**
     * 增加角色或角色组
     *
     * @param request - SupplAddRoleRequest
     * @returns SupplAddRoleResponse
     */
    async supplAddRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplAddRoleHeaders({});
        return await this.supplAddRoleWithOptions(request, headers, runtime);
    }
    /**
     * 新增供应链节点
     *
     * @param request - SupplyAddDeptRequest
     * @param headers - SupplyAddDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyAddDeptResponse
     */
    async supplyAddDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptName)) {
            query["deptName"] = request.deptName;
        }
        if (!tea_util_1.default.isUnset(request.partnerNumber)) {
            query["partnerNumber"] = request.partnerNumber;
        }
        if (!tea_util_1.default.isUnset(request.superDeptId)) {
            query["superDeptId"] = request.superDeptId;
        }
        if (!tea_util_1.default.isUnset(request.supplyDeptType)) {
            query["supplyDeptType"] = request.supplyDeptType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyAddDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/departments`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyAddDeptResponse({}));
    }
    /**
     * 新增供应链节点
     *
     * @param request - SupplyAddDeptRequest
     * @returns SupplyAddDeptResponse
     */
    async supplyAddDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyAddDeptHeaders({});
        return await this.supplyAddDeptWithOptions(request, headers, runtime);
    }
    /**
     * 添加供应商人员
     *
     * @param request - SupplyAddMemberRequest
     * @param headers - SupplyAddMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyAddMemberResponse
     */
    async supplyAddMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isPartnerManager)) {
            query["isPartnerManager"] = request.isPartnerManager;
        }
        if (!tea_util_1.default.isUnset(request.memberMobile)) {
            query["memberMobile"] = request.memberMobile;
        }
        if (!tea_util_1.default.isUnset(request.memberName)) {
            query["memberName"] = request.memberName;
        }
        if (!tea_util_1.default.isUnset(request.memberTitle)) {
            query["memberTitle"] = request.memberTitle;
        }
        if (!tea_util_1.default.isUnset(request.memberWorkNumber)) {
            query["memberWorkNumber"] = request.memberWorkNumber;
        }
        if (!tea_util_1.default.isUnset(request.supplyDeptId)) {
            query["supplyDeptId"] = request.supplyDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyAddMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyAddMemberResponse({}));
    }
    /**
     * 添加供应商人员
     *
     * @param request - SupplyAddMemberRequest
     * @returns SupplyAddMemberResponse
     */
    async supplyAddMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyAddMemberHeaders({});
        return await this.supplyAddMemberWithOptions(request, headers, runtime);
    }
    /**
     * 添加伙伴负责人
     *
     * @param request - SupplyAddPartnerAdminsRequest
     * @param headers - SupplyAddPartnerAdminsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyAddPartnerAdminsResponse
     */
    async supplyAddPartnerAdminsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyAddPartnerAdmins",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerAdministrators`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyAddPartnerAdminsResponse({}));
    }
    /**
     * 添加伙伴负责人
     *
     * @param request - SupplyAddPartnerAdminsRequest
     * @returns SupplyAddPartnerAdminsResponse
     */
    async supplyAddPartnerAdmins(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyAddPartnerAdminsHeaders({});
        return await this.supplyAddPartnerAdminsWithOptions(request, headers, runtime);
    }
    /**
     * 添加伙伴的对接人或对接部门
     *
     * @param request - SupplyAddPartnerManagersRequest
     * @param headers - SupplyAddPartnerManagersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyAddPartnerManagersResponse
     */
    async supplyAddPartnerManagersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.interfaceId)) {
            query["interfaceId"] = request.interfaceId;
        }
        if (!tea_util_1.default.isUnset(request.interfaceType)) {
            query["interfaceType"] = request.interfaceType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyAddPartnerManagers",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerInterfaces`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyAddPartnerManagersResponse({}));
    }
    /**
     * 添加伙伴的对接人或对接部门
     *
     * @param request - SupplyAddPartnerManagersRequest
     * @returns SupplyAddPartnerManagersResponse
     */
    async supplyAddPartnerManagers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyAddPartnerManagersHeaders({});
        return await this.supplyAddPartnerManagersWithOptions(request, headers, runtime);
    }
    /**
     * 添加伙伴标签
     *
     * @param request - SupplyAddPartnerTypeRequest
     * @param headers - SupplyAddPartnerTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyAddPartnerTypeResponse
     */
    async supplyAddPartnerTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            query["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            query["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyAddPartnerType",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerLabels`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyAddPartnerTypeResponse({}));
    }
    /**
     * 添加伙伴标签
     *
     * @param request - SupplyAddPartnerTypeRequest
     * @returns SupplyAddPartnerTypeResponse
     */
    async supplyAddPartnerType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyAddPartnerTypeHeaders({});
        return await this.supplyAddPartnerTypeWithOptions(request, headers, runtime);
    }
    /**
     * 删除上下游节点
     *
     * @param request - SupplyChainDeleteDeptRequest
     * @param headers - SupplyChainDeleteDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyChainDeleteDeptResponse
     */
    async supplyChainDeleteDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.supplyDeptId)) {
            query["supplyDeptId"] = request.supplyDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyChainDeleteDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/departments`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyChainDeleteDeptResponse({}));
    }
    /**
     * 删除上下游节点
     *
     * @param request - SupplyChainDeleteDeptRequest
     * @returns SupplyChainDeleteDeptResponse
     */
    async supplyChainDeleteDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyChainDeleteDeptHeaders({});
        return await this.supplyChainDeleteDeptWithOptions(request, headers, runtime);
    }
    /**
     * 查询上下游节点信息
     *
     * @param request - SupplyChainQueryDeptInfoRequest
     * @param headers - SupplyChainQueryDeptInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyChainQueryDeptInfoResponse
     */
    async supplyChainQueryDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.supplyDeptId)) {
            query["supplyDeptId"] = request.supplyDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyChainQueryDeptInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/departments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyChainQueryDeptInfoResponse({}));
    }
    /**
     * 查询上下游节点信息
     *
     * @param request - SupplyChainQueryDeptInfoRequest
     * @returns SupplyChainQueryDeptInfoResponse
     */
    async supplyChainQueryDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyChainQueryDeptInfoHeaders({});
        return await this.supplyChainQueryDeptInfoWithOptions(request, headers, runtime);
    }
    /**
     * 更新上下游节点信息
     *
     * @param request - SupplyChainUpdateDeptInfoRequest
     * @param headers - SupplyChainUpdateDeptInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyChainUpdateDeptInfoResponse
     */
    async supplyChainUpdateDeptInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.partnerNumber)) {
            body["partnerNumber"] = request.partnerNumber;
        }
        if (!tea_util_1.default.isUnset(request.partnerTypeList)) {
            body["partnerTypeList"] = request.partnerTypeList;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            body["superId"] = request.superId;
        }
        if (!tea_util_1.default.isUnset(request.supplyDeptId)) {
            body["supplyDeptId"] = request.supplyDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SupplyChainUpdateDeptInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/departments`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyChainUpdateDeptInfoResponse({}));
    }
    /**
     * 更新上下游节点信息
     *
     * @param request - SupplyChainUpdateDeptInfoRequest
     * @returns SupplyChainUpdateDeptInfoResponse
     */
    async supplyChainUpdateDeptInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyChainUpdateDeptInfoHeaders({});
        return await this.supplyChainUpdateDeptInfoWithOptions(request, headers, runtime);
    }
    /**
     * 删除伙伴成员
     *
     * @param request - SupplyDeleteMemberRequest
     * @param headers - SupplyDeleteMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyDeleteMemberResponse
     */
    async supplyDeleteMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyDeleteMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/members`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyDeleteMemberResponse({}));
    }
    /**
     * 删除伙伴成员
     *
     * @param request - SupplyDeleteMemberRequest
     * @returns SupplyDeleteMemberResponse
     */
    async supplyDeleteMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyDeleteMemberHeaders({});
        return await this.supplyDeleteMemberWithOptions(request, headers, runtime);
    }
    /**
     * 删除伙伴负责人
     *
     * @param request - SupplyDeletePartnerAdminsRequest
     * @param headers - SupplyDeletePartnerAdminsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyDeletePartnerAdminsResponse
     */
    async supplyDeletePartnerAdminsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyDeletePartnerAdmins",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerAdministrators`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyDeletePartnerAdminsResponse({}));
    }
    /**
     * 删除伙伴负责人
     *
     * @param request - SupplyDeletePartnerAdminsRequest
     * @returns SupplyDeletePartnerAdminsResponse
     */
    async supplyDeletePartnerAdmins(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyDeletePartnerAdminsHeaders({});
        return await this.supplyDeletePartnerAdminsWithOptions(request, headers, runtime);
    }
    /**
     * 移除伙伴的对接人或对接部门
     *
     * @param request - SupplyDeletePartnerManagersRequest
     * @param headers - SupplyDeletePartnerManagersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyDeletePartnerManagersResponse
     */
    async supplyDeletePartnerManagersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.interfaceId)) {
            query["interfaceId"] = request.interfaceId;
        }
        if (!tea_util_1.default.isUnset(request.interfaceType)) {
            query["interfaceType"] = request.interfaceType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyDeletePartnerManagers",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerInterfaces`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyDeletePartnerManagersResponse({}));
    }
    /**
     * 移除伙伴的对接人或对接部门
     *
     * @param request - SupplyDeletePartnerManagersRequest
     * @returns SupplyDeletePartnerManagersResponse
     */
    async supplyDeletePartnerManagers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyDeletePartnerManagersHeaders({});
        return await this.supplyDeletePartnerManagersWithOptions(request, headers, runtime);
    }
    /**
     * 删除伙伴标签
     *
     * @param request - SupplyDeletePartnerTypeRequest
     * @param headers - SupplyDeletePartnerTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyDeletePartnerTypeResponse
     */
    async supplyDeletePartnerTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.labelId)) {
            query["labelId"] = request.labelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyDeletePartnerType",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerLabels`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyDeletePartnerTypeResponse({}));
    }
    /**
     * 删除伙伴标签
     *
     * @param request - SupplyDeletePartnerTypeRequest
     * @returns SupplyDeletePartnerTypeResponse
     */
    async supplyDeletePartnerType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyDeletePartnerTypeHeaders({});
        return await this.supplyDeletePartnerTypeWithOptions(request, headers, runtime);
    }
    /**
     * 删除角色或角色组
     *
     * @param request - SupplyDeleteRoleRequest
     * @param headers - SupplyDeleteRoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyDeleteRoleResponse
     */
    async supplyDeleteRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isRoleGroup)) {
            query["isRoleGroup"] = request.isRoleGroup;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            query["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyDeleteRole",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/roles`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyDeleteRoleResponse({}));
    }
    /**
     * 删除角色或角色组
     *
     * @param request - SupplyDeleteRoleRequest
     * @returns SupplyDeleteRoleResponse
     */
    async supplyDeleteRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyDeleteRoleHeaders({});
        return await this.supplyDeleteRoleWithOptions(request, headers, runtime);
    }
    /**
     * 获取供应链成员信息
     *
     * @param request - SupplyGetMemberRequest
     * @param headers - SupplyGetMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyGetMemberResponse
     */
    async supplyGetMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyGetMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyGetMemberResponse({}));
    }
    /**
     * 获取供应链成员信息
     *
     * @param request - SupplyGetMemberRequest
     * @returns SupplyGetMemberResponse
     */
    async supplyGetMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyGetMemberHeaders({});
        return await this.supplyGetMemberWithOptions(request, headers, runtime);
    }
    /**
     * 获取供应链部门下成员
     *
     * @param request - SupplyListDeptMembersRequest
     * @param headers - SupplyListDeptMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyListDeptMembersResponse
     */
    async supplyListDeptMembersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.supplyDeptId)) {
            query["supplyDeptId"] = request.supplyDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyListDeptMembers",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/departments/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyListDeptMembersResponse({}));
    }
    /**
     * 获取供应链部门下成员
     *
     * @param request - SupplyListDeptMembersRequest
     * @returns SupplyListDeptMembersResponse
     */
    async supplyListDeptMembers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyListDeptMembersHeaders({});
        return await this.supplyListDeptMembersWithOptions(request, headers, runtime);
    }
    /**
     * 获取伙伴负责人列表
     *
     * @param request - SupplyListPartnerAdminsRequest
     * @param headers - SupplyListPartnerAdminsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyListPartnerAdminsResponse
     */
    async supplyListPartnerAdminsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyListPartnerAdmins",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerAdministrators`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyListPartnerAdminsResponse({}));
    }
    /**
     * 获取伙伴负责人列表
     *
     * @param request - SupplyListPartnerAdminsRequest
     * @returns SupplyListPartnerAdminsResponse
     */
    async supplyListPartnerAdmins(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyListPartnerAdminsHeaders({});
        return await this.supplyListPartnerAdminsWithOptions(request, headers, runtime);
    }
    /**
     * 获取伙伴的对接人/对接部门
     *
     * @param request - SupplyListPartnerManagersRequest
     * @param headers - SupplyListPartnerManagersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyListPartnerManagersResponse
     */
    async supplyListPartnerManagersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyListPartnerManagers",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerInterfaces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyListPartnerManagersResponse({}));
    }
    /**
     * 获取伙伴的对接人/对接部门
     *
     * @param request - SupplyListPartnerManagersRequest
     * @returns SupplyListPartnerManagersResponse
     */
    async supplyListPartnerManagers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyListPartnerManagersHeaders({});
        return await this.supplyListPartnerManagersWithOptions(request, headers, runtime);
    }
    /**
     * 查询下级伙伴标签
     *
     * @param request - SupplyListPartnerTypeRequest
     * @param headers - SupplyListPartnerTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyListPartnerTypeResponse
     */
    async supplyListPartnerTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.labelId)) {
            query["labelId"] = request.labelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyListPartnerType",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerLabels/subLabels`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyListPartnerTypeResponse({}));
    }
    /**
     * 查询下级伙伴标签
     *
     * @param request - SupplyListPartnerTypeRequest
     * @returns SupplyListPartnerTypeResponse
     */
    async supplyListPartnerType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyListPartnerTypeHeaders({});
        return await this.supplyListPartnerTypeWithOptions(request, headers, runtime);
    }
    /**
     * 查询角色组或角色
     *
     * @param request - SupplyListRoleRequest
     * @param headers - SupplyListRoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyListRoleResponse
     */
    async supplyListRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.parentRoleId)) {
            query["parentRoleId"] = request.parentRoleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyListRole",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyListRoleResponse({}));
    }
    /**
     * 查询角色组或角色
     *
     * @param request - SupplyListRoleRequest
     * @returns SupplyListRoleResponse
     */
    async supplyListRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyListRoleHeaders({});
        return await this.supplyListRoleWithOptions(request, headers, runtime);
    }
    /**
     * 查询下级节点列表
     *
     * @param request - SupplyListSubDeptRequest
     * @param headers - SupplyListSubDeptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyListSubDeptResponse
     */
    async supplyListSubDeptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.supplyDeptId)) {
            query["supplyDeptId"] = request.supplyDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyListSubDept",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/subDepartments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyListSubDeptResponse({}));
    }
    /**
     * 查询下级节点列表
     *
     * @param request - SupplyListSubDeptRequest
     * @returns SupplyListSubDeptResponse
     */
    async supplyListSubDept(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyListSubDeptHeaders({});
        return await this.supplyListSubDeptWithOptions(request, headers, runtime);
    }
    /**
     * 查询伙伴标签
     *
     * @param request - SupplyQueryPartnerTypeRequest
     * @param headers - SupplyQueryPartnerTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyQueryPartnerTypeResponse
     */
    async supplyQueryPartnerTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.labelId)) {
            query["labelId"] = request.labelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyQueryPartnerType",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerLabels`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyQueryPartnerTypeResponse({}));
    }
    /**
     * 查询伙伴标签
     *
     * @param request - SupplyQueryPartnerTypeRequest
     * @returns SupplyQueryPartnerTypeResponse
     */
    async supplyQueryPartnerType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyQueryPartnerTypeHeaders({});
        return await this.supplyQueryPartnerTypeWithOptions(request, headers, runtime);
    }
    /**
     * 更新供应商人员信息
     *
     * @param request - SupplyUpdateMemberRequest
     * @param headers - SupplyUpdateMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyUpdateMemberResponse
     */
    async supplyUpdateMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.isCopyDept)) {
            body["isCopyDept"] = request.isCopyDept;
        }
        if (!tea_util_1.default.isUnset(request.memberTitle)) {
            body["memberTitle"] = request.memberTitle;
        }
        if (!tea_util_1.default.isUnset(request.memberWorkNumber)) {
            body["memberWorkNumber"] = request.memberWorkNumber;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            body["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.newDeptId)) {
            body["newDeptId"] = request.newDeptId;
        }
        if (!tea_util_1.default.isUnset(request.oldDeptId)) {
            body["oldDeptId"] = request.oldDeptId;
        }
        if (!tea_util_1.default.isUnset(request.roleIdList)) {
            body["roleIdList"] = request.roleIdList;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SupplyUpdateMember",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/members`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyUpdateMemberResponse({}));
    }
    /**
     * 更新供应商人员信息
     *
     * @param request - SupplyUpdateMemberRequest
     * @returns SupplyUpdateMemberResponse
     */
    async supplyUpdateMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyUpdateMemberHeaders({});
        return await this.supplyUpdateMemberWithOptions(request, headers, runtime);
    }
    /**
     * 更新伙伴标签
     *
     * @param request - SupplyUpdatePartnerTypeRequest
     * @param headers - SupplyUpdatePartnerTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyUpdatePartnerTypeResponse
     */
    async supplyUpdatePartnerTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.labelId)) {
            query["labelId"] = request.labelId;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.superId)) {
            query["superId"] = request.superId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyUpdatePartnerType",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/partnerLabels`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyUpdatePartnerTypeResponse({}));
    }
    /**
     * 更新伙伴标签
     *
     * @param request - SupplyUpdatePartnerTypeRequest
     * @returns SupplyUpdatePartnerTypeResponse
     */
    async supplyUpdatePartnerType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyUpdatePartnerTypeHeaders({});
        return await this.supplyUpdatePartnerTypeWithOptions(request, headers, runtime);
    }
    /**
     * 更新角色或角色组
     *
     * @param request - SupplyUpdateRoleRequest
     * @param headers - SupplyUpdateRoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SupplyUpdateRoleResponse
     */
    async supplyUpdateRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isRoleGroup)) {
            query["isRoleGroup"] = request.isRoleGroup;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            query["roleId"] = request.roleId;
        }
        if (!tea_util_1.default.isUnset(request.roleName)) {
            query["roleName"] = request.roleName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SupplyUpdateRole",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/supplyChains/roles`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SupplyUpdateRoleResponse({}));
    }
    /**
     * 更新角色或角色组
     *
     * @param request - SupplyUpdateRoleRequest
     * @returns SupplyUpdateRoleResponse
     */
    async supplyUpdateRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SupplyUpdateRoleHeaders({});
        return await this.supplyUpdateRoleWithOptions(request, headers, runtime);
    }
    /**
     * 更新医疗用户扩展信息
     *
     * @param request - UpdateUserExtendInfoRequest
     * @param headers - UpdateUserExtendInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUserExtendInfoResponse
     */
    async updateUserExtendInfoWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.comments)) {
            body["comments"] = request.comments;
        }
        if (!tea_util_1.default.isUnset(request.jobCode)) {
            body["jobCode"] = request.jobCode;
        }
        if (!tea_util_1.default.isUnset(request.jobStatusCode)) {
            body["jobStatusCode"] = request.jobStatusCode;
        }
        if (!tea_util_1.default.isUnset(request.userProbCode)) {
            body["userProbCode"] = request.userProbCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateUserExtendInfo",
            version: "industry_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/industry/medicals/users/${userId}/extInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateUserExtendInfoResponse({}));
    }
    /**
     * 更新医疗用户扩展信息
     *
     * @param request - UpdateUserExtendInfoRequest
     * @returns UpdateUserExtendInfoResponse
     */
    async updateUserExtendInfo(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateUserExtendInfoHeaders({});
        return await this.updateUserExtendInfoWithOptions(userId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map