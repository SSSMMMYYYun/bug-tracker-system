/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetCallBackFaileResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCallBackFaileResultRequest extends $tea.Model {
    /**
     * @example
     * 1606126433000
     */
    beginTime?: number;
    /**
     * @example
     * 1606126493000
     */
    endTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCallBackFaileResultResponseBody extends $tea.Model {
    failedList?: GetCallBackFaileResultResponseBodyFailedList[];
    hasMore?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCallBackFaileResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCallBackFaileResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAppRequest extends $tea.Model {
    appId?: number;
    corpId?: string;
    dingUserId?: string;
    suiteId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAppResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAppResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    feature?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    installUid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    options?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    suiteId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    featureShrink?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    installUid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    optionsShrink?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    suiteId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallCoolAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RePushSuiteTicketRequest extends $tea.Model {
    suiteId?: number;
    suiteSecret?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RePushSuiteTicketResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RePushSuiteTicketResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RePushSuiteTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCallBackFaileResultResponseBodyFailedList extends $tea.Model {
    /**
     * @example
     * {\"CalendarEventUpdateTime\":1668735924619,\"CorpId\":\"ding9**cd16741\",\"ChangeType\":\"updated\",\"EventType\":\"calendar_event_change\",\"CalendarId\":\"NzE3MjU0NEB1c2V***5jb218MTQwMDE2\",\"EventTime\":1668735924640,\"LegacyCalendarEventId\":\"1C1BB56076***8A338\",\"BizId\":\"1668**4640\",\"CalendarEventId\":\"RVNUZllHK**elEydz09\",\"operator\":{\"type\":\"user\"},\"UnionIdList\":[\"QQa**mYiE\"]}
     */
    callBackData?: string;
    /**
     * @example
     * calendar_event_change
     */
    callBackTag?: string;
    /**
     * @example
     * ding9f50b15b*****41
     */
    corpId?: string;
    /**
     * @example
     * 166***39184
     */
    eventTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 调用本获取推送失败的变更事件。
     *
     * @param request - GetCallBackFaileResultRequest
     * @param headers - GetCallBackFaileResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCallBackFaileResultResponse
     */
    getCallBackFaileResultWithOptions(request: GetCallBackFaileResultRequest, headers: GetCallBackFaileResultHeaders, runtime: $Util.RuntimeOptions): Promise<GetCallBackFaileResultResponse>;
    /**
     * 调用本获取推送失败的变更事件。
     *
     * @param request - GetCallBackFaileResultRequest
     * @returns GetCallBackFaileResultResponse
     */
    getCallBackFaileResult(request: GetCallBackFaileResultRequest): Promise<GetCallBackFaileResultResponse>;
    /**
     * 安装一方应用
     *
     * @param request - InstallAppRequest
     * @param headers - InstallAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InstallAppResponse
     */
    installAppWithOptions(request: InstallAppRequest, headers: InstallAppHeaders, runtime: $Util.RuntimeOptions): Promise<InstallAppResponse>;
    /**
     * 安装一方应用
     *
     * @param request - InstallAppRequest
     * @returns InstallAppResponse
     */
    installApp(request: InstallAppRequest): Promise<InstallAppResponse>;
    /**
     * 安装酷应用
     *
     * @param tmpReq - InstallCoolAppRequest
     * @param headers - InstallCoolAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InstallCoolAppResponse
     */
    installCoolAppWithOptions(tmpReq: InstallCoolAppRequest, headers: InstallCoolAppHeaders, runtime: $Util.RuntimeOptions): Promise<InstallCoolAppResponse>;
    /**
     * 安装酷应用
     *
     * @param request - InstallCoolAppRequest
     * @returns InstallCoolAppResponse
     */
    installCoolApp(request: InstallCoolAppRequest): Promise<InstallCoolAppResponse>;
    /**
     * 重新获取suiteTicket
     *
     * @param request - RePushSuiteTicketRequest
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RePushSuiteTicketResponse
     */
    rePushSuiteTicketWithOptions(request: RePushSuiteTicketRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<RePushSuiteTicketResponse>;
    /**
     * 重新获取suiteTicket
     *
     * @param request - RePushSuiteTicketRequest
     * @returns RePushSuiteTicketResponse
     */
    rePushSuiteTicket(request: RePushSuiteTicketRequest): Promise<RePushSuiteTicketResponse>;
}
