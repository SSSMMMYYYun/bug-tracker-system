/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AnalysisReportHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportRequest extends $tea.Model {
    filter?: AnalysisReportRequestFilter;
    reportId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportResponseBody extends $tea.Model {
    result?: AnalysisReportResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AnalysisReportResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 明天12点前完成周报撰写
     */
    content?: string;
    /**
     * @example
     * false
     *
     * **if can be null:**
     * true
     */
    disableActivity?: boolean;
    /**
     * @example
     * false
     *
     * **if can be null:**
     * true
     */
    disableNotification?: boolean;
    /**
     * @example
     * 2021-08-13T07:36:50.318Z
     */
    dueDate?: string;
    /**
     * @example
     * 173xxxx
     */
    executorId?: string;
    involveMembers?: string[];
    /**
     * @example
     * 我是一条任务备注
     */
    note?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * involves
     */
    visible?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskResponseBody extends $tea.Model {
    result?: CreateOrganizationTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateOrganizationTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectMembersV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectMembersV3Request extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectMembersV3ResponseBody extends $tea.Model {
    requestId?: string;
    result?: CreateProjectMembersV3ResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectMembersV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateProjectMembersV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectV3Request extends $tea.Model {
    name?: string;
    organizationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectV3ResponseBody extends $tea.Model {
    requestId?: string;
    result?: CreateProjectV3ResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateProjectV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 任务标题
     */
    content?: string;
    customfields?: CreateTaskRequestCustomfields[];
    disableActivity?: boolean;
    disableNotification?: boolean;
    /**
     * @example
     * 2022-06-13T07:36:50.318Z
     */
    dueDate?: string;
    /**
     * @example
     * 173xxxx
     */
    executorId?: string;
    /**
     * @example
     * 我是一条任务备注
     */
    note?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 62c25e3b376exxxxxx
     */
    projectId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskResponseBody extends $tea.Model {
    result?: CreateTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProjectMembersV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProjectMembersV3Request extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProjectMembersV3ResponseBody extends $tea.Model {
    errors?: DeleteProjectMembersV3ResponseBodyErrors[];
    requestId?: string;
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProjectMembersV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteProjectMembersV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintProjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintProjectResponseBody extends $tea.Model {
    result?: GetFootprintProjectResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintProjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFootprintProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintTaskResponseBody extends $tea.Model {
    result?: GetFootprintTaskResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFootprintTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFreeTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFreeTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0517xxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFreeTaskResponseBody extends $tea.Model {
    requestId?: string;
    result?: GetFreeTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFreeTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFreeTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectMembersV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectMembersV3Request extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    projectRoleId?: string;
    userIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectMembersV3ResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    requestId?: string;
    result?: GetProjectMembersV3ResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectMembersV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetProjectMembersV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectRolesV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectRolesV3Request extends $tea.Model {
    includeHidden?: boolean;
    level?: number;
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectRolesV3ResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    requestId?: string;
    result?: GetProjectRolesV3ResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectRolesV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetProjectRolesV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStaredProjectsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStaredProjectsRequest extends $tea.Model {
    /**
     * @example
     * 10
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @example
     * updated:desc
     */
    sortBy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStaredProjectsResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStaredProjectsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetStaredProjectsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTbUserIdByDingUserIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTbUserIdByDingUserIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dingUserIds?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0517xxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTbUserIdByDingUserIdResponseBody extends $tea.Model {
    requestId?: string;
    result?: GetTbUserIdByDingUserIdResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTbUserIdByDingUserIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTbUserIdByDingUserIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingOrgIdByDingOrgIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingOrgIdByDingOrgIdResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: GetThingOrgIdByDingOrgIdResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingOrgIdByDingOrgIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetThingOrgIdByDingOrgIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserJoinedProjectsV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserJoinedProjectsV3Request extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    projectIds?: string;
    projectRoleLevels?: string;
    sortBy?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserJoinedProjectsV3ResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    requestId?: string;
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserJoinedProjectsV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserJoinedProjectsV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBody extends $tea.Model {
    result?: ListAllTaskViewResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAllTaskViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    result?: ListMyShortcutViewsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListMyShortcutViewsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskResponseBody extends $tea.Model {
    requestId?: string;
    result?: QueryAllTaskResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    tql?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    requestId?: string;
    result?: QueryTaskResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3Request extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3ResponseBody extends $tea.Model {
    requestId?: string;
    result?: QueryTasksV3ResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTasksV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAllTasksByTqlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAllTasksByTqlRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    tql?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0517xxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAllTasksByTqlResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    requestId?: string;
    result?: string[];
    totalSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchAllTasksByTqlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchAllTasksByTqlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchProjectsV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchProjectsV3Request extends $tea.Model {
    includeTemplate?: boolean;
    maxResults?: number;
    name?: string;
    nextToken?: string;
    projectIds?: string;
    sourceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0517xxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchProjectsV3ResponseBody extends $tea.Model {
    /**
     * @example
     * f279e812-e431-428d-846d-cxxxxxx
     */
    nextToken?: string;
    requestId?: string;
    result?: SearchProjectsV3ResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchProjectsV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchProjectsV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectMemberRoleV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectMemberRoleV3Request extends $tea.Model {
    roleIds?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectMemberRoleV3ResponseBody extends $tea.Model {
    requestId?: string;
    result?: UpdateProjectMemberRoleV3ResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectMemberRoleV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateProjectMemberRoleV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectV3Headers extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectV3Request extends $tea.Model {
    description?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectV3ResponseBody extends $tea.Model {
    requestId?: string;
    result?: UpdateProjectV3ResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectV3Response extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateProjectV3ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportRequestFilter extends $tea.Model {
    created?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportResponseBodyResultCols extends $tea.Model {
    baseType?: string;
    name?: string;
    theme?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportResponseBodyResultListQuery extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportResponseBodyResultVisualizationSettings extends $tea.Model {
    dimension?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnalysisReportResponseBodyResult extends $tea.Model {
    cols?: AnalysisReportResponseBodyResultCols[];
    listQuery?: AnalysisReportResponseBodyResultListQuery[][];
    name?: string;
    rows?: string[][];
    tips?: string;
    title?: string;
    visualizationSettings?: AnalysisReportResponseBodyResultVisualizationSettings;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskResponseBodyResultCreator extends $tea.Model {
    /**
     * @example
     * https://xxxxxxxxxx
     */
    avatarUrl?: string;
    /**
     * @example
     * 鬼斩
     */
    name?: string;
    /**
     * @example
     * 173xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskResponseBodyResultExecutor extends $tea.Model {
    /**
     * @example
     * https://xxxxxxxxxx
     */
    avatarUrl?: string;
    /**
     * @example
     * 鬼斩
     */
    name?: string;
    /**
     * @example
     * 173xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskResponseBodyResultInvolvers extends $tea.Model {
    /**
     * @example
     * httpx://xxx
     */
    avatarUrl?: string;
    /**
     * @example
     * 173xxxx
     */
    id?: string;
    /**
     * @example
     * 鬼斩
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrganizationTaskResponseBodyResult extends $tea.Model {
    ancestorIds?: string[];
    /**
     * @example
     * 0
     */
    attachmentsCount?: number;
    /**
     * @example
     * 明天12点前写好周报
     */
    content?: string;
    /**
     * @example
     * 2021-08-13T07:36:50.318Z
     */
    created?: string;
    creator?: CreateOrganizationTaskResponseBodyResultCreator;
    /**
     * @example
     * 173xxxx
     */
    creatorId?: string;
    /**
     * @example
     * 2021-08-13T07:36:50.318Z
     */
    dueDate?: string;
    executor?: CreateOrganizationTaskResponseBodyResultExecutor;
    /**
     * @example
     * 173xxxx
     */
    executorId?: string;
    /**
     * @example
     * false
     */
    hasReminder?: boolean;
    /**
     * @example
     * 62a697c053c2ef5xxxxxx
     */
    id?: string;
    involveMembers?: string[];
    involvers?: CreateOrganizationTaskResponseBodyResultInvolvers[];
    /**
     * @example
     * false
     */
    isDeleted?: boolean;
    /**
     * @example
     * false
     */
    isDone?: string;
    /**
     * @example
     * 我是一条备注哦
     */
    note?: string;
    /**
     * @example
     * 2021-08-13T07:36:50.318Z
     */
    updated?: string;
    /**
     * @example
     * members
     */
    visible?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectMembersV3ResponseBodyResult extends $tea.Model {
    boundToObjectId?: string;
    boundToObjectType?: string;
    joined?: string;
    role?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProjectV3ResponseBodyResult extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskRequestCustomfieldsValue extends $tea.Model {
    id?: string;
    thumbUrl?: string;
    /**
     * @example
     * 我是自定义字段显示值
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskRequestCustomfields extends $tea.Model {
    /**
     * @example
     * 62fb0bxxxxxxx
     */
    customfieldId?: string;
    /**
     * @example
     * 自定义字段-文本
     */
    customfieldName?: string;
    value?: CreateTaskRequestCustomfieldsValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskResponseBodyResultCustomfieldsValue extends $tea.Model {
    /**
     * @example
     * 我是自定义字段显示值
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskResponseBodyResultCustomfields extends $tea.Model {
    /**
     * @example
     * 625bcxdxxxxxx
     */
    customfieldId?: string;
    value?: CreateTaskResponseBodyResultCustomfieldsValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTaskResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 任务标题
     */
    content?: string;
    /**
     * @example
     * 2021-08-13T07:36:50.318Z
     */
    created?: string;
    /**
     * @example
     * 173xxxxx
     */
    creatorId?: string;
    customfields?: CreateTaskResponseBodyResultCustomfields[];
    /**
     * @example
     * 2022-08-13T07:36:50.318Z
     */
    dueDate?: string;
    /**
     * @example
     * 173xxxx
     */
    executorId?: string;
    involveMembers?: string[];
    /**
     * @example
     * 我是一条备注
     */
    note?: string;
    /**
     * @example
     * -10
     */
    priority?: number;
    /**
     * @example
     * 62c25e3b376ecxxxxxx
     */
    projectId?: string;
    /**
     * @example
     * 62a697c053c2ef5xxxxxx
     */
    taskId?: string;
    /**
     * @example
     * 2021-08-13T07:36:50.318Z
     */
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProjectMembersV3ResponseBodyErrors extends $tea.Model {
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintProjectResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    /**
     * @example
     * 5f687406f05b283425ea8f6f
     */
    creatorId?: string;
    /**
     * @example
     * xxxx
     */
    description?: string;
    /**
     * @example
     * 1234
     */
    id?: string;
    /**
     * @example
     * true
     */
    isDeleted?: boolean;
    /**
     * @example
     * https://things.teambition.net?icon_logo=%F0%9F%92%A5
     */
    logo?: string;
    /**
     * @example
     * x项目
     */
    name?: string;
    /**
     * @example
     * 6139cd1aba5b128516ec8c86
     */
    organizationId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    /**
     * @example
     * project
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintTaskResponseBodyResultCustomfields extends $tea.Model {
    /**
     * @example
     * 666a472803e46df8ce98a4a5
     */
    customfieldId?: string;
    /**
     * @example
     * date
     */
    type?: string;
    value?: {
        [key: string]: any;
    }[];
    values?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFootprintTaskResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 2024-09-19T11:07:51.468Z
     */
    accomplished?: string;
    basicPos?: string;
    content?: string;
    created?: string;
    creatorId?: string;
    customfields?: GetFootprintTaskResponseBodyResultCustomfields[];
    /**
     * @example
     * 2024-09-13T10:00:00.000Z
     */
    dueDate?: string;
    executorId?: string;
    id?: string;
    involveMembers?: string[];
    /**
     * @example
     * false
     */
    isArchived?: boolean;
    isDeleted?: boolean;
    /**
     * @example
     * true
     */
    isDone?: boolean;
    /**
     * @example
     * test123
     */
    note?: string;
    organizationId?: string;
    /**
     * @example
     * 0
     */
    pos?: number;
    /**
     * @example
     * 0
     */
    priority?: number;
    projectId?: string;
    sfcId?: string;
    /**
     * @example
     * 6639f974916cdb178e7d***
     */
    stageId?: string;
    /**
     * @example
     * 2024-09-13T10:00:00.000Z
     */
    startDate?: string;
    /**
     * @example
     * 6639f974916cdb178e7d***
     */
    tasklistId?: string;
    /**
     * @example
     * 6639f974916cdb178e7****
     */
    tfsId?: string;
    /**
     * @example
     * 540
     */
    uniqueId?: number;
    updated?: string;
    /**
     * @example
     * members
     */
    visible?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFreeTaskResponseBodyResult extends $tea.Model {
    accomplished?: string;
    ancestorIds?: string[];
    content?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    creatorId?: string;
    dueDate?: string;
    executorId?: string;
    id?: string;
    involveMembers?: string[];
    isArchive?: boolean;
    isDone?: boolean;
    note?: string;
    organizationId?: string;
    priority?: number;
    recurrence?: string[];
    sourceId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    startDate?: string;
    tagIds?: string[];
    uniqueId?: number;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    visible?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectMembersV3ResponseBodyResult extends $tea.Model {
    role?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectRolesV3ResponseBodyResult extends $tea.Model {
    display?: boolean;
    id?: string;
    isDefaultRole?: boolean;
    level?: number;
    name?: string;
    originalId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTbUserIdByDingUserIdResponseBodyResult extends $tea.Model {
    dingtalkUserId?: string;
    tbUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetThingOrgIdByDingOrgIdResponseBodyResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 50c32afae8cf1439xxxx
     */
    tbOrganizationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilterConditionsOp extends $tea.Model {
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilterConditionsValues extends $tea.Model {
    deep?: string;
    id?: string;
    label?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilterConditions extends $tea.Model {
    fixed?: boolean;
    key?: string;
    op?: ListAllTaskViewResponseBodyResultFilterConditionsOp;
    values?: ListAllTaskViewResponseBodyResultFilterConditionsValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilterInvisibleConditionsOp extends $tea.Model {
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilterInvisibleConditionsValues extends $tea.Model {
    deep?: string;
    id?: string;
    label?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilterInvisibleConditions extends $tea.Model {
    fixed?: boolean;
    key?: string;
    op?: ListAllTaskViewResponseBodyResultFilterInvisibleConditionsOp;
    values?: ListAllTaskViewResponseBodyResultFilterInvisibleConditionsValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultFilter extends $tea.Model {
    conditions?: ListAllTaskViewResponseBodyResultFilterConditions[];
    invisibleConditions?: ListAllTaskViewResponseBodyResultFilterInvisibleConditions[];
    logic?: string;
    logicDisabled?: boolean;
    q?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultGroupType extends $tea.Model {
    canCreateGroup?: boolean;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultOrderType extends $tea.Model {
    direction?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultShowType extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultToolbarInfoGroupTypesSetting extends $tea.Model {
    dateType?: string;
    fieldName?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultToolbarInfoGroupTypes extends $tea.Model {
    canCreateGroup?: boolean;
    name?: string;
    serviceName?: string;
    setting?: ListAllTaskViewResponseBodyResultToolbarInfoGroupTypesSetting;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultToolbarInfoOrderTypes extends $tea.Model {
    direction?: string;
    name?: string;
    supportDirection?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultToolbarInfoShowTypes extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultToolbarInfo extends $tea.Model {
    groupTypes?: ListAllTaskViewResponseBodyResultToolbarInfoGroupTypes[];
    orderTypes?: ListAllTaskViewResponseBodyResultToolbarInfoOrderTypes[];
    showTypes?: ListAllTaskViewResponseBodyResultToolbarInfoShowTypes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResultViewSetting extends $tea.Model {
    /**
     * @example
     * true
     */
    showDoneTask?: boolean;
    /**
     * @example
     * true
     */
    showSubTask?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAllTaskViewResponseBodyResult extends $tea.Model {
    boundToObjectId?: string;
    /**
     * @example
     * user
     */
    boundToObjectType?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    /**
     * @example
     * 5f687406f05b283425ea8f6f
     */
    creatorId?: string;
    /**
     * @example
     * xxxx
     */
    description?: string;
    filter?: ListAllTaskViewResponseBodyResultFilter;
    groupType?: ListAllTaskViewResponseBodyResultGroupType;
    id?: string;
    isDeleted?: boolean;
    /**
     * @example
     * x项目
     */
    name?: string;
    orderType?: ListAllTaskViewResponseBodyResultOrderType;
    /**
     * @example
     * 6139cd1aba5b128516ec8c86
     */
    organizationId?: string;
    showType?: ListAllTaskViewResponseBodyResultShowType;
    toolbarInfo?: ListAllTaskViewResponseBodyResultToolbarInfo;
    tql?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    viewSetting?: ListAllTaskViewResponseBodyResultViewSetting;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilterConditionsOp extends $tea.Model {
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilterConditionsValues extends $tea.Model {
    deep?: string;
    id?: string;
    label?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilterConditions extends $tea.Model {
    fixed?: boolean;
    key?: string;
    op?: ListMyShortcutViewsResponseBodyResultFilterConditionsOp;
    values?: ListMyShortcutViewsResponseBodyResultFilterConditionsValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilterInvisibleConditionsOp extends $tea.Model {
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilterInvisibleConditionsValues extends $tea.Model {
    deep?: string;
    id?: string;
    label?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilterInvisibleConditions extends $tea.Model {
    fixed?: boolean;
    key?: string;
    op?: ListMyShortcutViewsResponseBodyResultFilterInvisibleConditionsOp;
    values?: ListMyShortcutViewsResponseBodyResultFilterInvisibleConditionsValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultFilter extends $tea.Model {
    conditions?: ListMyShortcutViewsResponseBodyResultFilterConditions[];
    invisibleConditions?: ListMyShortcutViewsResponseBodyResultFilterInvisibleConditions[];
    logic?: string;
    logicDisabled?: boolean;
    q?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultGroupType extends $tea.Model {
    canCreateGroup?: boolean;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultOrderType extends $tea.Model {
    direction?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultShowType extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultToolbarInfoGroupTypesSetting extends $tea.Model {
    dateType?: string;
    fieldName?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultToolbarInfoGroupTypes extends $tea.Model {
    canCreateGroup?: boolean;
    name?: string;
    serviceName?: string;
    setting?: ListMyShortcutViewsResponseBodyResultToolbarInfoGroupTypesSetting;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultToolbarInfoOrderTypes extends $tea.Model {
    direction?: string;
    name?: string;
    supportDirection?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultToolbarInfoShowTypes extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultToolbarInfo extends $tea.Model {
    groupTypes?: ListMyShortcutViewsResponseBodyResultToolbarInfoGroupTypes[];
    orderTypes?: ListMyShortcutViewsResponseBodyResultToolbarInfoOrderTypes[];
    showTypes?: ListMyShortcutViewsResponseBodyResultToolbarInfoShowTypes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResultViewSetting extends $tea.Model {
    /**
     * @example
     * true
     */
    showDoneTask?: boolean;
    /**
     * @example
     * true
     */
    showSubTask?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMyShortcutViewsResponseBodyResult extends $tea.Model {
    boundToObjectId?: string;
    /**
     * @example
     * user
     */
    boundToObjectType?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    /**
     * @example
     * 5f687406f05b283425ea8f6f
     */
    creatorId?: string;
    /**
     * @example
     * xxxx
     */
    description?: string;
    filter?: ListMyShortcutViewsResponseBodyResultFilter;
    groupType?: ListMyShortcutViewsResponseBodyResultGroupType;
    id?: string;
    isDeleted?: boolean;
    /**
     * @example
     * x项目
     */
    name?: string;
    orderType?: ListMyShortcutViewsResponseBodyResultOrderType;
    /**
     * @example
     * 6139cd1aba5b128516ec8c86
     */
    organizationId?: string;
    showType?: ListMyShortcutViewsResponseBodyResultShowType;
    toolbarInfo?: ListMyShortcutViewsResponseBodyResultToolbarInfo;
    tql?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    viewSetting?: ListMyShortcutViewsResponseBodyResultViewSetting;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskResponseBodyResultCustomfieldsValue extends $tea.Model {
    id?: string;
    metaString?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskResponseBodyResultCustomfields extends $tea.Model {
    cfId?: string;
    type?: string;
    value?: QueryAllTaskResponseBodyResultCustomfieldsValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTaskResponseBodyResult extends $tea.Model {
    accomplishTime?: string;
    ancestorIds?: string[];
    content?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    creatorId?: string;
    customfields?: QueryAllTaskResponseBodyResultCustomfields[];
    dueDate?: string;
    executorId?: string;
    id?: string;
    involveMembers?: string[];
    isArchived?: boolean;
    isDone?: boolean;
    note?: string;
    parentTaskId?: string;
    priority?: number;
    projectId?: string;
    sfcId?: string;
    stageId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    startDate?: string;
    tagIds?: string[];
    /**
     * @deprecated
     */
    taskId?: string;
    tasklistId?: string;
    tfsId?: string;
    uniqueId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    visible?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyResultCustomfieldsValue extends $tea.Model {
    id?: string;
    metaString?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyResultCustomfields extends $tea.Model {
    cfId?: string;
    type?: string;
    value?: QueryTaskResponseBodyResultCustomfieldsValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyResultExecutorUserInfo extends $tea.Model {
    avatarUrl?: string;
    id?: string;
    memberId?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyResultProjectInfo extends $tea.Model {
    id?: string;
    logo?: string;
    name?: string;
    organizationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTaskResponseBodyResult extends $tea.Model {
    accomplishTime?: string;
    content?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    creatorId?: string;
    customfields?: QueryTaskResponseBodyResultCustomfields[];
    dueDate?: string;
    executorId?: string;
    executorUserInfo?: QueryTaskResponseBodyResultExecutorUserInfo;
    id?: string;
    involveMembers?: string[];
    isDone?: boolean;
    note?: string;
    projectId?: string;
    projectInfo?: QueryTaskResponseBodyResultProjectInfo;
    /**
     * @deprecated
     */
    taskId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3ResponseBodyResultCustomfieldsValue extends $tea.Model {
    id?: string;
    metaString?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3ResponseBodyResultCustomfields extends $tea.Model {
    cfId?: string;
    type?: string;
    value?: QueryTasksV3ResponseBodyResultCustomfieldsValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTasksV3ResponseBodyResult extends $tea.Model {
    accomplishTime?: string;
    content?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    creatorId?: string;
    customfields?: QueryTasksV3ResponseBodyResultCustomfields[];
    dueDate?: string;
    executorId?: string;
    id?: string;
    involveMembers?: string[];
    isDone?: boolean;
    note?: string;
    projectId?: string;
    sourceId?: string;
    /**
     * @deprecated
     */
    taskId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchProjectsV3ResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    created?: string;
    creatorId?: string;
    description?: string;
    id?: string;
    isArchived?: boolean;
    isTemplate?: boolean;
    logo?: string;
    name?: string;
    organizationId?: string;
    sourceId?: string;
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectMemberRoleV3ResponseBodyResult extends $tea.Model {
    id?: string;
    role?: number;
    roleIds?: string[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateProjectV3ResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 2022-07-04T03:29:34.770Z
     */
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 查询任务概览
     *
     * @param request - AnalysisReportRequest
     * @param headers - AnalysisReportHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AnalysisReportResponse
     */
    analysisReportWithOptions(userId: string, request: AnalysisReportRequest, headers: AnalysisReportHeaders, runtime: $Util.RuntimeOptions): Promise<AnalysisReportResponse>;
    /**
     * 查询任务概览
     *
     * @param request - AnalysisReportRequest
     * @returns AnalysisReportResponse
     */
    analysisReport(userId: string, request: AnalysisReportRequest): Promise<AnalysisReportResponse>;
    /**
     * 创建自由任务
     *
     * @param request - CreateOrganizationTaskRequest
     * @param headers - CreateOrganizationTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateOrganizationTaskResponse
     */
    createOrganizationTaskWithOptions(userId: string, request: CreateOrganizationTaskRequest, headers: CreateOrganizationTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateOrganizationTaskResponse>;
    /**
     * 创建自由任务
     *
     * @param request - CreateOrganizationTaskRequest
     * @returns CreateOrganizationTaskResponse
     */
    createOrganizationTask(userId: string, request: CreateOrganizationTaskRequest): Promise<CreateOrganizationTaskResponse>;
    /**
     * 创建项目成员
     *
     * @param request - CreateProjectMembersV3Request
     * @param headers - CreateProjectMembersV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateProjectMembersV3Response
     */
    createProjectMembersV3WithOptions(userId: string, projectId: string, request: CreateProjectMembersV3Request, headers: CreateProjectMembersV3Headers, runtime: $Util.RuntimeOptions): Promise<CreateProjectMembersV3Response>;
    /**
     * 创建项目成员
     *
     * @param request - CreateProjectMembersV3Request
     * @returns CreateProjectMembersV3Response
     */
    createProjectMembersV3(userId: string, projectId: string, request: CreateProjectMembersV3Request): Promise<CreateProjectMembersV3Response>;
    /**
     * 创建协作空间。
     *
     * @param request - CreateProjectV3Request
     * @param headers - CreateProjectV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateProjectV3Response
     */
    createProjectV3WithOptions(userId: string, request: CreateProjectV3Request, headers: CreateProjectV3Headers, runtime: $Util.RuntimeOptions): Promise<CreateProjectV3Response>;
    /**
     * 创建协作空间。
     *
     * @param request - CreateProjectV3Request
     * @returns CreateProjectV3Response
     */
    createProjectV3(userId: string, request: CreateProjectV3Request): Promise<CreateProjectV3Response>;
    /**
     * 创建协作空间任务
     *
     * @param request - CreateTaskRequest
     * @param headers - CreateTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTaskResponse
     */
    createTaskWithOptions(userId: string, request: CreateTaskRequest, headers: CreateTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTaskResponse>;
    /**
     * 创建协作空间任务
     *
     * @param request - CreateTaskRequest
     * @returns CreateTaskResponse
     */
    createTask(userId: string, request: CreateTaskRequest): Promise<CreateTaskResponse>;
    /**
     * 删除项目成员。
     *
     * @param request - DeleteProjectMembersV3Request
     * @param headers - DeleteProjectMembersV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteProjectMembersV3Response
     */
    deleteProjectMembersV3WithOptions(userId: string, projectId: string, request: DeleteProjectMembersV3Request, headers: DeleteProjectMembersV3Headers, runtime: $Util.RuntimeOptions): Promise<DeleteProjectMembersV3Response>;
    /**
     * 删除项目成员。
     *
     * @param request - DeleteProjectMembersV3Request
     * @returns DeleteProjectMembersV3Response
     */
    deleteProjectMembersV3(userId: string, projectId: string, request: DeleteProjectMembersV3Request): Promise<DeleteProjectMembersV3Response>;
    /**
     * 获取最近访问的项目
     *
     * @param headers - GetFootprintProjectHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFootprintProjectResponse
     */
    getFootprintProjectWithOptions(userId: string, headers: GetFootprintProjectHeaders, runtime: $Util.RuntimeOptions): Promise<GetFootprintProjectResponse>;
    /**
     * 获取最近访问的项目
     * @returns GetFootprintProjectResponse
     */
    getFootprintProject(userId: string): Promise<GetFootprintProjectResponse>;
    /**
     * 获取最近访问的任务
     *
     * @param headers - GetFootprintTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFootprintTaskResponse
     */
    getFootprintTaskWithOptions(userId: string, headers: GetFootprintTaskHeaders, runtime: $Util.RuntimeOptions): Promise<GetFootprintTaskResponse>;
    /**
     * 获取最近访问的任务
     * @returns GetFootprintTaskResponse
     */
    getFootprintTask(userId: string): Promise<GetFootprintTaskResponse>;
    /**
     * 查询轻任务详情。
     *
     * @param request - GetFreeTaskRequest
     * @param headers - GetFreeTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFreeTaskResponse
     */
    getFreeTaskWithOptions(taskId: string, request: GetFreeTaskRequest, headers: GetFreeTaskHeaders, runtime: $Util.RuntimeOptions): Promise<GetFreeTaskResponse>;
    /**
     * 查询轻任务详情。
     *
     * @param request - GetFreeTaskRequest
     * @returns GetFreeTaskResponse
     */
    getFreeTask(taskId: string, request: GetFreeTaskRequest): Promise<GetFreeTaskResponse>;
    /**
     * 获取协作空间成员列表。
     *
     * @param request - GetProjectMembersV3Request
     * @param headers - GetProjectMembersV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetProjectMembersV3Response
     */
    getProjectMembersV3WithOptions(userId: string, projectId: string, request: GetProjectMembersV3Request, headers: GetProjectMembersV3Headers, runtime: $Util.RuntimeOptions): Promise<GetProjectMembersV3Response>;
    /**
     * 获取协作空间成员列表。
     *
     * @param request - GetProjectMembersV3Request
     * @returns GetProjectMembersV3Response
     */
    getProjectMembersV3(userId: string, projectId: string, request: GetProjectMembersV3Request): Promise<GetProjectMembersV3Response>;
    /**
     * 获取项目角色列表。
     *
     * @param request - GetProjectRolesV3Request
     * @param headers - GetProjectRolesV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetProjectRolesV3Response
     */
    getProjectRolesV3WithOptions(userId: string, projectId: string, request: GetProjectRolesV3Request, headers: GetProjectRolesV3Headers, runtime: $Util.RuntimeOptions): Promise<GetProjectRolesV3Response>;
    /**
     * 获取项目角色列表。
     *
     * @param request - GetProjectRolesV3Request
     * @returns GetProjectRolesV3Response
     */
    getProjectRolesV3(userId: string, projectId: string, request: GetProjectRolesV3Request): Promise<GetProjectRolesV3Response>;
    /**
     * 获取用户星标协作空间
     *
     * @param request - GetStaredProjectsRequest
     * @param headers - GetStaredProjectsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStaredProjectsResponse
     */
    getStaredProjectsWithOptions(userId: string, request: GetStaredProjectsRequest, headers: GetStaredProjectsHeaders, runtime: $Util.RuntimeOptions): Promise<GetStaredProjectsResponse>;
    /**
     * 获取用户星标协作空间
     *
     * @param request - GetStaredProjectsRequest
     * @returns GetStaredProjectsResponse
     */
    getStaredProjects(userId: string, request: GetStaredProjectsRequest): Promise<GetStaredProjectsResponse>;
    /**
     * 钉钉 userId 查询 24位长 userId。
     *
     * @param request - GetTbUserIdByDingUserIdRequest
     * @param headers - GetTbUserIdByDingUserIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTbUserIdByDingUserIdResponse
     */
    getTbUserIdByDingUserIdWithOptions(request: GetTbUserIdByDingUserIdRequest, headers: GetTbUserIdByDingUserIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetTbUserIdByDingUserIdResponse>;
    /**
     * 钉钉 userId 查询 24位长 userId。
     *
     * @param request - GetTbUserIdByDingUserIdRequest
     * @returns GetTbUserIdByDingUserIdResponse
     */
    getTbUserIdByDingUserId(request: GetTbUserIdByDingUserIdRequest): Promise<GetTbUserIdByDingUserIdResponse>;
    /**
     * 获取快办企业ID
     *
     * @param headers - GetThingOrgIdByDingOrgIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetThingOrgIdByDingOrgIdResponse
     */
    getThingOrgIdByDingOrgIdWithOptions(headers: GetThingOrgIdByDingOrgIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetThingOrgIdByDingOrgIdResponse>;
    /**
     * 获取快办企业ID
     * @returns GetThingOrgIdByDingOrgIdResponse
     */
    getThingOrgIdByDingOrgId(): Promise<GetThingOrgIdByDingOrgIdResponse>;
    /**
     * 获取用户参与项目。
     *
     * @param request - GetUserJoinedProjectsV3Request
     * @param headers - GetUserJoinedProjectsV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserJoinedProjectsV3Response
     */
    getUserJoinedProjectsV3WithOptions(userId: string, request: GetUserJoinedProjectsV3Request, headers: GetUserJoinedProjectsV3Headers, runtime: $Util.RuntimeOptions): Promise<GetUserJoinedProjectsV3Response>;
    /**
     * 获取用户参与项目。
     *
     * @param request - GetUserJoinedProjectsV3Request
     * @returns GetUserJoinedProjectsV3Response
     */
    getUserJoinedProjectsV3(userId: string, request: GetUserJoinedProjectsV3Request): Promise<GetUserJoinedProjectsV3Response>;
    /**
     * 获取全部任务
     *
     * @param headers - ListAllTaskViewHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAllTaskViewResponse
     */
    listAllTaskViewWithOptions(userId: string, headers: ListAllTaskViewHeaders, runtime: $Util.RuntimeOptions): Promise<ListAllTaskViewResponse>;
    /**
     * 获取全部任务
     * @returns ListAllTaskViewResponse
     */
    listAllTaskView(userId: string): Promise<ListAllTaskViewResponse>;
    /**
     * 查询我的捷径
     *
     * @param request - ListMyShortcutViewsRequest
     * @param headers - ListMyShortcutViewsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMyShortcutViewsResponse
     */
    listMyShortcutViewsWithOptions(userId: string, request: ListMyShortcutViewsRequest, headers: ListMyShortcutViewsHeaders, runtime: $Util.RuntimeOptions): Promise<ListMyShortcutViewsResponse>;
    /**
     * 查询我的捷径
     *
     * @param request - ListMyShortcutViewsRequest
     * @returns ListMyShortcutViewsResponse
     */
    listMyShortcutViews(userId: string, request: ListMyShortcutViewsRequest): Promise<ListMyShortcutViewsResponse>;
    /**
     * 查询自由任务和项目任务详情。
     *
     * @param request - QueryAllTaskRequest
     * @param headers - QueryAllTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAllTaskResponse
     */
    queryAllTaskWithOptions(userId: string, request: QueryAllTaskRequest, headers: QueryAllTaskHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllTaskResponse>;
    /**
     * 查询自由任务和项目任务详情。
     *
     * @param request - QueryAllTaskRequest
     * @returns QueryAllTaskResponse
     */
    queryAllTask(userId: string, request: QueryAllTaskRequest): Promise<QueryAllTaskResponse>;
    /**
     * 查询我的任务
     *
     * @param request - QueryTaskRequest
     * @param headers - QueryTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTaskResponse
     */
    queryTaskWithOptions(userId: string, request: QueryTaskRequest, headers: QueryTaskHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTaskResponse>;
    /**
     * 查询我的任务
     *
     * @param request - QueryTaskRequest
     * @returns QueryTaskResponse
     */
    queryTask(userId: string, request: QueryTaskRequest): Promise<QueryTaskResponse>;
    /**
     * 查询协作空间任务详情。
     *
     * @param request - QueryTasksV3Request
     * @param headers - QueryTasksV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTasksV3Response
     */
    queryTasksV3WithOptions(userId: string, request: QueryTasksV3Request, headers: QueryTasksV3Headers, runtime: $Util.RuntimeOptions): Promise<QueryTasksV3Response>;
    /**
     * 查询协作空间任务详情。
     *
     * @param request - QueryTasksV3Request
     * @returns QueryTasksV3Response
     */
    queryTasksV3(userId: string, request: QueryTasksV3Request): Promise<QueryTasksV3Response>;
    /**
     * 通过TQL搜索自由任务和协作空间任务ID。
     *
     * @param request - SearchAllTasksByTqlRequest
     * @param headers - SearchAllTasksByTqlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchAllTasksByTqlResponse
     */
    searchAllTasksByTqlWithOptions(request: SearchAllTasksByTqlRequest, headers: SearchAllTasksByTqlHeaders, runtime: $Util.RuntimeOptions): Promise<SearchAllTasksByTqlResponse>;
    /**
     * 通过TQL搜索自由任务和协作空间任务ID。
     *
     * @param request - SearchAllTasksByTqlRequest
     * @returns SearchAllTasksByTqlResponse
     */
    searchAllTasksByTql(request: SearchAllTasksByTqlRequest): Promise<SearchAllTasksByTqlResponse>;
    /**
     * 查询协作空间。
     *
     * @param request - SearchProjectsV3Request
     * @param headers - SearchProjectsV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchProjectsV3Response
     */
    searchProjectsV3WithOptions(request: SearchProjectsV3Request, headers: SearchProjectsV3Headers, runtime: $Util.RuntimeOptions): Promise<SearchProjectsV3Response>;
    /**
     * 查询协作空间。
     *
     * @param request - SearchProjectsV3Request
     * @returns SearchProjectsV3Response
     */
    searchProjectsV3(request: SearchProjectsV3Request): Promise<SearchProjectsV3Response>;
    /**
     * 修改项目成员的角色。
     *
     * @param request - UpdateProjectMemberRoleV3Request
     * @param headers - UpdateProjectMemberRoleV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateProjectMemberRoleV3Response
     */
    updateProjectMemberRoleV3WithOptions(userId: string, projectId: string, request: UpdateProjectMemberRoleV3Request, headers: UpdateProjectMemberRoleV3Headers, runtime: $Util.RuntimeOptions): Promise<UpdateProjectMemberRoleV3Response>;
    /**
     * 修改项目成员的角色。
     *
     * @param request - UpdateProjectMemberRoleV3Request
     * @returns UpdateProjectMemberRoleV3Response
     */
    updateProjectMemberRoleV3(userId: string, projectId: string, request: UpdateProjectMemberRoleV3Request): Promise<UpdateProjectMemberRoleV3Response>;
    /**
     * 更新协作空间。
     *
     * @param request - UpdateProjectV3Request
     * @param headers - UpdateProjectV3Headers
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateProjectV3Response
     */
    updateProjectV3WithOptions(userId: string, projectId: string, request: UpdateProjectV3Request, headers: UpdateProjectV3Headers, runtime: $Util.RuntimeOptions): Promise<UpdateProjectV3Response>;
    /**
     * 更新协作空间。
     *
     * @param request - UpdateProjectV3Request
     * @returns UpdateProjectV3Response
     */
    updateProjectV3(userId: string, projectId: string, request: UpdateProjectV3Request): Promise<UpdateProjectV3Response>;
}
