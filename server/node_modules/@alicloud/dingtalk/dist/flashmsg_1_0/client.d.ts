/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class PrivateFieldMapValue extends $tea.Model {
    /**
     * @example
     * XXX发了一条闪读消息，请于今天 12:00前查看
     */
    tipTitle?: string;
    isDingSend?: boolean;
    isRead?: boolean;
    buttonStatus?: string;
    extension?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPluginRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPluginRuleRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * group_chat
     */
    chatType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * -10050
     */
    code?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * group
     */
    itemType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    rules?: AddPluginRuleRequestRules[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0847493113802787
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPluginRuleResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPluginRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddPluginRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePlguinRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePlguinRuleRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    bizIdList?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0847493113802787
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePlguinRuleResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePlguinRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeletePlguinRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBaseProfileListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBaseProfileListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    body?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBaseProfileListResponseBody extends $tea.Model {
    result?: GetBaseProfileListResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBaseProfileListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBaseProfileListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidjyErBTyw0FnIQQigHAbcGCg==
     */
    openConversationId?: string;
    /**
     * @example
     * 080854121612617211
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationResponseBody extends $tea.Model {
    result?: GetConversationResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMemberListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMemberListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidjyErBTyw0FnIQQXXX2223==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @example
     * 08474931138022787
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMemberListResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMemberListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMemberListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPluginRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPluginRuleRequest extends $tea.Model {
    /**
     * @example
     * group_chat
     */
    chatType?: string;
    /**
     * @example
     * -10050
     */
    code?: string;
    /**
     * @example
     * 100
     */
    itemId?: string;
    /**
     * @example
     * group
     */
    itemType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPluginRuleResponseBody extends $tea.Model {
    result?: QueryPluginRuleResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPluginRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPluginRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingTipHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingTipRequest extends $tea.Model {
    extension?: {
        [key: string]: string;
    };
    link?: SendDingTipRequestLink;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * msg_f9aae78558b34e20a5badead4c29244c_223
     */
    messageId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    receiverUserId?: string[];
    /**
     * @example
     * 080854121612261721
     */
    senderUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 您有一条闪读消息，请注意查收XX
     */
    textContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingTipResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingTipResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendDingTipResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipRequest extends $tea.Model {
    defaultView?: SendMessageTipRequestDefaultView;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * msg_f9aae78558b34e20a5badead4c29244c_123
     */
    messageId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidVcYPzxnAySJOMhYX2QDbLwUA==
     */
    openConversationId?: string;
    privateFieldMap?: {
        [key: string]: PrivateFieldMapValue;
    };
    publicField?: SendMessageTipRequestPublicField;
    /**
     * @remarks
     * This parameter is required.
     */
    receiverUserId?: string[];
    /**
     * @example
     * 0808541222161261721
     */
    senderUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipResponseBody extends $tea.Model {
    result?: SendMessageTipResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendMessageTipResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPluginRuleRequestRules extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 100
     */
    itemId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 管理员角色
     */
    itemName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBaseProfileListResponseBodyResult extends $tea.Model {
    avatarMediaId?: string;
    nick?: string;
    nickPinyin?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationResponseBodyResult extends $tea.Model {
    corpId?: string;
    memberCount?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPluginRuleResponseBodyResultData extends $tea.Model {
    bizId?: string;
    chatType?: string;
    code?: string;
    gmtCreate?: string;
    itemId?: string;
    itemName?: string;
    itemType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPluginRuleResponseBodyResult extends $tea.Model {
    data?: QueryPluginRuleResponseBodyResultData[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingTipRequestLink extends $tea.Model {
    extension?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingtalk://dingtalkclient/page/link?pc_slide=true
     */
    linkUrl?: string;
    /**
     * @example
     * @lQLPDhrngMo4hi3NAZDNAZCwqp0RL2MfbesBqImWncBnAA2BCD
     */
    picMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 今天 10:00后超期
     */
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipRequestDefaultView extends $tea.Model {
    actionName?: string;
    actionUrl?: string;
    authCode?: string;
    authMediaId?: string;
    /**
     * @example
     * 闪读消息卡片1
     */
    cardTitle?: string;
    cardTitleColor?: string;
    /**
     * @example
     * 查看详情
     */
    desc?: string;
    mediaId?: string;
    needShowUpdateTail?: string;
    summary?: string;
    /**
     * @example
     * 闪读消息卡片2
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipRequestPublicField extends $tea.Model {
    /**
     * @example
     * dingtalk://dingtalkclient/page/link33
     */
    detailUrl?: string;
    /**
     * @example
     * 限时阅读5分钟
     */
    durationDesc?: string;
    extension?: {
        [key: string]: string;
    };
    isExpired?: boolean;
    /**
     * @example
     * dingtalk://dingtalkclient/page/linkxx
     */
    readActionUrl?: string;
    /**
     * @example
     * 已查收 0/1
     */
    readProgressDesc?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageTipResponseBodyResult extends $tea.Model {
    bizId?: string;
    cardInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加插件规则
     *
     * @param request - AddPluginRuleRequest
     * @param headers - AddPluginRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddPluginRuleResponse
     */
    addPluginRuleWithOptions(request: AddPluginRuleRequest, headers: AddPluginRuleHeaders, runtime: $Util.RuntimeOptions): Promise<AddPluginRuleResponse>;
    /**
     * 添加插件规则
     *
     * @param request - AddPluginRuleRequest
     * @returns AddPluginRuleResponse
     */
    addPluginRule(request: AddPluginRuleRequest): Promise<AddPluginRuleResponse>;
    /**
     * 删除插件规则
     *
     * @param request - DeletePlguinRuleRequest
     * @param headers - DeletePlguinRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeletePlguinRuleResponse
     */
    deletePlguinRuleWithOptions(request: DeletePlguinRuleRequest, headers: DeletePlguinRuleHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePlguinRuleResponse>;
    /**
     * 删除插件规则
     *
     * @param request - DeletePlguinRuleRequest
     * @returns DeletePlguinRuleResponse
     */
    deletePlguinRule(request: DeletePlguinRuleRequest): Promise<DeletePlguinRuleResponse>;
    /**
     * 闪读用户基础信息查询
     *
     * @param request - GetBaseProfileListRequest
     * @param headers - GetBaseProfileListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetBaseProfileListResponse
     */
    getBaseProfileListWithOptions(request: GetBaseProfileListRequest, headers: GetBaseProfileListHeaders, runtime: $Util.RuntimeOptions): Promise<GetBaseProfileListResponse>;
    /**
     * 闪读用户基础信息查询
     *
     * @param request - GetBaseProfileListRequest
     * @returns GetBaseProfileListResponse
     */
    getBaseProfileList(request: GetBaseProfileListRequest): Promise<GetBaseProfileListResponse>;
    /**
     * 获得闪读会话信息
     *
     * @param request - GetConversationRequest
     * @param headers - GetConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationResponse
     */
    getConversationWithOptions(request: GetConversationRequest, headers: GetConversationHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationResponse>;
    /**
     * 获得闪读会话信息
     *
     * @param request - GetConversationRequest
     * @returns GetConversationResponse
     */
    getConversation(request: GetConversationRequest): Promise<GetConversationResponse>;
    /**
     * 获得成员ID列表
     *
     * @param request - GetMemberListRequest
     * @param headers - GetMemberListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMemberListResponse
     */
    getMemberListWithOptions(request: GetMemberListRequest, headers: GetMemberListHeaders, runtime: $Util.RuntimeOptions): Promise<GetMemberListResponse>;
    /**
     * 获得成员ID列表
     *
     * @param request - GetMemberListRequest
     * @returns GetMemberListResponse
     */
    getMemberList(request: GetMemberListRequest): Promise<GetMemberListResponse>;
    /**
     * 查询插件规则
     *
     * @param request - QueryPluginRuleRequest
     * @param headers - QueryPluginRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPluginRuleResponse
     */
    queryPluginRuleWithOptions(request: QueryPluginRuleRequest, headers: QueryPluginRuleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPluginRuleResponse>;
    /**
     * 查询插件规则
     *
     * @param request - QueryPluginRuleRequest
     * @returns QueryPluginRuleResponse
     */
    queryPluginRule(request: QueryPluginRuleRequest): Promise<QueryPluginRuleResponse>;
    /**
     * 发送Ding提示消息
     *
     * @param request - SendDingTipRequest
     * @param headers - SendDingTipHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendDingTipResponse
     */
    sendDingTipWithOptions(request: SendDingTipRequest, headers: SendDingTipHeaders, runtime: $Util.RuntimeOptions): Promise<SendDingTipResponse>;
    /**
     * 发送Ding提示消息
     *
     * @param request - SendDingTipRequest
     * @returns SendDingTipResponse
     */
    sendDingTip(request: SendDingTipRequest): Promise<SendDingTipResponse>;
    /**
     * 发送闪读消息提示
     *
     * @param request - SendMessageTipRequest
     * @param headers - SendMessageTipHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendMessageTipResponse
     */
    sendMessageTipWithOptions(request: SendMessageTipRequest, headers: SendMessageTipHeaders, runtime: $Util.RuntimeOptions): Promise<SendMessageTipResponse>;
    /**
     * 发送闪读消息提示
     *
     * @param request - SendMessageTipRequest
     * @returns SendMessageTipResponse
     */
    sendMessageTip(request: SendMessageTipRequest): Promise<SendMessageTipResponse>;
}
