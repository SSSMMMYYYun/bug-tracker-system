/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddGroupMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * **if can be null:**
     * true
     */
    members?: AddGroupMembersRequestMembers[];
    operatorUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMembersResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberUids?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddGroupMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddProfileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddProfileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appUid?: string;
    avatarMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    mobileNumber?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * usertest
     */
    nick?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddProfileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendRequest extends $tea.Model {
    /**
     * **if can be null:**
     * true
     */
    appUids?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    content?: string;
    /**
     * **if can be null:**
     * true
     */
    conversationIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 234#dingxxx@dingding
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 23233434
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchSendResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    channel?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    creatorUid?: string;
    iconMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    properties?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    chatId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    createTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * channel_abcd
     */
    channel?: string;
    /**
     * @example
     * @lALOKACADDA
     */
    iconMediaId?: string;
    members?: CreateTrustGroupRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试群名称XXX
     */
    name?: string;
    properties?: {
        [key: string]: string;
    };
    /**
     * @example
     * 你有新的会话
     */
    systemMsg?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1657099913071
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustGroupResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    chatId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    createTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTrustGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    operatorUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appUid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * @wesfsdfsfwe
     */
    mediaId?: string;
    /**
     * @example
     * 86399
     */
    urlExpireTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMediaUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    mediaIds?: string[];
    /**
     * @example
     * 86399
     */
    urlExpireTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlsResponseBody extends $tea.Model {
    urls?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaUrlsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMediaUrlsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceFileUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceFileUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    fileId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123#123@dingding
     */
    senderUid?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceFileUrlResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    headers?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    internalResourceUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    resourceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceFileUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSpaceFileUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupStaffMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupStaffMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupStaffMembersResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: ListGroupStaffMembersResponseBodyMembers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupStaffMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListGroupStaffMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchSendResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchSendResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 234#dingxxx@dingding
     */
    senderUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234567890
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchSendResultResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    results?: QueryBatchSendResultResponseBodyResults[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchSendResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBatchSendResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReadMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReadMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    messageId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReadMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    messageId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorUid?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * **if can be null:**
     * true
     */
    memberUids?: string[];
    operatorUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    content?: string;
    conversationId?: string;
    createTime?: number;
    receiverUid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    senderUid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    createTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    messageId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageRequest extends $tea.Model {
    /**
     * @example
     * false
     */
    atAll?: boolean;
    atAppUids?: string[];
    atMobiles?: string[];
    atUnionIds?: string[];
    atUsers?: string[];
    /**
     * @example
     * 123
     */
    channel?: string;
    /**
     * @example
     * {\"pic1\":\"@123\",\"pic2\":\"@456\"}
     */
    msgMediaIdParamMap?: {
        [key: string]: any;
    };
    /**
     * @example
     * {\"text1\":\"hello\",\"text2\":\"world\"}
     */
    msgParamMap?: {
        [key: string]: any;
    };
    /**
     * @example
     * 123
     */
    msgTemplateId?: string;
    receiverAppUids?: string[];
    receiverMobiles?: string[];
    receiverUnionIds?: string[];
    receiverUserIds?: string[];
    /**
     * @example
     * 123
     */
    robotCode?: string;
    /**
     * @example
     * 123
     */
    targetOpenConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageResponseBody extends $tea.Model {
    openMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    operationSource?: string;
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    operatorUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupOwnerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupOwnerRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationId?: string;
    operatorUid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    ownerUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupOwnerResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupOwnerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupOwnerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadFileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 111.png
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * image
     */
    fileType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    fileUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 111@dingdingkelian
     */
    senderUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadFileResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * $csvsvsdvsvdscs
     */
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMembersRequestMembers extends $tea.Model {
    nick?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustGroupRequestMembers extends $tea.Model {
    nick?: string;
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupStaffMembersResponseBodyMembers extends $tea.Model {
    nick?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchSendResultResponseBodyResults extends $tea.Model {
    /**
     * @example
     * 123@channel
     */
    appUid?: string;
    /**
     * @example
     * cid1234567890==
     */
    conversationId?: string;
    /**
     * @example
     * 0
     */
    errorCode?: string;
    /**
     * @example
     * success
     */
    errorMessage?: string;
    /**
     * @example
     * msg1234567890==
     */
    msgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加群成员
     *
     * @param request - AddGroupMembersRequest
     * @param headers - AddGroupMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddGroupMembersResponse
     */
    addGroupMembersWithOptions(request: AddGroupMembersRequest, headers: AddGroupMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddGroupMembersResponse>;
    /**
     * 添加群成员
     *
     * @param request - AddGroupMembersRequest
     * @returns AddGroupMembersResponse
     */
    addGroupMembers(request: AddGroupMembersRequest): Promise<AddGroupMembersResponse>;
    /**
     * 外部用户导入profile
     *
     * @param request - AddProfileRequest
     * @param headers - AddProfileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddProfileResponse
     */
    addProfileWithOptions(request: AddProfileRequest, headers: AddProfileHeaders, runtime: $Util.RuntimeOptions): Promise<AddProfileResponse>;
    /**
     * 外部用户导入profile
     *
     * @param request - AddProfileRequest
     * @returns AddProfileResponse
     */
    addProfile(request: AddProfileRequest): Promise<AddProfileResponse>;
    /**
     * 消息批量接口
     *
     * @param request - BatchSendRequest
     * @param headers - BatchSendHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchSendResponse
     */
    batchSendWithOptions(request: BatchSendRequest, headers: BatchSendHeaders, runtime: $Util.RuntimeOptions): Promise<BatchSendResponse>;
    /**
     * 消息批量接口
     *
     * @param request - BatchSendRequest
     * @returns BatchSendResponse
     */
    batchSend(request: BatchSendRequest): Promise<BatchSendResponse>;
    /**
     * 创建群
     *
     * @param request - CreateGroupRequest
     * @param headers - CreateGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateGroupResponse
     */
    createGroupWithOptions(request: CreateGroupRequest, headers: CreateGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupResponse>;
    /**
     * 创建群
     *
     * @param request - CreateGroupRequest
     * @returns CreateGroupResponse
     */
    createGroup(request: CreateGroupRequest): Promise<CreateGroupResponse>;
    /**
     * 创建托管账号为群主的群
     *
     * @param request - CreateTrustGroupRequest
     * @param headers - CreateTrustGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTrustGroupResponse
     */
    createTrustGroupWithOptions(request: CreateTrustGroupRequest, headers: CreateTrustGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTrustGroupResponse>;
    /**
     * 创建托管账号为群主的群
     *
     * @param request - CreateTrustGroupRequest
     * @returns CreateTrustGroupResponse
     */
    createTrustGroup(request: CreateTrustGroupRequest): Promise<CreateTrustGroupResponse>;
    /**
     * 解散群
     *
     * @param request - DismissGroupRequest
     * @param headers - DismissGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DismissGroupResponse
     */
    dismissGroupWithOptions(request: DismissGroupRequest, headers: DismissGroupHeaders, runtime: $Util.RuntimeOptions): Promise<DismissGroupResponse>;
    /**
     * 解散群
     *
     * @param request - DismissGroupRequest
     * @returns DismissGroupResponse
     */
    dismissGroup(request: DismissGroupRequest): Promise<DismissGroupResponse>;
    /**
     * 生成单聊会话Id
     *
     * @param request - GetConversationIdRequest
     * @param headers - GetConversationIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationIdResponse
     */
    getConversationIdWithOptions(request: GetConversationIdRequest, headers: GetConversationIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationIdResponse>;
    /**
     * 生成单聊会话Id
     *
     * @param request - GetConversationIdRequest
     * @returns GetConversationIdResponse
     */
    getConversationId(request: GetConversationIdRequest): Promise<GetConversationIdResponse>;
    /**
     * 多媒体文件下载
     *
     * @param request - GetMediaUrlRequest
     * @param headers - GetMediaUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMediaUrlResponse
     */
    getMediaUrlWithOptions(request: GetMediaUrlRequest, headers: GetMediaUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetMediaUrlResponse>;
    /**
     * 多媒体文件下载
     *
     * @param request - GetMediaUrlRequest
     * @returns GetMediaUrlResponse
     */
    getMediaUrl(request: GetMediaUrlRequest): Promise<GetMediaUrlResponse>;
    /**
     * 多媒体文件批量下载
     *
     * @param request - GetMediaUrlsRequest
     * @param headers - GetMediaUrlsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMediaUrlsResponse
     */
    getMediaUrlsWithOptions(request: GetMediaUrlsRequest, headers: GetMediaUrlsHeaders, runtime: $Util.RuntimeOptions): Promise<GetMediaUrlsResponse>;
    /**
     * 多媒体文件批量下载
     *
     * @param request - GetMediaUrlsRequest
     * @returns GetMediaUrlsResponse
     */
    getMediaUrls(request: GetMediaUrlsRequest): Promise<GetMediaUrlsResponse>;
    /**
     * 获取钉盘文件下载信息
     *
     * @param request - GetSpaceFileUrlRequest
     * @param headers - GetSpaceFileUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSpaceFileUrlResponse
     */
    getSpaceFileUrlWithOptions(request: GetSpaceFileUrlRequest, headers: GetSpaceFileUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceFileUrlResponse>;
    /**
     * 获取钉盘文件下载信息
     *
     * @param request - GetSpaceFileUrlRequest
     * @returns GetSpaceFileUrlResponse
     */
    getSpaceFileUrl(request: GetSpaceFileUrlRequest): Promise<GetSpaceFileUrlResponse>;
    /**
     * 获取企业员工类型的群成员
     *
     * @param request - ListGroupStaffMembersRequest
     * @param headers - ListGroupStaffMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListGroupStaffMembersResponse
     */
    listGroupStaffMembersWithOptions(request: ListGroupStaffMembersRequest, headers: ListGroupStaffMembersHeaders, runtime: $Util.RuntimeOptions): Promise<ListGroupStaffMembersResponse>;
    /**
     * 获取企业员工类型的群成员
     *
     * @param request - ListGroupStaffMembersRequest
     * @returns ListGroupStaffMembersResponse
     */
    listGroupStaffMembers(request: ListGroupStaffMembersRequest): Promise<ListGroupStaffMembersResponse>;
    /**
     * 查询batchSend结果
     *
     * @param request - QueryBatchSendResultRequest
     * @param headers - QueryBatchSendResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryBatchSendResultResponse
     */
    queryBatchSendResultWithOptions(request: QueryBatchSendResultRequest, headers: QueryBatchSendResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBatchSendResultResponse>;
    /**
     * 查询batchSend结果
     *
     * @param request - QueryBatchSendResultRequest
     * @returns QueryBatchSendResultResponse
     */
    queryBatchSendResult(request: QueryBatchSendResultRequest): Promise<QueryBatchSendResultResponse>;
    /**
     * 消息已读
     *
     * @param request - ReadMessageRequest
     * @param headers - ReadMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReadMessageResponse
     */
    readMessageWithOptions(request: ReadMessageRequest, headers: ReadMessageHeaders, runtime: $Util.RuntimeOptions): Promise<ReadMessageResponse>;
    /**
     * 消息已读
     *
     * @param request - ReadMessageRequest
     * @returns ReadMessageResponse
     */
    readMessage(request: ReadMessageRequest): Promise<ReadMessageResponse>;
    /**
     * 消息撤回
     *
     * @param request - RecallMessageRequest
     * @param headers - RecallMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RecallMessageResponse
     */
    recallMessageWithOptions(request: RecallMessageRequest, headers: RecallMessageHeaders, runtime: $Util.RuntimeOptions): Promise<RecallMessageResponse>;
    /**
     * 消息撤回
     *
     * @param request - RecallMessageRequest
     * @returns RecallMessageResponse
     */
    recallMessage(request: RecallMessageRequest): Promise<RecallMessageResponse>;
    /**
     * 移除群成员
     *
     * @param request - RemoveGroupMembersRequest
     * @param headers - RemoveGroupMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveGroupMembersResponse
     */
    removeGroupMembersWithOptions(request: RemoveGroupMembersRequest, headers: RemoveGroupMembersHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveGroupMembersResponse>;
    /**
     * 移除群成员
     *
     * @param request - RemoveGroupMembersRequest
     * @returns RemoveGroupMembersResponse
     */
    removeGroupMembers(request: RemoveGroupMembersRequest): Promise<RemoveGroupMembersResponse>;
    /**
     * 消息发送
     *
     * @param request - SendMessageRequest
     * @param headers - SendMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendMessageResponse
     */
    sendMessageWithOptions(request: SendMessageRequest, headers: SendMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendMessageResponse>;
    /**
     * 消息发送
     *
     * @param request - SendMessageRequest
     * @returns SendMessageResponse
     */
    sendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
    /**
     * 通过群模板机器人发送消息
     *
     * @param request - SendRobotMessageRequest
     * @param headers - SendRobotMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendRobotMessageResponse
     */
    sendRobotMessageWithOptions(request: SendRobotMessageRequest, headers: SendRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendRobotMessageResponse>;
    /**
     * 通过群模板机器人发送消息
     *
     * @param request - SendRobotMessageRequest
     * @returns SendRobotMessageResponse
     */
    sendRobotMessage(request: SendRobotMessageRequest): Promise<SendRobotMessageResponse>;
    /**
     * 修改群名称
     *
     * @param request - UpdateGroupNameRequest
     * @param headers - UpdateGroupNameHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateGroupNameResponse
     */
    updateGroupNameWithOptions(request: UpdateGroupNameRequest, headers: UpdateGroupNameHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupNameResponse>;
    /**
     * 修改群名称
     *
     * @param request - UpdateGroupNameRequest
     * @returns UpdateGroupNameResponse
     */
    updateGroupName(request: UpdateGroupNameRequest): Promise<UpdateGroupNameResponse>;
    /**
     * 转让群主
     *
     * @param request - UpdateGroupOwnerRequest
     * @param headers - UpdateGroupOwnerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateGroupOwnerResponse
     */
    updateGroupOwnerWithOptions(request: UpdateGroupOwnerRequest, headers: UpdateGroupOwnerHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupOwnerResponse>;
    /**
     * 转让群主
     *
     * @param request - UpdateGroupOwnerRequest
     * @returns UpdateGroupOwnerResponse
     */
    updateGroupOwner(request: UpdateGroupOwnerRequest): Promise<UpdateGroupOwnerResponse>;
    /**
     * 互联互通上传文件
     *
     * @param request - UploadFileRequest
     * @param headers - UploadFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UploadFileResponse
     */
    uploadFileWithOptions(request: UploadFileRequest, headers: UploadFileHeaders, runtime: $Util.RuntimeOptions): Promise<UploadFileResponse>;
    /**
     * 互联互通上传文件
     *
     * @param request - UploadFileRequest
     * @returns UploadFileResponse
     */
    uploadFile(request: UploadFileRequest): Promise<UploadFileResponse>;
}
