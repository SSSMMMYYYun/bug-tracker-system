/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetTranscribeBriefHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranscribeBriefResponseBody extends $tea.Model {
    data?: GetTranscribeBriefResponseBodyData;
    statusCode?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranscribeBriefResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTranscribeBriefResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemovePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemovePermissionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    bizType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    members?: RemovePermissionRequestMembers[];
    taskCreator?: number;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemovePermissionResponseBody extends $tea.Model {
    data?: RemovePermissionResponseBodyData;
    statusCode?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemovePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemovePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionForUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionForUsersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    bizType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    members?: UpdatePermissionForUsersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 533xxxxxx
     */
    taskCreator?: number;
    operatorUid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionForUsersResponseBody extends $tea.Model {
    isSuccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionForUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdatePermissionForUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranscribeBriefResponseBodyData extends $tea.Model {
    bizType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemovePermissionRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 533xxxxxx
     */
    memberId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * EDITOR
     */
    memberType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    policyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemovePermissionResponseBodyData extends $tea.Model {
    failNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePermissionForUsersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * EDITOR
     */
    policyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 获取闪记任务的概要信息
     *
     * @param headers - GetTranscribeBriefHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTranscribeBriefResponse
     */
    getTranscribeBriefWithOptions(taskUuid: string, headers: GetTranscribeBriefHeaders, runtime: $Util.RuntimeOptions): Promise<GetTranscribeBriefResponse>;
    /**
     * 获取闪记任务的概要信息
     * @returns GetTranscribeBriefResponse
     */
    getTranscribeBrief(taskUuid: string): Promise<GetTranscribeBriefResponse>;
    /**
     * 移除指定用户对闪记任务的权限
     *
     * @param request - RemovePermissionRequest
     * @param headers - RemovePermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemovePermissionResponse
     */
    removePermissionWithOptions(taskUuid: string, request: RemovePermissionRequest, headers: RemovePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<RemovePermissionResponse>;
    /**
     * 移除指定用户对闪记任务的权限
     *
     * @param request - RemovePermissionRequest
     * @returns RemovePermissionResponse
     */
    removePermission(taskUuid: string, request: RemovePermissionRequest): Promise<RemovePermissionResponse>;
    /**
     * 针对指定的闪记，修改或者授予指定用户权限
     *
     * @param request - UpdatePermissionForUsersRequest
     * @param headers - UpdatePermissionForUsersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePermissionForUsersResponse
     */
    updatePermissionForUsersWithOptions(taskUuid: string, request: UpdatePermissionForUsersRequest, headers: UpdatePermissionForUsersHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePermissionForUsersResponse>;
    /**
     * 针对指定的闪记，修改或者授予指定用户权限
     *
     * @param request - UpdatePermissionForUsersRequest
     * @returns UpdatePermissionForUsersResponse
     */
    updatePermissionForUsers(taskUuid: string, request: UpdatePermissionForUsersRequest): Promise<UpdatePermissionForUsersResponse>;
}
