/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateAppGoodsServiceConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppGoodsServiceConversationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    isvUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppGoodsServiceConversationResponseBody extends $tea.Model {
    conversationName?: string;
    newConversation?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppGoodsServiceConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAppGoodsServiceConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * b195bb70dde337aabf3bcc020bf6250c
     */
    authCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * COOLAPP-1-1019F4BBC7D6212C5861000T
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid5uZRmigtVWpjcKPLrp5Pag==
     */
    encFieldBizCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusResponseBody extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCoolAppAccessStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlRequest extends $tea.Model {
    callbackPage?: string;
    extendParam?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    goodsCode?: string;
    itemCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlResponseBody extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInAppSkuUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoResponseBody extends $tea.Model {
    result?: GetPersonalExperienceInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPersonalExperienceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyOnCrmDataChangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyOnCrmDataChangeRequest extends $tea.Model {
    dataId?: string;
    extension?: {
        [key: string]: string;
    };
    operate?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyOnCrmDataChangeResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyOnCrmDataChangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyOnCrmDataChangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMarketOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMarketOrderResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2092310001312
     */
    bizOrderId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding23219001
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10003298001
     */
    createTimestamp?: number;
    endTimestamp?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * FW_GOODS_12319001
     */
    goodsCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试商品001
     */
    goodsName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    inAppOrder?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * FW_GOODS_31001
     */
    itemCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试规格001
     */
    itemName?: string;
    /**
     * @example
     * 10003299001
     */
    paidTimestamp?: number;
    /**
     * @example
     * 1
     */
    quantity?: number;
    /**
     * @example
     * 10003298003
     */
    startTimestamp?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    status?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 100
     */
    totalActualPayFee?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMarketOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMarketOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTaskReportHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTaskReportRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * biz1231231231abcd
     */
    bizNo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2020-12-12 12:00:00
     */
    operateDate?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * task-create
     */
    taskTag?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2312
     */
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTaskReportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoResponseBodyResult extends $tea.Model {
    /**
     * @example
     * ding1234
     */
    mainCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 创建应用商品服务群
     *
     * @param request - CreateAppGoodsServiceConversationRequest
     * @param headers - CreateAppGoodsServiceConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAppGoodsServiceConversationResponse
     */
    createAppGoodsServiceConversationWithOptions(request: CreateAppGoodsServiceConversationRequest, headers: CreateAppGoodsServiceConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAppGoodsServiceConversationResponse>;
    /**
     * 创建应用商品服务群
     *
     * @param request - CreateAppGoodsServiceConversationRequest
     * @returns CreateAppGoodsServiceConversationResponse
     */
    createAppGoodsServiceConversation(request: CreateAppGoodsServiceConversationRequest): Promise<CreateAppGoodsServiceConversationResponse>;
    /**
     * 获取酷应用访问状态
     *
     * @param request - GetCoolAppAccessStatusRequest
     * @param headers - GetCoolAppAccessStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCoolAppAccessStatusResponse
     */
    getCoolAppAccessStatusWithOptions(request: GetCoolAppAccessStatusRequest, headers: GetCoolAppAccessStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetCoolAppAccessStatusResponse>;
    /**
     * 获取酷应用访问状态
     *
     * @param request - GetCoolAppAccessStatusRequest
     * @returns GetCoolAppAccessStatusResponse
     */
    getCoolAppAccessStatus(request: GetCoolAppAccessStatusRequest): Promise<GetCoolAppAccessStatusResponse>;
    /**
     * 获取内购商品SKU页面地址
     *
     * @param request - GetInAppSkuUrlRequest
     * @param headers - GetInAppSkuUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInAppSkuUrlResponse
     */
    getInAppSkuUrlWithOptions(request: GetInAppSkuUrlRequest, headers: GetInAppSkuUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetInAppSkuUrlResponse>;
    /**
     * 获取内购商品SKU页面地址
     *
     * @param request - GetInAppSkuUrlRequest
     * @returns GetInAppSkuUrlResponse
     */
    getInAppSkuUrl(request: GetInAppSkuUrlRequest): Promise<GetInAppSkuUrlResponse>;
    /**
     * 获取个人体验相关信息
     *
     * @param request - GetPersonalExperienceInfoRequest
     * @param headers - GetPersonalExperienceInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPersonalExperienceInfoResponse
     */
    getPersonalExperienceInfoWithOptions(request: GetPersonalExperienceInfoRequest, headers: GetPersonalExperienceInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPersonalExperienceInfoResponse>;
    /**
     * 获取个人体验相关信息
     *
     * @param request - GetPersonalExperienceInfoRequest
     * @returns GetPersonalExperienceInfoResponse
     */
    getPersonalExperienceInfo(request: GetPersonalExperienceInfoRequest): Promise<GetPersonalExperienceInfoResponse>;
    /**
     * 销售助理CRM数据变更回调通知
     *
     * @param request - NotifyOnCrmDataChangeRequest
     * @param headers - NotifyOnCrmDataChangeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns NotifyOnCrmDataChangeResponse
     */
    notifyOnCrmDataChangeWithOptions(request: NotifyOnCrmDataChangeRequest, headers: NotifyOnCrmDataChangeHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyOnCrmDataChangeResponse>;
    /**
     * 销售助理CRM数据变更回调通知
     *
     * @param request - NotifyOnCrmDataChangeRequest
     * @returns NotifyOnCrmDataChangeResponse
     */
    notifyOnCrmDataChange(request: NotifyOnCrmDataChangeRequest): Promise<NotifyOnCrmDataChangeResponse>;
    /**
     * 应用市场订单查询
     *
     * @param headers - QueryMarketOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMarketOrderResponse
     */
    queryMarketOrderWithOptions(orderId: string, headers: QueryMarketOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMarketOrderResponse>;
    /**
     * 应用市场订单查询
     * @returns QueryMarketOrderResponse
     */
    queryMarketOrder(orderId: string): Promise<QueryMarketOrderResponse>;
    /**
     * app内用户操作任务同步
     *
     * @param request - UserTaskReportRequest
     * @param headers - UserTaskReportHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UserTaskReportResponse
     */
    userTaskReportWithOptions(request: UserTaskReportRequest, headers: UserTaskReportHeaders, runtime: $Util.RuntimeOptions): Promise<UserTaskReportResponse>;
    /**
     * app内用户操作任务同步
     *
     * @param request - UserTaskReportRequest
     * @returns UserTaskReportResponse
     */
    userTaskReport(request: UserTaskReportRequest): Promise<UserTaskReportResponse>;
}
