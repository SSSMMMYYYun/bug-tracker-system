/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddAccountMappingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAccountMappingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * BizName1
     */
    domain?: string;
    /**
     * @example
     * 单key和单value的长度不超过100
     */
    extension?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * o_123
     */
    outId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * t_123,如果不区分，填写固定值
     */
    outTenantId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * id_123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAccountMappingResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddAccountMappingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddAccountMappingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingRequest extends $tea.Model {
    /**
     * @example
     * description text
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    /**
     * @example
     * test name
     */
    name?: string;
    nodeListSceneConfig?: AddContactHideBySceneSettingRequestNodeListSceneConfig;
    objectDeptIds?: number[];
    objectTagIds?: number[];
    objectUserIds?: string[];
    profileSceneConfig?: AddContactHideBySceneSettingRequestProfileSceneConfig;
    searchSceneConfig?: AddContactHideBySceneSettingRequestSearchSceneConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingResponseBody extends $tea.Model {
    /**
     * @example
     * 1234001
     */
    settingId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddContactHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingRequest extends $tea.Model {
    chatSubtitleConfig?: AddEmpAttributeHideBySceneSettingRequestChatSubtitleConfig;
    /**
     * @example
     * description text
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    hideFields?: string[];
    /**
     * @example
     * test name
     */
    name?: string;
    objectDeptIds?: number[];
    objectTagIds?: number[];
    objectUserIds?: string[];
    profileSceneConfig?: AddEmpAttributeHideBySceneSettingRequestProfileSceneConfig;
    searchSceneConfig?: AddEmpAttributeHideBySceneSettingRequestSearchSceneConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    /**
     * @example
     * 1234001
     */
    settingId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddEmpAttributeHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgAccountOwnnessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgAccountOwnnessRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1698335999000
     */
    endTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    ownenssType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456
     */
    ownnessId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1698335999000
     */
    startTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 会议中
     */
    text?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgAccountOwnnessResponseBody extends $tea.Model {
    /**
     * @example
     * 123456
     */
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgAccountOwnnessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddOrgAccountOwnnessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnnualCertificationAuditHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnnualCertificationAuditRequest extends $tea.Model {
    applicantMobile?: string;
    applicantName?: string;
    applicationLetter?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    authStatus?: number;
    certificateType?: number;
    corpName?: string;
    depositaryBank?: string;
    extension?: string;
    legalPerson?: string;
    licenseNumber?: string;
    licenseUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * **if can be null:**
     * false
     */
    orderId?: string;
    publicAccount?: string;
    reasonCode?: string;
    reasonMsg?: string;
    tag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnnualCertificationAuditResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AnnualCertificationAuditResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AnnualCertificationAuditResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchApproveUnionApplyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchApproveUnionApplyRequest extends $tea.Model {
    body?: BatchApproveUnionApplyRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchApproveUnionApplyResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchApproveUnionApplyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchApproveUnionApplyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeMainAdminHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeMainAdminRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * corpIdCCC
     */
    effectCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userIdAA
     */
    sourceUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userIdBB
     */
    targetUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeMainAdminResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCooperateOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCooperateOrgRequest extends $tea.Model {
    /**
     * @example
     * 123456
     */
    industryCode?: number;
    /**
     * @example
     * mediaId
     */
    logoMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试联盟
     */
    orgName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCooperateOrgResponseBody extends $tea.Model {
    cooperateCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCooperateOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCooperateOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateManagementGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateManagementGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    members?: CreateManagementGroupRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    resourceIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    scope?: CreateManagementGroupRequestScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateManagementGroupResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * rolexxx
     */
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateManagementGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateManagementGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecondaryManagementGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecondaryManagementGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 财务常用权限
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    members?: CreateSecondaryManagementGroupRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    resourceIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    scope?: CreateSecondaryManagementGroupRequestScope;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * WB001
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecondaryManagementGroupResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * rolexxx
     */
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecondaryManagementGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSecondaryManagementGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAccountMappingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAccountMappingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * BizName1
     */
    domain?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * id_123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAccountMappingResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelAccountMappingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DelAccountMappingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelOrgAccUserOwnnessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelOrgAccUserOwnnessRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    ownenssType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456
     */
    ownnessId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelOrgAccUserOwnnessResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DelOrgAccUserOwnnessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DelOrgAccUserOwnnessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactHideBySceneSettingResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteContactHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactHideSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactHideSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactRestrictSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactRestrictSettingResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteContactRestrictSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteContactRestrictSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteEmpAttributeHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEmpAttributeVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEmpAttributeVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteManagementGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteManagementGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountMappingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountMappingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * BizName1
     */
    domain?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * id_123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountMappingResponseBody extends $tea.Model {
    result?: GetAccountMappingResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountMappingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAccountMappingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplyInviteInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplyInviteInfoRequest extends $tea.Model {
    deptId?: number;
    /**
     * **if can be null:**
     * true
     */
    inviterUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplyInviteInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    auditType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    empApplyJoinDept?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    inviteSwitch?: boolean;
    inviteUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    linkInvite?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    orgApplyCodeInvite?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    searchNameInvite?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplyInviteInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetApplyInviteInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchAuthDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchAuthDataRequest extends $tea.Model {
    body?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dinglkj123hj25jk54j2
     */
    branchCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * eduStuCnt
     */
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchAuthDataResponseBody extends $tea.Model {
    result?: GetBranchAuthDataResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchAuthDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBranchAuthDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInUserHolderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInUserHolderResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    avatarUrl?: string;
    cardAcceptStatus?: number;
    cardAcceptTimeLong?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    cardId?: string;
    /**
     * @example
     * 0
     */
    cardSource?: number;
    extension?: {
        [key: string]: any;
    };
    industryName?: string;
    introduce?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    orgName?: string;
    templateId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInUserHolderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCardInUserHolderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBody extends $tea.Model {
    adminRole?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    avatarUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    cardId?: string;
    extension?: GetCardInfoResponseBodyExtension;
    industryName?: string;
    introduce?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    orgName?: string;
    settings?: {
        [key: string]: any;
    };
    templateId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCardInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactHideBySceneSettingResponseBody extends $tea.Model {
    /**
     * @example
     * description info
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    /**
     * @example
     * 123456
     */
    id?: number;
    /**
     * @example
     * abc
     */
    name?: string;
    nodeListSceneConfig?: GetContactHideBySceneSettingResponseBodyNodeListSceneConfig;
    objectDeptIds?: number[];
    objectTagIds?: number[];
    objectUserIds?: string[];
    profileSceneConfig?: GetContactHideBySceneSettingResponseBodyProfileSceneConfig;
    searchSceneConfig?: GetContactHideBySceneSettingResponseBodySearchSceneConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetContactHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCooperateOrgInviteInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCooperateOrgInviteInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    inviteUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCooperateOrgInviteInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCooperateOrgInviteInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpCardStyleListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpCardStyleListResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: {
        [key: string]: any;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpCardStyleListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCorpCardStyleListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingIdByMigrationDingIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingIdByMigrationDingIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    migrationDingId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingIdByMigrationDingIdResponseBody extends $tea.Model {
    dingId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingIdByMigrationDingIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDingIdByMigrationDingIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    chatSubtitleConfig?: GetEmpAttributeHideBySceneSettingResponseBodyChatSubtitleConfig;
    /**
     * @example
     * 描述信息
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    hideFields?: string[];
    /**
     * @example
     * 123456
     */
    id?: number;
    /**
     * @example
     * 设置1
     */
    name?: string;
    objectDeptIds?: number[];
    objectTagIds?: number[];
    objectUserIds?: string[];
    profileSceneConfig?: GetEmpAttributeHideBySceneSettingResponseBodyProfileSceneConfig;
    searchSceneConfig?: GetEmpAttributeHideBySceneSettingResponseBodySearchSceneConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetEmpAttributeHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLatestDingIndexHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLatestDingIndexResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 50
     */
    idxCarbon?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 50
     */
    idxEfficiency?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 888
     */
    idxMonthlyAvg?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 888
     */
    idxTotal?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20210412
     */
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLatestDingIndexResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetLatestDingIndexResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationDingIdByDingIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationDingIdByDingIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dingId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationDingIdByDingIdResponseBody extends $tea.Model {
    migrationDingIdList?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationDingIdByDingIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMigrationDingIdByDingIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationUnionIdByUnionIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationUnionIdByUnionIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationUnionIdByUnionIdResponseBody extends $tea.Model {
    migrationUnionIdList?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMigrationUnionIdByUnionIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMigrationUnionIdByUnionIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgAuthInfoRequest extends $tea.Model {
    /**
     * @example
     * dingxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgAuthInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    authLevel?: number;
    /**
     * @example
     * xxx
     */
    legalPerson?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试有限公司
     */
    licenseOrgName?: string;
    /**
     * @example
     * https://XXX.XX
     */
    licenseUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试
     */
    orgName?: string;
    /**
     * @example
     * 2456677
     */
    organizationCode?: string;
    /**
     * @example
     * 1233
     */
    registrationNum?: string;
    /**
     * @example
     * 123566788
     */
    unifiedSocialCredit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOrgAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateFileJobResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateFileJobResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * fXrgPrvsNiZNa8RWis9Nk1SY
     */
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateFileJobResultResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    status?: string;
    /**
     * @example
     * xxxx
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTranslateFileJobResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTranslateFileJobResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUnionIdByMigrationUnionIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUnionIdByMigrationUnionIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    migrationUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUnionIdByMigrationUnionIdResponseBody extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUnionIdByMigrationUnionIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUnionIdByMigrationUnionIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserResponseBody extends $tea.Model {
    avatarUrl?: string;
    email?: string;
    loginEmail?: string;
    mobile?: string;
    nick?: string;
    openId?: string;
    stateCode?: string;
    unionId?: string;
    visitor?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCardHolderListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCardHolderListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCardHolderListResponseBody extends $tea.Model {
    hasMore?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    list?: GetUserCardHolderListResponseBodyList[];
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCardHolderListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserCardHolderListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsFriendHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsFriendRequest extends $tea.Model {
    /**
     * @example
     * 15968883355
     */
    mobileNo?: string;
    /**
     * @example
     * 098231
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsFriendResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    isFriend?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsFriendResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IsFriendResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvCardEventPushHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvCardEventPushRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    eventParams?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    eventType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    isvCardId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    isvToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    isvUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvCardEventPushResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvCardEventPushResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IsvCardEventPushResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageRequest extends $tea.Model {
    /**
     * @example
     * 123
     */
    agentId?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: ListBasicRoleInPageResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListBasicRoleInPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactHideSettingsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactHideSettingsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactHideSettingsResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasMore?: boolean;
    list?: ListContactHideSettingsResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactHideSettingsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListContactHideSettingsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactRestrictSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactRestrictSettingRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactRestrictSettingResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasMore?: boolean;
    list?: ListContactRestrictSettingResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactRestrictSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListContactRestrictSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpAttributeVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpAttributeVisibilityRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpAttributeVisibilityResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    hasMore?: boolean;
    list?: ListEmpAttributeVisibilityResponseBodyList[];
    /**
     * @remarks
     * This parameter is required.
     */
    nextCursor?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpAttributeVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListEmpAttributeVisibilityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpLeaveRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpLeaveRecordsRequest extends $tea.Model {
    /**
     * @example
     * 2020-08-10T00:00:00
     */
    endTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @example
     * DCCD7A656FFA6F07
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2020-07-10T00:00:00
     */
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpLeaveRecordsResponseBody extends $tea.Model {
    /**
     * @example
     * DCCD7A656FFA6F07
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    records?: ListEmpLeaveRecordsResponseBodyRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpLeaveRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListEmpLeaveRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    groups?: ListManagementGroupsResponseBodyGroups[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    hasMore?: boolean;
    /**
     * @example
     * 111
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListManagementGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOwnedOrgByStaffIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOwnedOrgByStaffIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userIdxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOwnedOrgByStaffIdResponseBody extends $tea.Model {
    orgList?: ListOwnedOrgByStaffIdResponseBodyOrgList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOwnedOrgByStaffIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListOwnedOrgByStaffIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSeniorSettingsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSeniorSettingsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    seniorStaffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSeniorSettingsResponseBody extends $tea.Model {
    protectScenes?: string[];
    seniorStaffId?: string;
    seniorWhiteList?: ListSeniorSettingsResponseBodySeniorWhiteList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSeniorSettingsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSeniorSettingsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyOrgAccUserOwnnessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyOrgAccUserOwnnessRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1698335999000
     */
    endTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    ownenssType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456
     */
    ownnessId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1698335999000
     */
    startTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 会议中
     */
    text?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyOrgAccUserOwnnessResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyOrgAccUserOwnnessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyOrgAccUserOwnnessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MultiOrgPermissionGrantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MultiOrgPermissionGrantRequest extends $tea.Model {
    /**
     * @example
     * 123
     *
     * **if can be null:**
     * false
     */
    grantDeptIdList?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxx
     */
    joinCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MultiOrgPermissionGrantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisibleInOtherOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisibleInOtherOrgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    optUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    toCorpIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisibleInOtherOrgResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisibleInOtherOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OrgAccountMobileVisibleInOtherOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisiblePermissonHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisiblePermissonRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    body?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisiblePermissonResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgAccountMobileVisiblePermissonResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OrgAccountMobileVisiblePermissonResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushVerifyEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushVerifyEventRequest extends $tea.Model {
    callerDeviceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    factorCodeList?: string[];
    state?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushVerifyEventResponseBody extends $tea.Model {
    verifyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushVerifyEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushVerifyEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardVisitorStatisticDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardVisitorStatisticDataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * RCsp7PJmmTUr7w0hbs9aKAiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardVisitorStatisticDataResponseBody extends $tea.Model {
    /**
     * @example
     * 1
     */
    cardSendCnt?: number;
    /**
     * @example
     * 1
     */
    todayVisitAddCnt?: number;
    /**
     * @example
     * 1
     */
    todayVisitCnt?: number;
    /**
     * @example
     * 1
     */
    totalVisitAddCnt?: number;
    /**
     * @example
     * 1
     */
    totalVisitCnt?: number;
    /**
     * @example
     * 1
     */
    wechatTodayVisitAddCnt?: number;
    /**
     * @example
     * 1
     */
    wechatTodayVisitCnt?: number;
    /**
     * @example
     * 1
     */
    wechatTotalVisitAddCnt?: number;
    /**
     * @example
     * 1
     */
    wechatTotalVisitCnt?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCardVisitorStatisticDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCardVisitorStatisticDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpStatisticDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpStatisticDataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20230101
     */
    endTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20220101
     */
    startTime?: string;
    templateIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * RCsp7PJmmTUr7w0hbs9aKAiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpStatisticDataResponseBody extends $tea.Model {
    result?: QueryCorpStatisticDataResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpStatisticDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCorpStatisticDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpUserStatisticHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpUserStatisticRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20230101
     */
    endTime?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20220101
     */
    startTime?: string;
    templateIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * RCsp7PJmmTUr7w0hbs9aKAiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpUserStatisticResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryCorpUserStatisticResponseBodyList[];
    /**
     * @example
     * 5
     */
    nextToken?: number;
    /**
     * @example
     * 20
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpUserStatisticResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCorpUserStatisticResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourceManagementMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourceManagementMembersResponseBody extends $tea.Model {
    members?: QueryResourceManagementMembersResponseBodyMembers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourceManagementMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryResourceManagementMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userIdXXX
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatusResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * false/true
     */
    disable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserManagementResourcesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserManagementResourcesResponseBody extends $tea.Model {
    resourceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserManagementResourcesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserManagementResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVerifyResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVerifyResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    verifyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVerifyResultResponseBody extends $tea.Model {
    corpId?: string;
    factorCode?: string;
    factorDesc?: string;
    resultCode?: string;
    resultDesc?: string;
    state?: string;
    userId?: string;
    verifyTimestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVerifyResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryVerifyResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDepartmentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDepartmentRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    offset?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 财务部
     */
    queryWord?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDepartmentResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    hasMore?: boolean;
    list?: number[];
    /**
     * @remarks
     * This parameter is required.
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchDepartmentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchDepartmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchUserRequest extends $tea.Model {
    /**
     * @example
     * 1
     */
    fullMatchField?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    offset?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 张三
     */
    queryWord?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchUserResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: string[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SeparateBranchOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SeparateBranchOrgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    attachDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SeparateBranchOrgResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SeparateBranchOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SeparateBranchOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDisableHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDisableRequest extends $tea.Model {
    /**
     * @example
     * reasonYYY
     */
    reason?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userIdXXX
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDisableResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDisableResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetDisableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEnableHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEnableRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * userIdXXX
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEnableResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetEnableResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetEnableResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutRequest extends $tea.Model {
    reason?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignOutResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SignOutResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SortUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SortUserRequest extends $tea.Model {
    /**
     * @example
     * 0
     */
    sortType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SortUserResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SortUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SortUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformToExclusiveAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformToExclusiveAccountRequest extends $tea.Model {
    /**
     * @example
     * false/true
     */
    idpDingTalk?: boolean;
    initPassword?: string;
    loginId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * migrate
     */
    transformType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransformToExclusiveAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateFileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"#iAEHAqRmaWxlA6h5dW5kaXNrMAT":"导出.xlsx"}
     *
     * **if can be null:**
     * false
     */
    medias?: {
        [key: string]: string;
    };
    /**
     * @example
     * 学习手册
     */
    outputFileName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * fXRUNiSlgfK3e1hzFUSciiJwiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateFileResponseBody extends $tea.Model {
    /**
     * @example
     * fXrgPrvsNiZNa8RWis9Nk1SY
     */
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TranslateFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TranslateFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UniqueQueryUserCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UniqueQueryUserCardRequest extends $tea.Model {
    /**
     * @example
     * 123
     */
    templateId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dfsdfsfsfdsfs
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UniqueQueryUserCardResponseBody extends $tea.Model {
    /**
     * @example
     * @lADPD2sQxoYs677NAavNAao
     */
    avatarUrl?: string;
    /**
     * @example
     * CARD-6F0DA174-A0F4-4EBF-B24B-5FDFA648D25E
     */
    cardId?: string;
    extension?: {
        [key: string]: any;
    };
    /**
     * @example
     * 工业
     */
    industryName?: string;
    /**
     * @example
     * 我是谁
     */
    introduce?: string;
    /**
     * @example
     * 张三
     */
    name?: string;
    /**
     * @example
     * 测试企业
     */
    orgName?: string;
    settings?: {
        [key: string]: any;
    };
    /**
     * @example
     * 163520027_5FE66C522EA142C8r7Abf7VY
     */
    templateId?: string;
    /**
     * @example
     * 标题
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UniqueQueryUserCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UniqueQueryUserCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchAttributesInCooperateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchAttributesInCooperateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    body?: UpdateBranchAttributesInCooperateRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchAttributesInCooperateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchVisibleSettingInCooperateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchVisibleSettingInCooperateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    body?: UpdateBranchVisibleSettingInCooperateRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchVisibleSettingInCooperateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingRequest extends $tea.Model {
    /**
     * @example
     * description text
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    /**
     * @example
     * test name
     */
    name?: string;
    nodeListSceneConfig?: UpdateContactHideBySceneSettingRequestNodeListSceneConfig;
    objectDeptIds?: number[];
    objectTagIds?: number[];
    objectUserIds?: string[];
    profileSceneConfig?: UpdateContactHideBySceneSettingRequestProfileSceneConfig;
    searchSceneConfig?: UpdateContactHideBySceneSettingRequestSearchSceneConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateContactHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideSettingRequest extends $tea.Model {
    /**
     * @example
     * true
     */
    active?: boolean;
    /**
     * @example
     * description text
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeStaffIds?: string[];
    excludeTagIds?: number[];
    /**
     * **if can be null:**
     * true
     */
    hideInSearch?: boolean;
    /**
     * **if can be null:**
     * true
     */
    hideInUserProfile?: boolean;
    /**
     * @example
     * 11234
     */
    id?: number;
    /**
     * @example
     * test name
     */
    name?: string;
    objectDeptIds?: number[];
    objectStaffIds?: string[];
    objectTagIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideSettingResponseBody extends $tea.Model {
    /**
     * @example
     * 1234001
     */
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateContactHideSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactRestrictSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactRestrictSettingRequest extends $tea.Model {
    /**
     * @example
     * true
     */
    active?: boolean;
    /**
     * @example
     * rule description
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    /**
     * @example
     * 1000
     */
    id?: number;
    /**
     * @example
     * contact restrict name
     */
    name?: string;
    /**
     * **if can be null:**
     * true
     */
    restrictInSearch?: boolean;
    /**
     * **if can be null:**
     * true
     */
    restrictInUserProfile?: boolean;
    subjectDeptIds?: number[];
    subjectTagIds?: number[];
    subjectUserIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactRestrictSettingResponseBody extends $tea.Model {
    /**
     * @example
     * 10001
     */
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactRestrictSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateContactRestrictSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeptSettngTailFirstHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeptSettngTailFirstRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    enable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeptSettngTailFirstResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttrbuteVisibilitySettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttrbuteVisibilitySettingRequest extends $tea.Model {
    active?: boolean;
    description?: string;
    excludeDeptIds?: number[];
    excludeStaffIds?: string[];
    excludeTagIds?: number[];
    hideFields?: string[];
    /**
     * @example
     * 11111
     */
    id?: number;
    name?: string;
    objectDeptIds?: number[];
    objectStaffIds?: string[];
    objectTagIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttrbuteVisibilitySettingResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttrbuteVisibilitySettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateEmpAttrbuteVisibilitySettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingRequest extends $tea.Model {
    chatSubtitleConfig?: UpdateEmpAttributeHideBySceneSettingRequestChatSubtitleConfig;
    /**
     * @example
     * description text
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    hideFields?: string[];
    /**
     * @example
     * test name
     */
    name?: string;
    objectDeptIds?: number[];
    objectTagIds?: number[];
    objectUserIds?: string[];
    profileSceneConfig?: UpdateEmpAttributeHideBySceneSettingRequestProfileSceneConfig;
    searchSceneConfig?: UpdateEmpAttributeHideBySceneSettingRequestSearchSceneConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateEmpAttributeHideBySceneSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateManagementGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateManagementGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 财务管理组
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    members?: UpdateManagementGroupRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    resourceIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    scope?: UpdateManagementGroupRequestScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateManagementGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSeniorSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSeniorSettingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    open?: boolean;
    permitDeptIds?: number[];
    permitStaffIds?: string[];
    permitTagIds?: number[];
    protectScenes?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    seniorStaffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSeniorSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTitleAuditStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTitleAuditStatusRequest extends $tea.Model {
    authStatus?: string;
    educationLevel?: string;
    extension?: string;
    major?: string;
    position?: string;
    reasonCode?: string;
    reasonMsg?: string;
    school?: string;
    type?: string;
    unionId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTitleAuditStatusResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTitleAuditStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateTitleAuditStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserOwnnessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserOwnnessRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1-删除，0-正常
     */
    deletedFlag?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    endTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1-请假，3-出差
     */
    ownenssType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserOwnnessResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserOwnnessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateUserOwnnessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingRequestNodeListSceneConfig extends $tea.Model {
    active?: boolean;
    deptObjectIncludeEmp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddContactHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    active?: boolean;
    deptObjectIncludeEmp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingRequestChatSubtitleConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddEmpAttributeHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchApproveUnionApplyRequestBody extends $tea.Model {
    /**
     * @example
     * ding1234
     */
    branchCorpId?: string;
    /**
     * @example
     * 123456
     */
    linkDeptId?: number;
    /**
     * @example
     * 测试
     */
    unionRootName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateManagementGroupRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * WB001
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateManagementGroupRequestScope extends $tea.Model {
    deptIds?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1:全公司 2:所在部门 3:指定部门
     */
    scopeType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecondaryManagementGroupRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * WB001
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSecondaryManagementGroupRequestScope extends $tea.Model {
    deptIds?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1:全公司 2:所在部门 3:指定部门
     */
    scopeType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountMappingResponseBodyResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * BizName1
     */
    domain?: string;
    extension?: {
        [key: string]: string;
    };
    /**
     * @example
     * o_123
     */
    outId?: string;
    /**
     * @example
     * t_123,如果不区分，填写固定值
     */
    outTenantId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * id_123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchAuthDataResponseBodyResult extends $tea.Model {
    /**
     * @example
     * teacherCnt
     */
    fieldCode?: string;
    /**
     * @example
     * 老师数量
     */
    fieldName?: string;
    /**
     * @example
     * 120
     */
    fieldValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfoAddressArea extends $tea.Model {
    region?: string;
    regionFullName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfoAddress extends $tea.Model {
    area?: GetCardInfoResponseBodyExtensionCardContactInfoAddressArea;
    detail?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfoEmail extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfoLink extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfoTelephone extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfoWorkPhone extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtensionCardContactInfo extends $tea.Model {
    address?: GetCardInfoResponseBodyExtensionCardContactInfoAddress[];
    email?: GetCardInfoResponseBodyExtensionCardContactInfoEmail[];
    link?: GetCardInfoResponseBodyExtensionCardContactInfoLink[];
    telephone?: GetCardInfoResponseBodyExtensionCardContactInfoTelephone[];
    workPhone?: GetCardInfoResponseBodyExtensionCardContactInfoWorkPhone[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCardInfoResponseBodyExtension extends $tea.Model {
    cardContactInfo?: GetCardInfoResponseBodyExtensionCardContactInfo;
    corpId?: string;
    department?: string;
    orgAuthed?: boolean;
    orgLogo?: string;
    originCardUrl?: string;
    shareContent?: string;
    thumbnailUrl?: string;
    videoFileName?: string;
    videoTitle?: string;
    videoUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactHideBySceneSettingResponseBodyNodeListSceneConfig extends $tea.Model {
    active?: boolean;
    deptObjectIncludeEmp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactHideBySceneSettingResponseBodyProfileSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactHideBySceneSettingResponseBodySearchSceneConfig extends $tea.Model {
    active?: boolean;
    deptObjectIncludeEmp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmpAttributeHideBySceneSettingResponseBodyChatSubtitleConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmpAttributeHideBySceneSettingResponseBodyProfileSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmpAttributeHideBySceneSettingResponseBodySearchSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCardHolderListResponseBodyList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    avatarUrl?: string;
    cardAcceptStatus?: number;
    cardAcceptTimeLong?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    cardId?: string;
    /**
     * @example
     * 0
     */
    cardSource?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    extension?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    industryName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    introduce?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    orgName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    templateId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponseBodyListOpenActionOpenConditionOpenContactScope extends $tea.Model {
    deptIds?: number[];
    includeMemberDepts?: boolean;
    includeSelfManageDepts?: boolean;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponseBodyListOpenActionOpenCondition extends $tea.Model {
    openContactScope?: ListBasicRoleInPageResponseBodyListOpenActionOpenConditionOpenContactScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponseBodyListOpenAction extends $tea.Model {
    actionIds?: string[];
    openCondition?: ListBasicRoleInPageResponseBodyListOpenActionOpenCondition;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponseBodyListOpenMembers extends $tea.Model {
    belongCorpId?: string;
    memberId?: string;
    memberType?: string;
    operateUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListBasicRoleInPageResponseBodyList extends $tea.Model {
    openAction?: ListBasicRoleInPageResponseBodyListOpenAction;
    openMembers?: ListBasicRoleInPageResponseBodyListOpenMembers[];
    openResources?: string[];
    openRoleId?: string;
    openRoleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactHideSettingsResponseBodyList extends $tea.Model {
    /**
     * @example
     * true
     */
    active?: boolean;
    /**
     * @example
     * 影藏对deptA但是user1可见。
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeStaffIds?: string[];
    excludeTagIds?: number[];
    id?: number;
    /**
     * @example
     * 测试规则
     */
    name?: string;
    objectDeptIds?: number[];
    objectStaffIds?: string[];
    objectTagIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListContactRestrictSettingResponseBodyList extends $tea.Model {
    /**
     * @example
     * true
     */
    active?: boolean;
    /**
     * @example
     * description
     */
    description?: string;
    excludeDeptIds?: number[];
    excludeTagIds?: number[];
    excludeUserIds?: string[];
    /**
     * @example
     * 1001
     */
    id?: number;
    /**
     * @example
     * contact restrict name
     */
    name?: string;
    restrictInSearch?: boolean;
    restrictInUserProfile?: boolean;
    subjectDeptIds?: number[];
    subjectTagIds?: number[];
    subjectUserIds?: string[];
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpAttributeVisibilityResponseBodyList extends $tea.Model {
    active?: boolean;
    description?: string;
    excludeDeptIds?: number[];
    excludeStaffIds?: string[];
    excludeTagIds?: number[];
    gmtCreate?: string;
    gmtModified?: string;
    hideFields?: string[];
    /**
     * @example
     * 10001
     */
    id?: number;
    name?: string;
    objectDeptIds?: number[];
    objectStaffIds?: string[];
    objectTagIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListEmpLeaveRecordsResponseBodyRecords extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * oapi
     */
    leaveReason?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-01-06T11:47:37Z
     */
    leaveTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 185xxxx7676
     */
    mobile?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 张三
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 86
     */
    stateCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10000
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsResponseBodyGroupsMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * WB001
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsResponseBodyGroupsScope extends $tea.Model {
    deptIds?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1:全公司 2:所在部门 3:指定部门
     */
    scopeType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListManagementGroupsResponseBodyGroups extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * rolexxx
     */
    groupId?: string;
    /**
     * @example
     * 财务管理
     */
    groupName?: string;
    members?: ListManagementGroupsResponseBodyGroupsMembers[];
    resourceIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    scope?: ListManagementGroupsResponseBodyGroupsScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOwnedOrgByStaffIdResponseBodyOrgList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * corpIdxxx
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * corpNamexxx
     */
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSeniorSettingsResponseBodySeniorWhiteList extends $tea.Model {
    /**
     * @example
     * 1234
     */
    id?: string;
    /**
     * @example
     * 测试角色
     */
    name?: string;
    /**
     * @example
     * 1
     */
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpStatisticDataResponseBodyResult extends $tea.Model {
    /**
     * @example
     * 2
     */
    cardBeReceivedTotalCnt?: number;
    /**
     * @example
     * 4
     */
    cardReceiveTotalCnt?: number;
    /**
     * @example
     * 1
     */
    cardTotalBeVisitedCnt?: number;
    /**
     * @example
     * 20230101
     */
    dataDate?: string;
    /**
     * @example
     * 3
     */
    dingTotalShareCnt?: number;
    /**
     * @example
     * 1
     */
    totalSendCnt?: number;
    /**
     * @example
     * 2
     */
    wechatTotalShareCnt?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCorpUserStatisticResponseBodyList extends $tea.Model {
    /**
     * @example
     * wwww.xxxxx.com/xxx.jpg
     */
    avatarUrl?: string;
    /**
     * @example
     * 张三
     */
    name?: string;
    /**
     * @example
     * 5
     */
    receiveCnt?: number;
    /**
     * @example
     * 3
     */
    sendCnt?: number;
    /**
     * @example
     * RCsp7PJmmTUr7w0hbs9aKAiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryResourceManagementMembersResponseBodyMembers extends $tea.Model {
    /**
     * @example
     * WB001
     */
    memberId?: string;
    /**
     * @example
     * user
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchAttributesInCooperateRequestBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1234
     */
    branchCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 23456
     */
    linkDeptId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1234
     */
    unionRootName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBranchVisibleSettingInCooperateRequestBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding1234
     */
    branchCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    open?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    type?: number;
    visibleBranchCorpIds?: string[];
    visibleDeptIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingRequestNodeListSceneConfig extends $tea.Model {
    active?: boolean;
    deptObjectIncludeEmp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    active?: boolean;
    deptObjectIncludeEmp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingRequestChatSubtitleConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateEmpAttributeHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    active?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateManagementGroupRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * WB001
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateManagementGroupRequestScope extends $tea.Model {
    deptIds?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1:全公司 2:所在部门 3:指定部门
     */
    scopeType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 创建账号映射
     *
     * @param request - AddAccountMappingRequest
     * @param headers - AddAccountMappingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddAccountMappingResponse
     */
    addAccountMappingWithOptions(request: AddAccountMappingRequest, headers: AddAccountMappingHeaders, runtime: $Util.RuntimeOptions): Promise<AddAccountMappingResponse>;
    /**
     * 创建账号映射
     *
     * @param request - AddAccountMappingRequest
     * @returns AddAccountMappingResponse
     */
    addAccountMapping(request: AddAccountMappingRequest): Promise<AddAccountMappingResponse>;
    /**
     * 添加通讯录组织架构分场景隐藏设置
     *
     * @param request - AddContactHideBySceneSettingRequest
     * @param headers - AddContactHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddContactHideBySceneSettingResponse
     */
    addContactHideBySceneSettingWithOptions(request: AddContactHideBySceneSettingRequest, headers: AddContactHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<AddContactHideBySceneSettingResponse>;
    /**
     * 添加通讯录组织架构分场景隐藏设置
     *
     * @param request - AddContactHideBySceneSettingRequest
     * @returns AddContactHideBySceneSettingResponse
     */
    addContactHideBySceneSetting(request: AddContactHideBySceneSettingRequest): Promise<AddContactHideBySceneSettingResponse>;
    /**
     * 添加员工属性分场景隐藏设置
     *
     * @param request - AddEmpAttributeHideBySceneSettingRequest
     * @param headers - AddEmpAttributeHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddEmpAttributeHideBySceneSettingResponse
     */
    addEmpAttributeHideBySceneSettingWithOptions(request: AddEmpAttributeHideBySceneSettingRequest, headers: AddEmpAttributeHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<AddEmpAttributeHideBySceneSettingResponse>;
    /**
     * 添加员工属性分场景隐藏设置
     *
     * @param request - AddEmpAttributeHideBySceneSettingRequest
     * @returns AddEmpAttributeHideBySceneSettingResponse
     */
    addEmpAttributeHideBySceneSetting(request: AddEmpAttributeHideBySceneSettingRequest): Promise<AddEmpAttributeHideBySceneSettingResponse>;
    /**
     * 新增企业账号工作状态
     *
     * @param request - AddOrgAccountOwnnessRequest
     * @param headers - AddOrgAccountOwnnessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddOrgAccountOwnnessResponse
     */
    addOrgAccountOwnnessWithOptions(request: AddOrgAccountOwnnessRequest, headers: AddOrgAccountOwnnessHeaders, runtime: $Util.RuntimeOptions): Promise<AddOrgAccountOwnnessResponse>;
    /**
     * 新增企业账号工作状态
     *
     * @param request - AddOrgAccountOwnnessRequest
     * @returns AddOrgAccountOwnnessResponse
     */
    addOrgAccountOwnness(request: AddOrgAccountOwnnessRequest): Promise<AddOrgAccountOwnnessResponse>;
    /**
     * 年检认证审核
     *
     * @param request - AnnualCertificationAuditRequest
     * @param headers - AnnualCertificationAuditHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AnnualCertificationAuditResponse
     */
    annualCertificationAuditWithOptions(request: AnnualCertificationAuditRequest, headers: AnnualCertificationAuditHeaders, runtime: $Util.RuntimeOptions): Promise<AnnualCertificationAuditResponse>;
    /**
     * 年检认证审核
     *
     * @param request - AnnualCertificationAuditRequest
     * @returns AnnualCertificationAuditResponse
     */
    annualCertificationAudit(request: AnnualCertificationAuditRequest): Promise<AnnualCertificationAuditResponse>;
    /**
     * 批量同意(合作空间/集团)的关联申请
     *
     * @param request - BatchApproveUnionApplyRequest
     * @param headers - BatchApproveUnionApplyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchApproveUnionApplyResponse
     */
    batchApproveUnionApplyWithOptions(request: BatchApproveUnionApplyRequest, headers: BatchApproveUnionApplyHeaders, runtime: $Util.RuntimeOptions): Promise<BatchApproveUnionApplyResponse>;
    /**
     * 批量同意(合作空间/集团)的关联申请
     *
     * @param request - BatchApproveUnionApplyRequest
     * @returns BatchApproveUnionApplyResponse
     */
    batchApproveUnionApply(request: BatchApproveUnionApplyRequest): Promise<BatchApproveUnionApplyResponse>;
    /**
     * 专属帐号转交主管理员(创建者)
     *
     * @param request - ChangeMainAdminRequest
     * @param headers - ChangeMainAdminHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChangeMainAdminResponse
     */
    changeMainAdminWithOptions(request: ChangeMainAdminRequest, headers: ChangeMainAdminHeaders, runtime: $Util.RuntimeOptions): Promise<ChangeMainAdminResponse>;
    /**
     * 专属帐号转交主管理员(创建者)
     *
     * @param request - ChangeMainAdminRequest
     * @returns ChangeMainAdminResponse
     */
    changeMainAdmin(request: ChangeMainAdminRequest): Promise<ChangeMainAdminResponse>;
    /**
     * 创建合作空间
     *
     * @param request - CreateCooperateOrgRequest
     * @param headers - CreateCooperateOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCooperateOrgResponse
     */
    createCooperateOrgWithOptions(request: CreateCooperateOrgRequest, headers: CreateCooperateOrgHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCooperateOrgResponse>;
    /**
     * 创建合作空间
     *
     * @param request - CreateCooperateOrgRequest
     * @returns CreateCooperateOrgResponse
     */
    createCooperateOrg(request: CreateCooperateOrgRequest): Promise<CreateCooperateOrgResponse>;
    /**
     * 创建管理组
     *
     * @param request - CreateManagementGroupRequest
     * @param headers - CreateManagementGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateManagementGroupResponse
     */
    createManagementGroupWithOptions(request: CreateManagementGroupRequest, headers: CreateManagementGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateManagementGroupResponse>;
    /**
     * 创建管理组
     *
     * @param request - CreateManagementGroupRequest
     * @returns CreateManagementGroupResponse
     */
    createManagementGroup(request: CreateManagementGroupRequest): Promise<CreateManagementGroupResponse>;
    /**
     * 子管理员创建管理组
     *
     * @param request - CreateSecondaryManagementGroupRequest
     * @param headers - CreateSecondaryManagementGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSecondaryManagementGroupResponse
     */
    createSecondaryManagementGroupWithOptions(request: CreateSecondaryManagementGroupRequest, headers: CreateSecondaryManagementGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSecondaryManagementGroupResponse>;
    /**
     * 子管理员创建管理组
     *
     * @param request - CreateSecondaryManagementGroupRequest
     * @returns CreateSecondaryManagementGroupResponse
     */
    createSecondaryManagementGroup(request: CreateSecondaryManagementGroupRequest): Promise<CreateSecondaryManagementGroupResponse>;
    /**
     * 删除账号映射
     *
     * @param request - DelAccountMappingRequest
     * @param headers - DelAccountMappingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DelAccountMappingResponse
     */
    delAccountMappingWithOptions(request: DelAccountMappingRequest, headers: DelAccountMappingHeaders, runtime: $Util.RuntimeOptions): Promise<DelAccountMappingResponse>;
    /**
     * 删除账号映射
     *
     * @param request - DelAccountMappingRequest
     * @returns DelAccountMappingResponse
     */
    delAccountMapping(request: DelAccountMappingRequest): Promise<DelAccountMappingResponse>;
    /**
     * 删除企业账号工作状态
     *
     * @param request - DelOrgAccUserOwnnessRequest
     * @param headers - DelOrgAccUserOwnnessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DelOrgAccUserOwnnessResponse
     */
    delOrgAccUserOwnnessWithOptions(request: DelOrgAccUserOwnnessRequest, headers: DelOrgAccUserOwnnessHeaders, runtime: $Util.RuntimeOptions): Promise<DelOrgAccUserOwnnessResponse>;
    /**
     * 删除企业账号工作状态
     *
     * @param request - DelOrgAccUserOwnnessRequest
     * @returns DelOrgAccUserOwnnessResponse
     */
    delOrgAccUserOwnness(request: DelOrgAccUserOwnnessRequest): Promise<DelOrgAccUserOwnnessResponse>;
    /**
     * 删除通讯录组织架构分场景隐藏设置
     *
     * @param headers - DeleteContactHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteContactHideBySceneSettingResponse
     */
    deleteContactHideBySceneSettingWithOptions(settingId: string, headers: DeleteContactHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteContactHideBySceneSettingResponse>;
    /**
     * 删除通讯录组织架构分场景隐藏设置
     * @returns DeleteContactHideBySceneSettingResponse
     */
    deleteContactHideBySceneSetting(settingId: string): Promise<DeleteContactHideBySceneSettingResponse>;
    /**
     * 删除通讯录隐藏设置
     *
     * @param headers - DeleteContactHideSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteContactHideSettingResponse
     */
    deleteContactHideSettingWithOptions(settingId: string, headers: DeleteContactHideSettingHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteContactHideSettingResponse>;
    /**
     * 删除通讯录隐藏设置
     * @returns DeleteContactHideSettingResponse
     */
    deleteContactHideSetting(settingId: string): Promise<DeleteContactHideSettingResponse>;
    /**
     * 删除限制查看通讯录设置
     *
     * @param headers - DeleteContactRestrictSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteContactRestrictSettingResponse
     */
    deleteContactRestrictSettingWithOptions(settingId: string, headers: DeleteContactRestrictSettingHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteContactRestrictSettingResponse>;
    /**
     * 删除限制查看通讯录设置
     * @returns DeleteContactRestrictSettingResponse
     */
    deleteContactRestrictSetting(settingId: string): Promise<DeleteContactRestrictSettingResponse>;
    /**
     * 删除员工属性分场景隐藏设置
     *
     * @param headers - DeleteEmpAttributeHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteEmpAttributeHideBySceneSettingResponse
     */
    deleteEmpAttributeHideBySceneSettingWithOptions(settingId: string, headers: DeleteEmpAttributeHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteEmpAttributeHideBySceneSettingResponse>;
    /**
     * 删除员工属性分场景隐藏设置
     * @returns DeleteEmpAttributeHideBySceneSettingResponse
     */
    deleteEmpAttributeHideBySceneSetting(settingId: string): Promise<DeleteEmpAttributeHideBySceneSettingResponse>;
    /**
     * 删除员工字段可见性设置
     *
     * @param headers - DeleteEmpAttributeVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteEmpAttributeVisibilityResponse
     */
    deleteEmpAttributeVisibilityWithOptions(settingId: string, headers: DeleteEmpAttributeVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteEmpAttributeVisibilityResponse>;
    /**
     * 删除员工字段可见性设置
     * @returns DeleteEmpAttributeVisibilityResponse
     */
    deleteEmpAttributeVisibility(settingId: string): Promise<DeleteEmpAttributeVisibilityResponse>;
    /**
     * 删除管理组
     *
     * @param headers - DeleteManagementGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteManagementGroupResponse
     */
    deleteManagementGroupWithOptions(groupId: string, headers: DeleteManagementGroupHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteManagementGroupResponse>;
    /**
     * 删除管理组
     * @returns DeleteManagementGroupResponse
     */
    deleteManagementGroup(groupId: string): Promise<DeleteManagementGroupResponse>;
    /**
     * 获取账号映射
     *
     * @param request - GetAccountMappingRequest
     * @param headers - GetAccountMappingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAccountMappingResponse
     */
    getAccountMappingWithOptions(request: GetAccountMappingRequest, headers: GetAccountMappingHeaders, runtime: $Util.RuntimeOptions): Promise<GetAccountMappingResponse>;
    /**
     * 获取账号映射
     *
     * @param request - GetAccountMappingRequest
     * @returns GetAccountMappingResponse
     */
    getAccountMapping(request: GetAccountMappingRequest): Promise<GetAccountMappingResponse>;
    /**
     * 获取企业的邀请信息，如果传部门ID则邀请链接为邀请加入部门，否则加入根部门；如果企业未开启邀请或者链接申请加入邀请链接为null
     *
     * @param request - GetApplyInviteInfoRequest
     * @param headers - GetApplyInviteInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetApplyInviteInfoResponse
     */
    getApplyInviteInfoWithOptions(request: GetApplyInviteInfoRequest, headers: GetApplyInviteInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetApplyInviteInfoResponse>;
    /**
     * 获取企业的邀请信息，如果传部门ID则邀请链接为邀请加入部门，否则加入根部门；如果企业未开启邀请或者链接申请加入邀请链接为null
     *
     * @param request - GetApplyInviteInfoRequest
     * @returns GetApplyInviteInfoResponse
     */
    getApplyInviteInfo(request: GetApplyInviteInfoRequest): Promise<GetApplyInviteInfoResponse>;
    /**
     * 分支授权主干的行业数据
     *
     * @param request - GetBranchAuthDataRequest
     * @param headers - GetBranchAuthDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetBranchAuthDataResponse
     */
    getBranchAuthDataWithOptions(request: GetBranchAuthDataRequest, headers: GetBranchAuthDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetBranchAuthDataResponse>;
    /**
     * 分支授权主干的行业数据
     *
     * @param request - GetBranchAuthDataRequest
     * @returns GetBranchAuthDataResponse
     */
    getBranchAuthData(request: GetBranchAuthDataRequest): Promise<GetBranchAuthDataResponse>;
    /**
     * 查询用户名片夹中的某张名片信息
     *
     * @param headers - GetCardInUserHolderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCardInUserHolderResponse
     */
    getCardInUserHolderWithOptions(cardId: string, headers: GetCardInUserHolderHeaders, runtime: $Util.RuntimeOptions): Promise<GetCardInUserHolderResponse>;
    /**
     * 查询用户名片夹中的某张名片信息
     * @returns GetCardInUserHolderResponse
     */
    getCardInUserHolder(cardId: string): Promise<GetCardInUserHolderResponse>;
    /**
     * 查询用户名片信息
     *
     * @param headers - GetCardInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCardInfoResponse
     */
    getCardInfoWithOptions(cardId: string, headers: GetCardInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetCardInfoResponse>;
    /**
     * 查询用户名片信息
     * @returns GetCardInfoResponse
     */
    getCardInfo(cardId: string): Promise<GetCardInfoResponse>;
    /**
     * 获取通讯录组织架构分场景隐藏设置
     *
     * @param headers - GetContactHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetContactHideBySceneSettingResponse
     */
    getContactHideBySceneSettingWithOptions(settingId: string, headers: GetContactHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetContactHideBySceneSettingResponse>;
    /**
     * 获取通讯录组织架构分场景隐藏设置
     * @returns GetContactHideBySceneSettingResponse
     */
    getContactHideBySceneSetting(settingId: string): Promise<GetContactHideBySceneSettingResponse>;
    /**
     * 获取邀请加入合作空间链接，分享链接之后企业可以申请加入
     *
     * @param headers - GetCooperateOrgInviteInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCooperateOrgInviteInfoResponse
     */
    getCooperateOrgInviteInfoWithOptions(cooperateCorpId: string, headers: GetCooperateOrgInviteInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetCooperateOrgInviteInfoResponse>;
    /**
     * 获取邀请加入合作空间链接，分享链接之后企业可以申请加入
     * @returns GetCooperateOrgInviteInfoResponse
     */
    getCooperateOrgInviteInfo(cooperateCorpId: string): Promise<GetCooperateOrgInviteInfoResponse>;
    /**
     * 查询企业模板列表
     *
     * @param headers - GetCorpCardStyleListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCorpCardStyleListResponse
     */
    getCorpCardStyleListWithOptions(headers: GetCorpCardStyleListHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpCardStyleListResponse>;
    /**
     * 查询企业模板列表
     * @returns GetCorpCardStyleListResponse
     */
    getCorpCardStyleList(): Promise<GetCorpCardStyleListResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据迁移后的dingId查询原dingId
     *
     * @param request - GetDingIdByMigrationDingIdRequest
     * @param headers - GetDingIdByMigrationDingIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDingIdByMigrationDingIdResponse
     */
    getDingIdByMigrationDingIdWithOptions(request: GetDingIdByMigrationDingIdRequest, headers: GetDingIdByMigrationDingIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetDingIdByMigrationDingIdResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据迁移后的dingId查询原dingId
     *
     * @param request - GetDingIdByMigrationDingIdRequest
     * @returns GetDingIdByMigrationDingIdResponse
     */
    getDingIdByMigrationDingId(request: GetDingIdByMigrationDingIdRequest): Promise<GetDingIdByMigrationDingIdResponse>;
    /**
     * 获取员工属性分场景隐藏设置
     *
     * @param headers - GetEmpAttributeHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetEmpAttributeHideBySceneSettingResponse
     */
    getEmpAttributeHideBySceneSettingWithOptions(settingId: string, headers: GetEmpAttributeHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetEmpAttributeHideBySceneSettingResponse>;
    /**
     * 获取员工属性分场景隐藏设置
     * @returns GetEmpAttributeHideBySceneSettingResponse
     */
    getEmpAttributeHideBySceneSetting(settingId: string): Promise<GetEmpAttributeHideBySceneSettingResponse>;
    /**
     * 获取企业最新的钉钉指数
     *
     * @param headers - GetLatestDingIndexHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetLatestDingIndexResponse
     */
    getLatestDingIndexWithOptions(headers: GetLatestDingIndexHeaders, runtime: $Util.RuntimeOptions): Promise<GetLatestDingIndexResponse>;
    /**
     * 获取企业最新的钉钉指数
     * @returns GetLatestDingIndexResponse
     */
    getLatestDingIndex(): Promise<GetLatestDingIndexResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据原dingId查询迁移后的dingId
     *
     * @param request - GetMigrationDingIdByDingIdRequest
     * @param headers - GetMigrationDingIdByDingIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMigrationDingIdByDingIdResponse
     */
    getMigrationDingIdByDingIdWithOptions(request: GetMigrationDingIdByDingIdRequest, headers: GetMigrationDingIdByDingIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetMigrationDingIdByDingIdResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据原dingId查询迁移后的dingId
     *
     * @param request - GetMigrationDingIdByDingIdRequest
     * @returns GetMigrationDingIdByDingIdResponse
     */
    getMigrationDingIdByDingId(request: GetMigrationDingIdByDingIdRequest): Promise<GetMigrationDingIdByDingIdResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据原unionId查询迁移后的unionId
     *
     * @param request - GetMigrationUnionIdByUnionIdRequest
     * @param headers - GetMigrationUnionIdByUnionIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMigrationUnionIdByUnionIdResponse
     */
    getMigrationUnionIdByUnionIdWithOptions(request: GetMigrationUnionIdByUnionIdRequest, headers: GetMigrationUnionIdByUnionIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetMigrationUnionIdByUnionIdResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据原unionId查询迁移后的unionId
     *
     * @param request - GetMigrationUnionIdByUnionIdRequest
     * @returns GetMigrationUnionIdByUnionIdResponse
     */
    getMigrationUnionIdByUnionId(request: GetMigrationUnionIdByUnionIdRequest): Promise<GetMigrationUnionIdByUnionIdResponse>;
    /**
     * 查询企业认证信息
     *
     * @param request - GetOrgAuthInfoRequest
     * @param headers - GetOrgAuthInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrgAuthInfoResponse
     */
    getOrgAuthInfoWithOptions(request: GetOrgAuthInfoRequest, headers: GetOrgAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetOrgAuthInfoResponse>;
    /**
     * 查询企业认证信息
     *
     * @param request - GetOrgAuthInfoRequest
     * @returns GetOrgAuthInfoResponse
     */
    getOrgAuthInfo(request: GetOrgAuthInfoRequest): Promise<GetOrgAuthInfoResponse>;
    /**
     * 获取异步文件内容转译结果
     *
     * @param request - GetTranslateFileJobResultRequest
     * @param headers - GetTranslateFileJobResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTranslateFileJobResultResponse
     */
    getTranslateFileJobResultWithOptions(request: GetTranslateFileJobResultRequest, headers: GetTranslateFileJobResultHeaders, runtime: $Util.RuntimeOptions): Promise<GetTranslateFileJobResultResponse>;
    /**
     * 获取异步文件内容转译结果
     *
     * @param request - GetTranslateFileJobResultRequest
     * @returns GetTranslateFileJobResultResponse
     */
    getTranslateFileJobResult(request: GetTranslateFileJobResultRequest): Promise<GetTranslateFileJobResultResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据迁移后的unionId查询原unionId
     *
     * @param request - GetUnionIdByMigrationUnionIdRequest
     * @param headers - GetUnionIdByMigrationUnionIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUnionIdByMigrationUnionIdResponse
     */
    getUnionIdByMigrationUnionIdWithOptions(request: GetUnionIdByMigrationUnionIdRequest, headers: GetUnionIdByMigrationUnionIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetUnionIdByMigrationUnionIdResponse>;
    /**
     * 普通帐号迁移为专属帐号后，根据迁移后的unionId查询原unionId
     *
     * @param request - GetUnionIdByMigrationUnionIdRequest
     * @returns GetUnionIdByMigrationUnionIdResponse
     */
    getUnionIdByMigrationUnionId(request: GetUnionIdByMigrationUnionIdRequest): Promise<GetUnionIdByMigrationUnionIdResponse>;
    /**
     * 获取用户个人信息
     *
     * @param headers - GetUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserResponse
     */
    getUserWithOptions(unionId: string, headers: GetUserHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserResponse>;
    /**
     * 获取用户个人信息
     * @returns GetUserResponse
     */
    getUser(unionId: string): Promise<GetUserResponse>;
    /**
     * 查询用户名片夹信息
     *
     * @param request - GetUserCardHolderListRequest
     * @param headers - GetUserCardHolderListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserCardHolderListResponse
     */
    getUserCardHolderListWithOptions(request: GetUserCardHolderListRequest, headers: GetUserCardHolderListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserCardHolderListResponse>;
    /**
     * 查询用户名片夹信息
     *
     * @param request - GetUserCardHolderListRequest
     * @returns GetUserCardHolderListResponse
     */
    getUserCardHolderList(request: GetUserCardHolderListRequest): Promise<GetUserCardHolderListResponse>;
    /**
     * 判断某用户跟给定专属账号是否存在好友关系
     *
     * @param request - IsFriendRequest
     * @param headers - IsFriendHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IsFriendResponse
     */
    isFriendWithOptions(request: IsFriendRequest, headers: IsFriendHeaders, runtime: $Util.RuntimeOptions): Promise<IsFriendResponse>;
    /**
     * 判断某用户跟给定专属账号是否存在好友关系
     *
     * @param request - IsFriendRequest
     * @returns IsFriendResponse
     */
    isFriend(request: IsFriendRequest): Promise<IsFriendResponse>;
    /**
     * 名片事件推送
     *
     * @param request - IsvCardEventPushRequest
     * @param headers - IsvCardEventPushHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IsvCardEventPushResponse
     */
    isvCardEventPushWithOptions(request: IsvCardEventPushRequest, headers: IsvCardEventPushHeaders, runtime: $Util.RuntimeOptions): Promise<IsvCardEventPushResponse>;
    /**
     * 名片事件推送
     *
     * @param request - IsvCardEventPushRequest
     * @returns IsvCardEventPushResponse
     */
    isvCardEventPush(request: IsvCardEventPushRequest): Promise<IsvCardEventPushResponse>;
    /**
     * 拉取管理组基本信息列表分页接口
     *
     * @param request - ListBasicRoleInPageRequest
     * @param headers - ListBasicRoleInPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListBasicRoleInPageResponse
     */
    listBasicRoleInPageWithOptions(request: ListBasicRoleInPageRequest, headers: ListBasicRoleInPageHeaders, runtime: $Util.RuntimeOptions): Promise<ListBasicRoleInPageResponse>;
    /**
     * 拉取管理组基本信息列表分页接口
     *
     * @param request - ListBasicRoleInPageRequest
     * @returns ListBasicRoleInPageResponse
     */
    listBasicRoleInPage(request: ListBasicRoleInPageRequest): Promise<ListBasicRoleInPageResponse>;
    /**
     * 获取通讯录隐藏设置
     *
     * @param request - ListContactHideSettingsRequest
     * @param headers - ListContactHideSettingsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListContactHideSettingsResponse
     */
    listContactHideSettingsWithOptions(request: ListContactHideSettingsRequest, headers: ListContactHideSettingsHeaders, runtime: $Util.RuntimeOptions): Promise<ListContactHideSettingsResponse>;
    /**
     * 获取通讯录隐藏设置
     *
     * @param request - ListContactHideSettingsRequest
     * @returns ListContactHideSettingsResponse
     */
    listContactHideSettings(request: ListContactHideSettingsRequest): Promise<ListContactHideSettingsResponse>;
    /**
     * 获取限制查看通讯录设置列表
     *
     * @param request - ListContactRestrictSettingRequest
     * @param headers - ListContactRestrictSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListContactRestrictSettingResponse
     */
    listContactRestrictSettingWithOptions(request: ListContactRestrictSettingRequest, headers: ListContactRestrictSettingHeaders, runtime: $Util.RuntimeOptions): Promise<ListContactRestrictSettingResponse>;
    /**
     * 获取限制查看通讯录设置列表
     *
     * @param request - ListContactRestrictSettingRequest
     * @returns ListContactRestrictSettingResponse
     */
    listContactRestrictSetting(request: ListContactRestrictSettingRequest): Promise<ListContactRestrictSettingResponse>;
    /**
     * 获取员工字段可见性设置
     *
     * @param request - ListEmpAttributeVisibilityRequest
     * @param headers - ListEmpAttributeVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListEmpAttributeVisibilityResponse
     */
    listEmpAttributeVisibilityWithOptions(request: ListEmpAttributeVisibilityRequest, headers: ListEmpAttributeVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<ListEmpAttributeVisibilityResponse>;
    /**
     * 获取员工字段可见性设置
     *
     * @param request - ListEmpAttributeVisibilityRequest
     * @returns ListEmpAttributeVisibilityResponse
     */
    listEmpAttributeVisibility(request: ListEmpAttributeVisibilityRequest): Promise<ListEmpAttributeVisibilityResponse>;
    /**
     * 查询离职记录
     *
     * @param request - ListEmpLeaveRecordsRequest
     * @param headers - ListEmpLeaveRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListEmpLeaveRecordsResponse
     */
    listEmpLeaveRecordsWithOptions(request: ListEmpLeaveRecordsRequest, headers: ListEmpLeaveRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<ListEmpLeaveRecordsResponse>;
    /**
     * 查询离职记录
     *
     * @param request - ListEmpLeaveRecordsRequest
     * @returns ListEmpLeaveRecordsResponse
     */
    listEmpLeaveRecords(request: ListEmpLeaveRecordsRequest): Promise<ListEmpLeaveRecordsResponse>;
    /**
     * 分页查询管理组
     *
     * @param request - ListManagementGroupsRequest
     * @param headers - ListManagementGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListManagementGroupsResponse
     */
    listManagementGroupsWithOptions(request: ListManagementGroupsRequest, headers: ListManagementGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<ListManagementGroupsResponse>;
    /**
     * 分页查询管理组
     *
     * @param request - ListManagementGroupsRequest
     * @returns ListManagementGroupsResponse
     */
    listManagementGroups(request: ListManagementGroupsRequest): Promise<ListManagementGroupsResponse>;
    /**
     * 查询专属帐号拥有的组织(作为创建者的组织)
     *
     * @param request - ListOwnedOrgByStaffIdRequest
     * @param headers - ListOwnedOrgByStaffIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListOwnedOrgByStaffIdResponse
     */
    listOwnedOrgByStaffIdWithOptions(request: ListOwnedOrgByStaffIdRequest, headers: ListOwnedOrgByStaffIdHeaders, runtime: $Util.RuntimeOptions): Promise<ListOwnedOrgByStaffIdResponse>;
    /**
     * 查询专属帐号拥有的组织(作为创建者的组织)
     *
     * @param request - ListOwnedOrgByStaffIdRequest
     * @returns ListOwnedOrgByStaffIdResponse
     */
    listOwnedOrgByStaffId(request: ListOwnedOrgByStaffIdRequest): Promise<ListOwnedOrgByStaffIdResponse>;
    /**
     * 获取员工高管设置
     *
     * @param request - ListSeniorSettingsRequest
     * @param headers - ListSeniorSettingsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSeniorSettingsResponse
     */
    listSeniorSettingsWithOptions(request: ListSeniorSettingsRequest, headers: ListSeniorSettingsHeaders, runtime: $Util.RuntimeOptions): Promise<ListSeniorSettingsResponse>;
    /**
     * 获取员工高管设置
     *
     * @param request - ListSeniorSettingsRequest
     * @returns ListSeniorSettingsResponse
     */
    listSeniorSettings(request: ListSeniorSettingsRequest): Promise<ListSeniorSettingsResponse>;
    /**
     * 更新企业账号工作状态
     *
     * @param request - ModifyOrgAccUserOwnnessRequest
     * @param headers - ModifyOrgAccUserOwnnessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ModifyOrgAccUserOwnnessResponse
     */
    modifyOrgAccUserOwnnessWithOptions(request: ModifyOrgAccUserOwnnessRequest, headers: ModifyOrgAccUserOwnnessHeaders, runtime: $Util.RuntimeOptions): Promise<ModifyOrgAccUserOwnnessResponse>;
    /**
     * 更新企业账号工作状态
     *
     * @param request - ModifyOrgAccUserOwnnessRequest
     * @returns ModifyOrgAccUserOwnnessResponse
     */
    modifyOrgAccUserOwnness(request: ModifyOrgAccUserOwnnessRequest): Promise<ModifyOrgAccUserOwnnessResponse>;
    /**
     * 授权专属帐号可加入多组织
     *
     * @param request - MultiOrgPermissionGrantRequest
     * @param headers - MultiOrgPermissionGrantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MultiOrgPermissionGrantResponse
     */
    multiOrgPermissionGrantWithOptions(request: MultiOrgPermissionGrantRequest, headers: MultiOrgPermissionGrantHeaders, runtime: $Util.RuntimeOptions): Promise<MultiOrgPermissionGrantResponse>;
    /**
     * 授权专属帐号可加入多组织
     *
     * @param request - MultiOrgPermissionGrantRequest
     * @returns MultiOrgPermissionGrantResponse
     */
    multiOrgPermissionGrant(request: MultiOrgPermissionGrantRequest): Promise<MultiOrgPermissionGrantResponse>;
    /**
     * 修改企业账号加入其他组织后电话是否可见
     *
     * @param request - OrgAccountMobileVisibleInOtherOrgRequest
     * @param headers - OrgAccountMobileVisibleInOtherOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OrgAccountMobileVisibleInOtherOrgResponse
     */
    orgAccountMobileVisibleInOtherOrgWithOptions(request: OrgAccountMobileVisibleInOtherOrgRequest, headers: OrgAccountMobileVisibleInOtherOrgHeaders, runtime: $Util.RuntimeOptions): Promise<OrgAccountMobileVisibleInOtherOrgResponse>;
    /**
     * 修改企业账号加入其他组织后电话是否可见
     *
     * @param request - OrgAccountMobileVisibleInOtherOrgRequest
     * @returns OrgAccountMobileVisibleInOtherOrgResponse
     */
    orgAccountMobileVisibleInOtherOrg(request: OrgAccountMobileVisibleInOtherOrgRequest): Promise<OrgAccountMobileVisibleInOtherOrgResponse>;
    /**
     * 更新企业账号电话可见性
     *
     * @param request - OrgAccountMobileVisiblePermissonRequest
     * @param headers - OrgAccountMobileVisiblePermissonHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OrgAccountMobileVisiblePermissonResponse
     */
    orgAccountMobileVisiblePermissonWithOptions(request: OrgAccountMobileVisiblePermissonRequest, headers: OrgAccountMobileVisiblePermissonHeaders, runtime: $Util.RuntimeOptions): Promise<OrgAccountMobileVisiblePermissonResponse>;
    /**
     * 更新企业账号电话可见性
     *
     * @param request - OrgAccountMobileVisiblePermissonRequest
     * @returns OrgAccountMobileVisiblePermissonResponse
     */
    orgAccountMobileVisiblePermisson(request: OrgAccountMobileVisiblePermissonRequest): Promise<OrgAccountMobileVisiblePermissonResponse>;
    /**
     * 给员工推送事件唤起核身组件
     *
     * @param request - PushVerifyEventRequest
     * @param headers - PushVerifyEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushVerifyEventResponse
     */
    pushVerifyEventWithOptions(request: PushVerifyEventRequest, headers: PushVerifyEventHeaders, runtime: $Util.RuntimeOptions): Promise<PushVerifyEventResponse>;
    /**
     * 给员工推送事件唤起核身组件
     *
     * @param request - PushVerifyEventRequest
     * @returns PushVerifyEventResponse
     */
    pushVerifyEvent(request: PushVerifyEventRequest): Promise<PushVerifyEventResponse>;
    /**
     * 查询访客统计信息信息
     *
     * @param request - QueryCardVisitorStatisticDataRequest
     * @param headers - QueryCardVisitorStatisticDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryCardVisitorStatisticDataResponse
     */
    queryCardVisitorStatisticDataWithOptions(request: QueryCardVisitorStatisticDataRequest, headers: QueryCardVisitorStatisticDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCardVisitorStatisticDataResponse>;
    /**
     * 查询访客统计信息信息
     *
     * @param request - QueryCardVisitorStatisticDataRequest
     * @returns QueryCardVisitorStatisticDataResponse
     */
    queryCardVisitorStatisticData(request: QueryCardVisitorStatisticDataRequest): Promise<QueryCardVisitorStatisticDataResponse>;
    /**
     * 查询企业模版的统计数据
     *
     * @param request - QueryCorpStatisticDataRequest
     * @param headers - QueryCorpStatisticDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryCorpStatisticDataResponse
     */
    queryCorpStatisticDataWithOptions(request: QueryCorpStatisticDataRequest, headers: QueryCorpStatisticDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCorpStatisticDataResponse>;
    /**
     * 查询企业模版的统计数据
     *
     * @param request - QueryCorpStatisticDataRequest
     * @returns QueryCorpStatisticDataResponse
     */
    queryCorpStatisticData(request: QueryCorpStatisticDataRequest): Promise<QueryCorpStatisticDataResponse>;
    /**
     * 查询企业用户名片统计数据
     *
     * @param request - QueryCorpUserStatisticRequest
     * @param headers - QueryCorpUserStatisticHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryCorpUserStatisticResponse
     */
    queryCorpUserStatisticWithOptions(request: QueryCorpUserStatisticRequest, headers: QueryCorpUserStatisticHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCorpUserStatisticResponse>;
    /**
     * 查询企业用户名片统计数据
     *
     * @param request - QueryCorpUserStatisticRequest
     * @returns QueryCorpUserStatisticResponse
     */
    queryCorpUserStatistic(request: QueryCorpUserStatisticRequest): Promise<QueryCorpUserStatisticResponse>;
    /**
     * 查询可管理资源的成员
     *
     * @param headers - QueryResourceManagementMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryResourceManagementMembersResponse
     */
    queryResourceManagementMembersWithOptions(resourceId: string, headers: QueryResourceManagementMembersHeaders, runtime: $Util.RuntimeOptions): Promise<QueryResourceManagementMembersResponse>;
    /**
     * 查询可管理资源的成员
     * @returns QueryResourceManagementMembersResponse
     */
    queryResourceManagementMembers(resourceId: string): Promise<QueryResourceManagementMembersResponse>;
    /**
     * 查询专属帐号状态
     *
     * @param request - QueryStatusRequest
     * @param headers - QueryStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryStatusResponse
     */
    queryStatusWithOptions(request: QueryStatusRequest, headers: QueryStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryStatusResponse>;
    /**
     * 查询专属帐号状态
     *
     * @param request - QueryStatusRequest
     * @returns QueryStatusResponse
     */
    queryStatus(request: QueryStatusRequest): Promise<QueryStatusResponse>;
    /**
     * 查询用户可以管理的资源
     *
     * @param headers - QueryUserManagementResourcesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserManagementResourcesResponse
     */
    queryUserManagementResourcesWithOptions(userId: string, headers: QueryUserManagementResourcesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserManagementResourcesResponse>;
    /**
     * 查询用户可以管理的资源
     * @returns QueryUserManagementResourcesResponse
     */
    queryUserManagementResources(userId: string): Promise<QueryUserManagementResourcesResponse>;
    /**
     * 读取员工核身结果
     *
     * @param request - QueryVerifyResultRequest
     * @param headers - QueryVerifyResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryVerifyResultResponse
     */
    queryVerifyResultWithOptions(request: QueryVerifyResultRequest, headers: QueryVerifyResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryVerifyResultResponse>;
    /**
     * 读取员工核身结果
     *
     * @param request - QueryVerifyResultRequest
     * @returns QueryVerifyResultResponse
     */
    queryVerifyResult(request: QueryVerifyResultRequest): Promise<QueryVerifyResultResponse>;
    /**
     * 搜索部门
     *
     * @param request - SearchDepartmentRequest
     * @param headers - SearchDepartmentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchDepartmentResponse
     */
    searchDepartmentWithOptions(request: SearchDepartmentRequest, headers: SearchDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<SearchDepartmentResponse>;
    /**
     * 搜索部门
     *
     * @param request - SearchDepartmentRequest
     * @returns SearchDepartmentResponse
     */
    searchDepartment(request: SearchDepartmentRequest): Promise<SearchDepartmentResponse>;
    /**
     * 搜索用户
     *
     * @param request - SearchUserRequest
     * @param headers - SearchUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchUserResponse
     */
    searchUserWithOptions(request: SearchUserRequest, headers: SearchUserHeaders, runtime: $Util.RuntimeOptions): Promise<SearchUserResponse>;
    /**
     * 搜索用户
     *
     * @param request - SearchUserRequest
     * @returns SearchUserResponse
     */
    searchUser(request: SearchUserRequest): Promise<SearchUserResponse>;
    /**
     * 解除关联组织
     *
     * @param request - SeparateBranchOrgRequest
     * @param headers - SeparateBranchOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SeparateBranchOrgResponse
     */
    separateBranchOrgWithOptions(request: SeparateBranchOrgRequest, headers: SeparateBranchOrgHeaders, runtime: $Util.RuntimeOptions): Promise<SeparateBranchOrgResponse>;
    /**
     * 解除关联组织
     *
     * @param request - SeparateBranchOrgRequest
     * @returns SeparateBranchOrgResponse
     */
    separateBranchOrg(request: SeparateBranchOrgRequest): Promise<SeparateBranchOrgResponse>;
    /**
     * 停用专属帐号
     *
     * @param request - SetDisableRequest
     * @param headers - SetDisableHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetDisableResponse
     */
    setDisableWithOptions(request: SetDisableRequest, headers: SetDisableHeaders, runtime: $Util.RuntimeOptions): Promise<SetDisableResponse>;
    /**
     * 停用专属帐号
     *
     * @param request - SetDisableRequest
     * @returns SetDisableResponse
     */
    setDisable(request: SetDisableRequest): Promise<SetDisableResponse>;
    /**
     * 启用专属帐号
     *
     * @param request - SetEnableRequest
     * @param headers - SetEnableHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetEnableResponse
     */
    setEnableWithOptions(request: SetEnableRequest, headers: SetEnableHeaders, runtime: $Util.RuntimeOptions): Promise<SetEnableResponse>;
    /**
     * 启用专属帐号
     *
     * @param request - SetEnableRequest
     * @returns SetEnableResponse
     */
    setEnable(request: SetEnableRequest): Promise<SetEnableResponse>;
    /**
     * 强制登出专属帐号
     *
     * @param request - SignOutRequest
     * @param headers - SignOutHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SignOutResponse
     */
    signOutWithOptions(request: SignOutRequest, headers: SignOutHeaders, runtime: $Util.RuntimeOptions): Promise<SignOutResponse>;
    /**
     * 强制登出专属帐号
     *
     * @param request - SignOutRequest
     * @returns SignOutResponse
     */
    signOut(request: SignOutRequest): Promise<SignOutResponse>;
    /**
     * 根据用户名排序
     *
     * @param request - SortUserRequest
     * @param headers - SortUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SortUserResponse
     */
    sortUserWithOptions(request: SortUserRequest, headers: SortUserHeaders, runtime: $Util.RuntimeOptions): Promise<SortUserResponse>;
    /**
     * 根据用户名排序
     *
     * @param request - SortUserRequest
     * @returns SortUserResponse
     */
    sortUser(request: SortUserRequest): Promise<SortUserResponse>;
    /**
     * 普通帐号转换为专属帐号
     *
     * @param request - TransformToExclusiveAccountRequest
     * @param headers - TransformToExclusiveAccountHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TransformToExclusiveAccountResponse
     */
    transformToExclusiveAccountWithOptions(request: TransformToExclusiveAccountRequest, headers: TransformToExclusiveAccountHeaders, runtime: $Util.RuntimeOptions): Promise<TransformToExclusiveAccountResponse>;
    /**
     * 普通帐号转换为专属帐号
     *
     * @param request - TransformToExclusiveAccountRequest
     * @returns TransformToExclusiveAccountResponse
     */
    transformToExclusiveAccount(request: TransformToExclusiveAccountRequest): Promise<TransformToExclusiveAccountResponse>;
    /**
     * 异步文件内容转译
     *
     * @param request - TranslateFileRequest
     * @param headers - TranslateFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TranslateFileResponse
     */
    translateFileWithOptions(request: TranslateFileRequest, headers: TranslateFileHeaders, runtime: $Util.RuntimeOptions): Promise<TranslateFileResponse>;
    /**
     * 异步文件内容转译
     *
     * @param request - TranslateFileRequest
     * @returns TranslateFileResponse
     */
    translateFile(request: TranslateFileRequest): Promise<TranslateFileResponse>;
    /**
     * 唯一查询用户名片
     *
     * @param request - UniqueQueryUserCardRequest
     * @param headers - UniqueQueryUserCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UniqueQueryUserCardResponse
     */
    uniqueQueryUserCardWithOptions(request: UniqueQueryUserCardRequest, headers: UniqueQueryUserCardHeaders, runtime: $Util.RuntimeOptions): Promise<UniqueQueryUserCardResponse>;
    /**
     * 唯一查询用户名片
     *
     * @param request - UniqueQueryUserCardRequest
     * @returns UniqueQueryUserCardResponse
     */
    uniqueQueryUserCard(request: UniqueQueryUserCardRequest): Promise<UniqueQueryUserCardResponse>;
    /**
     * 更新(分支/伙伴)在(集团/合作空间)的属性信息
     *
     * @param request - UpdateBranchAttributesInCooperateRequest
     * @param headers - UpdateBranchAttributesInCooperateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateBranchAttributesInCooperateResponse
     */
    updateBranchAttributesInCooperateWithOptions(request: UpdateBranchAttributesInCooperateRequest, headers: UpdateBranchAttributesInCooperateHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateBranchAttributesInCooperateResponse>;
    /**
     * 更新(分支/伙伴)在(集团/合作空间)的属性信息
     *
     * @param request - UpdateBranchAttributesInCooperateRequest
     * @returns UpdateBranchAttributesInCooperateResponse
     */
    updateBranchAttributesInCooperate(request: UpdateBranchAttributesInCooperateRequest): Promise<UpdateBranchAttributesInCooperateResponse>;
    /**
     * 设置(分支/伙伴)在(集团/合作空间)的可见范围
     *
     * @param request - UpdateBranchVisibleSettingInCooperateRequest
     * @param headers - UpdateBranchVisibleSettingInCooperateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateBranchVisibleSettingInCooperateResponse
     */
    updateBranchVisibleSettingInCooperateWithOptions(request: UpdateBranchVisibleSettingInCooperateRequest, headers: UpdateBranchVisibleSettingInCooperateHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateBranchVisibleSettingInCooperateResponse>;
    /**
     * 设置(分支/伙伴)在(集团/合作空间)的可见范围
     *
     * @param request - UpdateBranchVisibleSettingInCooperateRequest
     * @returns UpdateBranchVisibleSettingInCooperateResponse
     */
    updateBranchVisibleSettingInCooperate(request: UpdateBranchVisibleSettingInCooperateRequest): Promise<UpdateBranchVisibleSettingInCooperateResponse>;
    /**
     * 更新通讯录组织架构隐藏设置
     *
     * @param request - UpdateContactHideBySceneSettingRequest
     * @param headers - UpdateContactHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateContactHideBySceneSettingResponse
     */
    updateContactHideBySceneSettingWithOptions(settingId: string, request: UpdateContactHideBySceneSettingRequest, headers: UpdateContactHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateContactHideBySceneSettingResponse>;
    /**
     * 更新通讯录组织架构隐藏设置
     *
     * @param request - UpdateContactHideBySceneSettingRequest
     * @returns UpdateContactHideBySceneSettingResponse
     */
    updateContactHideBySceneSetting(settingId: string, request: UpdateContactHideBySceneSettingRequest): Promise<UpdateContactHideBySceneSettingResponse>;
    /**
     * 更新通讯录隐藏设置
     *
     * @param request - UpdateContactHideSettingRequest
     * @param headers - UpdateContactHideSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateContactHideSettingResponse
     */
    updateContactHideSettingWithOptions(request: UpdateContactHideSettingRequest, headers: UpdateContactHideSettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateContactHideSettingResponse>;
    /**
     * 更新通讯录隐藏设置
     *
     * @param request - UpdateContactHideSettingRequest
     * @returns UpdateContactHideSettingResponse
     */
    updateContactHideSetting(request: UpdateContactHideSettingRequest): Promise<UpdateContactHideSettingResponse>;
    /**
     * 新增或修改限制查看通讯录设置
     *
     * @param request - UpdateContactRestrictSettingRequest
     * @param headers - UpdateContactRestrictSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateContactRestrictSettingResponse
     */
    updateContactRestrictSettingWithOptions(request: UpdateContactRestrictSettingRequest, headers: UpdateContactRestrictSettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateContactRestrictSettingResponse>;
    /**
     * 新增或修改限制查看通讯录设置
     *
     * @param request - UpdateContactRestrictSettingRequest
     * @returns UpdateContactRestrictSettingResponse
     */
    updateContactRestrictSetting(request: UpdateContactRestrictSettingRequest): Promise<UpdateContactRestrictSettingResponse>;
    /**
     * 通讯录可见性部门设置子部门设置优先
     *
     * @param request - UpdateDeptSettngTailFirstRequest
     * @param headers - UpdateDeptSettngTailFirstHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateDeptSettngTailFirstResponse
     */
    updateDeptSettngTailFirstWithOptions(request: UpdateDeptSettngTailFirstRequest, headers: UpdateDeptSettngTailFirstHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateDeptSettngTailFirstResponse>;
    /**
     * 通讯录可见性部门设置子部门设置优先
     *
     * @param request - UpdateDeptSettngTailFirstRequest
     * @returns UpdateDeptSettngTailFirstResponse
     */
    updateDeptSettngTailFirst(request: UpdateDeptSettngTailFirstRequest): Promise<UpdateDeptSettngTailFirstResponse>;
    /**
     * 更新企业员工属性字段可见性设置
     *
     * @param request - UpdateEmpAttrbuteVisibilitySettingRequest
     * @param headers - UpdateEmpAttrbuteVisibilitySettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateEmpAttrbuteVisibilitySettingResponse
     */
    updateEmpAttrbuteVisibilitySettingWithOptions(request: UpdateEmpAttrbuteVisibilitySettingRequest, headers: UpdateEmpAttrbuteVisibilitySettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateEmpAttrbuteVisibilitySettingResponse>;
    /**
     * 更新企业员工属性字段可见性设置
     *
     * @param request - UpdateEmpAttrbuteVisibilitySettingRequest
     * @returns UpdateEmpAttrbuteVisibilitySettingResponse
     */
    updateEmpAttrbuteVisibilitySetting(request: UpdateEmpAttrbuteVisibilitySettingRequest): Promise<UpdateEmpAttrbuteVisibilitySettingResponse>;
    /**
     * 更新员工属性分场景隐藏设置
     *
     * @param request - UpdateEmpAttributeHideBySceneSettingRequest
     * @param headers - UpdateEmpAttributeHideBySceneSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateEmpAttributeHideBySceneSettingResponse
     */
    updateEmpAttributeHideBySceneSettingWithOptions(settingId: string, request: UpdateEmpAttributeHideBySceneSettingRequest, headers: UpdateEmpAttributeHideBySceneSettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateEmpAttributeHideBySceneSettingResponse>;
    /**
     * 更新员工属性分场景隐藏设置
     *
     * @param request - UpdateEmpAttributeHideBySceneSettingRequest
     * @returns UpdateEmpAttributeHideBySceneSettingResponse
     */
    updateEmpAttributeHideBySceneSetting(settingId: string, request: UpdateEmpAttributeHideBySceneSettingRequest): Promise<UpdateEmpAttributeHideBySceneSettingResponse>;
    /**
     * 更新管理组
     *
     * @param request - UpdateManagementGroupRequest
     * @param headers - UpdateManagementGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateManagementGroupResponse
     */
    updateManagementGroupWithOptions(groupId: string, request: UpdateManagementGroupRequest, headers: UpdateManagementGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateManagementGroupResponse>;
    /**
     * 更新管理组
     *
     * @param request - UpdateManagementGroupRequest
     * @returns UpdateManagementGroupResponse
     */
    updateManagementGroup(groupId: string, request: UpdateManagementGroupRequest): Promise<UpdateManagementGroupResponse>;
    /**
     * 设置高管模式
     *
     * @param request - UpdateSeniorSettingRequest
     * @param headers - UpdateSeniorSettingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateSeniorSettingResponse
     */
    updateSeniorSettingWithOptions(request: UpdateSeniorSettingRequest, headers: UpdateSeniorSettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSeniorSettingResponse>;
    /**
     * 设置高管模式
     *
     * @param request - UpdateSeniorSettingRequest
     * @returns UpdateSeniorSettingResponse
     */
    updateSeniorSetting(request: UpdateSeniorSettingRequest): Promise<UpdateSeniorSettingResponse>;
    /**
     * 三方通过该接口更新个人履历的审核状态
     *
     * @param request - UpdateTitleAuditStatusRequest
     * @param headers - UpdateTitleAuditStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTitleAuditStatusResponse
     */
    updateTitleAuditStatusWithOptions(request: UpdateTitleAuditStatusRequest, headers: UpdateTitleAuditStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTitleAuditStatusResponse>;
    /**
     * 三方通过该接口更新个人履历的审核状态
     *
     * @param request - UpdateTitleAuditStatusRequest
     * @returns UpdateTitleAuditStatusResponse
     */
    updateTitleAuditStatus(request: UpdateTitleAuditStatusRequest): Promise<UpdateTitleAuditStatusResponse>;
    /**
     * 更新用户个人状态
     *
     * @param request - UpdateUserOwnnessRequest
     * @param headers - UpdateUserOwnnessHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUserOwnnessResponse
     */
    updateUserOwnnessWithOptions(userId: string, request: UpdateUserOwnnessRequest, headers: UpdateUserOwnnessHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUserOwnnessResponse>;
    /**
     * 更新用户个人状态
     *
     * @param request - UpdateUserOwnnessRequest
     * @returns UpdateUserOwnnessResponse
     */
    updateUserOwnness(userId: string, request: UpdateUserOwnnessRequest): Promise<UpdateUserOwnnessResponse>;
}
