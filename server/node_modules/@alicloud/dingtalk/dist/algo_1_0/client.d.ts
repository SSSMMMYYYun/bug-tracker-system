/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class NlpWordDistinguishHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NlpWordDistinguishRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    attachExtractDecisionInfo?: NlpWordDistinguishRequestAttachExtractDecisionInfo;
    /**
     * @remarks
     * This parameter is required.
     */
    isvAppId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NlpWordDistinguishResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    wordEntities?: NlpWordDistinguishResponseBodyWordEntities[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NlpWordDistinguishResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NlpWordDistinguishResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    candidateOkrItems?: OkrOpenRecommendRequestCandidateOkrItems[];
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deptIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    isvAppId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    words?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendResponseBody extends $tea.Model {
    okrRecommendItems?: OkrOpenRecommendResponseBodyOkrRecommendItems[];
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OkrOpenRecommendResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NlpWordDistinguishRequestAttachExtractDecisionInfo extends $tea.Model {
    blackWords?: string[];
    candidateWords?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deptIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NlpWordDistinguishResponseBodyWordEntities extends $tea.Model {
    word?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendRequestCandidateOkrItemsOkrInfosKeyResultInfos extends $tea.Model {
    kr?: string;
    krId?: string;
    words?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendRequestCandidateOkrItemsOkrInfos extends $tea.Model {
    keyResultInfos?: OkrOpenRecommendRequestCandidateOkrItemsOkrInfosKeyResultInfos[];
    objective?: string;
    objectiveId?: string;
    words?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendRequestCandidateOkrItems extends $tea.Model {
    okrInfos?: OkrOpenRecommendRequestCandidateOkrItemsOkrInfos[];
    /**
     * @remarks
     * This parameter is required.
     */
    relation?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendResponseBodyOkrRecommendItemsKrResultRelatedResults extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    krId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3
     */
    semanticLevel?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    words?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendResponseBodyOkrRecommendItemsObjectiveRelatedResults extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    objectiveId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3
     */
    semanticLevel?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    words?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrOpenRecommendResponseBodyOkrRecommendItems extends $tea.Model {
    krResultRelatedResults?: OkrOpenRecommendResponseBodyOkrRecommendItemsKrResultRelatedResults[];
    objectiveRelatedResults?: OkrOpenRecommendResponseBodyOkrRecommendItemsObjectiveRelatedResults[];
    /**
     * @remarks
     * This parameter is required.
     */
    relatedLevel?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3
     */
    semanticLevel?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 111
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 自然语言处理之关键词识别
     *
     * @param request - NlpWordDistinguishRequest
     * @param headers - NlpWordDistinguishHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns NlpWordDistinguishResponse
     */
    nlpWordDistinguishWithOptions(request: NlpWordDistinguishRequest, headers: NlpWordDistinguishHeaders, runtime: $Util.RuntimeOptions): Promise<NlpWordDistinguishResponse>;
    /**
     * 自然语言处理之关键词识别
     *
     * @param request - NlpWordDistinguishRequest
     * @returns NlpWordDistinguishResponse
     */
    nlpWordDistinguish(request: NlpWordDistinguishRequest): Promise<NlpWordDistinguishResponse>;
    /**
     * Okr内容推荐
     *
     * @param request - OkrOpenRecommendRequest
     * @param headers - OkrOpenRecommendHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OkrOpenRecommendResponse
     */
    okrOpenRecommendWithOptions(request: OkrOpenRecommendRequest, headers: OkrOpenRecommendHeaders, runtime: $Util.RuntimeOptions): Promise<OkrOpenRecommendResponse>;
    /**
     * Okr内容推荐
     *
     * @param request - OkrOpenRecommendRequest
     * @returns OkrOpenRecommendResponse
     */
    okrOpenRecommend(request: OkrOpenRecommendRequest): Promise<OkrOpenRecommendResponse>;
}
