/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AyunOnlienTestRequest extends $tea.Model {
    reqId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AyunOnlienTestResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AyunOnlienTestResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AyunOnlienTestResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceRequest extends $tea.Model {
    /**
     * @example
     * ding12345
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceResponseBody extends $tea.Model {
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchDeleteDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequest extends $tea.Model {
    /**
     * @example
     * ding123
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    devices?: BatchRegisterDeviceRequestDevices[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterEventTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterEventTypeRequest extends $tea.Model {
    /**
     * @example
     * ding12345
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    eventTypes?: BatchRegisterEventTypeRequestEventTypes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterEventTypeResponseBody extends $tea.Model {
    eventTypes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterEventTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRegisterEventTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceRequest extends $tea.Model {
    /**
     * @example
     * ding123
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    devices?: BatchUpdateDeviceRequestDevices[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchUpdateDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSystemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSystemRequest extends $tea.Model {
    /**
     * @example
     * abcde12345
     */
    authCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * d12345
     */
    clientId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xx社区。
     */
    clientName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding12345
     */
    corpId?: string;
    extraData?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSystemResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * d12345
     */
    clientId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding12345
     */
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindSystemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BindSystemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceConferenceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 设备的应急会议
     */
    confTitle?: string;
    /**
     * @example
     * 12345678
     */
    conferenceId?: string;
    /**
     * @example
     * 123456
     */
    conferencePassword?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceConferenceResponseBody extends $tea.Model {
    /**
     * @example
     * 123456789
     */
    conferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeviceConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotMamaResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotMamaResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DiotMamaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotMarketManagerTestResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotMarketManagerTestResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DiotMarketManagerTestResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotSystemMarkTestResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotSystemMarkTestResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DiotSystemMarkTestResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotMarketManagerResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DiotMarketManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DiotMarketManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushEventRequest extends $tea.Model {
    /**
     * @example
     * ding123456
     */
    corpId?: string;
    /**
     * @example
     * 002
     */
    deviceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sj123456
     */
    eventId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 火焰告警
     */
    eventName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * fireDetect
     */
    eventType?: string;
    extraData?: {
        [key: string]: any;
    };
    /**
     * @example
     * 社区南门
     */
    location?: string;
    /**
     * @example
     * 社区南门发生火焰告警
     */
    msg?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1638250958570
     */
    occurrenceTime?: number;
    picUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushEventResponseBody extends $tea.Model {
    eventId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceRequest extends $tea.Model {
    /**
     * @example
     * ding123
     */
    corpId?: string;
    /**
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 10
     */
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    data?: QueryDeviceResponseBodyData[];
    /**
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @example
     * 40
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePkHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePkRequest extends $tea.Model {
    deviceId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePkResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDevicePkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEventRequest extends $tea.Model {
    corpId?: string;
    deviceIdList?: string[];
    endTime?: number;
    eventId?: string;
    eventStatusList?: number[];
    eventTypeList?: string[];
    pageNumber?: number;
    pageSize?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEventResponseBody extends $tea.Model {
    data?: QueryEventResponseBodyData[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceRequest extends $tea.Model {
    /**
     * @example
     * ding123
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 摄像头1
     */
    deviceName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    deviceStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Camera
     */
    deviceType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 摄像头
     */
    deviceTypeName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 002
     */
    id?: string;
    liveUrls?: RegisterDeviceRequestLiveUrls;
    /**
     * @example
     * 东南门
     */
    location?: string;
    /**
     * @example
     * 摄像头1
     */
    nickName?: string;
    /**
     * @example
     * 001
     */
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * CAMERA
     */
    productType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    deviceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDeviceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpgradeDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WorkbenchTransformInfoResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WorkbenchTransformInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: WorkbenchTransformInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequestDevicesLiveUrls extends $tea.Model {
    /**
     * @example
     * https://abc.stream.flv
     */
    flv?: string;
    /**
     * @example
     * https://abc.stream.m3u8
     */
    hls?: string;
    /**
     * @example
     * rtmp://abc.stream
     */
    rtmp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequestDevices extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 002
     */
    deviceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 摄像头002
     */
    deviceName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    deviceStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Camera
     */
    deviceType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 摄像头
     */
    deviceTypeName?: string;
    extraData?: {
        [key: string]: any;
    };
    liveUrls?: BatchRegisterDeviceRequestDevicesLiveUrls;
    /**
     * @example
     * 社区南门
     */
    location?: string;
    /**
     * @example
     * 001
     */
    parentId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * CAMERA
     */
    productType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterEventTypeRequestEventTypes extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * fireDetect
     */
    eventType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 火焰告警
     */
    eventTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceRequestDevicesLiveUrls extends $tea.Model {
    /**
     * @example
     * https://abc.stream.flv
     */
    flv?: string;
    /**
     * @example
     * https://abc.stream.m3u8
     */
    hls?: string;
    /**
     * @example
     * rtmp://abc.stream
     */
    rtmp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateDeviceRequestDevices extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 002
     */
    deviceId?: string;
    /**
     * @example
     * 摄像头002
     */
    deviceName?: string;
    /**
     * @example
     * 0
     */
    deviceStatus?: number;
    extraData?: {
        [key: string]: any;
    };
    liveUrls?: BatchUpdateDeviceRequestDevicesLiveUrls;
    /**
     * @example
     * 社区南门
     */
    location?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBodyDataLiveUrls extends $tea.Model {
    /**
     * @example
     * https://abc.stream.flv
     */
    flv?: string;
    /**
     * @example
     * https://abc.stream.m3u8
     */
    hls?: string;
    /**
     * @example
     * rtmp://abc.stream
     */
    rtmp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBodyData extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    deviceId?: string;
    /**
     * @example
     * XX摄像头
     */
    deviceName?: string;
    /**
     * @example
     * 0
     */
    deviceStatus?: number;
    /**
     * @example
     * CAMERA
     */
    deviceType?: string;
    /**
     * @example
     * 摄像头
     */
    deviceTypeName?: string;
    liveUrls?: QueryDeviceResponseBodyDataLiveUrls;
    /**
     * @example
     * XX地址
     */
    location?: string;
    /**
     * @example
     * 123
     */
    parentId?: string;
    /**
     * @example
     * CAMERA
     */
    productType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEventResponseBodyData extends $tea.Model {
    eventId?: string;
    eventName?: string;
    eventStatus?: number;
    eventType?: string;
    msg?: string;
    occurrenceTime?: number;
    picUrls?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceRequestLiveUrls extends $tea.Model {
    /**
     * @example
     * https://abc.stream.flv
     */
    flv?: string;
    /**
     * @example
     * https://abc.stream.m3u8
     */
    hls?: string;
    /**
     * @example
     * rtmp://abc.stream
     */
    rtmp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * openAPI录入上线前的测试2
     *
     * @param request - AyunOnlienTestRequest
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AyunOnlienTestResponse
     */
    ayunOnlienTestWithOptions(request: AyunOnlienTestRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<AyunOnlienTestResponse>;
    /**
     * openAPI录入上线前的测试2
     *
     * @param request - AyunOnlienTestRequest
     * @returns AyunOnlienTestResponse
     */
    ayunOnlienTest(request: AyunOnlienTestRequest): Promise<AyunOnlienTestResponse>;
    /**
     * 删除设备
     *
     * @param request - BatchDeleteDeviceRequest
     * @param headers - BatchDeleteDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchDeleteDeviceResponse
     */
    batchDeleteDeviceWithOptions(request: BatchDeleteDeviceRequest, headers: BatchDeleteDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<BatchDeleteDeviceResponse>;
    /**
     * 删除设备
     *
     * @param request - BatchDeleteDeviceRequest
     * @returns BatchDeleteDeviceResponse
     */
    batchDeleteDevice(request: BatchDeleteDeviceRequest): Promise<BatchDeleteDeviceResponse>;
    /**
     * 批量注册设备
     *
     * @param request - BatchRegisterDeviceRequest
     * @param headers - BatchRegisterDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchRegisterDeviceResponse
     */
    batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, headers: BatchRegisterDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRegisterDeviceResponse>;
    /**
     * 批量注册设备
     *
     * @param request - BatchRegisterDeviceRequest
     * @returns BatchRegisterDeviceResponse
     */
    batchRegisterDevice(request: BatchRegisterDeviceRequest): Promise<BatchRegisterDeviceResponse>;
    /**
     * 批量注册事件类型
     *
     * @param request - BatchRegisterEventTypeRequest
     * @param headers - BatchRegisterEventTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchRegisterEventTypeResponse
     */
    batchRegisterEventTypeWithOptions(request: BatchRegisterEventTypeRequest, headers: BatchRegisterEventTypeHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRegisterEventTypeResponse>;
    /**
     * 批量注册事件类型
     *
     * @param request - BatchRegisterEventTypeRequest
     * @returns BatchRegisterEventTypeResponse
     */
    batchRegisterEventType(request: BatchRegisterEventTypeRequest): Promise<BatchRegisterEventTypeResponse>;
    /**
     * 批量修改设备
     *
     * @param request - BatchUpdateDeviceRequest
     * @param headers - BatchUpdateDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchUpdateDeviceResponse
     */
    batchUpdateDeviceWithOptions(request: BatchUpdateDeviceRequest, headers: BatchUpdateDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateDeviceResponse>;
    /**
     * 批量修改设备
     *
     * @param request - BatchUpdateDeviceRequest
     * @returns BatchUpdateDeviceResponse
     */
    batchUpdateDevice(request: BatchUpdateDeviceRequest): Promise<BatchUpdateDeviceResponse>;
    /**
     * 系统绑定
     *
     * @param request - BindSystemRequest
     * @param headers - BindSystemHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BindSystemResponse
     */
    bindSystemWithOptions(request: BindSystemRequest, headers: BindSystemHeaders, runtime: $Util.RuntimeOptions): Promise<BindSystemResponse>;
    /**
     * 系统绑定
     *
     * @param request - BindSystemRequest
     * @returns BindSystemResponse
     */
    bindSystem(request: BindSystemRequest): Promise<BindSystemResponse>;
    /**
     * 发起设备会议
     *
     * @param request - DeviceConferenceRequest
     * @param headers - DeviceConferenceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeviceConferenceResponse
     */
    deviceConferenceWithOptions(request: DeviceConferenceRequest, headers: DeviceConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<DeviceConferenceResponse>;
    /**
     * 发起设备会议
     *
     * @param request - DeviceConferenceRequest
     * @returns DeviceConferenceResponse
     */
    deviceConference(request: DeviceConferenceRequest): Promise<DeviceConferenceResponse>;
    /**
     * 钉钉物联Mama接口
     *
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DiotMamaResponse
     */
    diotMamaWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DiotMamaResponse>;
    /**
     * 钉钉物联Mama接口
     * @returns DiotMamaResponse
     */
    diotMama(): Promise<DiotMamaResponse>;
    /**
     * diot官方市场处理
     *
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DiotMarketManagerTestResponse
     */
    diotMarketManagerTestWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DiotMarketManagerTestResponse>;
    /**
     * diot官方市场处理
     * @returns DiotMarketManagerTestResponse
     */
    diotMarketManagerTest(): Promise<DiotMarketManagerTestResponse>;
    /**
     * 钉钉物联系统测试
     *
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DiotSystemMarkTestResponse
     */
    diotSystemMarkTestWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DiotSystemMarkTestResponse>;
    /**
     * 钉钉物联系统测试
     * @returns DiotSystemMarkTestResponse
     */
    diotSystemMarkTest(): Promise<DiotSystemMarkTestResponse>;
    /**
     * 钉钉物联市场管理
     *
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DiotMarketManagerResponse
     */
    diot_Market_ManagerWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DiotMarketManagerResponse>;
    /**
     * 钉钉物联市场管理
     * @returns DiotMarketManagerResponse
     */
    diot_Market_Manager(): Promise<DiotMarketManagerResponse>;
    /**
     * 推送事件
     *
     * @param request - PushEventRequest
     * @param headers - PushEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushEventResponse
     */
    pushEventWithOptions(request: PushEventRequest, headers: PushEventHeaders, runtime: $Util.RuntimeOptions): Promise<PushEventResponse>;
    /**
     * 推送事件
     *
     * @param request - PushEventRequest
     * @returns PushEventResponse
     */
    pushEvent(request: PushEventRequest): Promise<PushEventResponse>;
    /**
     * 查询设备
     *
     * @param request - QueryDeviceRequest
     * @param headers - QueryDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDeviceResponse
     */
    queryDeviceWithOptions(request: QueryDeviceRequest, headers: QueryDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceResponse>;
    /**
     * 查询设备
     *
     * @param request - QueryDeviceRequest
     * @returns QueryDeviceResponse
     */
    queryDevice(request: QueryDeviceRequest): Promise<QueryDeviceResponse>;
    /**
     * 查询硬件设备的PK值信息
     *
     * @param request - QueryDevicePkRequest
     * @param headers - QueryDevicePkHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDevicePkResponse
     */
    queryDevicePkWithOptions(request: QueryDevicePkRequest, headers: QueryDevicePkHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDevicePkResponse>;
    /**
     * 查询硬件设备的PK值信息
     *
     * @param request - QueryDevicePkRequest
     * @returns QueryDevicePkResponse
     */
    queryDevicePk(request: QueryDevicePkRequest): Promise<QueryDevicePkResponse>;
    /**
     * 查询事件
     *
     * @param request - QueryEventRequest
     * @param headers - QueryEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryEventResponse
     */
    queryEventWithOptions(request: QueryEventRequest, headers: QueryEventHeaders, runtime: $Util.RuntimeOptions): Promise<QueryEventResponse>;
    /**
     * 查询事件
     *
     * @param request - QueryEventRequest
     * @returns QueryEventResponse
     */
    queryEvent(request: QueryEventRequest): Promise<QueryEventResponse>;
    /**
     * 注册设备
     *
     * @param request - RegisterDeviceRequest
     * @param headers - RegisterDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterDeviceResponse
     */
    registerDeviceWithOptions(request: RegisterDeviceRequest, headers: RegisterDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterDeviceResponse>;
    /**
     * 注册设备
     *
     * @param request - RegisterDeviceRequest
     * @returns RegisterDeviceResponse
     */
    registerDevice(request: RegisterDeviceRequest): Promise<RegisterDeviceResponse>;
    /**
     * 升级设备
     *
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpgradeDeviceResponse
     */
    upgradeDeviceWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpgradeDeviceResponse>;
    /**
     * 升级设备
     * @returns UpgradeDeviceResponse
     */
    upgradeDevice(): Promise<UpgradeDeviceResponse>;
    /**
     * 获取工作台流转物联信息
     *
     * @param headers - map
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns WorkbenchTransformInfoResponse
     */
    workbenchTransformInfoWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<WorkbenchTransformInfoResponse>;
    /**
     * 获取工作台流转物联信息
     * @returns WorkbenchTransformInfoResponse
     */
    workbenchTransformInfo(): Promise<WorkbenchTransformInfoResponse>;
}
