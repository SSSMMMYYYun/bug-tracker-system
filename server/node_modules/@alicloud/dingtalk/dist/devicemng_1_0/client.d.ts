/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BatchRegisterDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deviceList?: BatchRegisterDeviceRequestDeviceList[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * manager10
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConnectorEventPushHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConnectorEventPushRequest extends $tea.Model {
    /**
     * @example
     * DeviceType-xxxxxx
     */
    deviceTypeUuid?: string;
    /**
     * @example
     * 设备关机
     */
    eventName?: string;
    /**
     * @example
     * {"var1":"value"}
     */
    input?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConnectorEventPushResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConnectorEventPushResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ConnectorEventPushResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateChatRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateChatRoomRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    chatGroupName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceCodes?: string[];
    deviceTypeId?: string;
    ownerUserId?: string;
    roleList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateChatRoomResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateChatRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateChatRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDepartmentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDepartmentRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * zhangsan/password
     */
    authInfo?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Acount
     */
    authType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"workdate":"workday"}
     */
    bizExt?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 生产1组
     */
    departmentName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Primary
     */
    departmentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 生产1组负责中控机的组装
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://xxx.xxx.com/manage
     */
    systemUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * manager10
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDepartmentResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDepartmentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDepartmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceChatRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceChatRoomRequest extends $tea.Model {
    /**
     * @example
     * REPAIR_GROUP
     */
    chatType?: string;
    deviceCodes?: string[];
    deviceUuids?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxxx
     */
    ownerUserId?: string;
    /**
     * @example
     * 设备维修群
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceChatRoomResponseBody extends $tea.Model {
    result?: CreateDeviceChatRoomResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceChatRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeviceChatRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceDingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceDingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    deviceKey?: string;
    /**
     * @example
     * json字符串
     */
    paramsJson?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    receiverUserIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceDingResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceDingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeviceDingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DissolveGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DissolveGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxxxx
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DissolveGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DissolveGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DissolveGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditDeviceAdminHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditDeviceAdminRequest extends $tea.Model {
    /**
     * @example
     * xxxxxx
     */
    deviceCode?: string;
    /**
     * @example
     * xxxxx
     */
    roleUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    /**
     * @example
     * xxxxxx
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditDeviceAdminResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditDeviceAdminResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EditDeviceAdminResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceGroupInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceGroupInfoResponseBody extends $tea.Model {
    result?: GetDeviceGroupInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDeviceGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWholeDeviceGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWholeDeviceGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWholeDeviceGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWholeDeviceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivateDevicesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivateDevicesRequest extends $tea.Model {
    deviceCategory?: number;
    deviceCode?: string;
    deviceTypeId?: string;
    groupId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivateDevicesResponseBody extends $tea.Model {
    result?: ListActivateDevicesResponseBodyResult[];
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivateDevicesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListActivateDevicesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInspectInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInspectInfoRequest extends $tea.Model {
    deviceUuid?: string[];
    /**
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @example
     * inspect
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInspectInfoResponseBody extends $tea.Model {
    result?: ListInspectInfoResponseBodyResult[];
    success?: boolean;
    /**
     * @example
     * 111
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInspectInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListInspectInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMaintainInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMaintainInfoRequest extends $tea.Model {
    deviceUuid?: string[];
    /**
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 10
     */
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMaintainInfoResponseBody extends $tea.Model {
    result?: ListMaintainInfoResponseBodyResult[];
    success?: boolean;
    /**
     * @example
     * 123
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMaintainInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListMaintainInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDeviceToGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDeviceToGroupRequest extends $tea.Model {
    deviceCodes?: string[];
    deviceUuids?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cide+m5TmAcxA3OU6Un59xxxx==
     */
    openConversationId?: string;
    /**
     * @example
     * manager1111
     */
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDeviceToGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDeviceToGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PullDeviceToGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullUserToGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullUserToGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    openConversationId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullUserToGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullUserToGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PullUserToGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceRequest extends $tea.Model {
    deviceCallbackUrl?: string;
    deviceCategory?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceCode?: string;
    deviceDetailUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceName?: string;
    introduction?: string;
    roleUuid?: string;
    typeUuid?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: RegisterAndActivateDeviceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RegisterAndActivateDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchRequest extends $tea.Model {
    registerAndActivateVOS?: RegisterAndActivateDeviceBatchRequestRegisterAndActivateVOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchResponseBody extends $tea.Model {
    failItems?: RegisterAndActivateDeviceBatchResponseBodyFailItems[];
    success?: boolean;
    successItems?: RegisterAndActivateDeviceBatchResponseBodySuccessItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RegisterAndActivateDeviceBatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceRequest extends $tea.Model {
    /**
     * @example
     * manager1,1000,10001
     */
    collaborators?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    departmentId?: number;
    /**
     * @example
     * 生产组1号设备负责生产第一批产品
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * key_xxxxxxx
     */
    deviceKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 生产1组1号机
     */
    deviceName?: string;
    /**
     * @example
     * manager1,manager2
     */
    managers?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * manager10
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RegisterDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceFromGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceFromGroupRequest extends $tea.Model {
    deviceCodes?: string[];
    deviceUuids?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceFromGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceFromGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveDeviceFromGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveUserFromGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveUserFromGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    openConversationId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveUserFromGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveUserFromGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveUserFromGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardRequest extends $tea.Model {
    /**
     * @example
     * biz-xxxxx
     */
    bizId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"var1":"xxx","var2":"xxx"}
     */
    cardData?: string;
    /**
     * @example
     * xxxxceshi_1
     */
    deviceCode?: string;
    /**
     * @example
     * Device-3bb10262-31f9-494f-9fde-0a910b8exxxx
     */
    deviceUuid?: string;
    /**
     * @example
     * cide+m5TmAcxA3OU6Un59xxxx==
     */
    openConversationId?: string;
    partVisible?: boolean;
    receivers?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcxxxxxxxx
     */
    templateId?: string;
    topbox?: boolean;
    /**
     * @example
     * 0123459456
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgRequest extends $tea.Model {
    /**
     * @example
     * text
     */
    content?: string;
    /**
     * @example
     * xxxx
     */
    deviceCode?: string;
    deviceUuid?: string;
    /**
     * @example
     * cidxxxxxxx==
     */
    openConversationId?: string;
    userList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMsgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendMsgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallDeviceRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallDeviceRobotRequest extends $tea.Model {
    /**
     * @example
     * xxxxx
     */
    deviceCode?: string;
    /**
     * @example
     * xxxxx
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallDeviceRobotResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallDeviceRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UninstallDeviceRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * biz-xxxxxx
     */
    bizId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"var1":"xxx","var2":"xxx"}
     */
    cardData?: string;
    tips?: UpdateCardRequestTips;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardResponseBody extends $tea.Model {
    result?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadEventRequest extends $tea.Model {
    content?: string;
    coverUrl?: string;
    deviceCode?: string;
    deviceUuid?: string;
    eventTime?: string;
    eventType?: string;
    level?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadEventResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRegisterDeviceRequestDeviceList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * manager1,1000,10001
     */
    collaborators?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    departmentId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 生产组1号设备负责生产第一批产品
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * key_xxxxxxx
     */
    deviceKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 生产1组1号机
     */
    deviceName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * manager1,1000,10001
     */
    managers?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceChatRoomResponseBodyResult extends $tea.Model {
    chatId?: string;
    encodedCid?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceGroupInfoResponseBodyResultDevices extends $tea.Model {
    deviceCode?: string;
    deviceName?: string;
    deviceUuid?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeviceGroupInfoResponseBodyResult extends $tea.Model {
    devices?: GetDeviceGroupInfoResponseBodyResultDevices[];
    ownerUser?: string;
    subAdminUsers?: string[];
    title?: string;
    users?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListActivateDevicesResponseBodyResult extends $tea.Model {
    bizExt?: string;
    deviceCallbackUrl?: string;
    deviceCategory?: number;
    deviceCode?: string;
    deviceDetailUrl?: string;
    deviceName?: string;
    groupUuid?: string;
    icon?: string;
    introduction?: string;
    typeUuid?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListInspectInfoResponseBodyResult extends $tea.Model {
    /**
     * @example
     * testDeviceCode
     */
    deviceCode?: string;
    /**
     * @example
     * 测试设备名称
     */
    deviceName?: string;
    /**
     * @example
     * 2022-09-10 12:00
     */
    gmtCreate?: string;
    /**
     * @example
     * 2022-09-10 12:00
     */
    handleTime?: string;
    maintenanceStaff?: string[];
    /**
     * @example
     * 巡检表F
     */
    name?: string;
    /**
     * @example
     * 巡检项1：高度（正常)
     */
    remark?: string;
    /**
     * @example
     * 1
     */
    repairStatus?: number;
    status?: number;
    /**
     * @example
     * inspect
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMaintainInfoResponseBodyResult extends $tea.Model {
    /**
     * @example
     * testDeviceCode
     */
    deviceCode?: string;
    /**
     * @example
     * 测试设备名称
     */
    deviceName?: string;
    /**
     * @example
     * 2022-7-14 13:00
     */
    gmtCreate?: string;
    /**
     * @example
     * 2022=12-25 15:00
     */
    handleTime?: string;
    maintenanceStaff?: string[];
    /**
     * @example
     * 0
     */
    processState?: number;
    /**
     * @example
     * 温度过高导致异常
     */
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceResponseBodyResult extends $tea.Model {
    deviceCategory?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceDetailUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    introduction?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    typeUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchRequestRegisterAndActivateVOS extends $tea.Model {
    deviceCallbackUrl?: string;
    deviceCategory?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceCode?: string;
    deviceDetailUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    deviceName?: string;
    groupUuid?: string;
    introduction?: string;
    roleUuid?: string;
    typeUuid?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchResponseBodyFailItemsResult extends $tea.Model {
    deviceCallbackUrl?: string;
    deviceCategory?: number;
    deviceCode?: string;
    deviceDetailUrl?: string;
    deviceName?: string;
    groupUuid?: string;
    icon?: string;
    introduction?: string;
    roleUuid?: string;
    status?: number;
    typeUuid?: string;
    userIds?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchResponseBodyFailItems extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    result?: RegisterAndActivateDeviceBatchResponseBodyFailItemsResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchResponseBodySuccessItemsResult extends $tea.Model {
    deviceCallbackUrl?: string;
    deviceCategory?: number;
    deviceCode?: string;
    deviceDetailUrl?: string;
    deviceName?: string;
    groupUuid?: string;
    icon?: string;
    introduction?: string;
    roleUuid?: string;
    status?: number;
    typeUuid?: string;
    userIds?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAndActivateDeviceBatchResponseBodySuccessItems extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    result?: RegisterAndActivateDeviceBatchResponseBodySuccessItemsResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardRequestTips extends $tea.Model {
    cids?: string;
    content?: string;
    sender?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 批量注册设备
     *
     * @param request - BatchRegisterDeviceRequest
     * @param headers - BatchRegisterDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchRegisterDeviceResponse
     */
    batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, headers: BatchRegisterDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRegisterDeviceResponse>;
    /**
     * 批量注册设备
     *
     * @param request - BatchRegisterDeviceRequest
     * @returns BatchRegisterDeviceResponse
     */
    batchRegisterDevice(request: BatchRegisterDeviceRequest): Promise<BatchRegisterDeviceResponse>;
    /**
     * 想设备上钉连接器推送设备事件
     *
     * @param request - ConnectorEventPushRequest
     * @param headers - ConnectorEventPushHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ConnectorEventPushResponse
     */
    connectorEventPushWithOptions(request: ConnectorEventPushRequest, headers: ConnectorEventPushHeaders, runtime: $Util.RuntimeOptions): Promise<ConnectorEventPushResponse>;
    /**
     * 想设备上钉连接器推送设备事件
     *
     * @param request - ConnectorEventPushRequest
     * @returns ConnectorEventPushResponse
     */
    connectorEventPush(request: ConnectorEventPushRequest): Promise<ConnectorEventPushResponse>;
    /**
     * 创建设备群
     *
     * @param request - CreateChatRoomRequest
     * @param headers - CreateChatRoomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateChatRoomResponse
     */
    createChatRoomWithOptions(request: CreateChatRoomRequest, headers: CreateChatRoomHeaders, runtime: $Util.RuntimeOptions): Promise<CreateChatRoomResponse>;
    /**
     * 创建设备群
     *
     * @param request - CreateChatRoomRequest
     * @returns CreateChatRoomResponse
     */
    createChatRoom(request: CreateChatRoomRequest): Promise<CreateChatRoomResponse>;
    /**
     * 创建部门
     *
     * @param request - CreateDepartmentRequest
     * @param headers - CreateDepartmentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDepartmentResponse
     */
    createDepartmentWithOptions(request: CreateDepartmentRequest, headers: CreateDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDepartmentResponse>;
    /**
     * 创建部门
     *
     * @param request - CreateDepartmentRequest
     * @returns CreateDepartmentResponse
     */
    createDepartment(request: CreateDepartmentRequest): Promise<CreateDepartmentResponse>;
    /**
     * 创建设备场景群
     *
     * @param request - CreateDeviceChatRoomRequest
     * @param headers - CreateDeviceChatRoomHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDeviceChatRoomResponse
     */
    createDeviceChatRoomWithOptions(request: CreateDeviceChatRoomRequest, headers: CreateDeviceChatRoomHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeviceChatRoomResponse>;
    /**
     * 创建设备场景群
     *
     * @param request - CreateDeviceChatRoomRequest
     * @returns CreateDeviceChatRoomResponse
     */
    createDeviceChatRoom(request: CreateDeviceChatRoomRequest): Promise<CreateDeviceChatRoomResponse>;
    /**
     * 设备账号向目标用户发送ding消息
     *
     * @param request - DeviceDingRequest
     * @param headers - DeviceDingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeviceDingResponse
     */
    deviceDingWithOptions(request: DeviceDingRequest, headers: DeviceDingHeaders, runtime: $Util.RuntimeOptions): Promise<DeviceDingResponse>;
    /**
     * 设备账号向目标用户发送ding消息
     *
     * @param request - DeviceDingRequest
     * @returns DeviceDingResponse
     */
    deviceDing(request: DeviceDingRequest): Promise<DeviceDingResponse>;
    /**
     * 解散设备群
     *
     * @param request - DissolveGroupRequest
     * @param headers - DissolveGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DissolveGroupResponse
     */
    dissolveGroupWithOptions(request: DissolveGroupRequest, headers: DissolveGroupHeaders, runtime: $Util.RuntimeOptions): Promise<DissolveGroupResponse>;
    /**
     * 解散设备群
     *
     * @param request - DissolveGroupRequest
     * @returns DissolveGroupResponse
     */
    dissolveGroup(request: DissolveGroupRequest): Promise<DissolveGroupResponse>;
    /**
     * 编辑设备管理员
     *
     * @param request - EditDeviceAdminRequest
     * @param headers - EditDeviceAdminHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EditDeviceAdminResponse
     */
    editDeviceAdminWithOptions(request: EditDeviceAdminRequest, headers: EditDeviceAdminHeaders, runtime: $Util.RuntimeOptions): Promise<EditDeviceAdminResponse>;
    /**
     * 编辑设备管理员
     *
     * @param request - EditDeviceAdminRequest
     * @returns EditDeviceAdminResponse
     */
    editDeviceAdmin(request: EditDeviceAdminRequest): Promise<EditDeviceAdminResponse>;
    /**
     * 获取设备群信息
     *
     * @param request - GetDeviceGroupInfoRequest
     * @param headers - GetDeviceGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDeviceGroupInfoResponse
     */
    getDeviceGroupInfoWithOptions(request: GetDeviceGroupInfoRequest, headers: GetDeviceGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetDeviceGroupInfoResponse>;
    /**
     * 获取设备群信息
     *
     * @param request - GetDeviceGroupInfoRequest
     * @returns GetDeviceGroupInfoResponse
     */
    getDeviceGroupInfo(request: GetDeviceGroupInfoRequest): Promise<GetDeviceGroupInfoResponse>;
    /**
     * 获取设备全员群标识
     *
     * @param headers - GetWholeDeviceGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetWholeDeviceGroupResponse
     */
    getWholeDeviceGroupWithOptions(headers: GetWholeDeviceGroupHeaders, runtime: $Util.RuntimeOptions): Promise<GetWholeDeviceGroupResponse>;
    /**
     * 获取设备全员群标识
     * @returns GetWholeDeviceGroupResponse
     */
    getWholeDeviceGroup(): Promise<GetWholeDeviceGroupResponse>;
    /**
     * 查询激活的设备信息
     *
     * @param request - ListActivateDevicesRequest
     * @param headers - ListActivateDevicesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListActivateDevicesResponse
     */
    listActivateDevicesWithOptions(request: ListActivateDevicesRequest, headers: ListActivateDevicesHeaders, runtime: $Util.RuntimeOptions): Promise<ListActivateDevicesResponse>;
    /**
     * 查询激活的设备信息
     *
     * @param request - ListActivateDevicesRequest
     * @returns ListActivateDevicesResponse
     */
    listActivateDevices(request: ListActivateDevicesRequest): Promise<ListActivateDevicesResponse>;
    /**
     * 获取巡检、保养记录
     *
     * @param request - ListInspectInfoRequest
     * @param headers - ListInspectInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListInspectInfoResponse
     */
    listInspectInfoWithOptions(request: ListInspectInfoRequest, headers: ListInspectInfoHeaders, runtime: $Util.RuntimeOptions): Promise<ListInspectInfoResponse>;
    /**
     * 获取巡检、保养记录
     *
     * @param request - ListInspectInfoRequest
     * @returns ListInspectInfoResponse
     */
    listInspectInfo(request: ListInspectInfoRequest): Promise<ListInspectInfoResponse>;
    /**
     * 获取报修信息
     *
     * @param request - ListMaintainInfoRequest
     * @param headers - ListMaintainInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMaintainInfoResponse
     */
    listMaintainInfoWithOptions(request: ListMaintainInfoRequest, headers: ListMaintainInfoHeaders, runtime: $Util.RuntimeOptions): Promise<ListMaintainInfoResponse>;
    /**
     * 获取报修信息
     *
     * @param request - ListMaintainInfoRequest
     * @returns ListMaintainInfoResponse
     */
    listMaintainInfo(request: ListMaintainInfoRequest): Promise<ListMaintainInfoResponse>;
    /**
     * 拉设备进群
     *
     * @param request - PullDeviceToGroupRequest
     * @param headers - PullDeviceToGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PullDeviceToGroupResponse
     */
    pullDeviceToGroupWithOptions(request: PullDeviceToGroupRequest, headers: PullDeviceToGroupHeaders, runtime: $Util.RuntimeOptions): Promise<PullDeviceToGroupResponse>;
    /**
     * 拉设备进群
     *
     * @param request - PullDeviceToGroupRequest
     * @returns PullDeviceToGroupResponse
     */
    pullDeviceToGroup(request: PullDeviceToGroupRequest): Promise<PullDeviceToGroupResponse>;
    /**
     * 拉设用户进群
     *
     * @param request - PullUserToGroupRequest
     * @param headers - PullUserToGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PullUserToGroupResponse
     */
    pullUserToGroupWithOptions(request: PullUserToGroupRequest, headers: PullUserToGroupHeaders, runtime: $Util.RuntimeOptions): Promise<PullUserToGroupResponse>;
    /**
     * 拉设用户进群
     *
     * @param request - PullUserToGroupRequest
     * @returns PullUserToGroupResponse
     */
    pullUserToGroup(request: PullUserToGroupRequest): Promise<PullUserToGroupResponse>;
    /**
     * 注册与激活设备
     *
     * @param request - RegisterAndActivateDeviceRequest
     * @param headers - RegisterAndActivateDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterAndActivateDeviceResponse
     */
    registerAndActivateDeviceWithOptions(request: RegisterAndActivateDeviceRequest, headers: RegisterAndActivateDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterAndActivateDeviceResponse>;
    /**
     * 注册与激活设备
     *
     * @param request - RegisterAndActivateDeviceRequest
     * @returns RegisterAndActivateDeviceResponse
     */
    registerAndActivateDevice(request: RegisterAndActivateDeviceRequest): Promise<RegisterAndActivateDeviceResponse>;
    /**
     * 批量注册与激活设备
     *
     * @param request - RegisterAndActivateDeviceBatchRequest
     * @param headers - RegisterAndActivateDeviceBatchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterAndActivateDeviceBatchResponse
     */
    registerAndActivateDeviceBatchWithOptions(request: RegisterAndActivateDeviceBatchRequest, headers: RegisterAndActivateDeviceBatchHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterAndActivateDeviceBatchResponse>;
    /**
     * 批量注册与激活设备
     *
     * @param request - RegisterAndActivateDeviceBatchRequest
     * @returns RegisterAndActivateDeviceBatchResponse
     */
    registerAndActivateDeviceBatch(request: RegisterAndActivateDeviceBatchRequest): Promise<RegisterAndActivateDeviceBatchResponse>;
    /**
     * 注册设备并为其创建机器人
     *
     * @param request - RegisterDeviceRequest
     * @param headers - RegisterDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterDeviceResponse
     */
    registerDeviceWithOptions(request: RegisterDeviceRequest, headers: RegisterDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterDeviceResponse>;
    /**
     * 注册设备并为其创建机器人
     *
     * @param request - RegisterDeviceRequest
     * @returns RegisterDeviceResponse
     */
    registerDevice(request: RegisterDeviceRequest): Promise<RegisterDeviceResponse>;
    /**
     * 移设备出群
     *
     * @param request - RemoveDeviceFromGroupRequest
     * @param headers - RemoveDeviceFromGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveDeviceFromGroupResponse
     */
    removeDeviceFromGroupWithOptions(request: RemoveDeviceFromGroupRequest, headers: RemoveDeviceFromGroupHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveDeviceFromGroupResponse>;
    /**
     * 移设备出群
     *
     * @param request - RemoveDeviceFromGroupRequest
     * @returns RemoveDeviceFromGroupResponse
     */
    removeDeviceFromGroup(request: RemoveDeviceFromGroupRequest): Promise<RemoveDeviceFromGroupResponse>;
    /**
     * 移用户出设备群
     *
     * @param request - RemoveUserFromGroupRequest
     * @param headers - RemoveUserFromGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveUserFromGroupResponse
     */
    removeUserFromGroupWithOptions(request: RemoveUserFromGroupRequest, headers: RemoveUserFromGroupHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveUserFromGroupResponse>;
    /**
     * 移用户出设备群
     *
     * @param request - RemoveUserFromGroupRequest
     * @returns RemoveUserFromGroupResponse
     */
    removeUserFromGroup(request: RemoveUserFromGroupRequest): Promise<RemoveUserFromGroupResponse>;
    /**
     * 发送卡片
     *
     * @param request - SendCardRequest
     * @param headers - SendCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendCardResponse
     */
    sendCardWithOptions(request: SendCardRequest, headers: SendCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendCardResponse>;
    /**
     * 发送卡片
     *
     * @param request - SendCardRequest
     * @returns SendCardResponse
     */
    sendCard(request: SendCardRequest): Promise<SendCardResponse>;
    /**
     * 发送普通消息
     *
     * @param request - SendMsgRequest
     * @param headers - SendMsgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendMsgResponse
     */
    sendMsgWithOptions(request: SendMsgRequest, headers: SendMsgHeaders, runtime: $Util.RuntimeOptions): Promise<SendMsgResponse>;
    /**
     * 发送普通消息
     *
     * @param request - SendMsgRequest
     * @returns SendMsgResponse
     */
    sendMsg(request: SendMsgRequest): Promise<SendMsgResponse>;
    /**
     * 卸载设备
     *
     * @param request - UninstallDeviceRobotRequest
     * @param headers - UninstallDeviceRobotHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UninstallDeviceRobotResponse
     */
    uninstallDeviceRobotWithOptions(request: UninstallDeviceRobotRequest, headers: UninstallDeviceRobotHeaders, runtime: $Util.RuntimeOptions): Promise<UninstallDeviceRobotResponse>;
    /**
     * 卸载设备
     *
     * @param request - UninstallDeviceRobotRequest
     * @returns UninstallDeviceRobotResponse
     */
    uninstallDeviceRobot(request: UninstallDeviceRobotRequest): Promise<UninstallDeviceRobotResponse>;
    /**
     * 更新卡片
     *
     * @param request - UpdateCardRequest
     * @param headers - UpdateCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCardResponse
     */
    updateCardWithOptions(request: UpdateCardRequest, headers: UpdateCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCardResponse>;
    /**
     * 更新卡片
     *
     * @param request - UpdateCardRequest
     * @returns UpdateCardResponse
     */
    updateCard(request: UpdateCardRequest): Promise<UpdateCardResponse>;
    /**
     * 设备事件上报
     *
     * @param request - UploadEventRequest
     * @param headers - UploadEventHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UploadEventResponse
     */
    uploadEventWithOptions(request: UploadEventRequest, headers: UploadEventHeaders, runtime: $Util.RuntimeOptions): Promise<UploadEventResponse>;
    /**
     * 设备事件上报
     *
     * @param request - UploadEventRequest
     * @returns UploadEventResponse
     */
    uploadEvent(request: UploadEventRequest): Promise<UploadEventResponse>;
}
