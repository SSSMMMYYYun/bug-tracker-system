/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddRobotInstanceToGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotInstanceToGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd123
     */
    chatbotId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotInstanceToGroupResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotInstanceToGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddRobotInstanceToGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotRequest extends $tea.Model {
    dingUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜机器人能做什么
     */
    question?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd1234
     */
    robotAppKey?: string;
    /**
     * @example
     * 1234
     */
    sessionUuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotResponseBody extends $tea.Model {
    /**
     * @example
     * {\"sessionUuid\":\"op_2c35e603af6c4e62bcf5xxxx\",\"answerType\":\"recommendAnswer\",\"recommendAnswerContent\":[\"通讯录上人员可以排序吗？\"]}
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AskRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dsfsfr434
     */
    appKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    byDay?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20210506
     */
    endDay?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20210405
     */
    startDay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fromCache?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    rawset?: {
        [key: string]: string;
    }[];
    /**
     * @remarks
     * This parameter is required.
     */
    runtime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    tips?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDingMeBaseDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd1234
     */
    robotAppKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoResponseBody extends $tea.Model {
    /**
     * @example
     * abcd1234
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetIntelligentRobotInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 机器人类型参数，服务窗机器人：1，客户群内机器人：2
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    appId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜客服机器人
     */
    brief?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜客服机器人是7*24小时智能问答机器人
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜机器人
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    previewMediaUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOfficialAccountRobotInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123abc
     */
    foreignId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 客户abc
     */
    nick?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    source?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWebChannelUserTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleText
     */
    msgKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * eyJjb250ZW50IjogIua1i+ivleWGheWuuSJ9(即{"content": "测试内容"}的base64编码值)
     */
    msgParam?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234abcd
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushCustomerGroupMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd1234
     */
    chatbotId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleText
     */
    msgKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * eyJjb250ZW50IjogIua1i+ivleWGheWuuSJ9(即{"content": "测试内容"}的base64编码值)
     */
    msgParam?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageResponseBody extends $tea.Model {
    /**
     * @example
     * 1234
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushIntelligentRobotGroupMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd123
     */
    chatbotId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleText
     */
    msgKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * eyJjb250ZW50IjogIua1i+ivleWGheWuuSJ9(即{"content": "测试内容"}的base64编码值)
     */
    msgParam?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456abc
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageResponseBody extends $tea.Model {
    /**
     * @example
     * 1234
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushIntelligentRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleText
     */
    msgKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * eyJjb250ZW50IjogIua1i+ivleWGheWuuSJ9(即{"content": "测试内容"}的base64编码值)
     */
    msgParam?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456abc
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234abcd
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushOfficialAccountMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    chatbotId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleText
     */
    msgKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * eyJjb250ZW50IjogIua1i+ivleWGheWuuSJ9(即{"content": "测试内容"}的base64编码值)
     */
    msgParam?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123456abc
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageResponseBody extends $tea.Model {
    /**
     * @example
     * 12345
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"bizParamMap":{"proxySessionId":"DINGTALK_RYnVfayNAe_4000006001201145"},"msgType":"text","text":"测试回复机器人消息"}
     */
    proxyMessageStr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReplyRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    avatar?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜客服机器人
     */
    brief?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜客服机器人是7*24小时智能问答机器人
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小蜜机器人
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    previewMediaUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 机器人类型参数，服务窗机器人：1，客户群内机器人：2
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * success
     */
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateOfficialAccountRobotInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加智能客服机器人到钉钉群
     *
     * @param request - AddRobotInstanceToGroupRequest
     * @param headers - AddRobotInstanceToGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddRobotInstanceToGroupResponse
     */
    addRobotInstanceToGroupWithOptions(request: AddRobotInstanceToGroupRequest, headers: AddRobotInstanceToGroupHeaders, runtime: $Util.RuntimeOptions): Promise<AddRobotInstanceToGroupResponse>;
    /**
     * 添加智能客服机器人到钉钉群
     *
     * @param request - AddRobotInstanceToGroupRequest
     * @returns AddRobotInstanceToGroupResponse
     */
    addRobotInstanceToGroup(request: AddRobotInstanceToGroupRequest): Promise<AddRobotInstanceToGroupResponse>;
    /**
     * 调用小蜜机器人的问答能力
     *
     * @param request - AskRobotRequest
     * @param headers - AskRobotHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AskRobotResponse
     */
    askRobotWithOptions(request: AskRobotRequest, headers: AskRobotHeaders, runtime: $Util.RuntimeOptions): Promise<AskRobotResponse>;
    /**
     * 调用小蜜机器人的问答能力
     *
     * @param request - AskRobotRequest
     * @returns AskRobotResponse
     */
    askRobot(request: AskRobotRequest): Promise<AskRobotResponse>;
    /**
     * 小蜜机器人数据统计指标
     *
     * @param request - GetDingMeBaseDataRequest
     * @param headers - GetDingMeBaseDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDingMeBaseDataResponse
     */
    getDingMeBaseDataWithOptions(request: GetDingMeBaseDataRequest, headers: GetDingMeBaseDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetDingMeBaseDataResponse>;
    /**
     * 小蜜机器人数据统计指标
     *
     * @param request - GetDingMeBaseDataRequest
     * @returns GetDingMeBaseDataResponse
     */
    getDingMeBaseData(request: GetDingMeBaseDataRequest): Promise<GetDingMeBaseDataResponse>;
    /**
     * 获取智能客服机器人信息
     *
     * @param request - GetIntelligentRobotInfoRequest
     * @param headers - GetIntelligentRobotInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetIntelligentRobotInfoResponse
     */
    getIntelligentRobotInfoWithOptions(request: GetIntelligentRobotInfoRequest, headers: GetIntelligentRobotInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetIntelligentRobotInfoResponse>;
    /**
     * 获取智能客服机器人信息
     *
     * @param request - GetIntelligentRobotInfoRequest
     * @returns GetIntelligentRobotInfoResponse
     */
    getIntelligentRobotInfo(request: GetIntelligentRobotInfoRequest): Promise<GetIntelligentRobotInfoResponse>;
    /**
     * 获取服务窗机器人信息
     *
     * @param request - GetOfficialAccountRobotInfoRequest
     * @param headers - GetOfficialAccountRobotInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOfficialAccountRobotInfoResponse
     */
    getOfficialAccountRobotInfoWithOptions(request: GetOfficialAccountRobotInfoRequest, headers: GetOfficialAccountRobotInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetOfficialAccountRobotInfoResponse>;
    /**
     * 获取服务窗机器人信息
     *
     * @param request - GetOfficialAccountRobotInfoRequest
     * @returns GetOfficialAccountRobotInfoResponse
     */
    getOfficialAccountRobotInfo(request: GetOfficialAccountRobotInfoRequest): Promise<GetOfficialAccountRobotInfoResponse>;
    /**
     * 小蜜客服网页渠道获取三方用户token
     *
     * @param request - GetWebChannelUserTokenRequest
     * @param headers - GetWebChannelUserTokenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetWebChannelUserTokenResponse
     */
    getWebChannelUserTokenWithOptions(request: GetWebChannelUserTokenRequest, headers: GetWebChannelUserTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetWebChannelUserTokenResponse>;
    /**
     * 小蜜客服网页渠道获取三方用户token
     *
     * @param request - GetWebChannelUserTokenRequest
     * @returns GetWebChannelUserTokenResponse
     */
    getWebChannelUserToken(request: GetWebChannelUserTokenRequest): Promise<GetWebChannelUserTokenResponse>;
    /**
     * 通过小蜜机器人在客户群内推送消息
     *
     * @param request - PushCustomerGroupMessageRequest
     * @param headers - PushCustomerGroupMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushCustomerGroupMessageResponse
     */
    pushCustomerGroupMessageWithOptions(request: PushCustomerGroupMessageRequest, headers: PushCustomerGroupMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushCustomerGroupMessageResponse>;
    /**
     * 通过小蜜机器人在客户群内推送消息
     *
     * @param request - PushCustomerGroupMessageRequest
     * @returns PushCustomerGroupMessageResponse
     */
    pushCustomerGroupMessage(request: PushCustomerGroupMessageRequest): Promise<PushCustomerGroupMessageResponse>;
    /**
     * 推送智能客服机器人钉钉群聊消息
     *
     * @param request - PushIntelligentRobotGroupMessageRequest
     * @param headers - PushIntelligentRobotGroupMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushIntelligentRobotGroupMessageResponse
     */
    pushIntelligentRobotGroupMessageWithOptions(request: PushIntelligentRobotGroupMessageRequest, headers: PushIntelligentRobotGroupMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushIntelligentRobotGroupMessageResponse>;
    /**
     * 推送智能客服机器人钉钉群聊消息
     *
     * @param request - PushIntelligentRobotGroupMessageRequest
     * @returns PushIntelligentRobotGroupMessageResponse
     */
    pushIntelligentRobotGroupMessage(request: PushIntelligentRobotGroupMessageRequest): Promise<PushIntelligentRobotGroupMessageResponse>;
    /**
     * 智能客服机器人推送消息
     *
     * @param request - PushIntelligentRobotMessageRequest
     * @param headers - PushIntelligentRobotMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushIntelligentRobotMessageResponse
     */
    pushIntelligentRobotMessageWithOptions(request: PushIntelligentRobotMessageRequest, headers: PushIntelligentRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushIntelligentRobotMessageResponse>;
    /**
     * 智能客服机器人推送消息
     *
     * @param request - PushIntelligentRobotMessageRequest
     * @returns PushIntelligentRobotMessageResponse
     */
    pushIntelligentRobotMessage(request: PushIntelligentRobotMessageRequest): Promise<PushIntelligentRobotMessageResponse>;
    /**
     * 通过服务窗机器人推送单聊消息
     *
     * @param request - PushOfficialAccountMessageRequest
     * @param headers - PushOfficialAccountMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushOfficialAccountMessageResponse
     */
    pushOfficialAccountMessageWithOptions(request: PushOfficialAccountMessageRequest, headers: PushOfficialAccountMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushOfficialAccountMessageResponse>;
    /**
     * 通过服务窗机器人推送单聊消息
     *
     * @param request - PushOfficialAccountMessageRequest
     * @returns PushOfficialAccountMessageResponse
     */
    pushOfficialAccountMessage(request: PushOfficialAccountMessageRequest): Promise<PushOfficialAccountMessageResponse>;
    /**
     * 通过小蜜客服机器人推送单聊消息
     *
     * @param request - PushRobotMessageRequest
     * @param headers - PushRobotMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushRobotMessageResponse
     */
    pushRobotMessageWithOptions(request: PushRobotMessageRequest, headers: PushRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushRobotMessageResponse>;
    /**
     * 通过小蜜客服机器人推送单聊消息
     *
     * @param request - PushRobotMessageRequest
     * @returns PushRobotMessageResponse
     */
    pushRobotMessage(request: PushRobotMessageRequest): Promise<PushRobotMessageResponse>;
    /**
     * 异步回复机器人消息
     *
     * @param request - ReplyRobotRequest
     * @param headers - ReplyRobotHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReplyRobotResponse
     */
    replyRobotWithOptions(request: ReplyRobotRequest, headers: ReplyRobotHeaders, runtime: $Util.RuntimeOptions): Promise<ReplyRobotResponse>;
    /**
     * 异步回复机器人消息
     *
     * @param request - ReplyRobotRequest
     * @returns ReplyRobotResponse
     */
    replyRobot(request: ReplyRobotRequest): Promise<ReplyRobotResponse>;
    /**
     * 更新服务窗机器人信息
     *
     * @param request - UpdateOfficialAccountRobotInfoRequest
     * @param headers - UpdateOfficialAccountRobotInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateOfficialAccountRobotInfoResponse
     */
    updateOfficialAccountRobotInfoWithOptions(request: UpdateOfficialAccountRobotInfoRequest, headers: UpdateOfficialAccountRobotInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateOfficialAccountRobotInfoResponse>;
    /**
     * 更新服务窗机器人信息
     *
     * @param request - UpdateOfficialAccountRobotInfoRequest
     * @returns UpdateOfficialAccountRobotInfoResponse
     */
    updateOfficialAccountRobotInfo(request: UpdateOfficialAccountRobotInfoRequest): Promise<UpdateOfficialAccountRobotInfoResponse>;
}
