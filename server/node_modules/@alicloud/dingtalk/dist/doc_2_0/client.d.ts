/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class DentryModel extends $tea.Model {
    /**
     * @example
     * alidoc
     */
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1663918630284
     */
    createdTime?: number;
    creator?: DentryModelCreator;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YRBd*****KGDA
     */
    dentryId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * file
     */
    dentryType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 6or0dp8Z****XWa91xzy3
     */
    dentryUuid?: string;
    /**
     * @example
     * v1GXn****KqD4
     */
    docKey?: string;
    /**
     * @example
     * adoc
     */
    extension?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * false
     */
    hasChildren?: boolean;
    linkSourceInfo?: LinkSourceInfo;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 钉钉文档
     */
    name?: string;
    /**
     * @example
     * 测试组织/测试知识库/abc
     */
    path?: string;
    space?: SpaceModel;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YGv0****0xXAr
     */
    spaceId?: string;
    statisticalInfo?: DentryModelStatisticalInfo;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1663918630284
     */
    updatedTime?: number;
    updater?: DentryModelUpdater;
    /**
     * @example
     * https://xxx.yy
     */
    url?: string;
    visitorInfo?: DentryModelVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVO extends $tea.Model {
    /**
     * @example
     * alidoc
     */
    contentType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1663918630284
     */
    createdTime?: number;
    creator?: DentryVOCreator;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YRBd*****KGDA
     */
    dentryId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * file
     */
    dentryType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 6or0dp8Z****XWa91xzy3
     */
    dentryUuid?: string;
    /**
     * @example
     * v1GXn****KqD4
     */
    docKey?: string;
    /**
     * @example
     * alidoc
     */
    extension?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * false
     */
    hasChildren?: boolean;
    linkSourceInfo?: LinkSourceInfo;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 钉钉文档
     */
    name?: string;
    /**
     * @example
     * 测试组织/测试知识库/abc
     */
    path?: string;
    space?: SpaceModel;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YGv0****0xXAr
     */
    spaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1663918630284
     */
    updatedTime?: number;
    updater?: DentryVOUpdater;
    /**
     * @example
     * https://xxx.yy
     */
    url?: string;
    visitorInfo?: DentryVOVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkSourceInfo extends $tea.Model {
    /**
     * @example
     * docx
     */
    extension?: string;
    iconUrl?: LinkSourceInfoIconUrl;
    /**
     * @example
     * abc
     */
    id?: string;
    /**
     * @example
     * 0
     */
    linkType?: number;
    /**
     * @example
     * def
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenActionModel extends $tea.Model {
    /**
     * @example
     * sky
     */
    name?: string;
    /**
     * @example
     * 273829092
     */
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModel extends $tea.Model {
    /**
     * @example
     * https://img.abc.yyy
     */
    cover?: string;
    /**
     * @example
     * This is some description.
     */
    description?: string;
    hdIconVO?: SpaceModelHdIconVO;
    iconVO?: SpaceModelIconVO;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abc
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * hello
     */
    name?: string;
    owner?: SpaceModelOwner;
    recentList?: DentryModel[];
    /**
     * @example
     * 1
     */
    type?: number;
    /**
     * @example
     * https://xx.yy
     */
    url?: string;
    visitorInfo?: SpaceModelVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVO extends $tea.Model {
    cover?: string;
    description?: string;
    iconVO?: SpaceVOIconVO;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abc
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * hello
     */
    name?: string;
    owner?: SpaceVOOwner;
    /**
     * @example
     * 1
     */
    type?: number;
    /**
     * @example
     * https://xx.yy
     */
    url?: string;
    visitorInfo?: SpaceVOVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModel extends $tea.Model {
    /**
     * @example
     * https://abc.com
     */
    cover?: string;
    /**
     * @example
     * 12340000
     */
    createdTime?: number;
    creator?: TeamModelCreator;
    /**
     * @example
     * 这里是团队描述
     */
    description?: string;
    /**
     * @example
     * https://def.com
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * AbcDef
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试团队名称
     */
    name?: string;
    relatedDeptInfo?: TeamModelRelatedDeptInfo;
    /**
     * @example
     * 0
     */
    status?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    type?: number;
    /**
     * @example
     * 34560000
     */
    updatedTime?: number;
    updater?: TeamModelUpdater;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://abc.com
     */
    url?: string;
    visitInfo?: TeamModelVisitInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVO extends $tea.Model {
    /**
     * @example
     * https://abc.com
     */
    cover?: string;
    /**
     * @example
     * 12340000
     */
    createdTime?: number;
    creator?: TeamVOCreator;
    /**
     * @example
     * 这里是团队描述
     */
    description?: string;
    /**
     * @example
     * https://def.com
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * AbcDef
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试团队名称
     */
    name?: string;
    relatedDeptInfo?: TeamVORelatedDeptInfo;
    shareScopeInfo?: TeamVOShareScopeInfo;
    /**
     * @example
     * 0
     */
    status?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    type?: number;
    /**
     * @example
     * 34560000
     */
    updatedTime?: number;
    updater?: TeamVOUpdater;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://abc.com
     */
    url?: string;
    visitInfo?: TeamVOVisitInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MapValue extends $tea.Model {
    templateId?: string;
    title?: string;
    type?: number;
    coverDownloadUrl?: string;
    description?: string;
    authorName?: string;
    createTime?: string;
    modifiedTime?: string;
    workspaceId?: string;
    workspaceName?: string;
    usedCount?: number;
    belong?: string;
    contentDownloadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: BatchCreateTeamRequestParam;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchCreateTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryUuids?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchDeleteRecentsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesRequest extends $tea.Model {
    option?: CategoriesTemplatesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    param?: CategoriesTemplatesRequestParam;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesResponseBody extends $tea.Model {
    map?: {
        [key: string]: MapValue[];
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CategoriesTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesRequest extends $tea.Model {
    option?: CategoryTemplatesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    param?: CategoryTemplatesRequestParam;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesResponseBody extends $tea.Model {
    list?: CategoryTemplatesResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CategoryTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    targetSpaceId?: string;
    toNextDentryId?: string;
    toParentDentryId?: string;
    toPrevDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: CopyWorkspaceRequestParam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CopyWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceAsyncHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceAsyncRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: CopyWorkspaceAsyncRequestParam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceAsyncResponseBody extends $tea.Model {
    /**
     * @example
     * 0
     */
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceAsyncResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CopyWorkspaceAsyncResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * file
     */
    dentryType?: string;
    /**
     * @example
     * 0
     */
    documentType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingtalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abc
     */
    operatorId?: string;
    /**
     * @example
     * abcedf
     */
    parentDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceRequest extends $tea.Model {
    /**
     * @example
     * 这里是知识库的简介
     */
    description?: string;
    /**
     * @example
     * https://img.alicdn.com/imgextra/i1/O1***.png
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试知识库
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    /**
     * @example
     * l6gYG9****mo9Z
     */
    sectionId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    shareScope?: CreateSpaceRequestShareScope;
    /**
     * @example
     * 5YRB***GDAr
     */
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamRequest extends $tea.Model {
    /**
     * @example
     * https://img.alicdn.com/imgextra/i1/O1***.png
     */
    cover?: string;
    /**
     * @example
     * 这是小组的介绍
     */
    description?: string;
    /**
     * @example
     * https://img.alicdn.com/imgextra/i1/O1***.png
     */
    icon?: string;
    members?: CreateTeamRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试小组名称
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    teamType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateRequest extends $tea.Model {
    option?: CrossOrgMigrateRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    param?: CrossOrgMigrateRequestParam;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CrossOrgMigrateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentRequest extends $tea.Model {
    option?: DocContentRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportDocHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportDocRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: ExportDocRequestParam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportDocResponseBody extends $tea.Model {
    /**
     * @example
     * 12345678
     */
    jobId?: string;
    /**
     * @example
     * init
     */
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportDocResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExportDocResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryIdByUuidHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryIdByUuidRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryIdByUuidResponseBody extends $tea.Model {
    dentryId?: string;
    dentryUuid?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDentryIdByUuidResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDentryIdByUuidResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentRequest extends $tea.Model {
    /**
     * @example
     * false
     */
    generateCp?: boolean;
    /**
     * @example
     * markdown
     */
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentForELMHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentForELMRequest extends $tea.Model {
    /**
     * @example
     * markdown
     */
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentForELMResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentForELMResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDocContentForELMResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceRequest extends $tea.Model {
    /**
     * @example
     * true
     */
    isMySpace?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceResponseBody extends $tea.Model {
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifyTime?: string;
    /**
     * @example
     * 1L
     */
    quota?: number;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * space_name
     */
    spaceName?: string;
    /**
     * @example
     * personal|org|custom|unknown
     */
    spaceType?: string;
    /**
     * @example
     * 1L
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMySpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMySpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgOrWebOpenDocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgOrWebOpenDocContentRequest extends $tea.Model {
    /**
     * @example
     * false
     */
    generateCp?: boolean;
    /**
     * @example
     * 0
     */
    scopeType?: number;
    /**
     * @example
     * markdown
     */
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgOrWebOpenDocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrgOrWebOpenDocContentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOrgOrWebOpenDocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaResponseBody extends $tea.Model {
    /**
     * @example
     * 0
     */
    revision?: number;
    /**
     * @example
     * "{\"pageVersion\":\"1.0.0\",\"pageSchema\":{\"version\":\"1.0.0\",\"componentsMap\":[],\"componentsTree\":[]}}"
     */
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSchemaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesRequest extends $tea.Model {
    dentryId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesResponseBody extends $tea.Model {
    children?: DentryModel[];
    hasMore?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSpaceDirectoriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoResponseBody extends $tea.Model {
    starred?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetStarInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesRequest extends $tea.Model {
    includeFolder?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    spaceTypes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesResponseBody extends $tea.Model {
    dentriesCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTotalNumberOfDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesResponseBody extends $tea.Model {
    spacesCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTotalNumberOfSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    docKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenResponseBody extends $tea.Model {
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserInfoByOpenTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUuidByDentryIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUuidByDentryIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1L
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUuidByDentryIdResponseBody extends $tea.Model {
    dentryId?: string;
    dentryUuid?: string;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUuidByDentryIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUuidByDentryIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandoverTeamWithoutAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandoverTeamWithoutAuthRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: HandoverTeamWithoutAuthRequestParam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandoverTeamWithoutAuthResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandoverTeamWithoutAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HandoverTeamWithoutAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsRequest extends $tea.Model {
    excludeFile?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: ListFeedsResponseBodyItems[];
    /**
     * @example
     * abcdef
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListFeedsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsResponseBody extends $tea.Model {
    items?: DentryModel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListHotDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesRequest extends $tea.Model {
    option?: ListPinSpacesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    resultItems?: ListPinSpacesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPinSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: ListRecentsRequestParam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    hasMore?: boolean;
    /**
     * @example
     * nextToken
     */
    nextToken?: string;
    /**
     * @example
     * recentDentryList
     */
    recentDentryList?: ListRecentsResponseBodyRecentDentryList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListRecentsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsResponseBody extends $tea.Model {
    items?: TeamModel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListRelatedSpaceTeamsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @example
     * ajYkbc7
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    /**
     * @example
     * 0
     */
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: TeamModel[];
    /**
     * @example
     * cjk72iEakdim
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListRelatedTeamsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsResponseBody extends $tea.Model {
    items?: ListSpaceSectionsResponseBodyItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSpaceSectionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsRequest extends $tea.Model {
    option?: ListStarsRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    starList?: ListStarsResponseBodyStarList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListStarsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersResponseBody extends $tea.Model {
    members?: ListTeamMembersResponseBodyMembers[];
    /**
     * @example
     * 测试小组名称
     */
    teamName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListTeamMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MarkStarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    targetSpaceId?: string;
    toNextDentryId?: string;
    toParentDentryId?: string;
    toPrevDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PinSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryRequest extends $tea.Model {
    /**
     * @example
     * false
     */
    includeSpace?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    /**
     * @example
     * markdown
     */
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://alidocs.dingtalk.com/i/nodes/m0Xw6OYE4D7VLeaBP***
     */
    url?: string;
    withStatisticalInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponseBody extends $tea.Model {
    /**
     * @example
     * mainsite
     */
    bizType?: string;
    dentry?: DentryModel;
    /**
     * @example
     * file
     */
    resourceType?: string;
    space?: QueryItemByUrlResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryItemByUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMineSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMineSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListRequest extends $tea.Model {
    creatorType?: number;
    fileType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    recentType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    recentList?: QueryRecentListResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRecentListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    operatorId?: string;
    /**
     * @example
     * abc
     */
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: RelatedSpacesResponseBodyItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RelatedSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: RemoveTeamMembersRequestMembers[];
    notify?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersResponseBody extends $tea.Model {
    notInOrgMembers?: RemoveTeamMembersResponseBodyNotInOrgMembers[];
    saveSuccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveTeamMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: SaveTeamMembersRequestMembers[];
    notify?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersResponseBody extends $tea.Model {
    notInOrgMembers?: SaveTeamMembersResponseBodyNotInOrgMembers[];
    saveSuccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveTeamMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequest extends $tea.Model {
    dentryRequest?: SearchRequestDentryRequest;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试搜索关键词
     */
    keyword?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    spaceRequest?: SearchRequestSpaceRequest;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBody extends $tea.Model {
    dentryResult?: SearchResponseBodyDentryResult;
    spaceResult?: SearchResponseBodySpaceResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesRequest extends $tea.Model {
    option?: SearchTemplatesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    param?: SearchTemplatesRequestParam;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    templateList?: SearchTemplatesResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    param?: ShareUrlRequestParam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareUrlResponseBody extends $tea.Model {
    /**
     * @example
     * shareUrlInfo
     */
    shareUrlInfo?: ShareUrlResponseBodyShareUrlInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ShareUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesRequest extends $tea.Model {
    option?: TeamTemplatesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    templateList?: TeamTemplatesResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TeamTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesRequest extends $tea.Model {
    option?: TemplateCategoriesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     */
    param?: TemplateCategoriesRequestParam;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesResponseBody extends $tea.Model {
    list?: TemplateCategoriesResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TemplateCategoriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnmarkStarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnpinSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTeamRequest extends $tea.Model {
    /**
     * @example
     * 这是更新后的简介
     */
    description?: string;
    /**
     * @example
     * 更新后的名称
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTeamResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesRequest extends $tea.Model {
    option?: UserTemplatesRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesResponseBody extends $tea.Model {
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    templateList?: UserTemplatesResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UserTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelCreator extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DingTalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelStatisticalInfo extends $tea.Model {
    wordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelUpdater extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DingTalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    /**
     * @example
     * 5
     */
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOCreator extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DingTalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOUpdater extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DingTalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    /**
     * @example
     * 5
     */
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkSourceInfoIconUrl extends $tea.Model {
    /**
     * @example
     * gh
     */
    line?: string;
    /**
     * @example
     * def
     */
    small?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelHdIconVO extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://img.xxx.yyy
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * url
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelIconVO extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://img.xxx.yyy
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * url
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelOwner extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingtalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    /**
     * @example
     * 3
     */
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOIconVO extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOOwner extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingtalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelCreator extends $tea.Model {
    /**
     * @example
     * 测试
     */
    name?: string;
    /**
     * @example
     * abcd
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelRelatedDeptInfo extends $tea.Model {
    /**
     * @example
     * abc
     */
    deptId?: string;
    /**
     * @example
     * 测试部门
     */
    deptName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelUpdater extends $tea.Model {
    /**
     * @example
     * 测试
     */
    name?: string;
    /**
     * @example
     * abcd
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelVisitInfo extends $tea.Model {
    /**
     * @remarks
     * Use the UTC time format: yyyy-MM-ddTHH:mmZ
     */
    joinTime?: string;
    /**
     * @example
     * 5
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOCreator extends $tea.Model {
    /**
     * @example
     * 测试
     */
    name?: string;
    /**
     * @example
     * abc
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVORelatedDeptInfo extends $tea.Model {
    /**
     * @example
     * abc
     */
    deptId?: string;
    /**
     * @example
     * 测试部门
     */
    deptName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOShareScopeInfo extends $tea.Model {
    roleId?: string;
    scope?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOUpdater extends $tea.Model {
    /**
     * @example
     * 测试
     */
    name?: string;
    /**
     * @example
     * abc
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOVisitInfo extends $tea.Model {
    /**
     * @example
     * 5
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamRequestParamCreateTeamParamList extends $tea.Model {
    adminUnionIdList?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * creator_union_id
     */
    creatorUnionId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dept_id
     */
    deptId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * team_name
     */
    teamName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    createTeamParamList?: BatchCreateTeamRequestParamCreateTeamParamList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesRequestOption extends $tea.Model {
    /**
     * @example
     * 1
     */
    categoryStatus?: number;
    /**
     * @example
     * pc
     */
    queryPlatform?: string;
    /**
     * @example
     * 1
     */
    size?: number;
    /**
     * @example
     * 1
     */
    templateStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * categoryIds
     */
    categoryIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesRequestOption extends $tea.Model {
    /**
     * @example
     * 1
     */
    categoryStatus?: number;
    /**
     * @example
     * 1
     */
    templateStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * categoryId
     */
    categoryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesResponseBodyList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceRequestParam extends $tea.Model {
    /**
     * @example
     * 0
     */
    originWorkspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyWorkspaceAsyncRequestParam extends $tea.Model {
    /**
     * @example
     * 0
     */
    originWorkspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceRequestShareScope extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    scope?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    memberType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateRequestOption extends $tea.Model {
    /**
     * @example
     * true
     */
    checkOperatorSourceRole?: boolean;
    /**
     * @example
     * true
     */
    deleteSource?: boolean;
    /**
     * @example
     * true
     */
    needRecycleFailedWorkspaceId?: boolean;
    /**
     * @example
     * 1L
     */
    relateTeamId?: number;
    /**
     * @example
     * team_id
     */
    relateTeamIdStr?: string;
    /**
     * @example
     * true
     */
    retainOrgGroup?: boolean;
    /**
     * @example
     * true
     */
    skipRole?: boolean;
    workspaceIdStrs?: string[];
    workspaceIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateRequestParam extends $tea.Model {
    /**
     * @example
     * corp_id
     */
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentRequestOption extends $tea.Model {
    /**
     * @example
     * markdown
     */
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExportDocRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dentryUuid
     */
    dentryUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingTalksheetToxlsx
     */
    exportType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandoverTeamWithoutAuthRequestParam extends $tea.Model {
    leave?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    newOwner?: string;
    notify?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsResponseBodyItems extends $tea.Model {
    /**
     * @example
     * "{}"
     */
    content?: string;
    /**
     * @example
     * 12340000
     */
    time?: number;
    /**
     * @example
     * 1
     */
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesRequestOption extends $tea.Model {
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * true
     */
    withSpaceCreatorInfo?: boolean;
    /**
     * @example
     * true
     */
    withSpaceModifierInfo?: boolean;
    /**
     * @example
     * true
     */
    withSpacePermissionRole?: boolean;
    /**
     * @example
     * true
     */
    withTeamDetail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfoCreator extends $tea.Model {
    /**
     * @example
     * user_name
     */
    name?: string;
    /**
     * @example
     * union_id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO extends $tea.Model {
    /**
     * @example
     * icon_url
     */
    icon?: string;
    /**
     * @example
     * URL
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfoModifier extends $tea.Model {
    /**
     * @example
     * user_name
     */
    name?: string;
    /**
     * @example
     * union_id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfo extends $tea.Model {
    /**
     * @example
     * space_cover
     */
    cover?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    creator?: ListPinSpacesResponseBodyResultItemsSpaceInfoCreator;
    /**
     * @example
     * description
     */
    description?: string;
    iconVO?: ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO;
    /**
     * @example
     * space_id
     */
    id?: string;
    /**
     * @example
     * mobile_url
     */
    mobileUrl?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    modifier?: ListPinSpacesResponseBodyResultItemsSpaceInfoModifier;
    /**
     * @example
     * space_name
     */
    name?: string;
    /**
     * @example
     * pc_url
     */
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsTeamInfo extends $tea.Model {
    /**
     * @example
     * team_id
     */
    id?: string;
    /**
     * @example
     * team_name
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItems extends $tea.Model {
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    spaceInfo?: ListPinSpacesResponseBodyResultItemsSpaceInfo;
    /**
     * @example
     * NO_PERMISSION
     */
    spacePermissionRole?: string;
    teamInfo?: ListPinSpacesResponseBodyResultItemsTeamInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    fileTypes?: number[];
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * nextToken
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    operateTypes?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsResponseBodyRecentDentryListResourceSpaceInfo extends $tea.Model {
    /**
     * @example
     * im
     */
    sceneType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsResponseBodyRecentDentryListResource extends $tea.Model {
    /**
     * @example
     * dentryUuid
     */
    dentryUuid?: string;
    /**
     * @example
     * driveDentryId
     */
    driveDentryId?: string;
    /**
     * @example
     * driveSpaceId
     */
    driveSpaceId?: string;
    /**
     * @example
     * docx
     */
    extension?: string;
    /**
     * @example
     * name
     */
    name?: string;
    /**
     * @example
     * spaceInfo
     */
    spaceInfo?: ListRecentsResponseBodyRecentDentryListResourceSpaceInfo;
    /**
     * @example
     * https://example.com
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRecentsResponseBodyRecentDentryList extends $tea.Model {
    /**
     * @example
     * 123
     */
    accessTime?: number;
    /**
     * @example
     * true
     */
    deleted?: boolean;
    /**
     * @example
     * https://example.com
     */
    icon?: string;
    /**
     * @example
     * 0
     */
    operateType?: number;
    /**
     * @example
     * resource
     */
    resource?: ListRecentsResponseBodyRecentDentryListResource;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsResponseBodyItems extends $tea.Model {
    /**
     * @example
     * base
     */
    displayType?: string;
    /**
     * @example
     * abc
     */
    id?: string;
    /**
     * @example
     * 测试分组
     */
    name?: string;
    /**
     * @example
     * 1
     */
    spaceNum?: number;
    spaces?: SpaceModel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsRequestOption extends $tea.Model {
    contentTypeList?: string[];
    filterDocTypes?: string[];
    /**
     * @example
     * true
     */
    listV2?: boolean;
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * ASC
     */
    order?: string;
    /**
     * @example
     * createTime
     */
    orderBy?: string;
    /**
     * @example
     * true
     */
    withDentryCreatorInfo?: boolean;
    /**
     * @example
     * true
     */
    withDentryModifierInfo?: boolean;
    /**
     * @example
     * true
     */
    withDentryPermissionRole?: boolean;
    /**
     * @example
     * true
     */
    withSpaceDetail?: boolean;
    /**
     * @example
     * true
     */
    withSpacePermissionRole?: boolean;
    /**
     * @example
     * true
     */
    withTeamDetail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListDentryInfoCreator extends $tea.Model {
    /**
     * @example
     * user_name
     */
    name?: string;
    /**
     * @example
     * union_id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListDentryInfoModifier extends $tea.Model {
    /**
     * @example
     * user_name
     */
    name?: string;
    /**
     * @example
     * union_id
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListDentryInfo extends $tea.Model {
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    creator?: ListStarsResponseBodyStarListDentryInfoCreator;
    /**
     * @example
     * txt
     */
    extension?: string;
    /**
     * @example
     * dentry_id
     */
    id?: string;
    /**
     * @example
     * mobile_url
     */
    mobileUrl?: string;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    modifier?: ListStarsResponseBodyStarListDentryInfoModifier;
    /**
     * @example
     * dentry_name
     */
    name?: string;
    /**
     * @example
     * pc_url
     */
    pcUrl?: string;
    /**
     * @example
     * space_id
     */
    spaceId?: string;
    /**
     * @example
     * NORMAL
     */
    status?: string;
    /**
     * @example
     * FILE
     */
    type?: string;
    /**
     * @example
     * uuid
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListSpaceInfo extends $tea.Model {
    /**
     * @example
     * space_id
     */
    id?: string;
    /**
     * @example
     * space_name
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListTeamInfo extends $tea.Model {
    /**
     * @example
     * team_id
     */
    id?: string;
    /**
     * @example
     * team_name
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarList extends $tea.Model {
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    createTime?: string;
    dentryInfo?: ListStarsResponseBodyStarListDentryInfo;
    /**
     * @example
     * NO_PERMISSION
     */
    dentryPermissionRole?: string;
    /**
     * @example
     * star_id
     */
    id?: string;
    /**
     * @example
     * true
     */
    isDeleted?: boolean;
    /**
     * @example
     * 2022-01-01T10:00:00Z
     */
    modifiedTime?: string;
    spaceInfo?: ListStarsResponseBodyStarListSpaceInfo;
    /**
     * @example
     * NO_PERMISSION
     */
    spacePermissionRole?: string;
    starType?: string;
    teamInfo?: ListStarsResponseBodyStarListTeamInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersResponseBodyMembers extends $tea.Model {
    /**
     * @example
     * YEp3JcM******UIbhwiE
     */
    memberId?: string;
    /**
     * @example
     * 2
     */
    memberType?: number;
    /**
     * @example
     * 小钉
     */
    name?: string;
    /**
     * @example
     * 2
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponseBodySpaceOwner extends $tea.Model {
    /**
     * @example
     * 小钉
     */
    name?: string;
    /**
     * @example
     * SgExXM*******L0tAiEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponseBodySpace extends $tea.Model {
    /**
     * @example
     * 这是知识库简介
     */
    description?: string;
    /**
     * @example
     * YRBG******vJXDAr
     */
    id?: string;
    /**
     * @example
     * 这是知识库名称
     */
    name?: string;
    owner?: QueryItemByUrlResponseBodySpaceOwner;
    /**
     * @example
     * 1
     */
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBodyRecentListTeam extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBodyRecentList extends $tea.Model {
    deleted?: boolean;
    dentry?: DentryModel;
    recentTime?: number;
    team?: QueryRecentListResponseBodyRecentListTeam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsHdIconVO extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://img.xxx.yyy
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * url
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsIconVO extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://img.xxx.yyy
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * url
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsOwner extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingtalk
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abcd
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    pinned?: boolean;
    /**
     * @example
     * 3
     */
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItems extends $tea.Model {
    /**
     * @example
     * https://img.abc.yyy
     */
    cover?: string;
    /**
     * @example
     * This is some description.
     */
    description?: string;
    hdIconVO?: RelatedSpacesResponseBodyItemsHdIconVO;
    iconVO?: RelatedSpacesResponseBodyItemsIconVO;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * abc
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * hello
     */
    name?: string;
    owner?: RelatedSpacesResponseBodyItemsOwner;
    recentList?: DentryModel[];
    /**
     * @example
     * 1
     */
    type?: number;
    /**
     * @example
     * https://xx.yy
     */
    url?: string;
    visitorInfo?: RelatedSpacesResponseBodyItemsVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    memberType?: number;
    /**
     * @example
     * 1
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersResponseBodyNotInOrgMembers extends $tea.Model {
    /**
     * @example
     * YEp3JcM******UIbhwiE
     */
    memberId?: string;
    /**
     * @example
     * 2
     */
    memberType?: number;
    /**
     * @example
     * 小钉
     */
    name?: string;
    /**
     * @example
     * 0
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * YEp3JcM******UIbhwiE
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    memberType?: number;
    /**
     * @example
     * 1
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersResponseBodyNotInOrgMembers extends $tea.Model {
    /**
     * @example
     * YEp3JcM******UIbhwiE
     */
    memberId?: string;
    /**
     * @example
     * 2
     */
    memberType?: number;
    /**
     * @example
     * 小钉
     */
    name?: string;
    /**
     * @example
     * 0
     */
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestDentryRequestVisitTimeRange extends $tea.Model {
    end?: number;
    start?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestDentryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    searchField?: number;
    searchFileType?: number;
    spaceId?: string;
    spaceIds?: string[];
    /**
     * @example
     * 40
     */
    summaryLength?: number;
    visitTimeRange?: SearchRequestDentryRequestVisitTimeRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestSpaceRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    withTeamInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodyDentryResultItems extends $tea.Model {
    content?: string;
    creation?: OpenActionModel;
    dentryId?: string;
    dentryUuid?: string;
    extension?: string;
    iconUrl?: string;
    lastEdition?: OpenActionModel;
    name?: string;
    originName?: string;
    path?: string;
    /**
     * @example
     * 1
     */
    sceneType?: number;
    searchFileType?: number;
    spaceId?: string;
    thumbnailUrl?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodyDentryResult extends $tea.Model {
    hasMore?: boolean;
    items?: SearchResponseBodyDentryResultItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItemsIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItemsTeamVO extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItemsUserLastOperation extends $tea.Model {
    name?: string;
    time?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItems extends $tea.Model {
    iconVO?: SearchResponseBodySpaceResultItemsIconVO;
    name?: string;
    originName?: string;
    spaceId?: string;
    teamVO?: SearchResponseBodySpaceResultItemsTeamVO;
    url?: string;
    userLastOperation?: SearchResponseBodySpaceResultItemsUserLastOperation;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResult extends $tea.Model {
    hasMore?: boolean;
    items?: SearchResponseBodySpaceResultItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesRequestOption extends $tea.Model {
    excludeWorkspaceIds?: string[];
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * pc
     */
    platform?: string;
    templateTypes?: number[];
    /**
     * @example
     * 1
     */
    version?: number;
    workspaceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user_template
     */
    belong?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * searchName
     */
    searchName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesResponseBodyTemplateList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareUrlRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dentryUuid
     */
    dentryUuid?: string;
    /**
     * @example
     * true
     */
    triggerShare?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShareUrlResponseBodyShareUrlInfo extends $tea.Model {
    /**
     * @example
     * http://example.com
     */
    mobileUrl?: string;
    /**
     * @example
     * http://example.com
     */
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesRequestOption extends $tea.Model {
    excludeWorkspaceIds?: string[];
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * pc
     */
    platform?: string;
    templateTypes?: number[];
    /**
     * @example
     * 1
     */
    version?: number;
    workspaceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesResponseBodyTemplateList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesRequestOption extends $tea.Model {
    /**
     * @example
     * 1
     */
    categoryStatus?: number;
    /**
     * @example
     * -1
     */
    industryId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesRequestParam extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * tenantId
     */
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesResponseBodyList extends $tea.Model {
    categoryId?: string;
    categoryName?: string;
    sort?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesRequestOption extends $tea.Model {
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @example
     * next_token
     */
    nextToken?: string;
    /**
     * @example
     * pc
     */
    platform?: string;
    templateTypes?: number[];
    /**
     * @example
     * 1
     */
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesResponseBodyTemplateList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 批量创建小组
     *
     * @param request - BatchCreateTeamRequest
     * @param headers - BatchCreateTeamHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchCreateTeamResponse
     */
    batchCreateTeamWithOptions(request: BatchCreateTeamRequest, headers: BatchCreateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<BatchCreateTeamResponse>;
    /**
     * 批量创建小组
     *
     * @param request - BatchCreateTeamRequest
     * @returns BatchCreateTeamResponse
     */
    batchCreateTeam(request: BatchCreateTeamRequest): Promise<BatchCreateTeamResponse>;
    /**
     * 批量删除文档最近记录
     *
     * @param request - BatchDeleteRecentsRequest
     * @param headers - BatchDeleteRecentsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchDeleteRecentsResponse
     */
    batchDeleteRecentsWithOptions(request: BatchDeleteRecentsRequest, headers: BatchDeleteRecentsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchDeleteRecentsResponse>;
    /**
     * 批量删除文档最近记录
     *
     * @param request - BatchDeleteRecentsRequest
     * @returns BatchDeleteRecentsResponse
     */
    batchDeleteRecents(request: BatchDeleteRecentsRequest): Promise<BatchDeleteRecentsResponse>;
    /**
     * 按分类列表查询模板列表
     *
     * @param request - CategoriesTemplatesRequest
     * @param headers - CategoriesTemplatesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CategoriesTemplatesResponse
     */
    categoriesTemplatesWithOptions(request: CategoriesTemplatesRequest, headers: CategoriesTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<CategoriesTemplatesResponse>;
    /**
     * 按分类列表查询模板列表
     *
     * @param request - CategoriesTemplatesRequest
     * @returns CategoriesTemplatesResponse
     */
    categoriesTemplates(request: CategoriesTemplatesRequest): Promise<CategoriesTemplatesResponse>;
    /**
     * 按分类查询模板列表
     *
     * @param request - CategoryTemplatesRequest
     * @param headers - CategoryTemplatesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CategoryTemplatesResponse
     */
    categoryTemplatesWithOptions(request: CategoryTemplatesRequest, headers: CategoryTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<CategoryTemplatesResponse>;
    /**
     * 按分类查询模板列表
     *
     * @param request - CategoryTemplatesRequest
     * @returns CategoryTemplatesResponse
     */
    categoryTemplates(request: CategoryTemplatesRequest): Promise<CategoryTemplatesResponse>;
    /**
     * 拷贝知识库节点
     *
     * @param request - CopyDentryRequest
     * @param headers - CopyDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyDentryResponse
     */
    copyDentryWithOptions(spaceId: string, dentryId: string, request: CopyDentryRequest, headers: CopyDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CopyDentryResponse>;
    /**
     * 拷贝知识库节点
     *
     * @param request - CopyDentryRequest
     * @returns CopyDentryResponse
     */
    copyDentry(spaceId: string, dentryId: string, request: CopyDentryRequest): Promise<CopyDentryResponse>;
    /**
     * 拷贝知识库
     *
     * @param request - CopyWorkspaceRequest
     * @param headers - CopyWorkspaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyWorkspaceResponse
     */
    copyWorkspaceWithOptions(request: CopyWorkspaceRequest, headers: CopyWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<CopyWorkspaceResponse>;
    /**
     * 拷贝知识库
     *
     * @param request - CopyWorkspaceRequest
     * @returns CopyWorkspaceResponse
     */
    copyWorkspace(request: CopyWorkspaceRequest): Promise<CopyWorkspaceResponse>;
    /**
     * 异步拷贝知识库
     *
     * @param request - CopyWorkspaceAsyncRequest
     * @param headers - CopyWorkspaceAsyncHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyWorkspaceAsyncResponse
     */
    copyWorkspaceAsyncWithOptions(request: CopyWorkspaceAsyncRequest, headers: CopyWorkspaceAsyncHeaders, runtime: $Util.RuntimeOptions): Promise<CopyWorkspaceAsyncResponse>;
    /**
     * 异步拷贝知识库
     *
     * @param request - CopyWorkspaceAsyncRequest
     * @returns CopyWorkspaceAsyncResponse
     */
    copyWorkspaceAsync(request: CopyWorkspaceAsyncRequest): Promise<CopyWorkspaceAsyncResponse>;
    /**
     * 创建知识库节点（包括文档和文件夹）
     *
     * @param request - CreateDentryRequest
     * @param headers - CreateDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDentryResponse
     */
    createDentryWithOptions(spaceId: string, request: CreateDentryRequest, headers: CreateDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDentryResponse>;
    /**
     * 创建知识库节点（包括文档和文件夹）
     *
     * @param request - CreateDentryRequest
     * @returns CreateDentryResponse
     */
    createDentry(spaceId: string, request: CreateDentryRequest): Promise<CreateDentryResponse>;
    /**
     * 创建知识库
     *
     * @param request - CreateSpaceRequest
     * @param headers - CreateSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSpaceResponse
     */
    createSpaceWithOptions(request: CreateSpaceRequest, headers: CreateSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSpaceResponse>;
    /**
     * 创建知识库
     *
     * @param request - CreateSpaceRequest
     * @returns CreateSpaceResponse
     */
    createSpace(request: CreateSpaceRequest): Promise<CreateSpaceResponse>;
    /**
     * 创建小组
     *
     * @param request - CreateTeamRequest
     * @param headers - CreateTeamHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTeamResponse
     */
    createTeamWithOptions(request: CreateTeamRequest, headers: CreateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTeamResponse>;
    /**
     * 创建小组
     *
     * @param request - CreateTeamRequest
     * @returns CreateTeamResponse
     */
    createTeam(request: CreateTeamRequest): Promise<CreateTeamResponse>;
    /**
     * 跨组织迁移知识库
     *
     * @param request - CrossOrgMigrateRequest
     * @param headers - CrossOrgMigrateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CrossOrgMigrateResponse
     */
    crossOrgMigrateWithOptions(request: CrossOrgMigrateRequest, headers: CrossOrgMigrateHeaders, runtime: $Util.RuntimeOptions): Promise<CrossOrgMigrateResponse>;
    /**
     * 跨组织迁移知识库
     *
     * @param request - CrossOrgMigrateRequest
     * @returns CrossOrgMigrateResponse
     */
    crossOrgMigrate(request: CrossOrgMigrateRequest): Promise<CrossOrgMigrateResponse>;
    /**
     * 删除小组
     *
     * @param request - DeleteTeamRequest
     * @param headers - DeleteTeamHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTeamResponse
     */
    deleteTeamWithOptions(teamId: string, request: DeleteTeamRequest, headers: DeleteTeamHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTeamResponse>;
    /**
     * 删除小组
     *
     * @param request - DeleteTeamRequest
     * @returns DeleteTeamResponse
     */
    deleteTeam(teamId: string, request: DeleteTeamRequest): Promise<DeleteTeamResponse>;
    /**
     * 获取文档内容
     *
     * @param request - DocContentRequest
     * @param headers - DocContentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocContentResponse
     */
    docContentWithOptions(dentryUuid: string, request: DocContentRequest, headers: DocContentHeaders, runtime: $Util.RuntimeOptions): Promise<DocContentResponse>;
    /**
     * 获取文档内容
     *
     * @param request - DocContentRequest
     * @returns DocContentResponse
     */
    docContent(dentryUuid: string, request: DocContentRequest): Promise<DocContentResponse>;
    /**
     * 导出文档
     *
     * @param request - ExportDocRequest
     * @param headers - ExportDocHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExportDocResponse
     */
    exportDocWithOptions(request: ExportDocRequest, headers: ExportDocHeaders, runtime: $Util.RuntimeOptions): Promise<ExportDocResponse>;
    /**
     * 导出文档
     *
     * @param request - ExportDocRequest
     * @returns ExportDocResponse
     */
    exportDoc(request: ExportDocRequest): Promise<ExportDocResponse>;
    /**
     * 根据文件DentryUuid获取文件DentryId
     *
     * @param request - GetDentryIdByUuidRequest
     * @param headers - GetDentryIdByUuidHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDentryIdByUuidResponse
     */
    getDentryIdByUuidWithOptions(dentryUuid: string, request: GetDentryIdByUuidRequest, headers: GetDentryIdByUuidHeaders, runtime: $Util.RuntimeOptions): Promise<GetDentryIdByUuidResponse>;
    /**
     * 根据文件DentryUuid获取文件DentryId
     *
     * @param request - GetDentryIdByUuidRequest
     * @returns GetDentryIdByUuidResponse
     */
    getDentryIdByUuid(dentryUuid: string, request: GetDentryIdByUuidRequest): Promise<GetDentryIdByUuidResponse>;
    /**
     * 委托权限获取文档内容
     *
     * @param request - GetDocContentRequest
     * @param headers - GetDocContentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDocContentResponse
     */
    getDocContentWithOptions(dentryUuid: string, request: GetDocContentRequest, headers: GetDocContentHeaders, runtime: $Util.RuntimeOptions): Promise<GetDocContentResponse>;
    /**
     * 委托权限获取文档内容
     *
     * @param request - GetDocContentRequest
     * @returns GetDocContentResponse
     */
    getDocContent(dentryUuid: string, request: GetDocContentRequest): Promise<GetDocContentResponse>;
    /**
     * 委托权限获取文档内容
     *
     * @param request - GetDocContentForELMRequest
     * @param headers - GetDocContentForELMHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDocContentForELMResponse
     */
    getDocContentForELMWithOptions(dentryUuid: string, request: GetDocContentForELMRequest, headers: GetDocContentForELMHeaders, runtime: $Util.RuntimeOptions): Promise<GetDocContentForELMResponse>;
    /**
     * 委托权限获取文档内容
     *
     * @param request - GetDocContentForELMRequest
     * @returns GetDocContentForELMResponse
     */
    getDocContentForELM(dentryUuid: string, request: GetDocContentForELMRequest): Promise<GetDocContentForELMResponse>;
    /**
     * 获取当前企业下钉盘目录我的文件对应的空间信息
     *
     * @param request - GetMySpaceRequest
     * @param headers - GetMySpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMySpaceResponse
     */
    getMySpaceWithOptions(request: GetMySpaceRequest, headers: GetMySpaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetMySpaceResponse>;
    /**
     * 获取当前企业下钉盘目录我的文件对应的空间信息
     *
     * @param request - GetMySpaceRequest
     * @returns GetMySpaceResponse
     */
    getMySpace(request: GetMySpaceRequest): Promise<GetMySpaceResponse>;
    /**
     * 委托权限获取企业内公开或者或联网公开文档内容
     *
     * @param request - GetOrgOrWebOpenDocContentRequest
     * @param headers - GetOrgOrWebOpenDocContentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrgOrWebOpenDocContentResponse
     */
    getOrgOrWebOpenDocContentWithOptions(dentryUuid: string, request: GetOrgOrWebOpenDocContentRequest, headers: GetOrgOrWebOpenDocContentHeaders, runtime: $Util.RuntimeOptions): Promise<GetOrgOrWebOpenDocContentResponse>;
    /**
     * 委托权限获取企业内公开或者或联网公开文档内容
     *
     * @param request - GetOrgOrWebOpenDocContentRequest
     * @returns GetOrgOrWebOpenDocContentResponse
     */
    getOrgOrWebOpenDocContent(dentryUuid: string, request: GetOrgOrWebOpenDocContentRequest): Promise<GetOrgOrWebOpenDocContentResponse>;
    /**
     * 查询小组主页schema （包括轮播图、公告、便捷入口）
     *
     * @param request - GetSchemaRequest
     * @param headers - GetSchemaHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSchemaResponse
     */
    getSchemaWithOptions(teamId: string, request: GetSchemaRequest, headers: GetSchemaHeaders, runtime: $Util.RuntimeOptions): Promise<GetSchemaResponse>;
    /**
     * 查询小组主页schema （包括轮播图、公告、便捷入口）
     *
     * @param request - GetSchemaRequest
     * @returns GetSchemaResponse
     */
    getSchema(teamId: string, request: GetSchemaRequest): Promise<GetSchemaResponse>;
    /**
     * 查询目录树
     *
     * @param request - GetSpaceDirectoriesRequest
     * @param headers - GetSpaceDirectoriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSpaceDirectoriesResponse
     */
    getSpaceDirectoriesWithOptions(spaceId: string, request: GetSpaceDirectoriesRequest, headers: GetSpaceDirectoriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceDirectoriesResponse>;
    /**
     * 查询目录树
     *
     * @param request - GetSpaceDirectoriesRequest
     * @returns GetSpaceDirectoriesResponse
     */
    getSpaceDirectories(spaceId: string, request: GetSpaceDirectoriesRequest): Promise<GetSpaceDirectoriesResponse>;
    /**
     * 获取星标信息
     *
     * @param request - GetStarInfoRequest
     * @param headers - GetStarInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStarInfoResponse
     */
    getStarInfoWithOptions(dentryUuid: string, request: GetStarInfoRequest, headers: GetStarInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetStarInfoResponse>;
    /**
     * 获取星标信息
     *
     * @param request - GetStarInfoRequest
     * @returns GetStarInfoResponse
     */
    getStarInfo(dentryUuid: string, request: GetStarInfoRequest): Promise<GetStarInfoResponse>;
    /**
     * 查询小组详情
     *
     * @param request - GetTeamRequest
     * @param headers - GetTeamHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTeamResponse
     */
    getTeamWithOptions(teamId: string, request: GetTeamRequest, headers: GetTeamHeaders, runtime: $Util.RuntimeOptions): Promise<GetTeamResponse>;
    /**
     * 查询小组详情
     *
     * @param request - GetTeamRequest
     * @returns GetTeamResponse
     */
    getTeam(teamId: string, request: GetTeamRequest): Promise<GetTeamResponse>;
    /**
     * 获取知识库下的总节点数
     *
     * @param request - GetTotalNumberOfDentriesRequest
     * @param headers - GetTotalNumberOfDentriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTotalNumberOfDentriesResponse
     */
    getTotalNumberOfDentriesWithOptions(request: GetTotalNumberOfDentriesRequest, headers: GetTotalNumberOfDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetTotalNumberOfDentriesResponse>;
    /**
     * 获取知识库下的总节点数
     *
     * @param request - GetTotalNumberOfDentriesRequest
     * @returns GetTotalNumberOfDentriesResponse
     */
    getTotalNumberOfDentries(request: GetTotalNumberOfDentriesRequest): Promise<GetTotalNumberOfDentriesResponse>;
    /**
     * 获取知识库总数
     *
     * @param request - GetTotalNumberOfSpacesRequest
     * @param headers - GetTotalNumberOfSpacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTotalNumberOfSpacesResponse
     */
    getTotalNumberOfSpacesWithOptions(request: GetTotalNumberOfSpacesRequest, headers: GetTotalNumberOfSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<GetTotalNumberOfSpacesResponse>;
    /**
     * 获取知识库总数
     *
     * @param request - GetTotalNumberOfSpacesRequest
     * @returns GetTotalNumberOfSpacesResponse
     */
    getTotalNumberOfSpaces(request: GetTotalNumberOfSpacesRequest): Promise<GetTotalNumberOfSpacesResponse>;
    /**
     * 查询文档免登的用户信息
     *
     * @param request - GetUserInfoByOpenTokenRequest
     * @param headers - GetUserInfoByOpenTokenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserInfoByOpenTokenResponse
     */
    getUserInfoByOpenTokenWithOptions(request: GetUserInfoByOpenTokenRequest, headers: GetUserInfoByOpenTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserInfoByOpenTokenResponse>;
    /**
     * 查询文档免登的用户信息
     *
     * @param request - GetUserInfoByOpenTokenRequest
     * @returns GetUserInfoByOpenTokenResponse
     */
    getUserInfoByOpenToken(request: GetUserInfoByOpenTokenRequest): Promise<GetUserInfoByOpenTokenResponse>;
    /**
     * 根据文件DentryId获取文件DentryUuid
     *
     * @param request - GetUuidByDentryIdRequest
     * @param headers - GetUuidByDentryIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUuidByDentryIdResponse
     */
    getUuidByDentryIdWithOptions(dentryId: string, request: GetUuidByDentryIdRequest, headers: GetUuidByDentryIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetUuidByDentryIdResponse>;
    /**
     * 根据文件DentryId获取文件DentryUuid
     *
     * @param request - GetUuidByDentryIdRequest
     * @returns GetUuidByDentryIdResponse
     */
    getUuidByDentryId(dentryId: string, request: GetUuidByDentryIdRequest): Promise<GetUuidByDentryIdResponse>;
    /**
     * 以超级管理员身份转交小组
     *
     * @param request - HandoverTeamWithoutAuthRequest
     * @param headers - HandoverTeamWithoutAuthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns HandoverTeamWithoutAuthResponse
     */
    handoverTeamWithoutAuthWithOptions(request: HandoverTeamWithoutAuthRequest, headers: HandoverTeamWithoutAuthHeaders, runtime: $Util.RuntimeOptions): Promise<HandoverTeamWithoutAuthResponse>;
    /**
     * 以超级管理员身份转交小组
     *
     * @param request - HandoverTeamWithoutAuthRequest
     * @returns HandoverTeamWithoutAuthResponse
     */
    handoverTeamWithoutAuth(request: HandoverTeamWithoutAuthRequest): Promise<HandoverTeamWithoutAuthResponse>;
    /**
     * 查询小组动态
     *
     * @param request - ListFeedsRequest
     * @param headers - ListFeedsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListFeedsResponse
     */
    listFeedsWithOptions(teamId: string, request: ListFeedsRequest, headers: ListFeedsHeaders, runtime: $Util.RuntimeOptions): Promise<ListFeedsResponse>;
    /**
     * 查询小组动态
     *
     * @param request - ListFeedsRequest
     * @returns ListFeedsResponse
     */
    listFeeds(teamId: string, request: ListFeedsRequest): Promise<ListFeedsResponse>;
    /**
     * 查询小组热门文档
     *
     * @param request - ListHotDocsRequest
     * @param headers - ListHotDocsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListHotDocsResponse
     */
    listHotDocsWithOptions(teamId: string, request: ListHotDocsRequest, headers: ListHotDocsHeaders, runtime: $Util.RuntimeOptions): Promise<ListHotDocsResponse>;
    /**
     * 查询小组热门文档
     *
     * @param request - ListHotDocsRequest
     * @returns ListHotDocsResponse
     */
    listHotDocs(teamId: string, request: ListHotDocsRequest): Promise<ListHotDocsResponse>;
    /**
     * 获取置顶知识库列表
     *
     * @param request - ListPinSpacesRequest
     * @param headers - ListPinSpacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPinSpacesResponse
     */
    listPinSpacesWithOptions(request: ListPinSpacesRequest, headers: ListPinSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<ListPinSpacesResponse>;
    /**
     * 获取置顶知识库列表
     *
     * @param request - ListPinSpacesRequest
     * @returns ListPinSpacesResponse
     */
    listPinSpaces(request: ListPinSpacesRequest): Promise<ListPinSpacesResponse>;
    /**
     * 查询文档最近记录列表
     *
     * @param request - ListRecentsRequest
     * @param headers - ListRecentsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRecentsResponse
     */
    listRecentsWithOptions(request: ListRecentsRequest, headers: ListRecentsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRecentsResponse>;
    /**
     * 查询文档最近记录列表
     *
     * @param request - ListRecentsRequest
     * @returns ListRecentsResponse
     */
    listRecents(request: ListRecentsRequest): Promise<ListRecentsResponse>;
    /**
     * 查询关联了知识库的团队列表
     *
     * @param request - ListRelatedSpaceTeamsRequest
     * @param headers - ListRelatedSpaceTeamsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRelatedSpaceTeamsResponse
     */
    listRelatedSpaceTeamsWithOptions(request: ListRelatedSpaceTeamsRequest, headers: ListRelatedSpaceTeamsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRelatedSpaceTeamsResponse>;
    /**
     * 查询关联了知识库的团队列表
     *
     * @param request - ListRelatedSpaceTeamsRequest
     * @returns ListRelatedSpaceTeamsResponse
     */
    listRelatedSpaceTeams(request: ListRelatedSpaceTeamsRequest): Promise<ListRelatedSpaceTeamsResponse>;
    /**
     * 查询小组列表
     *
     * @param request - ListRelatedTeamsRequest
     * @param headers - ListRelatedTeamsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRelatedTeamsResponse
     */
    listRelatedTeamsWithOptions(request: ListRelatedTeamsRequest, headers: ListRelatedTeamsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRelatedTeamsResponse>;
    /**
     * 查询小组列表
     *
     * @param request - ListRelatedTeamsRequest
     * @returns ListRelatedTeamsResponse
     */
    listRelatedTeams(request: ListRelatedTeamsRequest): Promise<ListRelatedTeamsResponse>;
    /**
     * 查询知识库分组
     *
     * @param request - ListSpaceSectionsRequest
     * @param headers - ListSpaceSectionsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSpaceSectionsResponse
     */
    listSpaceSectionsWithOptions(teamId: string, request: ListSpaceSectionsRequest, headers: ListSpaceSectionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListSpaceSectionsResponse>;
    /**
     * 查询知识库分组
     *
     * @param request - ListSpaceSectionsRequest
     * @returns ListSpaceSectionsResponse
     */
    listSpaceSections(teamId: string, request: ListSpaceSectionsRequest): Promise<ListSpaceSectionsResponse>;
    /**
     * 获取星标列表
     *
     * @param request - ListStarsRequest
     * @param headers - ListStarsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListStarsResponse
     */
    listStarsWithOptions(request: ListStarsRequest, headers: ListStarsHeaders, runtime: $Util.RuntimeOptions): Promise<ListStarsResponse>;
    /**
     * 获取星标列表
     *
     * @param request - ListStarsRequest
     * @returns ListStarsResponse
     */
    listStars(request: ListStarsRequest): Promise<ListStarsResponse>;
    /**
     * 查询小组成员列表
     *
     * @param request - ListTeamMembersRequest
     * @param headers - ListTeamMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTeamMembersResponse
     */
    listTeamMembersWithOptions(teamId: string, request: ListTeamMembersRequest, headers: ListTeamMembersHeaders, runtime: $Util.RuntimeOptions): Promise<ListTeamMembersResponse>;
    /**
     * 查询小组成员列表
     *
     * @param request - ListTeamMembersRequest
     * @returns ListTeamMembersResponse
     */
    listTeamMembers(teamId: string, request: ListTeamMembersRequest): Promise<ListTeamMembersResponse>;
    /**
     * 标记星标
     *
     * @param request - MarkStarRequest
     * @param headers - MarkStarHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MarkStarResponse
     */
    markStarWithOptions(dentryUuid: string, request: MarkStarRequest, headers: MarkStarHeaders, runtime: $Util.RuntimeOptions): Promise<MarkStarResponse>;
    /**
     * 标记星标
     *
     * @param request - MarkStarRequest
     * @returns MarkStarResponse
     */
    markStar(dentryUuid: string, request: MarkStarRequest): Promise<MarkStarResponse>;
    /**
     * 移动知识库节点
     *
     * @param request - MoveDentryRequest
     * @param headers - MoveDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveDentryResponse
     */
    moveDentryWithOptions(spaceId: string, dentryId: string, request: MoveDentryRequest, headers: MoveDentryHeaders, runtime: $Util.RuntimeOptions): Promise<MoveDentryResponse>;
    /**
     * 移动知识库节点
     *
     * @param request - MoveDentryRequest
     * @returns MoveDentryResponse
     */
    moveDentry(spaceId: string, dentryId: string, request: MoveDentryRequest): Promise<MoveDentryResponse>;
    /**
     * 置顶知识库
     *
     * @param request - PinSpaceRequest
     * @param headers - PinSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PinSpaceResponse
     */
    pinSpaceWithOptions(spaceId: string, request: PinSpaceRequest, headers: PinSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<PinSpaceResponse>;
    /**
     * 置顶知识库
     *
     * @param request - PinSpaceRequest
     * @returns PinSpaceResponse
     */
    pinSpace(spaceId: string, request: PinSpaceRequest): Promise<PinSpaceResponse>;
    /**
     * 查询知识库节点（包括文档和文件夹）
     *
     * @param request - QueryDentryRequest
     * @param headers - QueryDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDentryResponse
     */
    queryDentryWithOptions(spaceId: string, dentryId: string, request: QueryDentryRequest, headers: QueryDentryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDentryResponse>;
    /**
     * 查询知识库节点（包括文档和文件夹）
     *
     * @param request - QueryDentryRequest
     * @returns QueryDentryResponse
     */
    queryDentry(spaceId: string, dentryId: string, request: QueryDentryRequest): Promise<QueryDentryResponse>;
    /**
     * 获取文档内容
     *
     * @param request - QueryDocContentRequest
     * @param headers - QueryDocContentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDocContentResponse
     */
    queryDocContentWithOptions(dentryUuid: string, request: QueryDocContentRequest, headers: QueryDocContentHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDocContentResponse>;
    /**
     * 获取文档内容
     *
     * @param request - QueryDocContentRequest
     * @returns QueryDocContentResponse
     */
    queryDocContent(dentryUuid: string, request: QueryDocContentRequest): Promise<QueryDocContentResponse>;
    /**
     * 根据链接查询节点或知识库信息
     *
     * @param request - QueryItemByUrlRequest
     * @param headers - QueryItemByUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryItemByUrlResponse
     */
    queryItemByUrlWithOptions(request: QueryItemByUrlRequest, headers: QueryItemByUrlHeaders, runtime: $Util.RuntimeOptions): Promise<QueryItemByUrlResponse>;
    /**
     * 根据链接查询节点或知识库信息
     *
     * @param request - QueryItemByUrlRequest
     * @returns QueryItemByUrlResponse
     */
    queryItemByUrl(request: QueryItemByUrlRequest): Promise<QueryItemByUrlResponse>;
    /**
     * 查询用户的「我的文档」
     *
     * @param headers - QueryMineSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMineSpaceResponse
     */
    queryMineSpaceWithOptions(unionId: string, headers: QueryMineSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMineSpaceResponse>;
    /**
     * 查询用户的「我的文档」
     * @returns QueryMineSpaceResponse
     */
    queryMineSpace(unionId: string): Promise<QueryMineSpaceResponse>;
    /**
     * 查询最近列表
     *
     * @param request - QueryRecentListRequest
     * @param headers - QueryRecentListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryRecentListResponse
     */
    queryRecentListWithOptions(request: QueryRecentListRequest, headers: QueryRecentListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRecentListResponse>;
    /**
     * 查询最近列表
     *
     * @param request - QueryRecentListRequest
     * @returns QueryRecentListResponse
     */
    queryRecentList(request: QueryRecentListRequest): Promise<QueryRecentListResponse>;
    /**
     * 查询指定知识库信息
     *
     * @param request - QuerySpaceRequest
     * @param headers - QuerySpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySpaceResponse
     */
    querySpaceWithOptions(spaceId: string, request: QuerySpaceRequest, headers: QuerySpaceHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySpaceResponse>;
    /**
     * 查询指定知识库信息
     *
     * @param request - QuerySpaceRequest
     * @returns QuerySpaceResponse
     */
    querySpace(spaceId: string, request: QuerySpaceRequest): Promise<QuerySpaceResponse>;
    /**
     * 查询与我关联的知识库列表（支持筛选小组）
     *
     * @param request - RelatedSpacesRequest
     * @param headers - RelatedSpacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RelatedSpacesResponse
     */
    relatedSpacesWithOptions(request: RelatedSpacesRequest, headers: RelatedSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<RelatedSpacesResponse>;
    /**
     * 查询与我关联的知识库列表（支持筛选小组）
     *
     * @param request - RelatedSpacesRequest
     * @returns RelatedSpacesResponse
     */
    relatedSpaces(request: RelatedSpacesRequest): Promise<RelatedSpacesResponse>;
    /**
     * 移除小组成员
     *
     * @param request - RemoveTeamMembersRequest
     * @param headers - RemoveTeamMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveTeamMembersResponse
     */
    removeTeamMembersWithOptions(teamId: string, request: RemoveTeamMembersRequest, headers: RemoveTeamMembersHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveTeamMembersResponse>;
    /**
     * 移除小组成员
     *
     * @param request - RemoveTeamMembersRequest
     * @returns RemoveTeamMembersResponse
     */
    removeTeamMembers(teamId: string, request: RemoveTeamMembersRequest): Promise<RemoveTeamMembersResponse>;
    /**
     * 知识库节点（包括文档和文件夹）重命名
     *
     * @param request - RenameDentryRequest
     * @param headers - RenameDentryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RenameDentryResponse
     */
    renameDentryWithOptions(spaceId: string, dentryId: string, request: RenameDentryRequest, headers: RenameDentryHeaders, runtime: $Util.RuntimeOptions): Promise<RenameDentryResponse>;
    /**
     * 知识库节点（包括文档和文件夹）重命名
     *
     * @param request - RenameDentryRequest
     * @returns RenameDentryResponse
     */
    renameDentry(spaceId: string, dentryId: string, request: RenameDentryRequest): Promise<RenameDentryResponse>;
    /**
     * 添加或修改小组成员
     *
     * @param request - SaveTeamMembersRequest
     * @param headers - SaveTeamMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveTeamMembersResponse
     */
    saveTeamMembersWithOptions(teamId: string, request: SaveTeamMembersRequest, headers: SaveTeamMembersHeaders, runtime: $Util.RuntimeOptions): Promise<SaveTeamMembersResponse>;
    /**
     * 添加或修改小组成员
     *
     * @param request - SaveTeamMembersRequest
     * @returns SaveTeamMembersResponse
     */
    saveTeamMembers(teamId: string, request: SaveTeamMembersRequest): Promise<SaveTeamMembersResponse>;
    /**
     * 搜索知识库和节点
     *
     * @param request - SearchRequest
     * @param headers - SearchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchResponse
     */
    searchWithOptions(request: SearchRequest, headers: SearchHeaders, runtime: $Util.RuntimeOptions): Promise<SearchResponse>;
    /**
     * 搜索知识库和节点
     *
     * @param request - SearchRequest
     * @returns SearchResponse
     */
    search(request: SearchRequest): Promise<SearchResponse>;
    /**
     * 搜索模板中心模板
     *
     * @param request - SearchTemplatesRequest
     * @param headers - SearchTemplatesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchTemplatesResponse
     */
    searchTemplatesWithOptions(request: SearchTemplatesRequest, headers: SearchTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<SearchTemplatesResponse>;
    /**
     * 搜索模板中心模板
     *
     * @param request - SearchTemplatesRequest
     * @returns SearchTemplatesResponse
     */
    searchTemplates(request: SearchTemplatesRequest): Promise<SearchTemplatesResponse>;
    /**
     * 获取文件打开链接
     *
     * @param request - ShareUrlRequest
     * @param headers - ShareUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ShareUrlResponse
     */
    shareUrlWithOptions(request: ShareUrlRequest, headers: ShareUrlHeaders, runtime: $Util.RuntimeOptions): Promise<ShareUrlResponse>;
    /**
     * 获取文件打开链接
     *
     * @param request - ShareUrlRequest
     * @returns ShareUrlResponse
     */
    shareUrl(request: ShareUrlRequest): Promise<ShareUrlResponse>;
    /**
     * 获取知识库模板列表
     *
     * @param request - TeamTemplatesRequest
     * @param headers - TeamTemplatesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TeamTemplatesResponse
     */
    teamTemplatesWithOptions(request: TeamTemplatesRequest, headers: TeamTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<TeamTemplatesResponse>;
    /**
     * 获取知识库模板列表
     *
     * @param request - TeamTemplatesRequest
     * @returns TeamTemplatesResponse
     */
    teamTemplates(request: TeamTemplatesRequest): Promise<TeamTemplatesResponse>;
    /**
     * 获取模板分类列表
     *
     * @param request - TemplateCategoriesRequest
     * @param headers - TemplateCategoriesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TemplateCategoriesResponse
     */
    templateCategoriesWithOptions(request: TemplateCategoriesRequest, headers: TemplateCategoriesHeaders, runtime: $Util.RuntimeOptions): Promise<TemplateCategoriesResponse>;
    /**
     * 获取模板分类列表
     *
     * @param request - TemplateCategoriesRequest
     * @returns TemplateCategoriesResponse
     */
    templateCategories(request: TemplateCategoriesRequest): Promise<TemplateCategoriesResponse>;
    /**
     * 取消标记星标
     *
     * @param request - UnmarkStarRequest
     * @param headers - UnmarkStarHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnmarkStarResponse
     */
    unmarkStarWithOptions(dentryUuid: string, request: UnmarkStarRequest, headers: UnmarkStarHeaders, runtime: $Util.RuntimeOptions): Promise<UnmarkStarResponse>;
    /**
     * 取消标记星标
     *
     * @param request - UnmarkStarRequest
     * @returns UnmarkStarResponse
     */
    unmarkStar(dentryUuid: string, request: UnmarkStarRequest): Promise<UnmarkStarResponse>;
    /**
     * 取消置顶知识库
     *
     * @param request - UnpinSpaceRequest
     * @param headers - UnpinSpaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnpinSpaceResponse
     */
    unpinSpaceWithOptions(spaceId: string, request: UnpinSpaceRequest, headers: UnpinSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<UnpinSpaceResponse>;
    /**
     * 取消置顶知识库
     *
     * @param request - UnpinSpaceRequest
     * @returns UnpinSpaceResponse
     */
    unpinSpace(spaceId: string, request: UnpinSpaceRequest): Promise<UnpinSpaceResponse>;
    /**
     * 更新小组
     *
     * @param request - UpdateTeamRequest
     * @param headers - UpdateTeamHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTeamResponse
     */
    updateTeamWithOptions(teamId: string, request: UpdateTeamRequest, headers: UpdateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTeamResponse>;
    /**
     * 更新小组
     *
     * @param request - UpdateTeamRequest
     * @returns UpdateTeamResponse
     */
    updateTeam(teamId: string, request: UpdateTeamRequest): Promise<UpdateTeamResponse>;
    /**
     * 用户模板列表
     *
     * @param request - UserTemplatesRequest
     * @param headers - UserTemplatesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UserTemplatesResponse
     */
    userTemplatesWithOptions(request: UserTemplatesRequest, headers: UserTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<UserTemplatesResponse>;
    /**
     * 用户模板列表
     *
     * @param request - UserTemplatesRequest
     * @returns UserTemplatesResponse
     */
    userTemplates(request: UserTemplatesRequest): Promise<UserTemplatesResponse>;
}
