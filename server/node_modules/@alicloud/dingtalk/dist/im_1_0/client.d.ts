/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class PrivateDataValue extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * @123xxx
     */
    backgroundMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * @345xxx
     */
    backgroundMediaIdForPanel?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * -1
     */
    deptId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 企业表情1
     */
    emotionName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionResponseBody extends $tea.Model {
    result?: AddOrgTextEmotionResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddOrgTextEmotionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationRequest extends $tea.Model {
    /**
     * @example
     * @lALPDe7s26Bre
     */
    icon?: string;
    /**
     * @example
     * 小加
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid123cd
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationResponseBody extends $tea.Model {
    chatBotUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddRobotToConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddUnfurlingRegisterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddUnfurlingRegisterRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    apiSecret?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://xxx.xxx.com/api/dingtalk/link_unfurling
     */
    callbackUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * d7b9xxx-xxx-xxxx-xxxx-xxxxxxx.schema
     */
    cardTemplateId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * www.dingtalk.com
     */
    domain?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * /
     */
    path?: string;
    /**
     * @example
     * 规则描述
     */
    ruleDesc?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    ruleMatchType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 37xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddUnfurlingRegisterResponseBody extends $tea.Model {
    /**
     * @example
     * 1
     */
    id?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddUnfurlingRegisterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddUnfurlingRegisterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AutoOpenDingTalkConnectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AutoOpenDingTalkConnectResponseBody extends $tea.Model {
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AutoOpenDingTalkConnectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AutoOpenDingTalkConnectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openMessageIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxx
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponseBody extends $tea.Model {
    messages?: BatchQueryFamilySchoolMessageResponseBodyMessages[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchQueryFamilySchoolMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberRequest extends $tea.Model {
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 200
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberResponseBody extends $tea.Model {
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * cidXXXXXXXXX==
     */
    memberUserIds?: string[];
    /**
     * @example
     * 92233720368
     */
    nextToken?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchQueryGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    action?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * merge
     */
    cardTemplateJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionResponseBody extends $tea.Model {
    /**
     * @example
     * {"xxx":"xxx"}
     */
    cardTemplateJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardTemplateBuildActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    groupOwnerId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3
     */
    groupOwnerType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerResponseBody extends $tea.Model {
    newGroupOwnerId?: string;
    newGroupOwnerType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChangeGroupOwnerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatIdToOpenConversationIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatIdToOpenConversationIdResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidl1B8RVUFmkO50OC9uEbySQ==
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatIdToOpenConversationIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatIdToOpenConversationIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidVwhmrlxsR3sL3+JdH1LjUA==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    role?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatSubAdminUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidD2y*****==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 015*****
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckUserIsGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyUnfurlingRegisterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyUnfurlingRegisterRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 37xxxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyUnfurlingRegisterResponseBody extends $tea.Model {
    result?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyUnfurlingRegisterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CopyUnfurlingRegisterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOpenMsgSceneGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOpenMsgSceneGroupsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * f6xxxxx
     */
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOpenMsgSceneGroupsResponseBody extends $tea.Model {
    result?: CountOpenMsgSceneGroupsResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOpenMsgSceneGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CountOpenMsgSceneGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOrgMessageOpenSceneGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOrgMessageOpenSceneGroupsResponseBody extends $tea.Model {
    count?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOrgMessageOpenSceneGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CountOrgMessageOpenSceneGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountSceneGroupsByTemplateIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountSceneGroupsByTemplateIdResponseBody extends $tea.Model {
    count?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountSceneGroupsByTemplateIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CountSceneGroupsByTemplateIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2121
     */
    appUserId?: string;
    /**
     * @example
     * http://***.png
     */
    groupAvatar?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 客户群
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    groupOwnerId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 8d42****nkld
     */
    groupTemplateId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid****8Q==
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCoupleGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationRequest extends $tea.Model {
    appUserIds?: string[];
    /**
     * @example
     * http://***.png
     */
    groupAvatar?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 客户群
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8777
     */
    groupOwnerId?: string;
    /**
     * @example
     * 3
     */
    groupOwnerType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 8d42****nkld
     */
    groupTemplateId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8777
     */
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appUserIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidpZ****Vcp4g==
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    interconnections?: CreateInterconnectionRequestInterconnections[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionResponseBody extends $tea.Model {
    results?: CreateInterconnectionResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateInterconnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationRequest extends $tea.Model {
    features?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 客户群
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    groupOwnerId?: string;
    /**
     * @example
     * http://***.png
     */
    icon?: string;
    managementOptions?: CreateSceneGroupConversationRequestManagementOptions;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 8d42****nkld
     */
    templateId?: string;
    userIdList?: string[];
    /**
     * @example
     * asdazxc
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxxxx==
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSceneGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    appUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * store1
     */
    businessUniqueKey?: string;
    /**
     * @example
     * http://***.png
     */
    groupAvatar?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 客户群
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 8d42****nkld
     */
    groupTemplateId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid****8Q==
     */
    conversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateStoreGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DebugUnfurlingRegisterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DebugUnfurlingRegisterRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    grayGroupIdList?: string[];
    grayUserIdList?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 37xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DebugUnfurlingRegisterResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DebugUnfurlingRegisterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DebugUnfurlingRegisterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * -1
     */
    deptId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    emotionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteOrgTextEmotionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationResponseBody extends $tea.Model {
    /**
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DismissGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    appUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * oK4e****qER2
     */
    channelCode?: string;
    /**
     * @example
     * 123**789
     */
    deviceId?: string;
    /**
     * @example
     * f67b****8a0f
     */
    openConversationId?: string;
    /**
     * @example
     * 1745****8777
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    msgTypes?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1666671122000
     */
    nextToken?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxx
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponseBody extends $tea.Model {
    /**
     * @example
     * corp123
     */
    corpId?: string;
    /**
     * @example
     * false
     */
    hasMore?: string;
    messages?: GetFamilySchoolConversationMsgResponseBodyMessages[];
    /**
     * @example
     * 1666671122000
     */
    nextToken?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFamilySchoolConversationMsgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxx
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsResponseBody extends $tea.Model {
    groupInfoList?: GetFamilySchoolConversationsResponseBodyGroupInfoList[];
    /**
     * @example
     * false
     */
    hasMore?: string;
    /**
     * @example
     * 1666671122000
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFamilySchoolConversationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    /**
     * @example
     * UZr*****
     */
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid1e*****==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 015*****
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersResponseBody extends $tea.Model {
    hasMore?: boolean;
    /**
     * @example
     * UZr*****
     */
    nextToken?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInnerGroupMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlRequest extends $tea.Model {
    appUserAvatar?: string;
    appUserAvatarType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    appUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    appUserMobileNumber?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    appUserName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    msgPageType?: number;
    qrCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    signature?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    sourceCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    sourceType?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInterconnectionUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 015*****
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsResponseBody extends $tea.Model {
    groupInfos?: GetNewestInnerGroupsResponseBodyGroupInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetNewestInnerGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoRequest extends $tea.Model {
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoResponseBody extends $tea.Model {
    groupUrl?: string;
    icon?: string;
    /**
     * @example
     * cidXXXXXXXXX==
     */
    openConversationId?: string;
    ownerUserId?: string;
    status?: number;
    success?: boolean;
    templateId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSceneGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * false
     */
    cursor?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 200
     */
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersResponseBody extends $tea.Model {
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * cidXXXXXXXXX==
     */
    memberUserIds?: string[];
    /**
     * @example
     * 92233720368
     */
    nextCursor?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSceneGroupMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupTemplateMessageOpenStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupTemplateMessageOpenStatusResponseBody extends $tea.Model {
    status?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupTemplateMessageOpenStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSceneGroupTemplateMessageOpenStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupBanWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupBanWordsRequest extends $tea.Model {
    /**
     * @example
     * 1
     */
    banWordsMode?: number;
    /**
     * @example
     * cidnvcxzklxv
     */
    openConversationId?: string;
    options?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupBanWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryRequest extends $tea.Model {
    /**
     * @example
     * 1Y
     */
    effectiveDuration?: string;
    /**
     * @example
     * ciddmslasdfxcvbxcvgidnxsd==
     */
    openConversationId?: string;
    /**
     * @example
     * 5782431748978293
     */
    operator?: string;
    options?: {
        [key: string]: any;
    };
    /**
     * @example
     * 2000
     */
    targetCapacity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryResponseBody extends $tea.Model {
    /**
     * @example
     * 85000
     */
    actualPrice?: number;
    /**
     * @example
     * 1652183395772
     */
    createdAt?: number;
    /**
     * @example
     * 500
     */
    currentCapacity?: number;
    /**
     * @example
     * 1652183395772
     */
    currentEffectUntil?: number;
    /**
     * @example
     * 85
     */
    discount?: number;
    extInfo?: {
        [key: string]: any;
    };
    /**
     * @example
     * 678912390478123
     */
    groupOwner?: string;
    /**
     * @example
     * 今天吃肘子群
     */
    groupTitle?: string;
    /**
     * @example
     * 10000
     */
    markedPrice?: number;
    /**
     * @example
     * 500
     */
    memberCount?: number;
    /**
     * @example
     * cidoondswfakscdviouhao==
     */
    openConversationId?: string;
    /**
     * @example
     * 32453245234523425
     */
    operator?: string;
    /**
     * @example
     * 10000
     */
    targetCapacity?: number;
    /**
     * @example
     * 1652183395772
     */
    targetEffectUntil?: number;
    /**
     * @example
     * jklasdhjfasdjkfkh421jk5bb243b523
     */
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupCapacityInquiryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmRequest extends $tea.Model {
    /**
     * @example
     * 066224
     */
    operator?: string;
    /**
     * @example
     * FAKE:0-28937rufhjdkslnawdkjsfk
     */
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupCapacityOrderConfirmResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceRequest extends $tea.Model {
    /**
     * @example
     * 123
     */
    actualPrice?: number;
    /**
     * @example
     * 500
     */
    currentCapacity?: number;
    /**
     * @example
     * 1651751906
     */
    currentEffectUntil?: number;
    /**
     * @example
     * 85
     */
    discount?: number;
    extInfo?: {
        [key: string]: any;
    };
    /**
     * @example
     * 123
     */
    markedPrice?: number;
    /**
     * @example
     * ciddmslidnxsd==
     */
    openConversationId?: string;
    /**
     * @example
     * 531781123123
     */
    operator?: string;
    /**
     * @example
     * 1000
     */
    targetCapacity?: number;
    /**
     * @example
     * 1651751906
     */
    targetEffectUntil?: number;
    /**
     * @example
     * dfsafsd
     */
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceResponseBody extends $tea.Model {
    /**
     * @example
     * 85000
     */
    actualPrice?: number;
    /**
     * @example
     * 500
     */
    currentCapacity?: number;
    /**
     * @example
     * 1652669110553
     */
    currentEffectUntil?: number;
    /**
     * @example
     * 85
     */
    discount?: number;
    extInfo?: {
        [key: string]: string;
    };
    /**
     * @example
     * 10000
     */
    markedPrice?: number;
    /**
     * @example
     * ciddfasvc
     */
    openConversationId?: string;
    /**
     * @example
     * 033333
     */
    operator?: string;
    /**
     * @example
     * 12389023745345500
     */
    orderId?: string;
    /**
     * @example
     * 10000
     */
    targetCapacity?: number;
    /**
     * @example
     * 1652669110553
     */
    targetEffectUntil?: number;
    /**
     * @example
     * 90ji34ontgrefv98u0ijo3q4awefg90rej
     */
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupCapacityOrderPlaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryRequest extends $tea.Model {
    /**
     * @example
     * 1652183395772
     */
    createdAfter?: number;
    /**
     * @example
     * 53364321
     */
    groupId?: string;
    groupMemberSamples?: string[];
    /**
     * @example
     * 4122134
     */
    groupOwner?: string;
    groupTitleKeywords?: string[];
    /**
     * @example
     * https://h5.dingtalk.com/circle/healthCheckin.html?dtaction=os&corpId=ding91766asjkldhfkjklasdjkfjkhajksdjkfhjkla811&5fd5e=db2ed&cbdbhh=qwertyuiop
     */
    groupUrl?: string;
    /**
     * @example
     * 500
     */
    maxResults?: number;
    /**
     * @example
     * 1
     */
    membersOver?: number;
    /**
     * @example
     * 500
     */
    nextToken?: string;
    /**
     * @example
     * cidnvcxzklxv23jhkg412hj==
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryResponseBody extends $tea.Model {
    groupInfoList?: GroupManageQueryResponseBodyGroupInfoList[];
    /**
     * @example
     * true
     */
    hasMore?: boolean;
    /**
     * @example
     * 500
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupManageQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageReduceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageReduceRequest extends $tea.Model {
    /**
     * @example
     * 200
     */
    capacityLimit?: number;
    /**
     * @example
     * cidnvcxzklxv
     */
    openConversationId?: string;
    options?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageReduceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 这是小丁
     */
    brief?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 我是小丁
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * @lALPDe7s26Bre
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 小丁
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    outgoingToken?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://*.com
     */
    outgoingUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * @lALPDe7s26Bre
     */
    previewMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgResponseBody extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallRobotToOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceRequest extends $tea.Model {
    callbackRouteKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    cardData?: InteractiveCardCreateInstanceRequestCardData;
    /**
     * @remarks
     * This parameter is required.
     */
    cardTemplateId?: string;
    chatBotId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    conversationType?: number;
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    pullStrategy?: boolean;
    receiverUserIdList?: string[];
    robotCode?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceResponseBody extends $tea.Model {
    /**
     * @example
     * xxxxxx
     */
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InteractiveCardCreateInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupTemplatesByOrgIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupTemplatesByOrgIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupTemplatesByOrgIdResponseBody extends $tea.Model {
    count?: number;
    sceneGroupDetailModels?: ListGroupTemplatesByOrgIdResponseBodySceneGroupDetailModels[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupTemplatesByOrgIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListGroupTemplatesByOrgIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponseBody extends $tea.Model {
    result?: ListOrgTextEmotionResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListOrgTextEmotionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSceneGroupsByTemplateIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSceneGroupsByTemplateIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSceneGroupsByTemplateIdResponseBody extends $tea.Model {
    openConversationIds?: string[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSceneGroupsByTemplateIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSceneGroupsByTemplateIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OfflineUnfurlingRegisterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OfflineUnfurlingRegisterRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    /**
     * @example
     * 37xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OfflineUnfurlingRegisterResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OfflineUnfurlingRegisterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OfflineUnfurlingRegisterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleAddRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleAddResponseBody extends $tea.Model {
    result?: OpenGroupRoleAddResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleAddResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenGroupRoleAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleQueryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleQueryResponseBody extends $tea.Model {
    result?: OpenGroupRoleQueryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenGroupRoleQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleRemoveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleRemoveRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openRoleId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleRemoveResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleRemoveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenGroupRoleRemoveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleUpdateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openRoleId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleUpdateResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenGroupRoleUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupUserRoleQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupUserRoleQueryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    viewedUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupUserRoleQueryResponseBody extends $tea.Model {
    result?: OpenGroupUserRoleQueryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupUserRoleQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenGroupUserRoleQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenInnerGroupTransferToDeptGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenInnerGroupTransferToDeptGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 100
     */
    deptId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidD2y*****==
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenInnerGroupTransferToDeptGroupResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenInnerGroupTransferToDeptGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenInnerGroupTransferToDeptGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenSearchGroupListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenSearchGroupListRequest extends $tea.Model {
    keyword?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenSearchGroupListResponseBody extends $tea.Model {
    result?: OpenSearchGroupListResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenSearchGroupListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenSearchGroupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserSendCardMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserSendCardMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    cardContent?: OpenUserSendCardMessageRequestCardContent;
    openConversationId?: string;
    receiveUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserSendCardMessageResponseBody extends $tea.Model {
    result?: OpenUserSendCardMessageResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserSendCardMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenUserSendCardMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PersonalSendCardMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PersonalSendCardMessageRequest extends $tea.Model {
    atUserIds?: string[];
    cardContent?: PersonalSendCardMessageRequestCardContent;
    openConversationId?: string;
    receiveUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PersonalSendCardMessageResponseBody extends $tea.Model {
    result?: PersonalSendCardMessageResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PersonalSendCardMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PersonalSendCardMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * COOLAPP-XXX
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXX
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthResponseBody extends $tea.Model {
    /**
     * @example
     * 99
     */
    memberCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupInfoByMemberAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    groupMembers?: QueryGroupMemberResponseBodyGroupMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * COOLAPP-XXX
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXX
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthResponseBody extends $tea.Model {
    groupMemberList?: QueryGroupMemberByMemberAuthResponseBodyGroupMemberList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMemberByMemberAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidCtneF+XyQjcyF2ROdgSeIg==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 004741900
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    groupMuteMode?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    userMuteResult?: QueryGroupMuteStatusResponseBodyUserMuteResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMuteStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupMemberListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupMemberListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupMemberListResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryInnerGroupMemberListResponseBodyList[];
    nextToken?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupMemberListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryInnerGroupMemberListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupRecentListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupRecentListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 015*****
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupRecentListResponseBody extends $tea.Model {
    groupInfos?: QueryInnerGroupRecentListResponseBodyGroupInfos[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupRecentListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryInnerGroupRecentListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * roleXXXXX
     */
    openRoleId?: string;
    /**
     * @example
     * 1621502140000
     */
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleResponseBody extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMembersOfGroupRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageSendResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageSendResultRequest extends $tea.Model {
    /**
     * @example
     * dhowhi23ohdh==
     */
    openTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageSendResultResponseBody extends $tea.Model {
    result?: QueryMessageSendResultResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageSendResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMessageSendResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenConversationReceiveUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenConversationReceiveUserRequest extends $tea.Model {
    openConversationId?: string;
    sendUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenConversationReceiveUserResponseBody extends $tea.Model {
    result?: QueryOpenConversationReceiveUserResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenConversationReceiveUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOpenConversationReceiveUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenGroupBaseInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenGroupBaseInfoRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenGroupBaseInfoResponseBody extends $tea.Model {
    result?: QueryOpenGroupBaseInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenGroupBaseInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOpenGroupBaseInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPersonalMessageReadStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPersonalMessageReadStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidQGfKJCXMfVxZxxx3ZL0Qlw==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * msghnezLi8wb6pGqMsadhj9n0yw==
     */
    openMessageId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPersonalMessageReadStatusResponseBody extends $tea.Model {
    result?: QueryPersonalMessageReadStatusResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPersonalMessageReadStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPersonalMessageReadStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentConversationsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentConversationsRequest extends $tea.Model {
    onlyHuman?: boolean;
    onlyInnerGroup?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentConversationsResponseBody extends $tea.Model {
    result?: QueryRecentConversationsResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentConversationsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRecentConversationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotRequest extends $tea.Model {
    /**
     * @example
     * cidCtneF+XyQjcyF2ROdgSeIg==
     */
    openConversationId?: string;
    /**
     * @example
     * ding5nbbeXXXXXXX
     */
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotResponseBody extends $tea.Model {
    result?: QuerySceneGroupTemplateRobotResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySceneGroupTemplateRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8777
     */
    groupMembers?: QuerySingleGroupRequestGroupMembers[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    groupTemplateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversations?: QuerySingleGroupResponseBodyOpenConversations[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySingleGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    appUserId?: string;
    /**
     * @example
     * 1745****8777
     */
    openConversationIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    unReadCount?: number;
    unReadItems?: QueryUnReadMessageResponseBodyUnReadItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUnReadMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterCreatorHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterCreatorRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * www.dingtalk.com
     */
    domain?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * /a
     */
    path?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterCreatorResponseBody extends $tea.Model {
    data?: QueryUnfurlingRegisterCreatorResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterCreatorResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUnfurlingRegisterCreatorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @example
     * 100
     */
    maxResults?: number;
    /**
     * @example
     * 0
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterInfoResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryUnfurlingRegisterInfoResponseBodyList[];
    nextToken?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUnfurlingRegisterInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseUnfurlingRegisterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseUnfurlingRegisterRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 37xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseUnfurlingRegisterResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseUnfurlingRegisterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReleaseUnfurlingRegisterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    chatBotUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid123cd
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationResponseBody extends $tea.Model {
    chatBotUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveRobotFromConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试关键词
     */
    searchKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 015*****
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsResponseBody extends $tea.Model {
    groupInfos?: SearchInnerGroupsResponseBodyGroupInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchInnerGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardRequest extends $tea.Model {
    atOpenIds?: {
        [key: string]: string;
    };
    callbackRouteKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    cardData?: SendInteractiveCardRequestCardData;
    cardOptions?: SendInteractiveCardRequestCardOptions;
    /**
     * @remarks
     * This parameter is required.
     */
    cardTemplateId?: string;
    chatBotId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    conversationType?: number;
    digitalWorkerCode?: string;
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    pullStrategy?: boolean;
    receiverUserIdList?: string[];
    robotCode?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponseBody extends $tea.Model {
    result?: SendInteractiveCardResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardRequest extends $tea.Model {
    atOpenIds?: {
        [key: string]: string;
    };
    callbackRouteKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    cardData?: SendOTOInteractiveCardRequestCardData;
    cardOptions?: SendOTOInteractiveCardRequestCardOptions;
    /**
     * @remarks
     * This parameter is required.
     */
    cardTemplateId?: string;
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    pullStrategy?: boolean;
    receiverUserIdList?: string[];
    robotCode?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardResponseBody extends $tea.Model {
    result?: SendOTOInteractiveCardResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendOTOInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPersonalMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPersonalMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"content":"月会通知<@all> ","at":{"atUserIds":[],"isAtAll":true}}
     */
    content?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * text
     */
    msgType?: string;
    /**
     * @example
     * cidc4iLyQBuHFQRvzxznz204Q==
     */
    openConversationId?: string;
    /**
     * @example
     * 1662055829854977
     */
    receiverUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPersonalMessageResponseBody extends $tea.Model {
    result?: SendPersonalMessageResponseBodyResult;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPersonalMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendPersonalMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardRequest extends $tea.Model {
    /**
     * @example
     * https://xxx
     */
    callbackUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cardXXXX01
     */
    cardBizId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 根据具体的cardTemplateId参考文档格式
     */
    cardData?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxxxx
     */
    cardTemplateId?: string;
    /**
     * @example
     * cidXXXX
     */
    openConversationId?: string;
    pullStrategy?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxx
     */
    robotCode?: string;
    sendOptions?: SendRobotInteractiveCardRequestSendOptions;
    /**
     * @example
     * 以userId为例：{"userId":"userId0001"}；以unionId为例{"unionId":"unionId001"}
     */
    singleChatReceiver?: string;
    unionIdPrivateDataMap?: string;
    userIdPrivateDataMap?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardResponseBody extends $tea.Model {
    /**
     * @example
     * xxxxxx
     */
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendRobotInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageRequest extends $tea.Model {
    atAll?: boolean;
    /**
     * @example
     * 1107****2120
     */
    atAppUserId?: string;
    /**
     * @example
     * 1107****2120
     */
    atDingUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * { "content": "我就是我, 是不一样的烟火"}
     */
    msgContent?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * text
     */
    msgType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationIds?: string[];
    /**
     * @example
     * kelian-custom-service-robot-101
     */
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardRequest extends $tea.Model {
    /**
     * @example
     * https://xxxx.com/.../
     */
    callbackUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 根据具体的cardTemplateId参考文档格式
     */
    cardData?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * TuWenCard01
     */
    cardTemplateId?: string;
    /**
     * @example
     * cidXXXX
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cardXXXX01
     */
    outTrackId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxx
     */
    robotCode?: string;
    sendOptions?: SendTemplateInteractiveCardRequestSendOptions;
    /**
     * @example
     * 以userId为例：{"userId":"userId0001"}；以unionId为例{"unionId":"unionId001"}
     */
    singleChatReceiver?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardResponseBody extends $tea.Model {
    /**
     * @example
     * xxxxxx
     */
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendTemplateInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ciddjxhgdDXSAAXXXXX
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    rightPanelClosePermitted?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    rightPanelOpenStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 侧边栏标题
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    webWndParams?: SetRightPanelRequestWebWndParams;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 500
     */
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRightPanelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxCloseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxCloseRequest extends $tea.Model {
    conversationType?: number;
    coolAppCode?: string;
    /**
     * @example
     * xxxx
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    outTrackId?: string;
    receiverUserIdList?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxCloseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxOpenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxOpenRequest extends $tea.Model {
    conversationType?: number;
    coolAppCode?: string;
    /**
     * @example
     * 1850042969000
     */
    expiredTime?: number;
    /**
     * @example
     * xxxx
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    outTrackId?: string;
    /**
     * @example
     * ios|win
     */
    platforms?: string;
    /**
     * **if can be null:**
     * true
     */
    receiverUserIdList?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxOpenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * http://***.png
     */
    groupAvatar?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    newGroupAvatar?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupAvatarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameResponseBody extends $tea.Model {
    newGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionRequest extends $tea.Model {
    /**
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    permissionGroup?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    role?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupSubAdminResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardRequest extends $tea.Model {
    cardData?: UpdateInteractiveCardRequestCardData;
    cardOptions?: UpdateInteractiveCardRequestCardOptions;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberBanWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberBanWordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 300000
     */
    muteDuration?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    muteStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid5d5uM3XEw3gxbNc/n7EQ4g==
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberBanWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    groupNick?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateMemberGroupNickResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgRequest extends $tea.Model {
    /**
     * @example
     * 小加
     */
    brief?: string;
    /**
     * @example
     * 小加
     */
    description?: string;
    /**
     * @example
     * @lALPDe7s26Bre
     */
    icon?: string;
    /**
     * @example
     * 小加
     */
    name?: string;
    /**
     * @example
     * 123
     */
    outgoingToken?: string;
    /**
     * @example
     * https://*.com
     */
    outgoingUrl?: string;
    /**
     * @example
     * @lALPDe7s26Bre
     */
    previewMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgResponseBody extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRobotInOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cardXXXX01
     */
    cardBizId?: string;
    /**
     * @example
     * 根据具体的cardTemplateId参考文档格式
     */
    cardData?: string;
    unionIdPrivateDataMap?: string;
    updateOptions?: UpdateRobotInteractiveCardRequestUpdateOptions;
    userIdPrivateDataMap?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardResponseBody extends $tea.Model {
    /**
     * @example
     * xxxxxx
     */
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRobotInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneGroupTemplateMessageOpenStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneGroupTemplateMessageOpenStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    status?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    templateIdList?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneGroupTemplateMessageOpenStatusResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSceneGroupTemplateMessageOpenStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateSceneGroupTemplateMessageOpenStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidXXXXXXX
     */
    openConversationId?: string;
    openRoleIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateTheGroupRolesOfGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123xxxx
     */
    apiSecret?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://xxx.xxx.com/api/dingtalk/link_unfurling
     */
    callbackUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * d7b9xxx-xxx-xxxx-xxxx-xxxxxxx.schema
     */
    cardTemplateId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * www.dingtalk.com
     */
    domain?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * /a
     */
    path?: string;
    /**
     * @example
     * 规则描述
     */
    ruleDesc?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    ruleMatchType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 37xxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateUnfurlingRegisterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3102xxxxxxx
     */
    appId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    status?: number;
    /**
     * @example
     * 37xxxxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterStatusResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUnfurlingRegisterStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateUnfurlingRegisterStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberRequest extends $tea.Model {
    appUserIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8777
     */
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appUserIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberRequest extends $tea.Model {
    appUserIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8777
     */
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 移除成功
     */
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    code?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"msg_type":"text","text":"hello world"}
     */
    message?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * text
     */
    messageType?: string;
    openConversationId?: string;
    /**
     * @example
     * 1107****2120
     */
    receiverId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8777
     */
    senderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendDingMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"msg_type":"text","text":"hello world"}
     */
    message?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * text
     */
    messageType?: string;
    openConversationId?: string;
    /**
     * @example
     * 1745****8777
     */
    receiverId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    senderId?: string;
    /**
     * @example
     * {     "9d801647a64******59c9da0207":"[{\"action_url\":\"http://www.baidu.com\",\"title\":\"一个按钮\"},{\"action_url\":\"http://www.baidu.com\",\"title\":\"两个按钮\"}]",     "9d801647a6******59c9da020342":"[{\"action_url\":\"http://www.baidu.com\",\"title\":\"一个按钮\"},{\"action_url\":\"http://www.baidu.com\",\"title\":\"两个按钮\"}]" }
     */
    sourceInfos?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionResponseBodyResult extends $tea.Model {
    /**
     * @example
     * corp_123456
     */
    emotionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels extends $tea.Model {
    /**
     * @example
     * aa.png
     */
    fileName?: string;
    /**
     * @example
     * png
     */
    fileType?: string;
    /**
     * @example
     * @12xxx34
     */
    mediaId?: string;
    /**
     * @example
     * 1234
     */
    size?: string;
    /**
     * @example
     * https://wukong-xxxx
     */
    url?: string;
    /**
     * @example
     * @12xx34
     */
    videoPicMediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponseBodyMessages extends $tea.Model {
    contentType?: number;
    createAt?: number;
    mediaModels?: BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels[];
    /**
     * @example
     * msgxxx
     */
    openMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountOpenMsgSceneGroupsResponseBodyResult extends $tea.Model {
    count?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionRequestInterconnections extends $tea.Model {
    /**
     * @example
     * http://***.png
     */
    appUserAvatar?: string;
    /**
     * @example
     * 1
     */
    appUserAvatarMediaType?: number;
    /**
     * @example
     * 认真工作,快乐生活
     */
    appUserDynamics?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    appUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 188****8655
     */
    appUserMobile?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Foo
     */
    appUserName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    channelCode?: string;
    /**
     * @example
     * 1745****8777
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionResponseBodyResults extends $tea.Model {
    appUserId?: string;
    message?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationRequestManagementOptions extends $tea.Model {
    chatBannedType?: number;
    managementType?: number;
    mentionAllAuthority?: number;
    searchable?: number;
    showHistoryType?: number;
    validationType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels extends $tea.Model {
    /**
     * @example
     * aa.png
     */
    fileName?: string;
    /**
     * @example
     * png
     */
    fileType?: string;
    /**
     * @example
     * @12xxx34
     */
    mediaId?: string;
    /**
     * @example
     * 1234
     */
    size?: string;
    /**
     * @example
     * https://wukong-xxxx
     */
    url?: string;
    /**
     * @example
     * @12xx34
     */
    videoPicMediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponseBodyMessages extends $tea.Model {
    contentType?: number;
    createAt?: number;
    mediaModels?: GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels[];
    /**
     * @example
     * msgxxx
     */
    openMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsResponseBodyGroupInfoList extends $tea.Model {
    /**
     * @example
     * corp123
     */
    corpId?: string;
    deptNameChain?: string[];
    /**
     * @example
     * 小王的家校群
     */
    groupName?: string;
    /**
     * @example
     * 2
     */
    groupType?: string;
    joinGroupTime?: number;
    /**
     * @example
     * cidxxx
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsResponseBodyGroupInfos extends $tea.Model {
    /**
     * @example
     * @lADOADma*****QKA
     */
    icon?: string;
    /**
     * @example
     * 10
     */
    memberAmount?: string;
    /**
     * @example
     * cid1e*****==
     */
    openConversationId?: string;
    /**
     * @example
     * 测试群名称
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryResponseBodyGroupInfoList extends $tea.Model {
    /**
     * @example
     * 0
     */
    banWordsMode?: number;
    /**
     * @example
     * 1000
     */
    capacity?: number;
    /**
     * @example
     * 1652183395772
     */
    createdAt?: number;
    extInfo?: {
        [key: string]: any;
    };
    groupAdminList?: string[];
    /**
     * @example
     * 574892167781263748
     */
    groupOwner?: string;
    /**
     * @example
     * 今天吃肘子群
     */
    groupTitle?: string;
    /**
     * @example
     * 500
     */
    memberCount?: number;
    /**
     * @example
     * cidnvcxzklxv23jhkg412hj==
     */
    openConversationId?: string;
    /**
     * @example
     * INNER
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceRequestCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupTemplatesByOrgIdResponseBodySceneGroupDetailModels extends $tea.Model {
    description?: string;
    gmtCreate?: string;
    icon?: string;
    msgOpen?: boolean;
    templateId?: string;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponseBodyResultEmotions extends $tea.Model {
    /**
     * @example
     * @234xxx
     */
    backgroundMediaId?: string;
    /**
     * @example
     * @123xxx
     */
    backgroundMediaIdForPanel?: string;
    /**
     * @example
     * -1
     */
    deptId?: number;
    /**
     * @example
     * corp_131xxx
     */
    emotionId?: string;
    /**
     * @example
     * 企业表情1
     */
    emotionName?: string;
    /**
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponseBodyResult extends $tea.Model {
    emotions?: ListOrgTextEmotionResponseBodyResultEmotions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleAddResponseBodyResult extends $tea.Model {
    openRoleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleQueryResponseBodyResultGroupRoles extends $tea.Model {
    openRoleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupRoleQueryResponseBodyResult extends $tea.Model {
    groupRoles?: OpenGroupRoleQueryResponseBodyResultGroupRoles[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupUserRoleQueryResponseBodyResultGroupRoles extends $tea.Model {
    /**
     * @example
     * rolexxxxxxx
     */
    openRoleId?: string;
    /**
     * @example
     * 小美
     */
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenGroupUserRoleQueryResponseBodyResult extends $tea.Model {
    groupRoles?: OpenGroupUserRoleQueryResponseBodyResultGroupRoles[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenSearchGroupListResponseBodyResultGroupList extends $tea.Model {
    icon?: string;
    memberCount?: number;
    openConversationId?: string;
    tag?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenSearchGroupListResponseBodyResult extends $tea.Model {
    groupList?: OpenSearchGroupListResponseBodyResultGroupList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserSendCardMessageRequestCardContent extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    lastMessage?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    outTrackId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserSendCardMessageResponseBodyResult extends $tea.Model {
    openTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PersonalSendCardMessageRequestCardContent extends $tea.Model {
    lastMessage?: string;
    outTrackId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PersonalSendCardMessageResponseBodyResult extends $tea.Model {
    openTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBodyGroupMembers extends $tea.Model {
    /**
     * @example
     * http://****.png
     */
    groupMemberAvatar?: string;
    /**
     * @example
     * 认真工作,快乐生活
     */
    groupMemberDynamics?: string;
    /**
     * @example
     * 1107****2120
     */
    groupMemberId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Foo
     */
    groupMemberName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    groupMemberType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthResponseBodyGroupMemberList extends $tea.Model {
    /**
     * @example
     * 张三
     */
    groupNickName?: string;
    /**
     * @example
     * 张某某
     */
    orgName?: string;
    /**
     * @example
     * https://xxx
     */
    profilePhotoUrl?: string;
    /**
     * @example
     * xxx
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusResponseBodyUserMuteResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1645315682000
     */
    muteEndTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1645315682000
     */
    muteStartTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    userMuteMode?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupMemberListResponseBodyList extends $tea.Model {
    icon?: string;
    name?: string;
    nickName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInnerGroupRecentListResponseBodyGroupInfos extends $tea.Model {
    /**
     * @example
     * https://static.xxxxxxx
     */
    icon?: string;
    /**
     * @example
     * 10
     */
    memberAmount?: string;
    /**
     * @example
     * cid1e*****==
     */
    openConversationId?: string;
    /**
     * @example
     * 测试群名称
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMessageSendResultResponseBodyResult extends $tea.Model {
    /**
     * @example
     * msghcuh234
     */
    openMessageId?: string;
    /**
     * @example
     * 1
     */
    sendStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenConversationReceiveUserResponseBodyResultReceiveUser extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nickName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenConversationReceiveUserResponseBodyResult extends $tea.Model {
    receiveUser?: QueryOpenConversationReceiveUserResponseBodyResultReceiveUser;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOpenGroupBaseInfoResponseBodyResult extends $tea.Model {
    icon?: string;
    memberCount?: number;
    openConversationId?: string;
    tag?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPersonalMessageReadStatusResponseBodyResultMessageReadInfoList extends $tea.Model {
    readStatus?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPersonalMessageReadStatusResponseBodyResult extends $tea.Model {
    messageReadInfoList?: QueryPersonalMessageReadStatusResponseBodyResultMessageReadInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentConversationsResponseBodyResultConversationList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    conversationType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberCount?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nickName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentConversationsResponseBodyResult extends $tea.Model {
    conversationList?: QueryRecentConversationsResponseBodyResultConversationList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotResponseBodyResult extends $tea.Model {
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupRequestGroupMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    appUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8778
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupResponseBodyOpenConversations extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1107****2120
     */
    appUserId?: string;
    /**
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1745****8778
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageResponseBodyUnReadItems extends $tea.Model {
    /**
     * @example
     * 14da****2760
     */
    openConversationId?: string;
    /**
     * @example
     * 10
     */
    unReadCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterCreatorResponseBodyData extends $tea.Model {
    appId?: string;
    creatorUserId?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnfurlingRegisterInfoResponseBodyList extends $tea.Model {
    apiSecret?: string;
    appId?: string;
    appName?: string;
    callbackType?: number;
    callbackUrl?: string;
    cardTemplateId?: string;
    creatorUserId?: string;
    domain?: string;
    grayGroupIdList?: string[];
    grayUserIdList?: string[];
    hsfMethodName?: string;
    hsfServiceName?: string;
    hsfVersion?: string;
    id?: number;
    path?: string;
    ruleDesc?: string;
    ruleMatchType?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsResponseBodyGroupInfos extends $tea.Model {
    /**
     * @example
     * @lAD*****
     */
    icon?: string;
    /**
     * @example
     * 10
     */
    memberAmount?: string;
    /**
     * @example
     * cid13*****==
     */
    openConversationId?: string;
    /**
     * @example
     * 测试群名称
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardRequestCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardRequestCardOptions extends $tea.Model {
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponseBodyResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxx
     */
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardRequestCardData extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardRequestCardOptions extends $tea.Model {
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardResponseBodyResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxxx
     */
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPersonalMessageResponseBodyResult extends $tea.Model {
    openTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardRequestSendOptions extends $tea.Model {
    /**
     * @example
     * true
     */
    atAll?: boolean;
    /**
     * @example
     * [{"nickName":"张三","userId":"userId0001"},{"nickName":"李四","unionId":"unionId001"}]
     */
    atUserListJson?: string;
    /**
     * @example
     * {}
     */
    cardPropertyJson?: string;
    /**
     * @example
     * [{"userId":"userId0001"},{"unionId":"unionId001"}]
     */
    receiverListJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardRequestSendOptions extends $tea.Model {
    /**
     * @example
     * true
     */
    atAll?: boolean;
    /**
     * @example
     * [{"nickName":"张三","userId":"userId0001"},{"nickName":"李四","unionId":"unionId001"}]
     */
    atUserListJson?: string;
    /**
     * @example
     * {}
     */
    cardPropertyJson?: string;
    /**
     * @example
     * [{"userId":"userId0001"},{"unionId":"unionId001"}]
     */
    receiverListJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelRequestWebWndParams extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://www.dingtalk.com/
     */
    targetURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardRequestCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardRequestCardOptions extends $tea.Model {
    updateCardDataByKey?: boolean;
    updatePrivateDataByKey?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardRequestUpdateOptions extends $tea.Model {
    updateCardDataByKey?: boolean;
    updatePrivateDataByKey?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加企业文字表情
     *
     * @param request - AddOrgTextEmotionRequest
     * @param headers - AddOrgTextEmotionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddOrgTextEmotionResponse
     */
    addOrgTextEmotionWithOptions(request: AddOrgTextEmotionRequest, headers: AddOrgTextEmotionHeaders, runtime: $Util.RuntimeOptions): Promise<AddOrgTextEmotionResponse>;
    /**
     * 添加企业文字表情
     *
     * @param request - AddOrgTextEmotionRequest
     * @returns AddOrgTextEmotionResponse
     */
    addOrgTextEmotion(request: AddOrgTextEmotionRequest): Promise<AddOrgTextEmotionResponse>;
    /**
     * 添加机器人到会话
     *
     * @param request - AddRobotToConversationRequest
     * @param headers - AddRobotToConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddRobotToConversationResponse
     */
    addRobotToConversationWithOptions(request: AddRobotToConversationRequest, headers: AddRobotToConversationHeaders, runtime: $Util.RuntimeOptions): Promise<AddRobotToConversationResponse>;
    /**
     * 添加机器人到会话
     *
     * @param request - AddRobotToConversationRequest
     * @returns AddRobotToConversationResponse
     */
    addRobotToConversation(request: AddRobotToConversationRequest): Promise<AddRobotToConversationResponse>;
    /**
     * 新增链接增强注册规则
     *
     * @param request - AddUnfurlingRegisterRequest
     * @param headers - AddUnfurlingRegisterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddUnfurlingRegisterResponse
     */
    addUnfurlingRegisterWithOptions(request: AddUnfurlingRegisterRequest, headers: AddUnfurlingRegisterHeaders, runtime: $Util.RuntimeOptions): Promise<AddUnfurlingRegisterResponse>;
    /**
     * 新增链接增强注册规则
     *
     * @param request - AddUnfurlingRegisterRequest
     * @returns AddUnfurlingRegisterResponse
     */
    addUnfurlingRegister(request: AddUnfurlingRegisterRequest): Promise<AddUnfurlingRegisterResponse>;
    /**
     * 自动开通钉钉客联微应用
     *
     * @param headers - AutoOpenDingTalkConnectHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AutoOpenDingTalkConnectResponse
     */
    autoOpenDingTalkConnectWithOptions(headers: AutoOpenDingTalkConnectHeaders, runtime: $Util.RuntimeOptions): Promise<AutoOpenDingTalkConnectResponse>;
    /**
     * 自动开通钉钉客联微应用
     * @returns AutoOpenDingTalkConnectResponse
     */
    autoOpenDingTalkConnect(): Promise<AutoOpenDingTalkConnectResponse>;
    /**
     * 批量查询家校群消息详情
     *
     * @param request - BatchQueryFamilySchoolMessageRequest
     * @param headers - BatchQueryFamilySchoolMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchQueryFamilySchoolMessageResponse
     */
    batchQueryFamilySchoolMessageWithOptions(request: BatchQueryFamilySchoolMessageRequest, headers: BatchQueryFamilySchoolMessageHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryFamilySchoolMessageResponse>;
    /**
     * 批量查询家校群消息详情
     *
     * @param request - BatchQueryFamilySchoolMessageRequest
     * @returns BatchQueryFamilySchoolMessageResponse
     */
    batchQueryFamilySchoolMessage(request: BatchQueryFamilySchoolMessageRequest): Promise<BatchQueryFamilySchoolMessageResponse>;
    /**
     * 查询群成员
     *
     * @param request - BatchQueryGroupMemberRequest
     * @param headers - BatchQueryGroupMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchQueryGroupMemberResponse
     */
    batchQueryGroupMemberWithOptions(request: BatchQueryGroupMemberRequest, headers: BatchQueryGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryGroupMemberResponse>;
    /**
     * 查询群成员
     *
     * @param request - BatchQueryGroupMemberRequest
     * @returns BatchQueryGroupMemberResponse
     */
    batchQueryGroupMember(request: BatchQueryGroupMemberRequest): Promise<BatchQueryGroupMemberResponse>;
    /**
     * 钉钉互动卡片模板构建动作
     *
     * @param request - CardTemplateBuildActionRequest
     * @param headers - CardTemplateBuildActionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CardTemplateBuildActionResponse
     */
    cardTemplateBuildActionWithOptions(request: CardTemplateBuildActionRequest, headers: CardTemplateBuildActionHeaders, runtime: $Util.RuntimeOptions): Promise<CardTemplateBuildActionResponse>;
    /**
     * 钉钉互动卡片模板构建动作
     *
     * @param request - CardTemplateBuildActionRequest
     * @returns CardTemplateBuildActionResponse
     */
    cardTemplateBuildAction(request: CardTemplateBuildActionRequest): Promise<CardTemplateBuildActionResponse>;
    /**
     * 更换群主
     *
     * @param request - ChangeGroupOwnerRequest
     * @param headers - ChangeGroupOwnerHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChangeGroupOwnerResponse
     */
    changeGroupOwnerWithOptions(request: ChangeGroupOwnerRequest, headers: ChangeGroupOwnerHeaders, runtime: $Util.RuntimeOptions): Promise<ChangeGroupOwnerResponse>;
    /**
     * 更换群主
     *
     * @param request - ChangeGroupOwnerRequest
     * @returns ChangeGroupOwnerResponse
     */
    changeGroupOwner(request: ChangeGroupOwnerRequest): Promise<ChangeGroupOwnerResponse>;
    /**
     * 会话开放的ChatId转OpenConversationId
     *
     * @param headers - ChatIdToOpenConversationIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatIdToOpenConversationIdResponse
     */
    chatIdToOpenConversationIdWithOptions(chatId: string, headers: ChatIdToOpenConversationIdHeaders, runtime: $Util.RuntimeOptions): Promise<ChatIdToOpenConversationIdResponse>;
    /**
     * 会话开放的ChatId转OpenConversationId
     * @returns ChatIdToOpenConversationIdResponse
     */
    chatIdToOpenConversationId(chatId: string): Promise<ChatIdToOpenConversationIdResponse>;
    /**
     * 设置群管理员
     *
     * @param request - ChatSubAdminUpdateRequest
     * @param headers - ChatSubAdminUpdateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChatSubAdminUpdateResponse
     */
    chatSubAdminUpdateWithOptions(request: ChatSubAdminUpdateRequest, headers: ChatSubAdminUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<ChatSubAdminUpdateResponse>;
    /**
     * 设置群管理员
     *
     * @param request - ChatSubAdminUpdateRequest
     * @returns ChatSubAdminUpdateResponse
     */
    chatSubAdminUpdate(request: ChatSubAdminUpdateRequest): Promise<ChatSubAdminUpdateResponse>;
    /**
     * 查询用户是否为企业内部群成员
     *
     * @param request - CheckUserIsGroupMemberRequest
     * @param headers - CheckUserIsGroupMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckUserIsGroupMemberResponse
     */
    checkUserIsGroupMemberWithOptions(request: CheckUserIsGroupMemberRequest, headers: CheckUserIsGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CheckUserIsGroupMemberResponse>;
    /**
     * 查询用户是否为企业内部群成员
     *
     * @param request - CheckUserIsGroupMemberRequest
     * @returns CheckUserIsGroupMemberResponse
     */
    checkUserIsGroupMember(request: CheckUserIsGroupMemberRequest): Promise<CheckUserIsGroupMemberResponse>;
    /**
     * 链接增强规则拷贝
     *
     * @param request - CopyUnfurlingRegisterRequest
     * @param headers - CopyUnfurlingRegisterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CopyUnfurlingRegisterResponse
     */
    copyUnfurlingRegisterWithOptions(request: CopyUnfurlingRegisterRequest, headers: CopyUnfurlingRegisterHeaders, runtime: $Util.RuntimeOptions): Promise<CopyUnfurlingRegisterResponse>;
    /**
     * 链接增强规则拷贝
     *
     * @param request - CopyUnfurlingRegisterRequest
     * @returns CopyUnfurlingRegisterResponse
     */
    copyUnfurlingRegister(request: CopyUnfurlingRegisterRequest): Promise<CopyUnfurlingRegisterResponse>;
    /**
     * 查询消息开放群模板下群计数
     *
     * @param request - CountOpenMsgSceneGroupsRequest
     * @param headers - CountOpenMsgSceneGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CountOpenMsgSceneGroupsResponse
     */
    countOpenMsgSceneGroupsWithOptions(request: CountOpenMsgSceneGroupsRequest, headers: CountOpenMsgSceneGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<CountOpenMsgSceneGroupsResponse>;
    /**
     * 查询消息开放群模板下群计数
     *
     * @param request - CountOpenMsgSceneGroupsRequest
     * @returns CountOpenMsgSceneGroupsResponse
     */
    countOpenMsgSceneGroups(request: CountOpenMsgSceneGroupsRequest): Promise<CountOpenMsgSceneGroupsResponse>;
    /**
     * 获取企业下消息开放场景群数量
     *
     * @param headers - CountOrgMessageOpenSceneGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CountOrgMessageOpenSceneGroupsResponse
     */
    countOrgMessageOpenSceneGroupsWithOptions(headers: CountOrgMessageOpenSceneGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<CountOrgMessageOpenSceneGroupsResponse>;
    /**
     * 获取企业下消息开放场景群数量
     * @returns CountOrgMessageOpenSceneGroupsResponse
     */
    countOrgMessageOpenSceneGroups(): Promise<CountOrgMessageOpenSceneGroupsResponse>;
    /**
     * 查询群模板关联的群数量
     *
     * @param headers - CountSceneGroupsByTemplateIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CountSceneGroupsByTemplateIdResponse
     */
    countSceneGroupsByTemplateIdWithOptions(templateId: string, headers: CountSceneGroupsByTemplateIdHeaders, runtime: $Util.RuntimeOptions): Promise<CountSceneGroupsByTemplateIdResponse>;
    /**
     * 查询群模板关联的群数量
     * @returns CountSceneGroupsByTemplateIdResponse
     */
    countSceneGroupsByTemplateId(templateId: string): Promise<CountSceneGroupsByTemplateIdResponse>;
    /**
     * 创建钉外两人群
     *
     * @param request - CreateCoupleGroupConversationRequest
     * @param headers - CreateCoupleGroupConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCoupleGroupConversationResponse
     */
    createCoupleGroupConversationWithOptions(request: CreateCoupleGroupConversationRequest, headers: CreateCoupleGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCoupleGroupConversationResponse>;
    /**
     * 创建钉外两人群
     *
     * @param request - CreateCoupleGroupConversationRequest
     * @returns CreateCoupleGroupConversationResponse
     */
    createCoupleGroupConversation(request: CreateCoupleGroupConversationRequest): Promise<CreateCoupleGroupConversationResponse>;
    /**
     * 创建互通群（支持普通互通群、跨钉两人群）
     *
     * @param request - CreateGroupConversationRequest
     * @param headers - CreateGroupConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateGroupConversationResponse
     */
    createGroupConversationWithOptions(request: CreateGroupConversationRequest, headers: CreateGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupConversationResponse>;
    /**
     * 创建互通群（支持普通互通群、跨钉两人群）
     *
     * @param request - CreateGroupConversationRequest
     * @returns CreateGroupConversationResponse
     */
    createGroupConversation(request: CreateGroupConversationRequest): Promise<CreateGroupConversationResponse>;
    /**
     * 创建钉外账号
     *
     * @param request - CreateInterconnectionRequest
     * @param headers - CreateInterconnectionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateInterconnectionResponse
     */
    createInterconnectionWithOptions(request: CreateInterconnectionRequest, headers: CreateInterconnectionHeaders, runtime: $Util.RuntimeOptions): Promise<CreateInterconnectionResponse>;
    /**
     * 创建钉外账号
     *
     * @param request - CreateInterconnectionRequest
     * @returns CreateInterconnectionResponse
     */
    createInterconnection(request: CreateInterconnectionRequest): Promise<CreateInterconnectionResponse>;
    /**
     * 创建场景群会话
     *
     * @param request - CreateSceneGroupConversationRequest
     * @param headers - CreateSceneGroupConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSceneGroupConversationResponse
     */
    createSceneGroupConversationWithOptions(request: CreateSceneGroupConversationRequest, headers: CreateSceneGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSceneGroupConversationResponse>;
    /**
     * 创建场景群会话
     *
     * @param request - CreateSceneGroupConversationRequest
     * @returns CreateSceneGroupConversationResponse
     */
    createSceneGroupConversation(request: CreateSceneGroupConversationRequest): Promise<CreateSceneGroupConversationResponse>;
    /**
     * 创建店铺群
     *
     * @param request - CreateStoreGroupConversationRequest
     * @param headers - CreateStoreGroupConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateStoreGroupConversationResponse
     */
    createStoreGroupConversationWithOptions(request: CreateStoreGroupConversationRequest, headers: CreateStoreGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateStoreGroupConversationResponse>;
    /**
     * 创建店铺群
     *
     * @param request - CreateStoreGroupConversationRequest
     * @returns CreateStoreGroupConversationResponse
     */
    createStoreGroupConversation(request: CreateStoreGroupConversationRequest): Promise<CreateStoreGroupConversationResponse>;
    /**
     * 链接增强规则调试
     *
     * @param request - DebugUnfurlingRegisterRequest
     * @param headers - DebugUnfurlingRegisterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DebugUnfurlingRegisterResponse
     */
    debugUnfurlingRegisterWithOptions(request: DebugUnfurlingRegisterRequest, headers: DebugUnfurlingRegisterHeaders, runtime: $Util.RuntimeOptions): Promise<DebugUnfurlingRegisterResponse>;
    /**
     * 链接增强规则调试
     *
     * @param request - DebugUnfurlingRegisterRequest
     * @returns DebugUnfurlingRegisterResponse
     */
    debugUnfurlingRegister(request: DebugUnfurlingRegisterRequest): Promise<DebugUnfurlingRegisterResponse>;
    /**
     * 删除企业文字表情
     *
     * @param request - DeleteOrgTextEmotionRequest
     * @param headers - DeleteOrgTextEmotionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteOrgTextEmotionResponse
     */
    deleteOrgTextEmotionWithOptions(request: DeleteOrgTextEmotionRequest, headers: DeleteOrgTextEmotionHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteOrgTextEmotionResponse>;
    /**
     * 删除企业文字表情
     *
     * @param request - DeleteOrgTextEmotionRequest
     * @returns DeleteOrgTextEmotionResponse
     */
    deleteOrgTextEmotion(request: DeleteOrgTextEmotionRequest): Promise<DeleteOrgTextEmotionResponse>;
    /**
     * 解散互通群
     *
     * @param request - DismissGroupConversationRequest
     * @param headers - DismissGroupConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DismissGroupConversationResponse
     */
    dismissGroupConversationWithOptions(request: DismissGroupConversationRequest, headers: DismissGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<DismissGroupConversationResponse>;
    /**
     * 解散互通群
     *
     * @param request - DismissGroupConversationRequest
     * @returns DismissGroupConversationResponse
     */
    dismissGroupConversation(request: DismissGroupConversationRequest): Promise<DismissGroupConversationResponse>;
    /**
     * 创建ToB会话地址
     *
     * @param request - GetConversationUrlRequest
     * @param headers - GetConversationUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationUrlResponse
     */
    getConversationUrlWithOptions(request: GetConversationUrlRequest, headers: GetConversationUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationUrlResponse>;
    /**
     * 创建ToB会话地址
     *
     * @param request - GetConversationUrlRequest
     * @returns GetConversationUrlResponse
     */
    getConversationUrl(request: GetConversationUrlRequest): Promise<GetConversationUrlResponse>;
    /**
     * 查询用户家校群消息(图片&视频Z&富文本)
     *
     * @param request - GetFamilySchoolConversationMsgRequest
     * @param headers - GetFamilySchoolConversationMsgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFamilySchoolConversationMsgResponse
     */
    getFamilySchoolConversationMsgWithOptions(request: GetFamilySchoolConversationMsgRequest, headers: GetFamilySchoolConversationMsgHeaders, runtime: $Util.RuntimeOptions): Promise<GetFamilySchoolConversationMsgResponse>;
    /**
     * 查询用户家校群消息(图片&视频Z&富文本)
     *
     * @param request - GetFamilySchoolConversationMsgRequest
     * @returns GetFamilySchoolConversationMsgResponse
     */
    getFamilySchoolConversationMsg(request: GetFamilySchoolConversationMsgRequest): Promise<GetFamilySchoolConversationMsgResponse>;
    /**
     * 查询用户家校群
     *
     * @param request - GetFamilySchoolConversationsRequest
     * @param headers - GetFamilySchoolConversationsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFamilySchoolConversationsResponse
     */
    getFamilySchoolConversationsWithOptions(request: GetFamilySchoolConversationsRequest, headers: GetFamilySchoolConversationsHeaders, runtime: $Util.RuntimeOptions): Promise<GetFamilySchoolConversationsResponse>;
    /**
     * 查询用户家校群
     *
     * @param request - GetFamilySchoolConversationsRequest
     * @returns GetFamilySchoolConversationsResponse
     */
    getFamilySchoolConversations(request: GetFamilySchoolConversationsRequest): Promise<GetFamilySchoolConversationsResponse>;
    /**
     * 查询企业内部群成员
     *
     * @param request - GetInnerGroupMembersRequest
     * @param headers - GetInnerGroupMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInnerGroupMembersResponse
     */
    getInnerGroupMembersWithOptions(request: GetInnerGroupMembersRequest, headers: GetInnerGroupMembersHeaders, runtime: $Util.RuntimeOptions): Promise<GetInnerGroupMembersResponse>;
    /**
     * 查询企业内部群成员
     *
     * @param request - GetInnerGroupMembersRequest
     * @returns GetInnerGroupMembersResponse
     */
    getInnerGroupMembers(request: GetInnerGroupMembersRequest): Promise<GetInnerGroupMembersResponse>;
    /**
     * 创建客联互通会话地址
     *
     * @param request - GetInterconnectionUrlRequest
     * @param headers - GetInterconnectionUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInterconnectionUrlResponse
     */
    getInterconnectionUrlWithOptions(request: GetInterconnectionUrlRequest, headers: GetInterconnectionUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetInterconnectionUrlResponse>;
    /**
     * 创建客联互通会话地址
     *
     * @param request - GetInterconnectionUrlRequest
     * @returns GetInterconnectionUrlResponse
     */
    getInterconnectionUrl(request: GetInterconnectionUrlRequest): Promise<GetInterconnectionUrlResponse>;
    /**
     * 查询最近活跃的企业内部群列表
     *
     * @param request - GetNewestInnerGroupsRequest
     * @param headers - GetNewestInnerGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetNewestInnerGroupsResponse
     */
    getNewestInnerGroupsWithOptions(request: GetNewestInnerGroupsRequest, headers: GetNewestInnerGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<GetNewestInnerGroupsResponse>;
    /**
     * 查询最近活跃的企业内部群列表
     *
     * @param request - GetNewestInnerGroupsRequest
     * @returns GetNewestInnerGroupsResponse
     */
    getNewestInnerGroups(request: GetNewestInnerGroupsRequest): Promise<GetNewestInnerGroupsResponse>;
    /**
     * 查询群简要信息
     *
     * @param request - GetSceneGroupInfoRequest
     * @param headers - GetSceneGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSceneGroupInfoResponse
     */
    getSceneGroupInfoWithOptions(request: GetSceneGroupInfoRequest, headers: GetSceneGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetSceneGroupInfoResponse>;
    /**
     * 查询群简要信息
     *
     * @param request - GetSceneGroupInfoRequest
     * @returns GetSceneGroupInfoResponse
     */
    getSceneGroupInfo(request: GetSceneGroupInfoRequest): Promise<GetSceneGroupInfoResponse>;
    /**
     * 查询群成员
     *
     * @param request - GetSceneGroupMembersRequest
     * @param headers - GetSceneGroupMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSceneGroupMembersResponse
     */
    getSceneGroupMembersWithOptions(request: GetSceneGroupMembersRequest, headers: GetSceneGroupMembersHeaders, runtime: $Util.RuntimeOptions): Promise<GetSceneGroupMembersResponse>;
    /**
     * 查询群成员
     *
     * @param request - GetSceneGroupMembersRequest
     * @returns GetSceneGroupMembersResponse
     */
    getSceneGroupMembers(request: GetSceneGroupMembersRequest): Promise<GetSceneGroupMembersResponse>;
    /**
     * 查询场景群模板消息存档能力开启状态
     *
     * @param headers - GetSceneGroupTemplateMessageOpenStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSceneGroupTemplateMessageOpenStatusResponse
     */
    getSceneGroupTemplateMessageOpenStatusWithOptions(templateId: string, headers: GetSceneGroupTemplateMessageOpenStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetSceneGroupTemplateMessageOpenStatusResponse>;
    /**
     * 查询场景群模板消息存档能力开启状态
     * @returns GetSceneGroupTemplateMessageOpenStatusResponse
     */
    getSceneGroupTemplateMessageOpenStatus(templateId: string): Promise<GetSceneGroupTemplateMessageOpenStatusResponse>;
    /**
     * 群禁言
     *
     * @param request - GroupBanWordsRequest
     * @param headers - GroupBanWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupBanWordsResponse
     */
    groupBanWordsWithOptions(request: GroupBanWordsRequest, headers: GroupBanWordsHeaders, runtime: $Util.RuntimeOptions): Promise<GroupBanWordsResponse>;
    /**
     * 群禁言
     *
     * @param request - GroupBanWordsRequest
     * @returns GroupBanWordsResponse
     */
    groupBanWords(request: GroupBanWordsRequest): Promise<GroupBanWordsResponse>;
    /**
     * 群容量扩容询价
     *
     * @param request - GroupCapacityInquiryRequest
     * @param headers - GroupCapacityInquiryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupCapacityInquiryResponse
     */
    groupCapacityInquiryWithOptions(request: GroupCapacityInquiryRequest, headers: GroupCapacityInquiryHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCapacityInquiryResponse>;
    /**
     * 群容量扩容询价
     *
     * @param request - GroupCapacityInquiryRequest
     * @returns GroupCapacityInquiryResponse
     */
    groupCapacityInquiry(request: GroupCapacityInquiryRequest): Promise<GroupCapacityInquiryResponse>;
    /**
     * 群容量扩容确认下单
     *
     * @param request - GroupCapacityOrderConfirmRequest
     * @param headers - GroupCapacityOrderConfirmHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupCapacityOrderConfirmResponse
     */
    groupCapacityOrderConfirmWithOptions(request: GroupCapacityOrderConfirmRequest, headers: GroupCapacityOrderConfirmHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCapacityOrderConfirmResponse>;
    /**
     * 群容量扩容确认下单
     *
     * @param request - GroupCapacityOrderConfirmRequest
     * @returns GroupCapacityOrderConfirmResponse
     */
    groupCapacityOrderConfirm(request: GroupCapacityOrderConfirmRequest): Promise<GroupCapacityOrderConfirmResponse>;
    /**
     * 群容量请求扩容下单
     *
     * @param request - GroupCapacityOrderPlaceRequest
     * @param headers - GroupCapacityOrderPlaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupCapacityOrderPlaceResponse
     */
    groupCapacityOrderPlaceWithOptions(request: GroupCapacityOrderPlaceRequest, headers: GroupCapacityOrderPlaceHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCapacityOrderPlaceResponse>;
    /**
     * 群容量请求扩容下单
     *
     * @param request - GroupCapacityOrderPlaceRequest
     * @returns GroupCapacityOrderPlaceResponse
     */
    groupCapacityOrderPlace(request: GroupCapacityOrderPlaceRequest): Promise<GroupCapacityOrderPlaceResponse>;
    /**
     * 根据群链接、群号等检索条件，查询群信息
     *
     * @param request - GroupManageQueryRequest
     * @param headers - GroupManageQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupManageQueryResponse
     */
    groupManageQueryWithOptions(request: GroupManageQueryRequest, headers: GroupManageQueryHeaders, runtime: $Util.RuntimeOptions): Promise<GroupManageQueryResponse>;
    /**
     * 根据群链接、群号等检索条件，查询群信息
     *
     * @param request - GroupManageQueryRequest
     * @returns GroupManageQueryResponse
     */
    groupManageQuery(request: GroupManageQueryRequest): Promise<GroupManageQueryResponse>;
    /**
     * 群管理缩容
     *
     * @param request - GroupManageReduceRequest
     * @param headers - GroupManageReduceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupManageReduceResponse
     */
    groupManageReduceWithOptions(request: GroupManageReduceRequest, headers: GroupManageReduceHeaders, runtime: $Util.RuntimeOptions): Promise<GroupManageReduceResponse>;
    /**
     * 群管理缩容
     *
     * @param request - GroupManageReduceRequest
     * @returns GroupManageReduceResponse
     */
    groupManageReduce(request: GroupManageReduceRequest): Promise<GroupManageReduceResponse>;
    /**
     * 安装机器人到组织
     *
     * @param request - InstallRobotToOrgRequest
     * @param headers - InstallRobotToOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InstallRobotToOrgResponse
     */
    installRobotToOrgWithOptions(request: InstallRobotToOrgRequest, headers: InstallRobotToOrgHeaders, runtime: $Util.RuntimeOptions): Promise<InstallRobotToOrgResponse>;
    /**
     * 安装机器人到组织
     *
     * @param request - InstallRobotToOrgRequest
     * @returns InstallRobotToOrgResponse
     */
    installRobotToOrg(request: InstallRobotToOrgRequest): Promise<InstallRobotToOrgResponse>;
    /**
     * 创建可交互式实例
     *
     * @param request - InteractiveCardCreateInstanceRequest
     * @param headers - InteractiveCardCreateInstanceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InteractiveCardCreateInstanceResponse
     */
    interactiveCardCreateInstanceWithOptions(request: InteractiveCardCreateInstanceRequest, headers: InteractiveCardCreateInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<InteractiveCardCreateInstanceResponse>;
    /**
     * 创建可交互式实例
     *
     * @param request - InteractiveCardCreateInstanceRequest
     * @returns InteractiveCardCreateInstanceResponse
     */
    interactiveCardCreateInstance(request: InteractiveCardCreateInstanceRequest): Promise<InteractiveCardCreateInstanceResponse>;
    /**
     * 查组织下所有的场景群模版列表
     *
     * @param request - ListGroupTemplatesByOrgIdRequest
     * @param headers - ListGroupTemplatesByOrgIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListGroupTemplatesByOrgIdResponse
     */
    listGroupTemplatesByOrgIdWithOptions(request: ListGroupTemplatesByOrgIdRequest, headers: ListGroupTemplatesByOrgIdHeaders, runtime: $Util.RuntimeOptions): Promise<ListGroupTemplatesByOrgIdResponse>;
    /**
     * 查组织下所有的场景群模版列表
     *
     * @param request - ListGroupTemplatesByOrgIdRequest
     * @returns ListGroupTemplatesByOrgIdResponse
     */
    listGroupTemplatesByOrgId(request: ListGroupTemplatesByOrgIdRequest): Promise<ListGroupTemplatesByOrgIdResponse>;
    /**
     * 拉取企业的所有文字表情，包含正常使用的、已经删除了的、安全审核不通过的文字表情
     *
     * @param headers - ListOrgTextEmotionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListOrgTextEmotionResponse
     */
    listOrgTextEmotionWithOptions(headers: ListOrgTextEmotionHeaders, runtime: $Util.RuntimeOptions): Promise<ListOrgTextEmotionResponse>;
    /**
     * 拉取企业的所有文字表情，包含正常使用的、已经删除了的、安全审核不通过的文字表情
     * @returns ListOrgTextEmotionResponse
     */
    listOrgTextEmotion(): Promise<ListOrgTextEmotionResponse>;
    /**
     * 根据模板id查询关联的群
     *
     * @param request - ListSceneGroupsByTemplateIdRequest
     * @param headers - ListSceneGroupsByTemplateIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSceneGroupsByTemplateIdResponse
     */
    listSceneGroupsByTemplateIdWithOptions(templateId: string, request: ListSceneGroupsByTemplateIdRequest, headers: ListSceneGroupsByTemplateIdHeaders, runtime: $Util.RuntimeOptions): Promise<ListSceneGroupsByTemplateIdResponse>;
    /**
     * 根据模板id查询关联的群
     *
     * @param request - ListSceneGroupsByTemplateIdRequest
     * @returns ListSceneGroupsByTemplateIdResponse
     */
    listSceneGroupsByTemplateId(templateId: string, request: ListSceneGroupsByTemplateIdRequest): Promise<ListSceneGroupsByTemplateIdResponse>;
    /**
     * 链接增强规则下线
     *
     * @param request - OfflineUnfurlingRegisterRequest
     * @param headers - OfflineUnfurlingRegisterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OfflineUnfurlingRegisterResponse
     */
    offlineUnfurlingRegisterWithOptions(request: OfflineUnfurlingRegisterRequest, headers: OfflineUnfurlingRegisterHeaders, runtime: $Util.RuntimeOptions): Promise<OfflineUnfurlingRegisterResponse>;
    /**
     * 链接增强规则下线
     *
     * @param request - OfflineUnfurlingRegisterRequest
     * @returns OfflineUnfurlingRegisterResponse
     */
    offlineUnfurlingRegister(request: OfflineUnfurlingRegisterRequest): Promise<OfflineUnfurlingRegisterResponse>;
    /**
     * 开放场景群新增群角色
     *
     * @param request - OpenGroupRoleAddRequest
     * @param headers - OpenGroupRoleAddHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenGroupRoleAddResponse
     */
    openGroupRoleAddWithOptions(request: OpenGroupRoleAddRequest, headers: OpenGroupRoleAddHeaders, runtime: $Util.RuntimeOptions): Promise<OpenGroupRoleAddResponse>;
    /**
     * 开放场景群新增群角色
     *
     * @param request - OpenGroupRoleAddRequest
     * @returns OpenGroupRoleAddResponse
     */
    openGroupRoleAdd(request: OpenGroupRoleAddRequest): Promise<OpenGroupRoleAddResponse>;
    /**
     * 开放场景群群角色查询
     *
     * @param request - OpenGroupRoleQueryRequest
     * @param headers - OpenGroupRoleQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenGroupRoleQueryResponse
     */
    openGroupRoleQueryWithOptions(request: OpenGroupRoleQueryRequest, headers: OpenGroupRoleQueryHeaders, runtime: $Util.RuntimeOptions): Promise<OpenGroupRoleQueryResponse>;
    /**
     * 开放场景群群角色查询
     *
     * @param request - OpenGroupRoleQueryRequest
     * @returns OpenGroupRoleQueryResponse
     */
    openGroupRoleQuery(request: OpenGroupRoleQueryRequest): Promise<OpenGroupRoleQueryResponse>;
    /**
     * 开放场景群群角色移除
     *
     * @param request - OpenGroupRoleRemoveRequest
     * @param headers - OpenGroupRoleRemoveHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenGroupRoleRemoveResponse
     */
    openGroupRoleRemoveWithOptions(request: OpenGroupRoleRemoveRequest, headers: OpenGroupRoleRemoveHeaders, runtime: $Util.RuntimeOptions): Promise<OpenGroupRoleRemoveResponse>;
    /**
     * 开放场景群群角色移除
     *
     * @param request - OpenGroupRoleRemoveRequest
     * @returns OpenGroupRoleRemoveResponse
     */
    openGroupRoleRemove(request: OpenGroupRoleRemoveRequest): Promise<OpenGroupRoleRemoveResponse>;
    /**
     * 开放场景群群角色变更
     *
     * @param request - OpenGroupRoleUpdateRequest
     * @param headers - OpenGroupRoleUpdateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenGroupRoleUpdateResponse
     */
    openGroupRoleUpdateWithOptions(request: OpenGroupRoleUpdateRequest, headers: OpenGroupRoleUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<OpenGroupRoleUpdateResponse>;
    /**
     * 开放场景群群角色变更
     *
     * @param request - OpenGroupRoleUpdateRequest
     * @returns OpenGroupRoleUpdateResponse
     */
    openGroupRoleUpdate(request: OpenGroupRoleUpdateRequest): Promise<OpenGroupRoleUpdateResponse>;
    /**
     * 开放场景群群成员的群角色信息查询
     *
     * @param request - OpenGroupUserRoleQueryRequest
     * @param headers - OpenGroupUserRoleQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenGroupUserRoleQueryResponse
     */
    openGroupUserRoleQueryWithOptions(request: OpenGroupUserRoleQueryRequest, headers: OpenGroupUserRoleQueryHeaders, runtime: $Util.RuntimeOptions): Promise<OpenGroupUserRoleQueryResponse>;
    /**
     * 开放场景群群成员的群角色信息查询
     *
     * @param request - OpenGroupUserRoleQueryRequest
     * @returns OpenGroupUserRoleQueryResponse
     */
    openGroupUserRoleQuery(request: OpenGroupUserRoleQueryRequest): Promise<OpenGroupUserRoleQueryResponse>;
    /**
     * 内部群转部门群
     *
     * @param request - OpenInnerGroupTransferToDeptGroupRequest
     * @param headers - OpenInnerGroupTransferToDeptGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenInnerGroupTransferToDeptGroupResponse
     */
    openInnerGroupTransferToDeptGroupWithOptions(request: OpenInnerGroupTransferToDeptGroupRequest, headers: OpenInnerGroupTransferToDeptGroupHeaders, runtime: $Util.RuntimeOptions): Promise<OpenInnerGroupTransferToDeptGroupResponse>;
    /**
     * 内部群转部门群
     *
     * @param request - OpenInnerGroupTransferToDeptGroupRequest
     * @returns OpenInnerGroupTransferToDeptGroupResponse
     */
    openInnerGroupTransferToDeptGroup(request: OpenInnerGroupTransferToDeptGroupRequest): Promise<OpenInnerGroupTransferToDeptGroupResponse>;
    /**
     * 群搜索
     *
     * @param request - OpenSearchGroupListRequest
     * @param headers - OpenSearchGroupListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenSearchGroupListResponse
     */
    openSearchGroupListWithOptions(request: OpenSearchGroupListRequest, headers: OpenSearchGroupListHeaders, runtime: $Util.RuntimeOptions): Promise<OpenSearchGroupListResponse>;
    /**
     * 群搜索
     *
     * @param request - OpenSearchGroupListRequest
     * @returns OpenSearchGroupListResponse
     */
    openSearchGroupList(request: OpenSearchGroupListRequest): Promise<OpenSearchGroupListResponse>;
    /**
     * 以个人身份发送卡片消息
     *
     * @param request - OpenUserSendCardMessageRequest
     * @param headers - OpenUserSendCardMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenUserSendCardMessageResponse
     */
    openUserSendCardMessageWithOptions(request: OpenUserSendCardMessageRequest, headers: OpenUserSendCardMessageHeaders, runtime: $Util.RuntimeOptions): Promise<OpenUserSendCardMessageResponse>;
    /**
     * 以个人身份发送卡片消息
     *
     * @param request - OpenUserSendCardMessageRequest
     * @returns OpenUserSendCardMessageResponse
     */
    openUserSendCardMessage(request: OpenUserSendCardMessageRequest): Promise<OpenUserSendCardMessageResponse>;
    /**
     * 以用户身份发送卡片消息
     *
     * @param request - PersonalSendCardMessageRequest
     * @param headers - PersonalSendCardMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PersonalSendCardMessageResponse
     */
    personalSendCardMessageWithOptions(request: PersonalSendCardMessageRequest, headers: PersonalSendCardMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PersonalSendCardMessageResponse>;
    /**
     * 以用户身份发送卡片消息
     *
     * @param request - PersonalSendCardMessageRequest
     * @returns PersonalSendCardMessageResponse
     */
    personalSendCardMessage(request: PersonalSendCardMessageRequest): Promise<PersonalSendCardMessageResponse>;
    /**
     * 成员授权场景下查询群信息
     *
     * @param request - QueryGroupInfoByMemberAuthRequest
     * @param headers - QueryGroupInfoByMemberAuthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryGroupInfoByMemberAuthResponse
     */
    queryGroupInfoByMemberAuthWithOptions(request: QueryGroupInfoByMemberAuthRequest, headers: QueryGroupInfoByMemberAuthHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupInfoByMemberAuthResponse>;
    /**
     * 成员授权场景下查询群信息
     *
     * @param request - QueryGroupInfoByMemberAuthRequest
     * @returns QueryGroupInfoByMemberAuthResponse
     */
    queryGroupInfoByMemberAuth(request: QueryGroupInfoByMemberAuthRequest): Promise<QueryGroupInfoByMemberAuthResponse>;
    /**
     * 查询群成员列表
     *
     * @param request - QueryGroupMemberRequest
     * @param headers - QueryGroupMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryGroupMemberResponse
     */
    queryGroupMemberWithOptions(request: QueryGroupMemberRequest, headers: QueryGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMemberResponse>;
    /**
     * 查询群成员列表
     *
     * @param request - QueryGroupMemberRequest
     * @returns QueryGroupMemberResponse
     */
    queryGroupMember(request: QueryGroupMemberRequest): Promise<QueryGroupMemberResponse>;
    /**
     * 成员授权场景下查询群成员
     *
     * @param request - QueryGroupMemberByMemberAuthRequest
     * @param headers - QueryGroupMemberByMemberAuthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryGroupMemberByMemberAuthResponse
     */
    queryGroupMemberByMemberAuthWithOptions(request: QueryGroupMemberByMemberAuthRequest, headers: QueryGroupMemberByMemberAuthHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMemberByMemberAuthResponse>;
    /**
     * 成员授权场景下查询群成员
     *
     * @param request - QueryGroupMemberByMemberAuthRequest
     * @returns QueryGroupMemberByMemberAuthResponse
     */
    queryGroupMemberByMemberAuth(request: QueryGroupMemberByMemberAuthRequest): Promise<QueryGroupMemberByMemberAuthResponse>;
    /**
     * 查询群禁言状态
     *
     * @param request - QueryGroupMuteStatusRequest
     * @param headers - QueryGroupMuteStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryGroupMuteStatusResponse
     */
    queryGroupMuteStatusWithOptions(request: QueryGroupMuteStatusRequest, headers: QueryGroupMuteStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMuteStatusResponse>;
    /**
     * 查询群禁言状态
     *
     * @param request - QueryGroupMuteStatusRequest
     * @returns QueryGroupMuteStatusResponse
     */
    queryGroupMuteStatus(request: QueryGroupMuteStatusRequest): Promise<QueryGroupMuteStatusResponse>;
    /**
     * 读取群成员列表
     *
     * @param request - QueryInnerGroupMemberListRequest
     * @param headers - QueryInnerGroupMemberListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryInnerGroupMemberListResponse
     */
    queryInnerGroupMemberListWithOptions(request: QueryInnerGroupMemberListRequest, headers: QueryInnerGroupMemberListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryInnerGroupMemberListResponse>;
    /**
     * 读取群成员列表
     *
     * @param request - QueryInnerGroupMemberListRequest
     * @returns QueryInnerGroupMemberListResponse
     */
    queryInnerGroupMemberList(request: QueryInnerGroupMemberListRequest): Promise<QueryInnerGroupMemberListResponse>;
    /**
     * 查询最近活跃的企业内部群列表
     *
     * @param request - QueryInnerGroupRecentListRequest
     * @param headers - QueryInnerGroupRecentListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryInnerGroupRecentListResponse
     */
    queryInnerGroupRecentListWithOptions(request: QueryInnerGroupRecentListRequest, headers: QueryInnerGroupRecentListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryInnerGroupRecentListResponse>;
    /**
     * 查询最近活跃的企业内部群列表
     *
     * @param request - QueryInnerGroupRecentListRequest
     * @returns QueryInnerGroupRecentListResponse
     */
    queryInnerGroupRecentList(request: QueryInnerGroupRecentListRequest): Promise<QueryInnerGroupRecentListResponse>;
    /**
     * 查询群内具有指定群角色的所有群成员
     *
     * @param request - QueryMembersOfGroupRoleRequest
     * @param headers - QueryMembersOfGroupRoleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMembersOfGroupRoleResponse
     */
    queryMembersOfGroupRoleWithOptions(request: QueryMembersOfGroupRoleRequest, headers: QueryMembersOfGroupRoleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMembersOfGroupRoleResponse>;
    /**
     * 查询群内具有指定群角色的所有群成员
     *
     * @param request - QueryMembersOfGroupRoleRequest
     * @returns QueryMembersOfGroupRoleResponse
     */
    queryMembersOfGroupRole(request: QueryMembersOfGroupRoleRequest): Promise<QueryMembersOfGroupRoleResponse>;
    /**
     * 根据openTaskId查询消息发送结果
     *
     * @param request - QueryMessageSendResultRequest
     * @param headers - QueryMessageSendResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryMessageSendResultResponse
     */
    queryMessageSendResultWithOptions(request: QueryMessageSendResultRequest, headers: QueryMessageSendResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMessageSendResultResponse>;
    /**
     * 根据openTaskId查询消息发送结果
     *
     * @param request - QueryMessageSendResultRequest
     * @returns QueryMessageSendResultResponse
     */
    queryMessageSendResult(request: QueryMessageSendResultRequest): Promise<QueryMessageSendResultResponse>;
    /**
     * 根据单聊会话及发送方获取接收方用户信息
     *
     * @param request - QueryOpenConversationReceiveUserRequest
     * @param headers - QueryOpenConversationReceiveUserHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryOpenConversationReceiveUserResponse
     */
    queryOpenConversationReceiveUserWithOptions(request: QueryOpenConversationReceiveUserRequest, headers: QueryOpenConversationReceiveUserHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOpenConversationReceiveUserResponse>;
    /**
     * 根据单聊会话及发送方获取接收方用户信息
     *
     * @param request - QueryOpenConversationReceiveUserRequest
     * @returns QueryOpenConversationReceiveUserResponse
     */
    queryOpenConversationReceiveUser(request: QueryOpenConversationReceiveUserRequest): Promise<QueryOpenConversationReceiveUserResponse>;
    /**
     * 获取群基础信息
     *
     * @param request - QueryOpenGroupBaseInfoRequest
     * @param headers - QueryOpenGroupBaseInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryOpenGroupBaseInfoResponse
     */
    queryOpenGroupBaseInfoWithOptions(request: QueryOpenGroupBaseInfoRequest, headers: QueryOpenGroupBaseInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOpenGroupBaseInfoResponse>;
    /**
     * 获取群基础信息
     *
     * @param request - QueryOpenGroupBaseInfoRequest
     * @returns QueryOpenGroupBaseInfoResponse
     */
    queryOpenGroupBaseInfo(request: QueryOpenGroupBaseInfoRequest): Promise<QueryOpenGroupBaseInfoResponse>;
    /**
     * 用户身份查询消息已读未读状态
     *
     * @param request - QueryPersonalMessageReadStatusRequest
     * @param headers - QueryPersonalMessageReadStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPersonalMessageReadStatusResponse
     */
    queryPersonalMessageReadStatusWithOptions(request: QueryPersonalMessageReadStatusRequest, headers: QueryPersonalMessageReadStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPersonalMessageReadStatusResponse>;
    /**
     * 用户身份查询消息已读未读状态
     *
     * @param request - QueryPersonalMessageReadStatusRequest
     * @returns QueryPersonalMessageReadStatusResponse
     */
    queryPersonalMessageReadStatus(request: QueryPersonalMessageReadStatusRequest): Promise<QueryPersonalMessageReadStatusResponse>;
    /**
     * 获取最近联系人及群组
     *
     * @param request - QueryRecentConversationsRequest
     * @param headers - QueryRecentConversationsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryRecentConversationsResponse
     */
    queryRecentConversationsWithOptions(request: QueryRecentConversationsRequest, headers: QueryRecentConversationsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRecentConversationsResponse>;
    /**
     * 获取最近联系人及群组
     *
     * @param request - QueryRecentConversationsRequest
     * @returns QueryRecentConversationsResponse
     */
    queryRecentConversations(request: QueryRecentConversationsRequest): Promise<QueryRecentConversationsResponse>;
    /**
     * 查询群内群模板机器人
     *
     * @param request - QuerySceneGroupTemplateRobotRequest
     * @param headers - QuerySceneGroupTemplateRobotHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySceneGroupTemplateRobotResponse
     */
    querySceneGroupTemplateRobotWithOptions(request: QuerySceneGroupTemplateRobotRequest, headers: QuerySceneGroupTemplateRobotHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySceneGroupTemplateRobotResponse>;
    /**
     * 查询群内群模板机器人
     *
     * @param request - QuerySceneGroupTemplateRobotRequest
     * @returns QuerySceneGroupTemplateRobotResponse
     */
    querySceneGroupTemplateRobot(request: QuerySceneGroupTemplateRobotRequest): Promise<QuerySceneGroupTemplateRobotResponse>;
    /**
     * 批量查询群信息
     *
     * @param request - QuerySingleGroupRequest
     * @param headers - QuerySingleGroupHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySingleGroupResponse
     */
    querySingleGroupWithOptions(request: QuerySingleGroupRequest, headers: QuerySingleGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySingleGroupResponse>;
    /**
     * 批量查询群信息
     *
     * @param request - QuerySingleGroupRequest
     * @returns QuerySingleGroupResponse
     */
    querySingleGroup(request: QuerySingleGroupRequest): Promise<QuerySingleGroupResponse>;
    /**
     * 批量查询未读消息数
     *
     * @param request - QueryUnReadMessageRequest
     * @param headers - QueryUnReadMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUnReadMessageResponse
     */
    queryUnReadMessageWithOptions(request: QueryUnReadMessageRequest, headers: QueryUnReadMessageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUnReadMessageResponse>;
    /**
     * 批量查询未读消息数
     *
     * @param request - QueryUnReadMessageRequest
     * @returns QueryUnReadMessageResponse
     */
    queryUnReadMessage(request: QueryUnReadMessageRequest): Promise<QueryUnReadMessageResponse>;
    /**
     * 查询链接查询链接增强注册信息创建者
     *
     * @param request - QueryUnfurlingRegisterCreatorRequest
     * @param headers - QueryUnfurlingRegisterCreatorHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUnfurlingRegisterCreatorResponse
     */
    queryUnfurlingRegisterCreatorWithOptions(request: QueryUnfurlingRegisterCreatorRequest, headers: QueryUnfurlingRegisterCreatorHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUnfurlingRegisterCreatorResponse>;
    /**
     * 查询链接查询链接增强注册信息创建者
     *
     * @param request - QueryUnfurlingRegisterCreatorRequest
     * @returns QueryUnfurlingRegisterCreatorResponse
     */
    queryUnfurlingRegisterCreator(request: QueryUnfurlingRegisterCreatorRequest): Promise<QueryUnfurlingRegisterCreatorResponse>;
    /**
     * 查询链接增强注册信息列表
     *
     * @param request - QueryUnfurlingRegisterInfoRequest
     * @param headers - QueryUnfurlingRegisterInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUnfurlingRegisterInfoResponse
     */
    queryUnfurlingRegisterInfoWithOptions(request: QueryUnfurlingRegisterInfoRequest, headers: QueryUnfurlingRegisterInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUnfurlingRegisterInfoResponse>;
    /**
     * 查询链接增强注册信息列表
     *
     * @param request - QueryUnfurlingRegisterInfoRequest
     * @returns QueryUnfurlingRegisterInfoResponse
     */
    queryUnfurlingRegisterInfo(request: QueryUnfurlingRegisterInfoRequest): Promise<QueryUnfurlingRegisterInfoResponse>;
    /**
     * 链接增强规则发布
     *
     * @param request - ReleaseUnfurlingRegisterRequest
     * @param headers - ReleaseUnfurlingRegisterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReleaseUnfurlingRegisterResponse
     */
    releaseUnfurlingRegisterWithOptions(request: ReleaseUnfurlingRegisterRequest, headers: ReleaseUnfurlingRegisterHeaders, runtime: $Util.RuntimeOptions): Promise<ReleaseUnfurlingRegisterResponse>;
    /**
     * 链接增强规则发布
     *
     * @param request - ReleaseUnfurlingRegisterRequest
     * @returns ReleaseUnfurlingRegisterResponse
     */
    releaseUnfurlingRegister(request: ReleaseUnfurlingRegisterRequest): Promise<ReleaseUnfurlingRegisterResponse>;
    /**
     * 移除会话机器人
     *
     * @param request - RemoveRobotFromConversationRequest
     * @param headers - RemoveRobotFromConversationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveRobotFromConversationResponse
     */
    removeRobotFromConversationWithOptions(request: RemoveRobotFromConversationRequest, headers: RemoveRobotFromConversationHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveRobotFromConversationResponse>;
    /**
     * 移除会话机器人
     *
     * @param request - RemoveRobotFromConversationRequest
     * @returns RemoveRobotFromConversationResponse
     */
    removeRobotFromConversation(request: RemoveRobotFromConversationRequest): Promise<RemoveRobotFromConversationResponse>;
    /**
     * 根据关键词搜索企业内部群
     *
     * @param request - SearchInnerGroupsRequest
     * @param headers - SearchInnerGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchInnerGroupsResponse
     */
    searchInnerGroupsWithOptions(request: SearchInnerGroupsRequest, headers: SearchInnerGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<SearchInnerGroupsResponse>;
    /**
     * 根据关键词搜索企业内部群
     *
     * @param request - SearchInnerGroupsRequest
     * @returns SearchInnerGroupsResponse
     */
    searchInnerGroups(request: SearchInnerGroupsRequest): Promise<SearchInnerGroupsResponse>;
    /**
     * 发送可交互式动态卡片
     *
     * @param request - SendInteractiveCardRequest
     * @param headers - SendInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendInteractiveCardResponse
     */
    sendInteractiveCardWithOptions(request: SendInteractiveCardRequest, headers: SendInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendInteractiveCardResponse>;
    /**
     * 发送可交互式动态卡片
     *
     * @param request - SendInteractiveCardRequest
     * @returns SendInteractiveCardResponse
     */
    sendInteractiveCard(request: SendInteractiveCardRequest): Promise<SendInteractiveCardResponse>;
    /**
     * 人与人单聊发送可交互式动态卡片
     *
     * @param request - SendOTOInteractiveCardRequest
     * @param headers - SendOTOInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendOTOInteractiveCardResponse
     */
    sendOTOInteractiveCardWithOptions(request: SendOTOInteractiveCardRequest, headers: SendOTOInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendOTOInteractiveCardResponse>;
    /**
     * 人与人单聊发送可交互式动态卡片
     *
     * @param request - SendOTOInteractiveCardRequest
     * @returns SendOTOInteractiveCardResponse
     */
    sendOTOInteractiveCard(request: SendOTOInteractiveCardRequest): Promise<SendOTOInteractiveCardResponse>;
    /**
     * 委托权限发消息
     *
     * @param request - SendPersonalMessageRequest
     * @param headers - SendPersonalMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendPersonalMessageResponse
     */
    sendPersonalMessageWithOptions(request: SendPersonalMessageRequest, headers: SendPersonalMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendPersonalMessageResponse>;
    /**
     * 委托权限发消息
     *
     * @param request - SendPersonalMessageRequest
     * @returns SendPersonalMessageResponse
     */
    sendPersonalMessage(request: SendPersonalMessageRequest): Promise<SendPersonalMessageResponse>;
    /**
     * 机器人发送互动卡片（普通版）
     *
     * @param request - SendRobotInteractiveCardRequest
     * @param headers - SendRobotInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendRobotInteractiveCardResponse
     */
    sendRobotInteractiveCardWithOptions(request: SendRobotInteractiveCardRequest, headers: SendRobotInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendRobotInteractiveCardResponse>;
    /**
     * 机器人发送互动卡片（普通版）
     *
     * @param request - SendRobotInteractiveCardRequest
     * @returns SendRobotInteractiveCardResponse
     */
    sendRobotInteractiveCard(request: SendRobotInteractiveCardRequest): Promise<SendRobotInteractiveCardResponse>;
    /**
     * 机器人发送消息
     *
     * @param request - SendRobotMessageRequest
     * @param headers - SendRobotMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendRobotMessageResponse
     */
    sendRobotMessageWithOptions(request: SendRobotMessageRequest, headers: SendRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendRobotMessageResponse>;
    /**
     * 机器人发送消息
     *
     * @param request - SendRobotMessageRequest
     * @returns SendRobotMessageResponse
     */
    sendRobotMessage(request: SendRobotMessageRequest): Promise<SendRobotMessageResponse>;
    /**
     * 发送模板响应式可交互式卡片
     *
     * @param request - SendTemplateInteractiveCardRequest
     * @param headers - SendTemplateInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendTemplateInteractiveCardResponse
     */
    sendTemplateInteractiveCardWithOptions(request: SendTemplateInteractiveCardRequest, headers: SendTemplateInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendTemplateInteractiveCardResponse>;
    /**
     * 发送模板响应式可交互式卡片
     *
     * @param request - SendTemplateInteractiveCardRequest
     * @returns SendTemplateInteractiveCardResponse
     */
    sendTemplateInteractiveCard(request: SendTemplateInteractiveCardRequest): Promise<SendTemplateInteractiveCardResponse>;
    /**
     * 设置侧边栏
     *
     * @param request - SetRightPanelRequest
     * @param headers - SetRightPanelHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetRightPanelResponse
     */
    setRightPanelWithOptions(request: SetRightPanelRequest, headers: SetRightPanelHeaders, runtime: $Util.RuntimeOptions): Promise<SetRightPanelResponse>;
    /**
     * 设置侧边栏
     *
     * @param request - SetRightPanelRequest
     * @returns SetRightPanelResponse
     */
    setRightPanel(request: SetRightPanelRequest): Promise<SetRightPanelResponse>;
    /**
     * 钉钉吊顶卡片关闭
     *
     * @param request - TopboxCloseRequest
     * @param headers - TopboxCloseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TopboxCloseResponse
     */
    topboxCloseWithOptions(request: TopboxCloseRequest, headers: TopboxCloseHeaders, runtime: $Util.RuntimeOptions): Promise<TopboxCloseResponse>;
    /**
     * 钉钉吊顶卡片关闭
     *
     * @param request - TopboxCloseRequest
     * @returns TopboxCloseResponse
     */
    topboxClose(request: TopboxCloseRequest): Promise<TopboxCloseResponse>;
    /**
     * 钉钉吊顶卡片开启
     *
     * @param request - TopboxOpenRequest
     * @param headers - TopboxOpenHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TopboxOpenResponse
     */
    topboxOpenWithOptions(request: TopboxOpenRequest, headers: TopboxOpenHeaders, runtime: $Util.RuntimeOptions): Promise<TopboxOpenResponse>;
    /**
     * 钉钉吊顶卡片开启
     *
     * @param request - TopboxOpenRequest
     * @returns TopboxOpenResponse
     */
    topboxOpen(request: TopboxOpenRequest): Promise<TopboxOpenResponse>;
    /**
     * 修改群头像
     *
     * @param request - UpdateGroupAvatarRequest
     * @param headers - UpdateGroupAvatarHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateGroupAvatarResponse
     */
    updateGroupAvatarWithOptions(request: UpdateGroupAvatarRequest, headers: UpdateGroupAvatarHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupAvatarResponse>;
    /**
     * 修改群头像
     *
     * @param request - UpdateGroupAvatarRequest
     * @returns UpdateGroupAvatarResponse
     */
    updateGroupAvatar(request: UpdateGroupAvatarRequest): Promise<UpdateGroupAvatarResponse>;
    /**
     * 修改群名称
     *
     * @param request - UpdateGroupNameRequest
     * @param headers - UpdateGroupNameHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateGroupNameResponse
     */
    updateGroupNameWithOptions(request: UpdateGroupNameRequest, headers: UpdateGroupNameHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupNameResponse>;
    /**
     * 修改群名称
     *
     * @param request - UpdateGroupNameRequest
     * @returns UpdateGroupNameResponse
     */
    updateGroupName(request: UpdateGroupNameRequest): Promise<UpdateGroupNameResponse>;
    /**
     * 设置场景群权限项
     *
     * @param request - UpdateGroupPermissionRequest
     * @param headers - UpdateGroupPermissionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateGroupPermissionResponse
     */
    updateGroupPermissionWithOptions(request: UpdateGroupPermissionRequest, headers: UpdateGroupPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupPermissionResponse>;
    /**
     * 设置场景群权限项
     *
     * @param request - UpdateGroupPermissionRequest
     * @returns UpdateGroupPermissionResponse
     */
    updateGroupPermission(request: UpdateGroupPermissionRequest): Promise<UpdateGroupPermissionResponse>;
    /**
     * 更新群管理员
     *
     * @param request - UpdateGroupSubAdminRequest
     * @param headers - UpdateGroupSubAdminHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateGroupSubAdminResponse
     */
    updateGroupSubAdminWithOptions(request: UpdateGroupSubAdminRequest, headers: UpdateGroupSubAdminHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupSubAdminResponse>;
    /**
     * 更新群管理员
     *
     * @param request - UpdateGroupSubAdminRequest
     * @returns UpdateGroupSubAdminResponse
     */
    updateGroupSubAdmin(request: UpdateGroupSubAdminRequest): Promise<UpdateGroupSubAdminResponse>;
    /**
     * 更新可交互式动态卡片
     *
     * @param request - UpdateInteractiveCardRequest
     * @param headers - UpdateInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateInteractiveCardResponse
     */
    updateInteractiveCardWithOptions(request: UpdateInteractiveCardRequest, headers: UpdateInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInteractiveCardResponse>;
    /**
     * 更新可交互式动态卡片
     *
     * @param request - UpdateInteractiveCardRequest
     * @returns UpdateInteractiveCardResponse
     */
    updateInteractiveCard(request: UpdateInteractiveCardRequest): Promise<UpdateInteractiveCardResponse>;
    /**
     * 设置群成员禁言状态
     *
     * @param request - UpdateMemberBanWordsRequest
     * @param headers - UpdateMemberBanWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateMemberBanWordsResponse
     */
    updateMemberBanWordsWithOptions(request: UpdateMemberBanWordsRequest, headers: UpdateMemberBanWordsHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMemberBanWordsResponse>;
    /**
     * 设置群成员禁言状态
     *
     * @param request - UpdateMemberBanWordsRequest
     * @returns UpdateMemberBanWordsResponse
     */
    updateMemberBanWords(request: UpdateMemberBanWordsRequest): Promise<UpdateMemberBanWordsResponse>;
    /**
     * 更新群成员的群昵称
     *
     * @param request - UpdateMemberGroupNickRequest
     * @param headers - UpdateMemberGroupNickHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateMemberGroupNickResponse
     */
    updateMemberGroupNickWithOptions(request: UpdateMemberGroupNickRequest, headers: UpdateMemberGroupNickHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMemberGroupNickResponse>;
    /**
     * 更新群成员的群昵称
     *
     * @param request - UpdateMemberGroupNickRequest
     * @returns UpdateMemberGroupNickResponse
     */
    updateMemberGroupNick(request: UpdateMemberGroupNickRequest): Promise<UpdateMemberGroupNickResponse>;
    /**
     * 修改组织里的机器人
     *
     * @param request - UpdateRobotInOrgRequest
     * @param headers - UpdateRobotInOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRobotInOrgResponse
     */
    updateRobotInOrgWithOptions(request: UpdateRobotInOrgRequest, headers: UpdateRobotInOrgHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRobotInOrgResponse>;
    /**
     * 修改组织里的机器人
     *
     * @param request - UpdateRobotInOrgRequest
     * @returns UpdateRobotInOrgResponse
     */
    updateRobotInOrg(request: UpdateRobotInOrgRequest): Promise<UpdateRobotInOrgResponse>;
    /**
     * 机器人更新可交互式卡片(个人、企业)
     *
     * @param request - UpdateRobotInteractiveCardRequest
     * @param headers - UpdateRobotInteractiveCardHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRobotInteractiveCardResponse
     */
    updateRobotInteractiveCardWithOptions(request: UpdateRobotInteractiveCardRequest, headers: UpdateRobotInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRobotInteractiveCardResponse>;
    /**
     * 机器人更新可交互式卡片(个人、企业)
     *
     * @param request - UpdateRobotInteractiveCardRequest
     * @returns UpdateRobotInteractiveCardResponse
     */
    updateRobotInteractiveCard(request: UpdateRobotInteractiveCardRequest): Promise<UpdateRobotInteractiveCardResponse>;
    /**
     * 修改场景群模板消息存档能力开启状态
     *
     * @param request - UpdateSceneGroupTemplateMessageOpenStatusRequest
     * @param headers - UpdateSceneGroupTemplateMessageOpenStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateSceneGroupTemplateMessageOpenStatusResponse
     */
    updateSceneGroupTemplateMessageOpenStatusWithOptions(request: UpdateSceneGroupTemplateMessageOpenStatusRequest, headers: UpdateSceneGroupTemplateMessageOpenStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSceneGroupTemplateMessageOpenStatusResponse>;
    /**
     * 修改场景群模板消息存档能力开启状态
     *
     * @param request - UpdateSceneGroupTemplateMessageOpenStatusRequest
     * @returns UpdateSceneGroupTemplateMessageOpenStatusResponse
     */
    updateSceneGroupTemplateMessageOpenStatus(request: UpdateSceneGroupTemplateMessageOpenStatusRequest): Promise<UpdateSceneGroupTemplateMessageOpenStatusResponse>;
    /**
     * 设置群成员的群角色
     *
     * @param request - UpdateTheGroupRolesOfGroupMemberRequest
     * @param headers - UpdateTheGroupRolesOfGroupMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTheGroupRolesOfGroupMemberResponse
     */
    updateTheGroupRolesOfGroupMemberWithOptions(request: UpdateTheGroupRolesOfGroupMemberRequest, headers: UpdateTheGroupRolesOfGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTheGroupRolesOfGroupMemberResponse>;
    /**
     * 设置群成员的群角色
     *
     * @param request - UpdateTheGroupRolesOfGroupMemberRequest
     * @returns UpdateTheGroupRolesOfGroupMemberResponse
     */
    updateTheGroupRolesOfGroupMember(request: UpdateTheGroupRolesOfGroupMemberRequest): Promise<UpdateTheGroupRolesOfGroupMemberResponse>;
    /**
     * 编辑链接增强注册规则
     *
     * @param request - UpdateUnfurlingRegisterRequest
     * @param headers - UpdateUnfurlingRegisterHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUnfurlingRegisterResponse
     */
    updateUnfurlingRegisterWithOptions(request: UpdateUnfurlingRegisterRequest, headers: UpdateUnfurlingRegisterHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUnfurlingRegisterResponse>;
    /**
     * 编辑链接增强注册规则
     *
     * @param request - UpdateUnfurlingRegisterRequest
     * @returns UpdateUnfurlingRegisterResponse
     */
    updateUnfurlingRegister(request: UpdateUnfurlingRegisterRequest): Promise<UpdateUnfurlingRegisterResponse>;
    /**
     * 链接增强规则状态更新
     *
     * @param request - UpdateUnfurlingRegisterStatusRequest
     * @param headers - UpdateUnfurlingRegisterStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUnfurlingRegisterStatusResponse
     */
    updateUnfurlingRegisterStatusWithOptions(request: UpdateUnfurlingRegisterStatusRequest, headers: UpdateUnfurlingRegisterStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUnfurlingRegisterStatusResponse>;
    /**
     * 链接增强规则状态更新
     *
     * @param request - UpdateUnfurlingRegisterStatusRequest
     * @returns UpdateUnfurlingRegisterStatusResponse
     */
    updateUnfurlingRegisterStatus(request: UpdateUnfurlingRegisterStatusRequest): Promise<UpdateUnfurlingRegisterStatusResponse>;
    /**
     * 添加群成员
     *
     * @param request - AddGroupMemberRequest
     * @param headers - AddGroupMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddGroupMemberResponse
     */
    addGroupMemberWithOptions(request: AddGroupMemberRequest, headers: AddGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<AddGroupMemberResponse>;
    /**
     * 添加群成员
     *
     * @param request - AddGroupMemberRequest
     * @returns AddGroupMemberResponse
     */
    addGroupMember(request: AddGroupMemberRequest): Promise<AddGroupMemberResponse>;
    /**
     * 移除群成员
     *
     * @param request - RemoveGroupMemberRequest
     * @param headers - RemoveGroupMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveGroupMemberResponse
     */
    removeGroupMemberWithOptions(request: RemoveGroupMemberRequest, headers: RemoveGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveGroupMemberResponse>;
    /**
     * 移除群成员
     *
     * @param request - RemoveGroupMemberRequest
     * @returns RemoveGroupMemberResponse
     */
    removeGroupMember(request: RemoveGroupMemberRequest): Promise<RemoveGroupMemberResponse>;
    /**
     * 发送ToC消息
     *
     * @param request - SendDingMessageRequest
     * @param headers - SendDingMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendDingMessageResponse
     */
    sendDingMessageWithOptions(request: SendDingMessageRequest, headers: SendDingMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendDingMessageResponse>;
    /**
     * 发送ToC消息
     *
     * @param request - SendDingMessageRequest
     * @returns SendDingMessageResponse
     */
    sendDingMessage(request: SendDingMessageRequest): Promise<SendDingMessageResponse>;
    /**
     * 发送ToB消息
     *
     * @param request - SendMessageRequest
     * @param headers - SendMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendMessageResponse
     */
    sendMessageWithOptions(request: SendMessageRequest, headers: SendMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendMessageResponse>;
    /**
     * 发送ToB消息
     *
     * @param request - SendMessageRequest
     * @returns SendMessageResponse
     */
    sendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
}
