"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateResumeResponseBodyResult = exports.CreateResumeRequestResumeDataVO = exports.CreateResumeRequestResumeDataVOWorkExperiences = exports.CreateResumeRequestResumeDataVOWorkExperiencesResumePrivacy = exports.CreateResumeRequestResumeDataVOTags = exports.CreateResumeRequestResumeDataVOProjectExperiences = exports.CreateResumeRequestResumeDataVOPersonalHonors = exports.CreateResumeRequestResumeDataVOJobExpects = exports.CreateResumeRequestResumeDataVOJobExpectsOtherCityList = exports.CreateResumeRequestResumeDataVOJobExpectsJobList = exports.CreateResumeRequestResumeDataVOJobExpectsIndustryList = exports.CreateResumeRequestResumeDataVOJobExpectsCityList = exports.CreateResumeRequestResumeDataVOCertificates = exports.CreateResumeRequestResumeDataVOBaseInfo = exports.PostResumeResponse = exports.PostResumeResponseBody = exports.PostResumeRequest = exports.PostResumeHeaders = exports.CreateResumeResponse = exports.CreateResumeResponseBody = exports.CreateResumeRequest = exports.CreateResumeHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateResumeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeHeaders = CreateResumeHeaders;
class CreateResumeRequest extends $tea.Model {
    static names() {
        return {
            bizCode: 'bizCode',
            ext: 'ext',
            resumeDataVO: 'resumeDataVO',
            scene: 'scene',
            types: 'types',
            userIdentify: 'userIdentify',
        };
    }
    static types() {
        return {
            bizCode: 'string',
            ext: 'string',
            resumeDataVO: CreateResumeRequestResumeDataVO,
            scene: 'string',
            types: { 'type': 'array', 'itemType': 'string' },
            userIdentify: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequest = CreateResumeRequest;
class CreateResumeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateResumeResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeResponseBody = CreateResumeResponseBody;
class CreateResumeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateResumeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeResponse = CreateResumeResponse;
class PostResumeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostResumeHeaders = PostResumeHeaders;
class PostResumeRequest extends $tea.Model {
    static names() {
        return {
            jobId: 'jobId',
            userIdentify: 'userIdentify',
        };
    }
    static types() {
        return {
            jobId: 'number',
            userIdentify: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostResumeRequest = PostResumeRequest;
class PostResumeResponseBody extends $tea.Model {
    static names() {
        return {
            jobId: 'jobId',
            userIdentify: 'userIdentify',
        };
    }
    static types() {
        return {
            jobId: 'number',
            userIdentify: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostResumeResponseBody = PostResumeResponseBody;
class PostResumeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PostResumeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostResumeResponse = PostResumeResponse;
class CreateResumeRequestResumeDataVOBaseInfo extends $tea.Model {
    static names() {
        return {
            age: 'age',
            avatar: 'avatar',
            beginWorkTime: 'beginWorkTime',
            birthday: 'birthday',
            candidateBackground: 'candidateBackground',
            dingTalk: 'dingTalk',
            email: 'email',
            englishName: 'englishName',
            ethnicity: 'ethnicity',
            gaduateTime: 'gaduateTime',
            highestAcademic: 'highestAcademic',
            highestEducation: 'highestEducation',
            identify: 'identify',
            industry: 'industry',
            industryCode: 'industryCode',
            jobTitle: 'jobTitle',
            lastSchoolName: 'lastSchoolName',
            married: 'married',
            mbtiType: 'mbtiType',
            name: 'name',
            nationality: 'nationality',
            nativePlace: 'nativePlace',
            nativePlaceCode: 'nativePlaceCode',
            nowLocation: 'nowLocation',
            nowLocationCode: 'nowLocationCode',
            parentIndustry: 'parentIndustry',
            parentIndustryCode: 'parentIndustryCode',
            personalHonor: 'personalHonor',
            personalUrls: 'personalUrls',
            phoneNum: 'phoneNum',
            politicalStatus: 'politicalStatus',
            qq: 'qq',
            realAvatar: 'realAvatar',
            selfEvaluation: 'selfEvaluation',
            sex: 'sex',
            skillSummary: 'skillSummary',
            stateCode: 'stateCode',
            status: 'status',
            virtualPhoneNum: 'virtualPhoneNum',
            weChat: 'weChat',
            weibo: 'weibo',
            workingYears: 'workingYears',
        };
    }
    static types() {
        return {
            age: 'number',
            avatar: 'string',
            beginWorkTime: 'string',
            birthday: 'string',
            candidateBackground: 'number',
            dingTalk: 'string',
            email: 'string',
            englishName: 'string',
            ethnicity: 'string',
            gaduateTime: 'string',
            highestAcademic: 'string',
            highestEducation: 'number',
            identify: 'string',
            industry: 'string',
            industryCode: 'string',
            jobTitle: 'string',
            lastSchoolName: 'string',
            married: 'number',
            mbtiType: 'number',
            name: 'string',
            nationality: 'string',
            nativePlace: 'string',
            nativePlaceCode: 'string',
            nowLocation: 'string',
            nowLocationCode: 'string',
            parentIndustry: 'string',
            parentIndustryCode: 'string',
            personalHonor: 'string',
            personalUrls: { 'type': 'array', 'itemType': 'string' },
            phoneNum: 'string',
            politicalStatus: 'number',
            qq: 'string',
            realAvatar: 'number',
            selfEvaluation: 'string',
            sex: 'number',
            skillSummary: 'string',
            stateCode: 'string',
            status: 'string',
            virtualPhoneNum: 'string',
            weChat: 'string',
            weibo: 'string',
            workingYears: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOBaseInfo = CreateResumeRequestResumeDataVOBaseInfo;
class CreateResumeRequestResumeDataVOCertificates extends $tea.Model {
    static names() {
        return {
            certificateId: 'certificateId',
            certificateName: 'certificateName',
            crantTime: 'crantTime',
        };
    }
    static types() {
        return {
            certificateId: 'string',
            certificateName: 'string',
            crantTime: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOCertificates = CreateResumeRequestResumeDataVOCertificates;
class CreateResumeRequestResumeDataVOJobExpectsCityList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOJobExpectsCityList = CreateResumeRequestResumeDataVOJobExpectsCityList;
class CreateResumeRequestResumeDataVOJobExpectsIndustryList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOJobExpectsIndustryList = CreateResumeRequestResumeDataVOJobExpectsIndustryList;
class CreateResumeRequestResumeDataVOJobExpectsJobList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOJobExpectsJobList = CreateResumeRequestResumeDataVOJobExpectsJobList;
class CreateResumeRequestResumeDataVOJobExpectsOtherCityList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOJobExpectsOtherCityList = CreateResumeRequestResumeDataVOJobExpectsOtherCityList;
class CreateResumeRequestResumeDataVOJobExpects extends $tea.Model {
    static names() {
        return {
            cityList: 'cityList',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            industryList: 'industryList',
            jobList: 'jobList',
            jobNature: 'jobNature',
            maxSalary: 'maxSalary',
            minSalary: 'minSalary',
            otherCityList: 'otherCityList',
            salaryDesc: 'salaryDesc',
            salarySettleType: 'salarySettleType',
            salaryType: 'salaryType',
            salaryYear: 'salaryYear',
        };
    }
    static types() {
        return {
            cityList: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOJobExpectsCityList },
            gmtCreate: 'number',
            gmtModified: 'number',
            industryList: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOJobExpectsIndustryList },
            jobList: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOJobExpectsJobList },
            jobNature: 'string',
            maxSalary: 'string',
            minSalary: 'string',
            otherCityList: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOJobExpectsOtherCityList },
            salaryDesc: 'string',
            salarySettleType: 'string',
            salaryType: 'string',
            salaryYear: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOJobExpects = CreateResumeRequestResumeDataVOJobExpects;
class CreateResumeRequestResumeDataVOPersonalHonors extends $tea.Model {
    static names() {
        return {
            description: 'description',
            grantTime: 'grantTime',
        };
    }
    static types() {
        return {
            description: 'string',
            grantTime: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOPersonalHonors = CreateResumeRequestResumeDataVOPersonalHonors;
class CreateResumeRequestResumeDataVOProjectExperiences extends $tea.Model {
    static names() {
        return {
            achievement: 'achievement',
            description: 'description',
            endDate: 'endDate',
            name: 'name',
            projectUrl: 'projectUrl',
            responsibility: 'responsibility',
            startDate: 'startDate',
            technology: 'technology',
            title: 'title',
        };
    }
    static types() {
        return {
            achievement: 'string',
            description: 'string',
            endDate: 'string',
            name: 'string',
            projectUrl: 'string',
            responsibility: 'string',
            startDate: 'string',
            technology: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOProjectExperiences = CreateResumeRequestResumeDataVOProjectExperiences;
class CreateResumeRequestResumeDataVOTags extends $tea.Model {
    static names() {
        return {
            tag: 'tag',
        };
    }
    static types() {
        return {
            tag: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOTags = CreateResumeRequestResumeDataVOTags;
class CreateResumeRequestResumeDataVOWorkExperiencesResumePrivacy extends $tea.Model {
    static names() {
        return {
            shieldedCompany: 'shieldedCompany',
            shieldedRelatedCompany: 'shieldedRelatedCompany',
        };
    }
    static types() {
        return {
            shieldedCompany: 'boolean',
            shieldedRelatedCompany: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOWorkExperiencesResumePrivacy = CreateResumeRequestResumeDataVOWorkExperiencesResumePrivacy;
class CreateResumeRequestResumeDataVOWorkExperiences extends $tea.Model {
    static names() {
        return {
            achievement: 'achievement',
            companyCode: 'companyCode',
            companyName: 'companyName',
            description: 'description',
            endDate: 'endDate',
            industry: 'industry',
            industryCode: 'industryCode',
            internship: 'internship',
            jobCode: 'jobCode',
            jobNature: 'jobNature',
            jobTitle: 'jobTitle',
            leader: 'leader',
            location: 'location',
            locationCode: 'locationCode',
            parentIndustry: 'parentIndustry',
            parentIndustryCode: 'parentIndustryCode',
            reasonOfLeaving: 'reasonOfLeaving',
            responsibility: 'responsibility',
            resumePrivacy: 'resumePrivacy',
            salary: 'salary',
            selectedSkillOptions: 'selectedSkillOptions',
            startDate: 'startDate',
            underlingNumber: 'underlingNumber',
        };
    }
    static types() {
        return {
            achievement: 'string',
            companyCode: 'string',
            companyName: 'string',
            description: 'string',
            endDate: 'string',
            industry: 'string',
            industryCode: 'string',
            internship: 'boolean',
            jobCode: 'string',
            jobNature: 'string',
            jobTitle: 'string',
            leader: 'string',
            location: 'string',
            locationCode: 'string',
            parentIndustry: 'string',
            parentIndustryCode: 'string',
            reasonOfLeaving: 'string',
            responsibility: 'string',
            resumePrivacy: CreateResumeRequestResumeDataVOWorkExperiencesResumePrivacy,
            salary: 'string',
            selectedSkillOptions: { 'type': 'array', 'itemType': 'string' },
            startDate: 'string',
            underlingNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVOWorkExperiences = CreateResumeRequestResumeDataVOWorkExperiences;
class CreateResumeRequestResumeDataVO extends $tea.Model {
    static names() {
        return {
            baseInfo: 'baseInfo',
            certificates: 'certificates',
            jobExpects: 'jobExpects',
            personalHonors: 'personalHonors',
            projectExperiences: 'projectExperiences',
            tags: 'tags',
            workExperiences: 'workExperiences',
        };
    }
    static types() {
        return {
            baseInfo: CreateResumeRequestResumeDataVOBaseInfo,
            certificates: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOCertificates },
            jobExpects: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOJobExpects },
            personalHonors: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOPersonalHonors },
            projectExperiences: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOProjectExperiences },
            tags: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOTags },
            workExperiences: { 'type': 'array', 'itemType': CreateResumeRequestResumeDataVOWorkExperiences },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeRequestResumeDataVO = CreateResumeRequestResumeDataVO;
class CreateResumeResponseBodyResult extends $tea.Model {
    static names() {
        return {
            resumeId: 'resumeId',
        };
    }
    static types() {
        return {
            resumeId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateResumeResponseBodyResult = CreateResumeResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 创建简历
     *
     * @param request - CreateResumeRequest
     * @param headers - CreateResumeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateResumeResponse
     */
    async createResumeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizCode)) {
            body["bizCode"] = request.bizCode;
        }
        if (!tea_util_1.default.isUnset(request.ext)) {
            body["ext"] = request.ext;
        }
        if (!tea_util_1.default.isUnset(request.resumeDataVO)) {
            body["resumeDataVO"] = request.resumeDataVO;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.types)) {
            body["types"] = request.types;
        }
        if (!tea_util_1.default.isUnset(request.userIdentify)) {
            body["userIdentify"] = request.userIdentify;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateResume",
            version: "jobs_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jobs/resumes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateResumeResponse({}));
    }
    /**
     * 创建简历
     *
     * @param request - CreateResumeRequest
     * @returns CreateResumeResponse
     */
    async createResume(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateResumeHeaders({});
        return await this.createResumeWithOptions(request, headers, runtime);
    }
    /**
     * 投递简历
     *
     * @param request - PostResumeRequest
     * @param headers - PostResumeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PostResumeResponse
     */
    async postResumeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.jobId)) {
            body["jobId"] = request.jobId;
        }
        if (!tea_util_1.default.isUnset(request.userIdentify)) {
            body["userIdentify"] = request.userIdentify;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PostResume",
            version: "jobs_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jobs/resumes/post`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PostResumeResponse({}));
    }
    /**
     * 投递简历
     *
     * @param request - PostResumeRequest
     * @returns PostResumeResponse
     */
    async postResume(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PostResumeHeaders({});
        return await this.postResumeWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map