/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AttachmentsMapValue extends $tea.Model {
    /**
     * @example
     * upload_key
     */
    uploadKey?: string;
    /**
     * @example
     * name
     */
    name?: string;
    /**
     * @example
     * media_type
     */
    mediaType?: string;
    resourceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    commentContent?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    commentType?: string;
    option?: AddCommentRequestOption;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentResponseBody extends $tea.Model {
    result?: AddCommentResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCommentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: AddWorkspaceDocMembersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: AddWorkspaceMembersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    notInOrgList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddWorkspaceMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendRowsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendRowsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    values?: string[][];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendRowsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    requests?: BatchRequestRequests[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHxxxxx
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchResponseBody extends $tea.Model {
    responses?: any[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    nodeIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    result?: BatchGetWorkspaceDocsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchGetWorkspaceDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesRequest extends $tea.Model {
    includeRecent?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBody extends $tea.Model {
    workspaces?: BatchGetWorkspacesResponseBodyWorkspaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchGetWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetRequest extends $tea.Model {
    /**
     * @example
     * cool_app_code
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BindCoolAppToSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearResponseBody extends $tea.Model {
    /**
     * @example
     * a1_notation
     */
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ClearResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataResponseBody extends $tea.Model {
    /**
     * @example
     * a1_notation
     */
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ClearDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleRequest extends $tea.Model {
    cellStyle?: CreateConditionalFormattingRuleRequestCellStyle;
    duplicateCondition?: CreateConditionalFormattingRuleRequestDuplicateCondition;
    /**
     * @remarks
     * This parameter is required.
     */
    ranges?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateConditionalFormattingRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataRequest extends $tea.Model {
    associatedColumn?: CreateDeveloperMetadataRequestAssociatedColumn;
    associatedRow?: CreateDeveloperMetadataRequestAssociatedRow;
    value?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeveloperMetadataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionRequest extends $tea.Model {
    editableSetting?: CreateRangeProtectionRequestEditableSetting;
    members?: CreateRangeProtectionRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    otherUserPermission?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionResponseBody extends $tea.Model {
    /**
     * @example
     * lkxxxx
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateRangeProtectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sheet_name
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    /**
     * @example
     * sheet_name
     */
    name?: string;
    /**
     * @example
     * visible
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceRequest extends $tea.Model {
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceResponseBody extends $tea.Model {
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    docType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    parentNodeId?: string;
    templateId?: string;
    /**
     * **if can be null:**
     * true
     */
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocResponseBody extends $tea.Model {
    dentryUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    docKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateWorkspaceDocResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * column
     */
    column?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * column_count
     */
    columnCount?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteColumnsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDropdownListsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionResponseBody extends $tea.Model {
    /**
     * @example
     * A1
     */
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRangeProtectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * row
     */
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * row_count
     */
    rowCount?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRowsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: DeleteWorkspaceDocMembersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: DeleteWorkspaceMembersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * element_type
     */
    elementType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * properties
     */
    properties?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphResponseBody extends $tea.Model {
    result?: DocAppendParagraphResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocAppendParagraphResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * text
     */
    text?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextResponseBody extends $tea.Model {
    result?: DocAppendTextResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocAppendTextResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryRequest extends $tea.Model {
    /**
     * @example
     * block_type
     */
    blockType?: string;
    /**
     * @example
     * end_index
     */
    endIndex?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    /**
     * @example
     * start_index
     */
    startIndex?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryResponseBody extends $tea.Model {
    result?: DocBlocksQueryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocBlocksQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockResponseBody extends $tea.Model {
    result?: DocDeleteBlockResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocDeleteBlockResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocExportSnapshotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocExportSnapshotRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocExportSnapshotResponseBody extends $tea.Model {
    result?: DocExportSnapshotResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocExportSnapshotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocExportSnapshotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksRequest extends $tea.Model {
    /**
     * @example
     * block_id
     */
    blockId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * element
     */
    element?: {
        [key: string]: any;
    };
    /**
     * @example
     * index
     */
    index?: number;
    /**
     * @example
     * where
     */
    where?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksResponseBody extends $tea.Model {
    result?: DocInsertBlocksResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocInsertBlocksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsModifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsModifyRequest extends $tea.Model {
    /**
     * @example
     * contentBody
     */
    request?: DocSlotsModifyRequestRequest[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsModifyResponseBody extends $tea.Model {
    result?: DocSlotsModifyResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsModifyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocSlotsModifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsQueryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsQueryResponseBody extends $tea.Model {
    result?: DocSlotsQueryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocSlotsQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * content
     */
    content?: string;
    /**
     * @example
     * data_type
     */
    dataType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocUpdateContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponseBody extends $tea.Model {
    value?: GetAllSheetsResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAllSheetsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponseBody extends $tea.Model {
    associatedColumn?: GetDeveloperMetadataResponseBodyAssociatedColumn;
    associatedRow?: GetDeveloperMetadataResponseBodyAssociatedRow;
    value?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDeveloperMetadataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImportDocumentMarkHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImportDocumentMarkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImportDocumentMarkResponseBody extends $tea.Model {
    result?: GetImportDocumentMarkResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImportDocumentMarkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetImportDocumentMarkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    /**
     * @example
     * select
     */
    select?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeResponseBody extends $tea.Model {
    backgroundColors?: GetRangeResponseBodyBackgroundColors[][];
    displayValues?: string[][];
    fontSizes?: number[][];
    fontWeights?: string[][];
    formulas?: string[][];
    horizontalAlignments?: string[][];
    values?: any[][];
    verticalAlignments?: string[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBody extends $tea.Model {
    nextToken?: string;
    recentList?: GetRecentEditDocsResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecentEditDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBody extends $tea.Model {
    nextToken?: string;
    recentList?: GetRecentOpenDocsResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecentOpenDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesRequest extends $tea.Model {
    includeRecent?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    workspaces?: GetRelatedWorkspacesResponseBodyWorkspaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRelatedWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourceUploadInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourceUploadInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    mediaType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    resourceName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    size?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourceUploadInfoResponseBody extends $tea.Model {
    result?: GetResourceUploadInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourceUploadInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetResourceUploadInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetResponseBody extends $tea.Model {
    /**
     * @example
     * column_count
     */
    columnCount?: number;
    /**
     * @example
     * sheet_id
     */
    id?: string;
    /**
     * @example
     * last_non_empty_column
     */
    lastNonEmptyColumn?: number;
    /**
     * @example
     * last_non_empty_row
     */
    lastNonEmptyRow?: number;
    /**
     * @example
     * sheet_name
     */
    name?: string;
    /**
     * @example
     * row_count
     */
    rowCount?: number;
    /**
     * @example
     * visible
     */
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    belong?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdResponseBody extends $tea.Model {
    coverUrl?: string;
    createTime?: number;
    docType?: string;
    id?: string;
    templateType?: string;
    title?: string;
    updateTime?: number;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTemplateByIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    isDeleted?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    owner?: string;
    rootDentryUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    hasPermission?: boolean;
    nodeBO?: GetWorkspaceNodeResponseBodyNodeBO;
    workspaceBO?: GetWorkspaceNodeResponseBodyWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWorkspaceNodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentRequest extends $tea.Model {
    /**
     * @example
     * attachments_key
     */
    attachmentsKey?: string;
    /**
     * @example
     * attachments_map
     */
    attachmentsMap?: {
        [key: string]: AttachmentsMapValue;
    };
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * import_type
     */
    importType?: number;
    /**
     * @example
     * links_key
     */
    linksKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentResponseBody extends $tea.Model {
    result?: {
        [key: string]: any;
    };
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitDocumentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    blocks?: InsertBlocksRequestBlocks[];
    location?: InsertBlocksRequestLocation;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * column
     */
    column?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * column_count
     */
    columnCount?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertColumnsBeforeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    options?: InsertDropdownListsRequestOptions[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertDropdownListsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * row
     */
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * row_count
     */
    rowCount?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertRowsBeforeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    templateType?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    hasMore?: boolean;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    templateList?: ListTemplateResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MergeRangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextRequest extends $tea.Model {
    findOptions?: RangeFindNextRequestFindOptions;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DingTalk
     */
    text?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * A2
     */
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RangeFindNextResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    keyword?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    nextToken?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBody extends $tea.Model {
    docs?: SearchWorkspaceDocsResponseBodyDocs[];
    /**
     * @remarks
     * This parameter is required.
     */
    hasMore?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchWorkspaceDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    column?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    width?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthResponseBody extends $tea.Model {
    sheetId?: string;
    sheetName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetColumnWidthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * column
     */
    column?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * column_count
     */
    columnCount?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * visible
     */
    visibility?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetColumnsVisibilityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightRequest extends $tea.Model {
    height?: number;
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ppgAQuHfOoNVpJiStDwWCEgiEiE
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightResponseBody extends $tea.Model {
    sheetId?: string;
    sheetName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRowHeightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * row
     */
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * row_count
     */
    rowCount?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * visible
     */
    visibility?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityResponseBody extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRowsVisibilityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fontWidth?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    rowCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * stxxxx
     */
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SheetAutofitRowsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    findOptions?: SheetFindAllRequestFindOptions;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * DingTalk
     */
    text?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    select?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllResponseBody extends $tea.Model {
    value?: SheetFindAllResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SheetFindAllResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetRequest extends $tea.Model {
    /**
     * @example
     * cool_app_code
     */
    coolAppCode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnbindCoolAppToSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeRequest extends $tea.Model {
    backgroundColors?: string[][];
    fontSizes?: number[][];
    fontWeights?: string[][];
    horizontalAlignments?: string[][];
    hyperlinks?: UpdateRangeRequestHyperlinks[][];
    /**
     * @example
     * number_format
     */
    numberFormat?: string;
    values?: string[][];
    verticalAlignments?: string[][];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeResponseBody extends $tea.Model {
    /**
     * @example
     * a1_notation
     */
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetRequest extends $tea.Model {
    /**
     * @example
     * sheet_name
     */
    name?: string;
    /**
     * @example
     * visible
     */
    visibility?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * union_id
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: UpdateWorkspaceDocMembersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    members?: UpdateWorkspaceMembersRequestMembers[];
    /**
     * @remarks
     * This parameter is required.
     */
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentRequestOption extends $tea.Model {
    /**
     * @example
     * create_time
     */
    createTime?: string;
    extra?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentResponseBodyResult extends $tea.Model {
    commentId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRequestRequests extends $tea.Model {
    /**
     * **if can be null:**
     * true
     */
    body?: any;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * get
     */
    method?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sheets
     */
    path?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBodyResultNodeBO extends $tea.Model {
    deleted?: boolean;
    docType?: string;
    lastEditTime?: number;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO extends $tea.Model {
    name?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBodyResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    hasPermission?: boolean;
    nodeBO?: BatchGetWorkspaceDocsResponseBodyResultNodeBO;
    workspaceBO?: BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList extends $tea.Model {
    lastEditTime?: string;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBodyWorkspacesWorkspace extends $tea.Model {
    createTime?: number;
    name?: string;
    orgPublished?: boolean;
    recentList?: BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList[];
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBodyWorkspaces extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    hasPermission?: boolean;
    workspace?: BatchGetWorkspacesResponseBodyWorkspacesWorkspace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleRequestCellStyle extends $tea.Model {
    backgroundColor?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleRequestDuplicateCondition extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataRequestAssociatedColumn extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    column?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    sheet?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataRequestAssociatedRow extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    sheet?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionRequestEditableSetting extends $tea.Model {
    deleteColumns?: boolean;
    deleteRows?: boolean;
    editCells?: boolean;
    formatCells?: boolean;
    insertColumns?: boolean;
    insertRows?: boolean;
    toggleColumnsVisibility?: boolean;
    toggleRowsVisibility?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionRequestMembers extends $tea.Model {
    deptId?: string;
    memberType?: string;
    openConversationId?: string;
    permission?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryResponseBodyResult extends $tea.Model {
    data?: any[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocExportSnapshotResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsModifyRequestRequest extends $tea.Model {
    body?: {
        [key: string]: any;
    };
    slotId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsModifyResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocSlotsQueryResponseBodyResult extends $tea.Model {
    data?: any[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponseBodyValue extends $tea.Model {
    /**
     * @example
     * sheet_id
     */
    id?: string;
    /**
     * @example
     * sheet_name
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponseBodyAssociatedColumn extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    column?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    sheetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponseBodyAssociatedRow extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    row?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    sheetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetImportDocumentMarkResponseBodyResult extends $tea.Model {
    /**
     * @example
     * doc_id
     */
    docId?: string;
    /**
     * @example
     * mark_map
     */
    markMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeResponseBodyBackgroundColors extends $tea.Model {
    /**
     * @example
     * red_value
     */
    red?: number;
    /**
     * @example
     * green_value
     */
    green?: number;
    /**
     * @example
     * blue_value
     */
    blue?: number;
    /**
     * @example
     * hex_string_value
     */
    hexString?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBodyRecentListNodeBO extends $tea.Model {
    createTime?: number;
    docType?: string;
    isDeleted?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    lastEditTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeName?: string;
    updateTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    url?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBodyRecentList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    nodeBO?: GetRecentEditDocsResponseBodyRecentListNodeBO;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceBO?: GetRecentEditDocsResponseBodyRecentListWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBodyRecentListNodeBO extends $tea.Model {
    createTime?: number;
    docType?: string;
    isDeleted?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    lastOpenTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeName?: string;
    updateTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    url?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBodyRecentList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    nodeBO?: GetRecentOpenDocsResponseBodyRecentListNodeBO;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceBO?: GetRecentOpenDocsResponseBodyRecentListWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponseBodyWorkspacesRecentList extends $tea.Model {
    lastEditTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponseBodyWorkspaces extends $tea.Model {
    createTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    deleted?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    owner?: string;
    recentList?: GetRelatedWorkspacesResponseBodyWorkspacesRecentList[];
    /**
     * @example
     * OWNER：所有者；MANAGER：管理者；EDITOR：可编辑；VIEWER：可查询\下载；ONLY_VIEWER：尽可查看
     */
    role?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResourceUploadInfoResponseBodyResult extends $tea.Model {
    resourceId?: string;
    uploadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponseBodyNodeBO extends $tea.Model {
    docType?: string;
    lastEditTime?: number;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponseBodyWorkspaceBO extends $tea.Model {
    name?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphChildrenTextTextStyle extends $tea.Model {
    bold?: boolean;
    /**
     * @remarks
     * This parameter is required.
     */
    dataType?: string;
    fontSize?: number;
    sizeUnit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphChildrenText extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    content?: string;
    textStyle?: InsertBlocksRequestBlocksParagraphChildrenTextTextStyle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphChildren extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    elementType?: string;
    text?: InsertBlocksRequestBlocksParagraphChildrenText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphStyle extends $tea.Model {
    headingLevel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraph extends $tea.Model {
    children?: InsertBlocksRequestBlocksParagraphChildren[];
    style?: InsertBlocksRequestBlocksParagraphStyle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocks extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    blockType?: string;
    paragraph?: InsertBlocksRequestBlocksParagraph;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestLocation extends $tea.Model {
    head?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsRequestOptions extends $tea.Model {
    color?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateResponseBodyTemplateList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    coverUrl?: string;
    createTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    docType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    id?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    templateType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    title?: string;
    updateTime?: number;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextRequestFindOptions extends $tea.Model {
    includeHidden?: boolean;
    /**
     * @example
     * true
     */
    matchCase?: boolean;
    /**
     * @example
     * true
     */
    matchEntireCell?: boolean;
    /**
     * @example
     * true
     */
    matchFormulaText?: boolean;
    scope?: string;
    /**
     * @example
     * true
     */
    useRegExp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBodyDocsNodeBO extends $tea.Model {
    docType?: string;
    lastEditTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    nodeId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    originName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBodyDocsWorkspaceBO extends $tea.Model {
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBodyDocs extends $tea.Model {
    nodeBO?: SearchWorkspaceDocsResponseBodyDocsNodeBO;
    workspaceBO?: SearchWorkspaceDocsResponseBodyDocsWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllRequestFindOptions extends $tea.Model {
    includeHidden?: boolean;
    /**
     * @example
     * true
     */
    matchCase?: boolean;
    /**
     * @example
     * true
     */
    matchEntireCell?: boolean;
    /**
     * @example
     * true
     */
    matchFormulaText?: boolean;
    scope?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionCells?: boolean;
    /**
     * @example
     * true
     */
    useRegExp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllResponseBodyValue extends $tea.Model {
    a1Notation?: string;
    values?: any[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeRequestHyperlinks extends $tea.Model {
    /**
     * @example
     * hyperlink_type
     */
    type?: string;
    /**
     * @example
     * hyperlink_link
     */
    link?: string;
    /**
     * @example
     * hyperlink_text
     */
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersRequestMembers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    memberType?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加评论
     *
     * @param request - AddCommentRequest
     * @param headers - AddCommentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCommentResponse
     */
    addCommentWithOptions(docId: string, request: AddCommentRequest, headers: AddCommentHeaders, runtime: $Util.RuntimeOptions): Promise<AddCommentResponse>;
    /**
     * 添加评论
     *
     * @param request - AddCommentRequest
     * @returns AddCommentResponse
     */
    addComment(docId: string, request: AddCommentRequest): Promise<AddCommentResponse>;
    /**
     * 添加知识库文档成员
     *
     * @param request - AddWorkspaceDocMembersRequest
     * @param headers - AddWorkspaceDocMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddWorkspaceDocMembersResponse
     */
    addWorkspaceDocMembersWithOptions(workspaceId: string, nodeId: string, request: AddWorkspaceDocMembersRequest, headers: AddWorkspaceDocMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddWorkspaceDocMembersResponse>;
    /**
     * 添加知识库文档成员
     *
     * @param request - AddWorkspaceDocMembersRequest
     * @returns AddWorkspaceDocMembersResponse
     */
    addWorkspaceDocMembers(workspaceId: string, nodeId: string, request: AddWorkspaceDocMembersRequest): Promise<AddWorkspaceDocMembersResponse>;
    /**
     * 添加知识库成员
     *
     * @param request - AddWorkspaceMembersRequest
     * @param headers - AddWorkspaceMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddWorkspaceMembersResponse
     */
    addWorkspaceMembersWithOptions(workspaceId: string, request: AddWorkspaceMembersRequest, headers: AddWorkspaceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddWorkspaceMembersResponse>;
    /**
     * 添加知识库成员
     *
     * @param request - AddWorkspaceMembersRequest
     * @returns AddWorkspaceMembersResponse
     */
    addWorkspaceMembers(workspaceId: string, request: AddWorkspaceMembersRequest): Promise<AddWorkspaceMembersResponse>;
    /**
     * 追加行
     *
     * @param request - AppendRowsRequest
     * @param headers - AppendRowsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AppendRowsResponse
     */
    appendRowsWithOptions(workbookId: string, sheetId: string, request: AppendRowsRequest, headers: AppendRowsHeaders, runtime: $Util.RuntimeOptions): Promise<AppendRowsResponse>;
    /**
     * 追加行
     *
     * @param request - AppendRowsRequest
     * @returns AppendRowsResponse
     */
    appendRows(workbookId: string, sheetId: string, request: AppendRowsRequest): Promise<AppendRowsResponse>;
    /**
     * 批量执行表格操作
     *
     * @param request - BatchRequest
     * @param headers - BatchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchResponse
     */
    batchWithOptions(workbookId: string, request: BatchRequest, headers: BatchHeaders, runtime: $Util.RuntimeOptions): Promise<BatchResponse>;
    /**
     * 批量执行表格操作
     *
     * @param request - BatchRequest
     * @returns BatchResponse
     */
    batch(workbookId: string, request: BatchRequest): Promise<BatchResponse>;
    /**
     * 批量查询知识库文档
     *
     * @param request - BatchGetWorkspaceDocsRequest
     * @param headers - BatchGetWorkspaceDocsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchGetWorkspaceDocsResponse
     */
    batchGetWorkspaceDocsWithOptions(request: BatchGetWorkspaceDocsRequest, headers: BatchGetWorkspaceDocsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchGetWorkspaceDocsResponse>;
    /**
     * 批量查询知识库文档
     *
     * @param request - BatchGetWorkspaceDocsRequest
     * @returns BatchGetWorkspaceDocsResponse
     */
    batchGetWorkspaceDocs(request: BatchGetWorkspaceDocsRequest): Promise<BatchGetWorkspaceDocsResponse>;
    /**
     * 知识库批量查询
     *
     * @param request - BatchGetWorkspacesRequest
     * @param headers - BatchGetWorkspacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchGetWorkspacesResponse
     */
    batchGetWorkspacesWithOptions(request: BatchGetWorkspacesRequest, headers: BatchGetWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<BatchGetWorkspacesResponse>;
    /**
     * 知识库批量查询
     *
     * @param request - BatchGetWorkspacesRequest
     * @returns BatchGetWorkspacesResponse
     */
    batchGetWorkspaces(request: BatchGetWorkspacesRequest): Promise<BatchGetWorkspacesResponse>;
    /**
     * 关联文档酷应用到表格
     *
     * @param request - BindCoolAppToSheetRequest
     * @param headers - BindCoolAppToSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BindCoolAppToSheetResponse
     */
    bindCoolAppToSheetWithOptions(workbookId: string, request: BindCoolAppToSheetRequest, headers: BindCoolAppToSheetHeaders, runtime: $Util.RuntimeOptions): Promise<BindCoolAppToSheetResponse>;
    /**
     * 关联文档酷应用到表格
     *
     * @param request - BindCoolAppToSheetRequest
     * @returns BindCoolAppToSheetResponse
     */
    bindCoolAppToSheet(workbookId: string, request: BindCoolAppToSheetRequest): Promise<BindCoolAppToSheetResponse>;
    /**
     * 清除单元格区域内所有内容
     *
     * @param request - ClearRequest
     * @param headers - ClearHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ClearResponse
     */
    clearWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: ClearRequest, headers: ClearHeaders, runtime: $Util.RuntimeOptions): Promise<ClearResponse>;
    /**
     * 清除单元格区域内所有内容
     *
     * @param request - ClearRequest
     * @returns ClearResponse
     */
    clear(workbookId: string, sheetId: string, rangeAddress: string, request: ClearRequest): Promise<ClearResponse>;
    /**
     * 清除单元格区域内数据
     *
     * @param request - ClearDataRequest
     * @param headers - ClearDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ClearDataResponse
     */
    clearDataWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: ClearDataRequest, headers: ClearDataHeaders, runtime: $Util.RuntimeOptions): Promise<ClearDataResponse>;
    /**
     * 清除单元格区域内数据
     *
     * @param request - ClearDataRequest
     * @returns ClearDataResponse
     */
    clearData(workbookId: string, sheetId: string, rangeAddress: string, request: ClearDataRequest): Promise<ClearDataResponse>;
    /**
     * 创建条件格式
     *
     * @param request - CreateConditionalFormattingRuleRequest
     * @param headers - CreateConditionalFormattingRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateConditionalFormattingRuleResponse
     */
    createConditionalFormattingRuleWithOptions(workbookId: string, sheetId: string, request: CreateConditionalFormattingRuleRequest, headers: CreateConditionalFormattingRuleHeaders, runtime: $Util.RuntimeOptions): Promise<CreateConditionalFormattingRuleResponse>;
    /**
     * 创建条件格式
     *
     * @param request - CreateConditionalFormattingRuleRequest
     * @returns CreateConditionalFormattingRuleResponse
     */
    createConditionalFormattingRule(workbookId: string, sheetId: string, request: CreateConditionalFormattingRuleRequest): Promise<CreateConditionalFormattingRuleResponse>;
    /**
     * 创建开发者元数据
     *
     * @param request - CreateDeveloperMetadataRequest
     * @param headers - CreateDeveloperMetadataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDeveloperMetadataResponse
     */
    createDeveloperMetadataWithOptions(workbookId: string, request: CreateDeveloperMetadataRequest, headers: CreateDeveloperMetadataHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeveloperMetadataResponse>;
    /**
     * 创建开发者元数据
     *
     * @param request - CreateDeveloperMetadataRequest
     * @returns CreateDeveloperMetadataResponse
     */
    createDeveloperMetadata(workbookId: string, request: CreateDeveloperMetadataRequest): Promise<CreateDeveloperMetadataResponse>;
    /**
     * 创建单元格锁定
     *
     * @param request - CreateRangeProtectionRequest
     * @param headers - CreateRangeProtectionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateRangeProtectionResponse
     */
    createRangeProtectionWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: CreateRangeProtectionRequest, headers: CreateRangeProtectionHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRangeProtectionResponse>;
    /**
     * 创建单元格锁定
     *
     * @param request - CreateRangeProtectionRequest
     * @returns CreateRangeProtectionResponse
     */
    createRangeProtection(workbookId: string, sheetId: string, rangeAddress: string, request: CreateRangeProtectionRequest): Promise<CreateRangeProtectionResponse>;
    /**
     * 创建工作表
     *
     * @param request - CreateSheetRequest
     * @param headers - CreateSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSheetResponse
     */
    createSheetWithOptions(workbookId: string, request: CreateSheetRequest, headers: CreateSheetHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSheetResponse>;
    /**
     * 创建工作表
     *
     * @param request - CreateSheetRequest
     * @returns CreateSheetResponse
     */
    createSheet(workbookId: string, request: CreateSheetRequest): Promise<CreateSheetResponse>;
    /**
     * 新建知识库
     *
     * @param request - CreateWorkspaceRequest
     * @param headers - CreateWorkspaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateWorkspaceResponse
     */
    createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: CreateWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateWorkspaceResponse>;
    /**
     * 新建知识库
     *
     * @param request - CreateWorkspaceRequest
     * @returns CreateWorkspaceResponse
     */
    createWorkspace(request: CreateWorkspaceRequest): Promise<CreateWorkspaceResponse>;
    /**
     * 创建知识库文档
     *
     * @param request - CreateWorkspaceDocRequest
     * @param headers - CreateWorkspaceDocHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateWorkspaceDocResponse
     */
    createWorkspaceDocWithOptions(workspaceId: string, request: CreateWorkspaceDocRequest, headers: CreateWorkspaceDocHeaders, runtime: $Util.RuntimeOptions): Promise<CreateWorkspaceDocResponse>;
    /**
     * 创建知识库文档
     *
     * @param request - CreateWorkspaceDocRequest
     * @returns CreateWorkspaceDocResponse
     */
    createWorkspaceDoc(workspaceId: string, request: CreateWorkspaceDocRequest): Promise<CreateWorkspaceDocResponse>;
    /**
     * 删除列
     *
     * @param request - DeleteColumnsRequest
     * @param headers - DeleteColumnsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteColumnsResponse
     */
    deleteColumnsWithOptions(workbookId: string, sheetId: string, request: DeleteColumnsRequest, headers: DeleteColumnsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteColumnsResponse>;
    /**
     * 删除列
     *
     * @param request - DeleteColumnsRequest
     * @returns DeleteColumnsResponse
     */
    deleteColumns(workbookId: string, sheetId: string, request: DeleteColumnsRequest): Promise<DeleteColumnsResponse>;
    /**
     * 删除下拉列表
     *
     * @param request - DeleteDropdownListsRequest
     * @param headers - DeleteDropdownListsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDropdownListsResponse
     */
    deleteDropdownListsWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: DeleteDropdownListsRequest, headers: DeleteDropdownListsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDropdownListsResponse>;
    /**
     * 删除下拉列表
     *
     * @param request - DeleteDropdownListsRequest
     * @returns DeleteDropdownListsResponse
     */
    deleteDropdownLists(workbookId: string, sheetId: string, rangeAddress: string, request: DeleteDropdownListsRequest): Promise<DeleteDropdownListsResponse>;
    /**
     * 删除单元格锁定
     *
     * @param request - DeleteRangeProtectionRequest
     * @param headers - DeleteRangeProtectionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRangeProtectionResponse
     */
    deleteRangeProtectionWithOptions(workbookId: string, sheetId: string, rangeAddress: string, protectionId: string, request: DeleteRangeProtectionRequest, headers: DeleteRangeProtectionHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRangeProtectionResponse>;
    /**
     * 删除单元格锁定
     *
     * @param request - DeleteRangeProtectionRequest
     * @returns DeleteRangeProtectionResponse
     */
    deleteRangeProtection(workbookId: string, sheetId: string, rangeAddress: string, protectionId: string, request: DeleteRangeProtectionRequest): Promise<DeleteRangeProtectionResponse>;
    /**
     * 删除行
     *
     * @param request - DeleteRowsRequest
     * @param headers - DeleteRowsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteRowsResponse
     */
    deleteRowsWithOptions(workbookId: string, sheetId: string, request: DeleteRowsRequest, headers: DeleteRowsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRowsResponse>;
    /**
     * 删除行
     *
     * @param request - DeleteRowsRequest
     * @returns DeleteRowsResponse
     */
    deleteRows(workbookId: string, sheetId: string, request: DeleteRowsRequest): Promise<DeleteRowsResponse>;
    /**
     * 删除工作表
     *
     * @param request - DeleteSheetRequest
     * @param headers - DeleteSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteSheetResponse
     */
    deleteSheetWithOptions(workbookId: string, sheetId: string, request: DeleteSheetRequest, headers: DeleteSheetHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSheetResponse>;
    /**
     * 删除工作表
     *
     * @param request - DeleteSheetRequest
     * @returns DeleteSheetResponse
     */
    deleteSheet(workbookId: string, sheetId: string, request: DeleteSheetRequest): Promise<DeleteSheetResponse>;
    /**
     * 删除知识库文档
     *
     * @param request - DeleteWorkspaceDocRequest
     * @param headers - DeleteWorkspaceDocHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteWorkspaceDocResponse
     */
    deleteWorkspaceDocWithOptions(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocRequest, headers: DeleteWorkspaceDocHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWorkspaceDocResponse>;
    /**
     * 删除知识库文档
     *
     * @param request - DeleteWorkspaceDocRequest
     * @returns DeleteWorkspaceDocResponse
     */
    deleteWorkspaceDoc(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocRequest): Promise<DeleteWorkspaceDocResponse>;
    /**
     * 删除知识库文档成员
     *
     * @param request - DeleteWorkspaceDocMembersRequest
     * @param headers - DeleteWorkspaceDocMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteWorkspaceDocMembersResponse
     */
    deleteWorkspaceDocMembersWithOptions(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocMembersRequest, headers: DeleteWorkspaceDocMembersHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWorkspaceDocMembersResponse>;
    /**
     * 删除知识库文档成员
     *
     * @param request - DeleteWorkspaceDocMembersRequest
     * @returns DeleteWorkspaceDocMembersResponse
     */
    deleteWorkspaceDocMembers(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocMembersRequest): Promise<DeleteWorkspaceDocMembersResponse>;
    /**
     * 删除知识库成员
     *
     * @param request - DeleteWorkspaceMembersRequest
     * @param headers - DeleteWorkspaceMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteWorkspaceMembersResponse
     */
    deleteWorkspaceMembersWithOptions(workspaceId: string, request: DeleteWorkspaceMembersRequest, headers: DeleteWorkspaceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWorkspaceMembersResponse>;
    /**
     * 删除知识库成员
     *
     * @param request - DeleteWorkspaceMembersRequest
     * @returns DeleteWorkspaceMembersResponse
     */
    deleteWorkspaceMembers(workspaceId: string, request: DeleteWorkspaceMembersRequest): Promise<DeleteWorkspaceMembersResponse>;
    /**
     * 追加指定段落元素
     *
     * @param request - DocAppendParagraphRequest
     * @param headers - DocAppendParagraphHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocAppendParagraphResponse
     */
    docAppendParagraphWithOptions(docKey: string, blockId: string, request: DocAppendParagraphRequest, headers: DocAppendParagraphHeaders, runtime: $Util.RuntimeOptions): Promise<DocAppendParagraphResponse>;
    /**
     * 追加指定段落元素
     *
     * @param request - DocAppendParagraphRequest
     * @returns DocAppendParagraphResponse
     */
    docAppendParagraph(docKey: string, blockId: string, request: DocAppendParagraphRequest): Promise<DocAppendParagraphResponse>;
    /**
     * 在段落后追加文本
     *
     * @param request - DocAppendTextRequest
     * @param headers - DocAppendTextHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocAppendTextResponse
     */
    docAppendTextWithOptions(docKey: string, blockId: string, request: DocAppendTextRequest, headers: DocAppendTextHeaders, runtime: $Util.RuntimeOptions): Promise<DocAppendTextResponse>;
    /**
     * 在段落后追加文本
     *
     * @param request - DocAppendTextRequest
     * @returns DocAppendTextResponse
     */
    docAppendText(docKey: string, blockId: string, request: DocAppendTextRequest): Promise<DocAppendTextResponse>;
    /**
     * 查询指定Block元素
     *
     * @param request - DocBlocksQueryRequest
     * @param headers - DocBlocksQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocBlocksQueryResponse
     */
    docBlocksQueryWithOptions(docKey: string, request: DocBlocksQueryRequest, headers: DocBlocksQueryHeaders, runtime: $Util.RuntimeOptions): Promise<DocBlocksQueryResponse>;
    /**
     * 查询指定Block元素
     *
     * @param request - DocBlocksQueryRequest
     * @returns DocBlocksQueryResponse
     */
    docBlocksQuery(docKey: string, request: DocBlocksQueryRequest): Promise<DocBlocksQueryResponse>;
    /**
     * 删除指定位置的 Block
     *
     * @param request - DocDeleteBlockRequest
     * @param headers - DocDeleteBlockHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocDeleteBlockResponse
     */
    docDeleteBlockWithOptions(docKey: string, blockId: string, request: DocDeleteBlockRequest, headers: DocDeleteBlockHeaders, runtime: $Util.RuntimeOptions): Promise<DocDeleteBlockResponse>;
    /**
     * 删除指定位置的 Block
     *
     * @param request - DocDeleteBlockRequest
     * @returns DocDeleteBlockResponse
     */
    docDeleteBlock(docKey: string, blockId: string, request: DocDeleteBlockRequest): Promise<DocDeleteBlockResponse>;
    /**
     * 根据传入的文档ID将文档导出为截图
     *
     * @param request - DocExportSnapshotRequest
     * @param headers - DocExportSnapshotHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocExportSnapshotResponse
     */
    docExportSnapshotWithOptions(documentId: string, request: DocExportSnapshotRequest, headers: DocExportSnapshotHeaders, runtime: $Util.RuntimeOptions): Promise<DocExportSnapshotResponse>;
    /**
     * 根据传入的文档ID将文档导出为截图
     *
     * @param request - DocExportSnapshotRequest
     * @returns DocExportSnapshotResponse
     */
    docExportSnapshot(documentId: string, request: DocExportSnapshotRequest): Promise<DocExportSnapshotResponse>;
    /**
     * 插入指定Block元素
     *
     * @param request - DocInsertBlocksRequest
     * @param headers - DocInsertBlocksHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocInsertBlocksResponse
     */
    docInsertBlocksWithOptions(docKey: string, request: DocInsertBlocksRequest, headers: DocInsertBlocksHeaders, runtime: $Util.RuntimeOptions): Promise<DocInsertBlocksResponse>;
    /**
     * 插入指定Block元素
     *
     * @param request - DocInsertBlocksRequest
     * @returns DocInsertBlocksResponse
     */
    docInsertBlocks(docKey: string, request: DocInsertBlocksRequest): Promise<DocInsertBlocksResponse>;
    /**
     * 根据传入参数更新文档插槽
     *
     * @param request - DocSlotsModifyRequest
     * @param headers - DocSlotsModifyHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocSlotsModifyResponse
     */
    docSlotsModifyWithOptions(documentId: string, request: DocSlotsModifyRequest, headers: DocSlotsModifyHeaders, runtime: $Util.RuntimeOptions): Promise<DocSlotsModifyResponse>;
    /**
     * 根据传入参数更新文档插槽
     *
     * @param request - DocSlotsModifyRequest
     * @returns DocSlotsModifyResponse
     */
    docSlotsModify(documentId: string, request: DocSlotsModifyRequest): Promise<DocSlotsModifyResponse>;
    /**
     * 根据传入参数查询文档中所有的插槽
     *
     * @param request - DocSlotsQueryRequest
     * @param headers - DocSlotsQueryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocSlotsQueryResponse
     */
    docSlotsQueryWithOptions(documentId: string, request: DocSlotsQueryRequest, headers: DocSlotsQueryHeaders, runtime: $Util.RuntimeOptions): Promise<DocSlotsQueryResponse>;
    /**
     * 根据传入参数查询文档中所有的插槽
     *
     * @param request - DocSlotsQueryRequest
     * @returns DocSlotsQueryResponse
     */
    docSlotsQuery(documentId: string, request: DocSlotsQueryRequest): Promise<DocSlotsQueryResponse>;
    /**
     * 覆写全文
     *
     * @param request - DocUpdateContentRequest
     * @param headers - DocUpdateContentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DocUpdateContentResponse
     */
    docUpdateContentWithOptions(docKey: string, request: DocUpdateContentRequest, headers: DocUpdateContentHeaders, runtime: $Util.RuntimeOptions): Promise<DocUpdateContentResponse>;
    /**
     * 覆写全文
     *
     * @param request - DocUpdateContentRequest
     * @returns DocUpdateContentResponse
     */
    docUpdateContent(docKey: string, request: DocUpdateContentRequest): Promise<DocUpdateContentResponse>;
    /**
     * 获取所有工作表
     *
     * @param request - GetAllSheetsRequest
     * @param headers - GetAllSheetsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAllSheetsResponse
     */
    getAllSheetsWithOptions(workbookId: string, request: GetAllSheetsRequest, headers: GetAllSheetsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllSheetsResponse>;
    /**
     * 获取所有工作表
     *
     * @param request - GetAllSheetsRequest
     * @returns GetAllSheetsResponse
     */
    getAllSheets(workbookId: string, request: GetAllSheetsRequest): Promise<GetAllSheetsResponse>;
    /**
     * 获取开发者元数据
     *
     * @param request - GetDeveloperMetadataRequest
     * @param headers - GetDeveloperMetadataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDeveloperMetadataResponse
     */
    getDeveloperMetadataWithOptions(workbookId: string, developerMetadataId: string, request: GetDeveloperMetadataRequest, headers: GetDeveloperMetadataHeaders, runtime: $Util.RuntimeOptions): Promise<GetDeveloperMetadataResponse>;
    /**
     * 获取开发者元数据
     *
     * @param request - GetDeveloperMetadataRequest
     * @returns GetDeveloperMetadataResponse
     */
    getDeveloperMetadata(workbookId: string, developerMetadataId: string, request: GetDeveloperMetadataRequest): Promise<GetDeveloperMetadataResponse>;
    /**
     * 文档标签信息查询
     *
     * @param request - GetImportDocumentMarkRequest
     * @param headers - GetImportDocumentMarkHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetImportDocumentMarkResponse
     */
    getImportDocumentMarkWithOptions(docId: string, request: GetImportDocumentMarkRequest, headers: GetImportDocumentMarkHeaders, runtime: $Util.RuntimeOptions): Promise<GetImportDocumentMarkResponse>;
    /**
     * 文档标签信息查询
     *
     * @param request - GetImportDocumentMarkRequest
     * @returns GetImportDocumentMarkResponse
     */
    getImportDocumentMark(docId: string, request: GetImportDocumentMarkRequest): Promise<GetImportDocumentMarkResponse>;
    /**
     * 获取单元格区域
     *
     * @param request - GetRangeRequest
     * @param headers - GetRangeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRangeResponse
     */
    getRangeWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: GetRangeRequest, headers: GetRangeHeaders, runtime: $Util.RuntimeOptions): Promise<GetRangeResponse>;
    /**
     * 获取单元格区域
     *
     * @param request - GetRangeRequest
     * @returns GetRangeResponse
     */
    getRange(workbookId: string, sheetId: string, rangeAddress: string, request: GetRangeRequest): Promise<GetRangeResponse>;
    /**
     * 获取最近编辑文档
     *
     * @param request - GetRecentEditDocsRequest
     * @param headers - GetRecentEditDocsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecentEditDocsResponse
     */
    getRecentEditDocsWithOptions(request: GetRecentEditDocsRequest, headers: GetRecentEditDocsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecentEditDocsResponse>;
    /**
     * 获取最近编辑文档
     *
     * @param request - GetRecentEditDocsRequest
     * @returns GetRecentEditDocsResponse
     */
    getRecentEditDocs(request: GetRecentEditDocsRequest): Promise<GetRecentEditDocsResponse>;
    /**
     * 获取最近打开文档
     *
     * @param request - GetRecentOpenDocsRequest
     * @param headers - GetRecentOpenDocsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecentOpenDocsResponse
     */
    getRecentOpenDocsWithOptions(request: GetRecentOpenDocsRequest, headers: GetRecentOpenDocsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecentOpenDocsResponse>;
    /**
     * 获取最近打开文档
     *
     * @param request - GetRecentOpenDocsRequest
     * @returns GetRecentOpenDocsResponse
     */
    getRecentOpenDocs(request: GetRecentOpenDocsRequest): Promise<GetRecentOpenDocsResponse>;
    /**
     * 查询用户有权限的知识库
     *
     * @param request - GetRelatedWorkspacesRequest
     * @param headers - GetRelatedWorkspacesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRelatedWorkspacesResponse
     */
    getRelatedWorkspacesWithOptions(request: GetRelatedWorkspacesRequest, headers: GetRelatedWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<GetRelatedWorkspacesResponse>;
    /**
     * 查询用户有权限的知识库
     *
     * @param request - GetRelatedWorkspacesRequest
     * @returns GetRelatedWorkspacesResponse
     */
    getRelatedWorkspaces(request: GetRelatedWorkspacesRequest): Promise<GetRelatedWorkspacesResponse>;
    /**
     * 获取上传信息
     *
     * @param request - GetResourceUploadInfoRequest
     * @param headers - GetResourceUploadInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetResourceUploadInfoResponse
     */
    getResourceUploadInfoWithOptions(docId: string, request: GetResourceUploadInfoRequest, headers: GetResourceUploadInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetResourceUploadInfoResponse>;
    /**
     * 获取上传信息
     *
     * @param request - GetResourceUploadInfoRequest
     * @returns GetResourceUploadInfoResponse
     */
    getResourceUploadInfo(docId: string, request: GetResourceUploadInfoRequest): Promise<GetResourceUploadInfoResponse>;
    /**
     * 获取工作表
     *
     * @param request - GetSheetRequest
     * @param headers - GetSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSheetResponse
     */
    getSheetWithOptions(workbookId: string, sheetId: string, request: GetSheetRequest, headers: GetSheetHeaders, runtime: $Util.RuntimeOptions): Promise<GetSheetResponse>;
    /**
     * 获取工作表
     *
     * @param request - GetSheetRequest
     * @returns GetSheetResponse
     */
    getSheet(workbookId: string, sheetId: string, request: GetSheetRequest): Promise<GetSheetResponse>;
    /**
     * 查询文档模版
     *
     * @param request - GetTemplateByIdRequest
     * @param headers - GetTemplateByIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTemplateByIdResponse
     */
    getTemplateByIdWithOptions(templateId: string, request: GetTemplateByIdRequest, headers: GetTemplateByIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetTemplateByIdResponse>;
    /**
     * 查询文档模版
     *
     * @param request - GetTemplateByIdRequest
     * @returns GetTemplateByIdResponse
     */
    getTemplateById(templateId: string, request: GetTemplateByIdRequest): Promise<GetTemplateByIdResponse>;
    /**
     * 查询知识库信息
     *
     * @param headers - GetWorkspaceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetWorkspaceResponse
     */
    getWorkspaceWithOptions(workspaceId: string, headers: GetWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkspaceResponse>;
    /**
     * 查询知识库信息
     * @returns GetWorkspaceResponse
     */
    getWorkspace(workspaceId: string): Promise<GetWorkspaceResponse>;
    /**
     * 查询知识库文档
     *
     * @param request - GetWorkspaceNodeRequest
     * @param headers - GetWorkspaceNodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetWorkspaceNodeResponse
     */
    getWorkspaceNodeWithOptions(workspaceId: string, nodeId: string, request: GetWorkspaceNodeRequest, headers: GetWorkspaceNodeHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkspaceNodeResponse>;
    /**
     * 查询知识库文档
     *
     * @param request - GetWorkspaceNodeRequest
     * @returns GetWorkspaceNodeResponse
     */
    getWorkspaceNode(workspaceId: string, nodeId: string, request: GetWorkspaceNodeRequest): Promise<GetWorkspaceNodeResponse>;
    /**
     * 文档初始化
     *
     * @param request - InitDocumentRequest
     * @param headers - InitDocumentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InitDocumentResponse
     */
    initDocumentWithOptions(docId: string, request: InitDocumentRequest, headers: InitDocumentHeaders, runtime: $Util.RuntimeOptions): Promise<InitDocumentResponse>;
    /**
     * 文档初始化
     *
     * @param request - InitDocumentRequest
     * @returns InitDocumentResponse
     */
    initDocument(docId: string, request: InitDocumentRequest): Promise<InitDocumentResponse>;
    /**
     * 向文档内插入块级元素
     *
     * @param request - InsertBlocksRequest
     * @param headers - InsertBlocksHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InsertBlocksResponse
     */
    insertBlocksWithOptions(documentId: string, request: InsertBlocksRequest, headers: InsertBlocksHeaders, runtime: $Util.RuntimeOptions): Promise<InsertBlocksResponse>;
    /**
     * 向文档内插入块级元素
     *
     * @param request - InsertBlocksRequest
     * @returns InsertBlocksResponse
     */
    insertBlocks(documentId: string, request: InsertBlocksRequest): Promise<InsertBlocksResponse>;
    /**
     * 指定列左侧插入若干列
     *
     * @param request - InsertColumnsBeforeRequest
     * @param headers - InsertColumnsBeforeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InsertColumnsBeforeResponse
     */
    insertColumnsBeforeWithOptions(workbookId: string, sheetId: string, request: InsertColumnsBeforeRequest, headers: InsertColumnsBeforeHeaders, runtime: $Util.RuntimeOptions): Promise<InsertColumnsBeforeResponse>;
    /**
     * 指定列左侧插入若干列
     *
     * @param request - InsertColumnsBeforeRequest
     * @returns InsertColumnsBeforeResponse
     */
    insertColumnsBefore(workbookId: string, sheetId: string, request: InsertColumnsBeforeRequest): Promise<InsertColumnsBeforeResponse>;
    /**
     * 插入下拉列表
     *
     * @param request - InsertDropdownListsRequest
     * @param headers - InsertDropdownListsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InsertDropdownListsResponse
     */
    insertDropdownListsWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: InsertDropdownListsRequest, headers: InsertDropdownListsHeaders, runtime: $Util.RuntimeOptions): Promise<InsertDropdownListsResponse>;
    /**
     * 插入下拉列表
     *
     * @param request - InsertDropdownListsRequest
     * @returns InsertDropdownListsResponse
     */
    insertDropdownLists(workbookId: string, sheetId: string, rangeAddress: string, request: InsertDropdownListsRequest): Promise<InsertDropdownListsResponse>;
    /**
     * 指定行上方插入若干行
     *
     * @param request - InsertRowsBeforeRequest
     * @param headers - InsertRowsBeforeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InsertRowsBeforeResponse
     */
    insertRowsBeforeWithOptions(workbookId: string, sheetId: string, request: InsertRowsBeforeRequest, headers: InsertRowsBeforeHeaders, runtime: $Util.RuntimeOptions): Promise<InsertRowsBeforeResponse>;
    /**
     * 指定行上方插入若干行
     *
     * @param request - InsertRowsBeforeRequest
     * @returns InsertRowsBeforeResponse
     */
    insertRowsBefore(workbookId: string, sheetId: string, request: InsertRowsBeforeRequest): Promise<InsertRowsBeforeResponse>;
    /**
     * 查询文档模版
     *
     * @param request - ListTemplateRequest
     * @param headers - ListTemplateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTemplateResponse
     */
    listTemplateWithOptions(request: ListTemplateRequest, headers: ListTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<ListTemplateResponse>;
    /**
     * 查询文档模版
     *
     * @param request - ListTemplateRequest
     * @returns ListTemplateResponse
     */
    listTemplate(request: ListTemplateRequest): Promise<ListTemplateResponse>;
    /**
     * 合并单元格
     *
     * @param request - MergeRangeRequest
     * @param headers - MergeRangeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MergeRangeResponse
     */
    mergeRangeWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: MergeRangeRequest, headers: MergeRangeHeaders, runtime: $Util.RuntimeOptions): Promise<MergeRangeResponse>;
    /**
     * 合并单元格
     *
     * @param request - MergeRangeRequest
     * @returns MergeRangeResponse
     */
    mergeRange(workbookId: string, sheetId: string, rangeAddress: string, request: MergeRangeRequest): Promise<MergeRangeResponse>;
    /**
     * 查找下一个符合条件的单元格
     *
     * @param request - RangeFindNextRequest
     * @param headers - RangeFindNextHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RangeFindNextResponse
     */
    rangeFindNextWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: RangeFindNextRequest, headers: RangeFindNextHeaders, runtime: $Util.RuntimeOptions): Promise<RangeFindNextResponse>;
    /**
     * 查找下一个符合条件的单元格
     *
     * @param request - RangeFindNextRequest
     * @returns RangeFindNextResponse
     */
    rangeFindNext(workbookId: string, sheetId: string, rangeAddress: string, request: RangeFindNextRequest): Promise<RangeFindNextResponse>;
    /**
     * 搜索用户有权限的知识库文档
     *
     * @param request - SearchWorkspaceDocsRequest
     * @param headers - SearchWorkspaceDocsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchWorkspaceDocsResponse
     */
    searchWorkspaceDocsWithOptions(request: SearchWorkspaceDocsRequest, headers: SearchWorkspaceDocsHeaders, runtime: $Util.RuntimeOptions): Promise<SearchWorkspaceDocsResponse>;
    /**
     * 搜索用户有权限的知识库文档
     *
     * @param request - SearchWorkspaceDocsRequest
     * @returns SearchWorkspaceDocsResponse
     */
    searchWorkspaceDocs(request: SearchWorkspaceDocsRequest): Promise<SearchWorkspaceDocsResponse>;
    /**
     * 设置列宽
     *
     * @param request - SetColumnWidthRequest
     * @param headers - SetColumnWidthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetColumnWidthResponse
     */
    setColumnWidthWithOptions(workbookId: string, sheetId: string, request: SetColumnWidthRequest, headers: SetColumnWidthHeaders, runtime: $Util.RuntimeOptions): Promise<SetColumnWidthResponse>;
    /**
     * 设置列宽
     *
     * @param request - SetColumnWidthRequest
     * @returns SetColumnWidthResponse
     */
    setColumnWidth(workbookId: string, sheetId: string, request: SetColumnWidthRequest): Promise<SetColumnWidthResponse>;
    /**
     * 设置列隐藏或显示
     *
     * @param request - SetColumnsVisibilityRequest
     * @param headers - SetColumnsVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetColumnsVisibilityResponse
     */
    setColumnsVisibilityWithOptions(workbookId: string, sheetId: string, request: SetColumnsVisibilityRequest, headers: SetColumnsVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<SetColumnsVisibilityResponse>;
    /**
     * 设置列隐藏或显示
     *
     * @param request - SetColumnsVisibilityRequest
     * @returns SetColumnsVisibilityResponse
     */
    setColumnsVisibility(workbookId: string, sheetId: string, request: SetColumnsVisibilityRequest): Promise<SetColumnsVisibilityResponse>;
    /**
     * 设置行高
     *
     * @param request - SetRowHeightRequest
     * @param headers - SetRowHeightHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetRowHeightResponse
     */
    setRowHeightWithOptions(workbookId: string, sheetId: string, request: SetRowHeightRequest, headers: SetRowHeightHeaders, runtime: $Util.RuntimeOptions): Promise<SetRowHeightResponse>;
    /**
     * 设置行高
     *
     * @param request - SetRowHeightRequest
     * @returns SetRowHeightResponse
     */
    setRowHeight(workbookId: string, sheetId: string, request: SetRowHeightRequest): Promise<SetRowHeightResponse>;
    /**
     * 设置行隐藏或显示
     *
     * @param request - SetRowsVisibilityRequest
     * @param headers - SetRowsVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetRowsVisibilityResponse
     */
    setRowsVisibilityWithOptions(workbookId: string, sheetId: string, request: SetRowsVisibilityRequest, headers: SetRowsVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<SetRowsVisibilityResponse>;
    /**
     * 设置行隐藏或显示
     *
     * @param request - SetRowsVisibilityRequest
     * @returns SetRowsVisibilityResponse
     */
    setRowsVisibility(workbookId: string, sheetId: string, request: SetRowsVisibilityRequest): Promise<SetRowsVisibilityResponse>;
    /**
     * SheetAutofitRows
     *
     * @param request - SheetAutofitRowsRequest
     * @param headers - SheetAutofitRowsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SheetAutofitRowsResponse
     */
    sheetAutofitRowsWithOptions(workbookId: string, sheetId: string, request: SheetAutofitRowsRequest, headers: SheetAutofitRowsHeaders, runtime: $Util.RuntimeOptions): Promise<SheetAutofitRowsResponse>;
    /**
     * SheetAutofitRows
     *
     * @param request - SheetAutofitRowsRequest
     * @returns SheetAutofitRowsResponse
     */
    sheetAutofitRows(workbookId: string, sheetId: string, request: SheetAutofitRowsRequest): Promise<SheetAutofitRowsResponse>;
    /**
     * 工作表上查找所有符合条件的单元格
     *
     * @param request - SheetFindAllRequest
     * @param headers - SheetFindAllHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SheetFindAllResponse
     */
    sheetFindAllWithOptions(workbookId: string, sheetId: string, request: SheetFindAllRequest, headers: SheetFindAllHeaders, runtime: $Util.RuntimeOptions): Promise<SheetFindAllResponse>;
    /**
     * 工作表上查找所有符合条件的单元格
     *
     * @param request - SheetFindAllRequest
     * @returns SheetFindAllResponse
     */
    sheetFindAll(workbookId: string, sheetId: string, request: SheetFindAllRequest): Promise<SheetFindAllResponse>;
    /**
     * 取消文档酷应用和表格的关联
     *
     * @param request - UnbindCoolAppToSheetRequest
     * @param headers - UnbindCoolAppToSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UnbindCoolAppToSheetResponse
     */
    unbindCoolAppToSheetWithOptions(workbookId: string, request: UnbindCoolAppToSheetRequest, headers: UnbindCoolAppToSheetHeaders, runtime: $Util.RuntimeOptions): Promise<UnbindCoolAppToSheetResponse>;
    /**
     * 取消文档酷应用和表格的关联
     *
     * @param request - UnbindCoolAppToSheetRequest
     * @returns UnbindCoolAppToSheetResponse
     */
    unbindCoolAppToSheet(workbookId: string, request: UnbindCoolAppToSheetRequest): Promise<UnbindCoolAppToSheetResponse>;
    /**
     * 更新单元格区域
     *
     * @param request - UpdateRangeRequest
     * @param headers - UpdateRangeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRangeResponse
     */
    updateRangeWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: UpdateRangeRequest, headers: UpdateRangeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRangeResponse>;
    /**
     * 更新单元格区域
     *
     * @param request - UpdateRangeRequest
     * @returns UpdateRangeResponse
     */
    updateRange(workbookId: string, sheetId: string, rangeAddress: string, request: UpdateRangeRequest): Promise<UpdateRangeResponse>;
    /**
     * 更新工作表
     *
     * @param request - UpdateSheetRequest
     * @param headers - UpdateSheetHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateSheetResponse
     */
    updateSheetWithOptions(workbookId: string, sheetId: string, request: UpdateSheetRequest, headers: UpdateSheetHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSheetResponse>;
    /**
     * 更新工作表
     *
     * @param request - UpdateSheetRequest
     * @returns UpdateSheetResponse
     */
    updateSheet(workbookId: string, sheetId: string, request: UpdateSheetRequest): Promise<UpdateSheetResponse>;
    /**
     * 修改知识库文档成员
     *
     * @param request - UpdateWorkspaceDocMembersRequest
     * @param headers - UpdateWorkspaceDocMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateWorkspaceDocMembersResponse
     */
    updateWorkspaceDocMembersWithOptions(workspaceId: string, nodeId: string, request: UpdateWorkspaceDocMembersRequest, headers: UpdateWorkspaceDocMembersHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateWorkspaceDocMembersResponse>;
    /**
     * 修改知识库文档成员
     *
     * @param request - UpdateWorkspaceDocMembersRequest
     * @returns UpdateWorkspaceDocMembersResponse
     */
    updateWorkspaceDocMembers(workspaceId: string, nodeId: string, request: UpdateWorkspaceDocMembersRequest): Promise<UpdateWorkspaceDocMembersResponse>;
    /**
     * 更新知识库成员
     *
     * @param request - UpdateWorkspaceMembersRequest
     * @param headers - UpdateWorkspaceMembersHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateWorkspaceMembersResponse
     */
    updateWorkspaceMembersWithOptions(workspaceId: string, request: UpdateWorkspaceMembersRequest, headers: UpdateWorkspaceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateWorkspaceMembersResponse>;
    /**
     * 更新知识库成员
     *
     * @param request - UpdateWorkspaceMembersRequest
     * @returns UpdateWorkspaceMembersResponse
     */
    updateWorkspaceMembers(workspaceId: string, request: UpdateWorkspaceMembersRequest): Promise<UpdateWorkspaceMembersResponse>;
}
