/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddDomainWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainWordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    domainWords?: AddDomainWordsRequestDomainWords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainWordsResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddDomainWordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    description?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    icon?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    instructions?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorUnionId?: string;
    recommendPrompts?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    welcomeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantResponseBody extends $tea.Model {
    actionNames?: string[];
    assistantId?: string;
    assistantUnionId?: string;
    createdAt?: number;
    creatorUnionId?: string;
    description?: string;
    fallbackContent?: string;
    icon?: string;
    instructions?: string;
    knowledgeFileNames?: string[];
    model?: string;
    name?: string;
    recommendPrompts?: string[];
    unifiedAppId?: string;
    welcomeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAssistantResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantMessageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    content?: string;
    extension?: {
        [key: string]: string;
    };
    metadata?: {
        [key: string]: any;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    role?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantMessageResponseBody extends $tea.Model {
    assistantId?: string;
    content?: any[];
    createdAt?: number;
    id?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    role?: string;
    runId?: string;
    threadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAssistantMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantRunHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantRunRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    instructions?: string;
    metadata?: {
        [key: string]: any;
    };
    stream?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantRunResponseBody extends $tea.Model {
    assistantId?: string;
    cancelledAt?: number;
    completedAt?: number;
    createdAt?: number;
    expiresAt?: number;
    failedAt?: number;
    id?: string;
    lastErrorMsg?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    startedAt?: number;
    status?: string;
    threadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantRunResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAssistantRunResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantThreadHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantThreadRequest extends $tea.Model {
    /**
     * **if can be null:**
     * true
     */
    metadata?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantThreadResponseBody extends $tea.Model {
    createdAt?: number;
    id?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAssistantThreadResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAssistantThreadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteAssistantResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantMessageResponseBody extends $tea.Model {
    deleted?: boolean;
    id?: string;
    object?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteAssistantMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantThreadHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantThreadResponseBody extends $tea.Model {
    deleted?: boolean;
    id?: string;
    object?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAssistantThreadResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteAssistantThreadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainWordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    domainWords?: DeleteDomainWordsRequestDomainWords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainWordsResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDomainWordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    studyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKnowledgeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteKnowledgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    endTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    offset?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailResponseBody extends $tea.Model {
    result?: GetAskDetailResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAskDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainWordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainWordsResponseBody extends $tea.Model {
    result?: string[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDomainWordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKnowledgeListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKnowledgeListRequest extends $tea.Model {
    assistantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKnowledgeListResponseBody extends $tea.Model {
    result?: GetKnowledgeListResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKnowledgeListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetKnowledgeListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAssistantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAssistantRequest extends $tea.Model {
    assistantId?: string;
    isAllOrgMemberVisible?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAssistantResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallAssistantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallAssistantResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LearnKnowledgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LearnKnowledgeRequest extends $tea.Model {
    assistantId?: string;
    docUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LearnKnowledgeResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LearnKnowledgeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LearnKnowledgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantRequest extends $tea.Model {
    cursor?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: ListAssistantResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAssistantResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantMessageRequest extends $tea.Model {
    limit?: number;
    order?: string;
    runId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantMessageResponseBody extends $tea.Model {
    data?: ListAssistantMessageResponseBodyData[];
    object?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAssistantMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantRunHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantRunRequest extends $tea.Model {
    limit?: number;
    order?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantRunResponseBody extends $tea.Model {
    data?: ListAssistantRunResponseBodyData[];
    object?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantRunResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAssistantRunResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListVisibleAssistantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListVisibleAssistantRequest extends $tea.Model {
    cursor?: number;
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListVisibleAssistantResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: ListVisibleAssistantResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListVisibleAssistantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListVisibleAssistantResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    endTime?: number;
    pageNumber?: number;
    pageSize?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogListResponseBody extends $tea.Model {
    result?: LogListResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LogListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelearnKnowledgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelearnKnowledgeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelearnKnowledgeResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelearnKnowledgeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RelearnKnowledgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAssistantHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAssistantRequest extends $tea.Model {
    assistantId?: string;
    operatorUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAssistantResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveAssistantResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveAssistantResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantBasicInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantBasicInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantBasicInfoResponseBody extends $tea.Model {
    actionNames?: string[];
    assistantId?: string;
    assistantUnionId?: string;
    createdAt?: number;
    creatorUnionId?: string;
    description?: string;
    fallbackContent?: string;
    icon?: string;
    instructions?: string;
    knowledgeFileNames?: string[];
    model?: string;
    name?: string;
    recommendPrompts?: string[];
    unifiedAppId?: string;
    welcomeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantBasicInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RetrieveAssistantBasicInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantMessageResponseBody extends $tea.Model {
    assisantId?: string;
    content?: any[];
    createdAt?: number;
    id?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    role?: string;
    runId?: string;
    threadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RetrieveAssistantMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantRunHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantRunResponseBody extends $tea.Model {
    assistantId?: string;
    cancelledAt?: number;
    completedAt?: number;
    createdAt?: number;
    expiresAt?: number;
    failedAt?: number;
    id?: string;
    lastErrorMsg?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    startedAt?: number;
    status?: string;
    threadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantRunResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RetrieveAssistantRunResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantScopeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantScopeResponseBody extends $tea.Model {
    result?: RetrieveAssistantScopeResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantScopeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RetrieveAssistantScopeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantThreadHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantThreadResponseBody extends $tea.Model {
    createdAt?: number;
    id?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantThreadResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RetrieveAssistantThreadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantBasicInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantBasicInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    description?: string;
    fallbackContent?: string;
    icon?: string;
    instructions?: string;
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorUnionId?: string;
    recommendPrompts?: string[];
    welcomeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantBasicInfoResponseBody extends $tea.Model {
    actionNames?: string[];
    assistantId?: string;
    assistantUnionId?: string;
    createdAt?: number;
    creatorUnionId?: string;
    description?: string;
    fallbackContent?: string;
    icon?: string;
    instructions?: string;
    knowledgeFileNames?: string[];
    model?: string;
    name?: string;
    recommendPrompts?: string[];
    unifiedAppId?: string;
    welcomeContent?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantBasicInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateAssistantBasicInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantScopeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    assistantId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorUnionId?: string;
    scopes?: UpdateAssistantScopeRequestScopes;
    sharing?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantScopeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDomainWordsRequestDomainWords extends $tea.Model {
    description?: string;
    domainWord?: string;
    formalWords?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDomainWordsRequestDomainWords extends $tea.Model {
    description?: string;
    domainWord?: string;
    formalWords?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailResponseBodyResultListReferences extends $tea.Model {
    name?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailResponseBodyResultList extends $tea.Model {
    answer?: string;
    answerResult?: string;
    commentTags?: string[];
    isMarkResolved?: boolean;
    nick?: string;
    question?: string;
    references?: GetAskDetailResponseBodyResultListReferences[];
    time?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAskDetailResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: GetAskDetailResponseBodyResultList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKnowledgeListResponseBodyResult extends $tea.Model {
    docFormat?: string;
    docName?: string;
    docUrl?: string;
    status?: string;
    studyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantResponseBodyList extends $tea.Model {
    assistantId?: string;
    createdAt?: number;
    creatorUnionId?: string;
    description?: string;
    icon?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantMessageResponseBodyData extends $tea.Model {
    assistantId?: string;
    content?: any[];
    createdAt?: number;
    id?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    role?: string;
    runId?: string;
    threadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAssistantRunResponseBodyData extends $tea.Model {
    assistantId?: string;
    cancelledAt?: number;
    completedAt?: number;
    createdAt?: number;
    expiresAt?: number;
    failedAt?: number;
    id?: string;
    lastErrorMsg?: string;
    metadata?: {
        [key: string]: any;
    };
    object?: string;
    startedAt?: number;
    status?: string;
    threadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListVisibleAssistantResponseBodyList extends $tea.Model {
    assistantId?: string;
    createdAt?: number;
    creatorUnionId?: string;
    description?: string;
    icon?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogListResponseBodyResultList extends $tea.Model {
    actionNames?: string;
    customChannel?: string;
    input?: string;
    name?: string;
    output?: string;
    result?: string;
    scene?: string;
    time?: number;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogListResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: LogListResponseBodyResultList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantScopeResponseBodyResultScopes extends $tea.Model {
    deptVisibleScopes?: string[];
    dynamicGroupScopes?: string[];
    isAdmin?: boolean;
    roleVisibleScopes?: string[];
    userVisibleScopes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetrieveAssistantScopeResponseBodyResult extends $tea.Model {
    assistantId?: string;
    scopes?: RetrieveAssistantScopeResponseBodyResultScopes;
    sharing?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateAssistantScopeRequestScopes extends $tea.Model {
    deptVisibleScopes?: string[];
    dynamicGroupScopes?: string[];
    isAdmin?: boolean;
    roleVisibleScopes?: string[];
    userVisibleScopes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 助理添加专业词汇
     *
     * @param request - AddDomainWordsRequest
     * @param headers - AddDomainWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddDomainWordsResponse
     */
    addDomainWordsWithOptions(request: AddDomainWordsRequest, headers: AddDomainWordsHeaders, runtime: $Util.RuntimeOptions): Promise<AddDomainWordsResponse>;
    /**
     * 助理添加专业词汇
     *
     * @param request - AddDomainWordsRequest
     * @returns AddDomainWordsResponse
     */
    addDomainWords(request: AddDomainWordsRequest): Promise<AddDomainWordsResponse>;
    /**
     * 创建AI助理
     *
     * @param request - CreateAssistantRequest
     * @param headers - CreateAssistantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAssistantResponse
     */
    createAssistantWithOptions(request: CreateAssistantRequest, headers: CreateAssistantHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAssistantResponse>;
    /**
     * 创建AI助理
     *
     * @param request - CreateAssistantRequest
     * @returns CreateAssistantResponse
     */
    createAssistant(request: CreateAssistantRequest): Promise<CreateAssistantResponse>;
    /**
     * 创建AI助理的消息体
     *
     * @param request - CreateAssistantMessageRequest
     * @param headers - CreateAssistantMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAssistantMessageResponse
     */
    createAssistantMessageWithOptions(threadId: string, request: CreateAssistantMessageRequest, headers: CreateAssistantMessageHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAssistantMessageResponse>;
    /**
     * 创建AI助理的消息体
     *
     * @param request - CreateAssistantMessageRequest
     * @returns CreateAssistantMessageResponse
     */
    createAssistantMessage(threadId: string, request: CreateAssistantMessageRequest): Promise<CreateAssistantMessageResponse>;
    /**
     * 创建AI助理的运行任务
     *
     * @param request - CreateAssistantRunRequest
     * @param headers - CreateAssistantRunHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAssistantRunResponse
     */
    createAssistantRunWithOptions(threadId: string, request: CreateAssistantRunRequest, headers: CreateAssistantRunHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAssistantRunResponse>;
    /**
     * 创建AI助理的运行任务
     *
     * @param request - CreateAssistantRunRequest
     * @returns CreateAssistantRunResponse
     */
    createAssistantRun(threadId: string, request: CreateAssistantRunRequest): Promise<CreateAssistantRunResponse>;
    /**
     * 创建AI助理线程实例
     *
     * @param request - CreateAssistantThreadRequest
     * @param headers - CreateAssistantThreadHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAssistantThreadResponse
     */
    createAssistantThreadWithOptions(request: CreateAssistantThreadRequest, headers: CreateAssistantThreadHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAssistantThreadResponse>;
    /**
     * 创建AI助理线程实例
     *
     * @param request - CreateAssistantThreadRequest
     * @returns CreateAssistantThreadResponse
     */
    createAssistantThread(request: CreateAssistantThreadRequest): Promise<CreateAssistantThreadResponse>;
    /**
     * 删除AI助理
     *
     * @param request - DeleteAssistantRequest
     * @param headers - DeleteAssistantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAssistantResponse
     */
    deleteAssistantWithOptions(request: DeleteAssistantRequest, headers: DeleteAssistantHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteAssistantResponse>;
    /**
     * 删除AI助理
     *
     * @param request - DeleteAssistantRequest
     * @returns DeleteAssistantResponse
     */
    deleteAssistant(request: DeleteAssistantRequest): Promise<DeleteAssistantResponse>;
    /**
     * 删除AI助理的消息体
     *
     * @param headers - DeleteAssistantMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAssistantMessageResponse
     */
    deleteAssistantMessageWithOptions(threadId: string, messageId: string, headers: DeleteAssistantMessageHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteAssistantMessageResponse>;
    /**
     * 删除AI助理的消息体
     * @returns DeleteAssistantMessageResponse
     */
    deleteAssistantMessage(threadId: string, messageId: string): Promise<DeleteAssistantMessageResponse>;
    /**
     * 删除AI助理线程实例
     *
     * @param headers - DeleteAssistantThreadHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAssistantThreadResponse
     */
    deleteAssistantThreadWithOptions(threadId: string, headers: DeleteAssistantThreadHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteAssistantThreadResponse>;
    /**
     * 删除AI助理线程实例
     * @returns DeleteAssistantThreadResponse
     */
    deleteAssistantThread(threadId: string): Promise<DeleteAssistantThreadResponse>;
    /**
     * 助理删除专业词汇
     *
     * @param request - DeleteDomainWordsRequest
     * @param headers - DeleteDomainWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDomainWordsResponse
     */
    deleteDomainWordsWithOptions(request: DeleteDomainWordsRequest, headers: DeleteDomainWordsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDomainWordsResponse>;
    /**
     * 助理删除专业词汇
     *
     * @param request - DeleteDomainWordsRequest
     * @returns DeleteDomainWordsResponse
     */
    deleteDomainWords(request: DeleteDomainWordsRequest): Promise<DeleteDomainWordsResponse>;
    /**
     * 删除助理知识
     *
     * @param request - DeleteKnowledgeRequest
     * @param headers - DeleteKnowledgeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteKnowledgeResponse
     */
    deleteKnowledgeWithOptions(request: DeleteKnowledgeRequest, headers: DeleteKnowledgeHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteKnowledgeResponse>;
    /**
     * 删除助理知识
     *
     * @param request - DeleteKnowledgeRequest
     * @returns DeleteKnowledgeResponse
     */
    deleteKnowledge(request: DeleteKnowledgeRequest): Promise<DeleteKnowledgeResponse>;
    /**
     * 获取助理问答明细
     *
     * @param request - GetAskDetailRequest
     * @param headers - GetAskDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAskDetailResponse
     */
    getAskDetailWithOptions(request: GetAskDetailRequest, headers: GetAskDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetAskDetailResponse>;
    /**
     * 获取助理问答明细
     *
     * @param request - GetAskDetailRequest
     * @returns GetAskDetailResponse
     */
    getAskDetail(request: GetAskDetailRequest): Promise<GetAskDetailResponse>;
    /**
     * 获取助理专业词汇
     *
     * @param request - GetDomainWordsRequest
     * @param headers - GetDomainWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDomainWordsResponse
     */
    getDomainWordsWithOptions(request: GetDomainWordsRequest, headers: GetDomainWordsHeaders, runtime: $Util.RuntimeOptions): Promise<GetDomainWordsResponse>;
    /**
     * 获取助理专业词汇
     *
     * @param request - GetDomainWordsRequest
     * @returns GetDomainWordsResponse
     */
    getDomainWords(request: GetDomainWordsRequest): Promise<GetDomainWordsResponse>;
    /**
     * 获取助理知识列表
     *
     * @param request - GetKnowledgeListRequest
     * @param headers - GetKnowledgeListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetKnowledgeListResponse
     */
    getKnowledgeListWithOptions(request: GetKnowledgeListRequest, headers: GetKnowledgeListHeaders, runtime: $Util.RuntimeOptions): Promise<GetKnowledgeListResponse>;
    /**
     * 获取助理知识列表
     *
     * @param request - GetKnowledgeListRequest
     * @returns GetKnowledgeListResponse
     */
    getKnowledgeList(request: GetKnowledgeListRequest): Promise<GetKnowledgeListResponse>;
    /**
     * 安装助理
     *
     * @param request - InstallAssistantRequest
     * @param headers - InstallAssistantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InstallAssistantResponse
     */
    installAssistantWithOptions(request: InstallAssistantRequest, headers: InstallAssistantHeaders, runtime: $Util.RuntimeOptions): Promise<InstallAssistantResponse>;
    /**
     * 安装助理
     *
     * @param request - InstallAssistantRequest
     * @returns InstallAssistantResponse
     */
    installAssistant(request: InstallAssistantRequest): Promise<InstallAssistantResponse>;
    /**
     * 助理学习知识
     *
     * @param request - LearnKnowledgeRequest
     * @param headers - LearnKnowledgeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LearnKnowledgeResponse
     */
    learnKnowledgeWithOptions(request: LearnKnowledgeRequest, headers: LearnKnowledgeHeaders, runtime: $Util.RuntimeOptions): Promise<LearnKnowledgeResponse>;
    /**
     * 助理学习知识
     *
     * @param request - LearnKnowledgeRequest
     * @returns LearnKnowledgeResponse
     */
    learnKnowledge(request: LearnKnowledgeRequest): Promise<LearnKnowledgeResponse>;
    /**
     * 获取AI助理列表
     *
     * @param request - ListAssistantRequest
     * @param headers - ListAssistantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAssistantResponse
     */
    listAssistantWithOptions(request: ListAssistantRequest, headers: ListAssistantHeaders, runtime: $Util.RuntimeOptions): Promise<ListAssistantResponse>;
    /**
     * 获取AI助理列表
     *
     * @param request - ListAssistantRequest
     * @returns ListAssistantResponse
     */
    listAssistant(request: ListAssistantRequest): Promise<ListAssistantResponse>;
    /**
     * 获取AI助理消息列表
     *
     * @param request - ListAssistantMessageRequest
     * @param headers - ListAssistantMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAssistantMessageResponse
     */
    listAssistantMessageWithOptions(threadId: string, request: ListAssistantMessageRequest, headers: ListAssistantMessageHeaders, runtime: $Util.RuntimeOptions): Promise<ListAssistantMessageResponse>;
    /**
     * 获取AI助理消息列表
     *
     * @param request - ListAssistantMessageRequest
     * @returns ListAssistantMessageResponse
     */
    listAssistantMessage(threadId: string, request: ListAssistantMessageRequest): Promise<ListAssistantMessageResponse>;
    /**
     * 获取AI助理的运行任务的列表
     *
     * @param request - ListAssistantRunRequest
     * @param headers - ListAssistantRunHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAssistantRunResponse
     */
    listAssistantRunWithOptions(threadId: string, request: ListAssistantRunRequest, headers: ListAssistantRunHeaders, runtime: $Util.RuntimeOptions): Promise<ListAssistantRunResponse>;
    /**
     * 获取AI助理的运行任务的列表
     *
     * @param request - ListAssistantRunRequest
     * @returns ListAssistantRunResponse
     */
    listAssistantRun(threadId: string, request: ListAssistantRunRequest): Promise<ListAssistantRunResponse>;
    /**
     * 获取用户可见范围的AI助理列表
     *
     * @param request - ListVisibleAssistantRequest
     * @param headers - ListVisibleAssistantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListVisibleAssistantResponse
     */
    listVisibleAssistantWithOptions(request: ListVisibleAssistantRequest, headers: ListVisibleAssistantHeaders, runtime: $Util.RuntimeOptions): Promise<ListVisibleAssistantResponse>;
    /**
     * 获取用户可见范围的AI助理列表
     *
     * @param request - ListVisibleAssistantRequest
     * @returns ListVisibleAssistantResponse
     */
    listVisibleAssistant(request: ListVisibleAssistantRequest): Promise<ListVisibleAssistantResponse>;
    /**
     * 获取对话明细列表
     *
     * @param request - LogListRequest
     * @param headers - LogListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LogListResponse
     */
    logListWithOptions(request: LogListRequest, headers: LogListHeaders, runtime: $Util.RuntimeOptions): Promise<LogListResponse>;
    /**
     * 获取对话明细列表
     *
     * @param request - LogListRequest
     * @returns LogListResponse
     */
    logList(request: LogListRequest): Promise<LogListResponse>;
    /**
     * 助理学习增量知识
     *
     * @param request - RelearnKnowledgeRequest
     * @param headers - RelearnKnowledgeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RelearnKnowledgeResponse
     */
    relearnKnowledgeWithOptions(request: RelearnKnowledgeRequest, headers: RelearnKnowledgeHeaders, runtime: $Util.RuntimeOptions): Promise<RelearnKnowledgeResponse>;
    /**
     * 助理学习增量知识
     *
     * @param request - RelearnKnowledgeRequest
     * @returns RelearnKnowledgeResponse
     */
    relearnKnowledge(request: RelearnKnowledgeRequest): Promise<RelearnKnowledgeResponse>;
    /**
     * 卸载助理
     *
     * @param request - RemoveAssistantRequest
     * @param headers - RemoveAssistantHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveAssistantResponse
     */
    removeAssistantWithOptions(request: RemoveAssistantRequest, headers: RemoveAssistantHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveAssistantResponse>;
    /**
     * 卸载助理
     *
     * @param request - RemoveAssistantRequest
     * @returns RemoveAssistantResponse
     */
    removeAssistant(request: RemoveAssistantRequest): Promise<RemoveAssistantResponse>;
    /**
     * 查询 AI 助理的基本信息
     *
     * @param request - RetrieveAssistantBasicInfoRequest
     * @param headers - RetrieveAssistantBasicInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RetrieveAssistantBasicInfoResponse
     */
    retrieveAssistantBasicInfoWithOptions(request: RetrieveAssistantBasicInfoRequest, headers: RetrieveAssistantBasicInfoHeaders, runtime: $Util.RuntimeOptions): Promise<RetrieveAssistantBasicInfoResponse>;
    /**
     * 查询 AI 助理的基本信息
     *
     * @param request - RetrieveAssistantBasicInfoRequest
     * @returns RetrieveAssistantBasicInfoResponse
     */
    retrieveAssistantBasicInfo(request: RetrieveAssistantBasicInfoRequest): Promise<RetrieveAssistantBasicInfoResponse>;
    /**
     * 获取AI助理的消息体
     *
     * @param headers - RetrieveAssistantMessageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RetrieveAssistantMessageResponse
     */
    retrieveAssistantMessageWithOptions(threadId: string, messageId: string, headers: RetrieveAssistantMessageHeaders, runtime: $Util.RuntimeOptions): Promise<RetrieveAssistantMessageResponse>;
    /**
     * 获取AI助理的消息体
     * @returns RetrieveAssistantMessageResponse
     */
    retrieveAssistantMessage(threadId: string, messageId: string): Promise<RetrieveAssistantMessageResponse>;
    /**
     * 检索AI助理的运行任务
     *
     * @param headers - RetrieveAssistantRunHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RetrieveAssistantRunResponse
     */
    retrieveAssistantRunWithOptions(threadId: string, runId: string, headers: RetrieveAssistantRunHeaders, runtime: $Util.RuntimeOptions): Promise<RetrieveAssistantRunResponse>;
    /**
     * 检索AI助理的运行任务
     * @returns RetrieveAssistantRunResponse
     */
    retrieveAssistantRun(threadId: string, runId: string): Promise<RetrieveAssistantRunResponse>;
    /**
     * 获取助理的使用范围
     *
     * @param request - RetrieveAssistantScopeRequest
     * @param headers - RetrieveAssistantScopeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RetrieveAssistantScopeResponse
     */
    retrieveAssistantScopeWithOptions(request: RetrieveAssistantScopeRequest, headers: RetrieveAssistantScopeHeaders, runtime: $Util.RuntimeOptions): Promise<RetrieveAssistantScopeResponse>;
    /**
     * 获取助理的使用范围
     *
     * @param request - RetrieveAssistantScopeRequest
     * @returns RetrieveAssistantScopeResponse
     */
    retrieveAssistantScope(request: RetrieveAssistantScopeRequest): Promise<RetrieveAssistantScopeResponse>;
    /**
     * 检索AI助理线程实例
     *
     * @param headers - RetrieveAssistantThreadHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RetrieveAssistantThreadResponse
     */
    retrieveAssistantThreadWithOptions(threadId: string, headers: RetrieveAssistantThreadHeaders, runtime: $Util.RuntimeOptions): Promise<RetrieveAssistantThreadResponse>;
    /**
     * 检索AI助理线程实例
     * @returns RetrieveAssistantThreadResponse
     */
    retrieveAssistantThread(threadId: string): Promise<RetrieveAssistantThreadResponse>;
    /**
     * 更新AI助理基础信息
     *
     * @param request - UpdateAssistantBasicInfoRequest
     * @param headers - UpdateAssistantBasicInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateAssistantBasicInfoResponse
     */
    updateAssistantBasicInfoWithOptions(request: UpdateAssistantBasicInfoRequest, headers: UpdateAssistantBasicInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateAssistantBasicInfoResponse>;
    /**
     * 更新AI助理基础信息
     *
     * @param request - UpdateAssistantBasicInfoRequest
     * @returns UpdateAssistantBasicInfoResponse
     */
    updateAssistantBasicInfo(request: UpdateAssistantBasicInfoRequest): Promise<UpdateAssistantBasicInfoResponse>;
    /**
     * 更新 AI 助理使用范围
     *
     * @param request - UpdateAssistantScopeRequest
     * @param headers - UpdateAssistantScopeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateAssistantScopeResponse
     */
    updateAssistantScopeWithOptions(request: UpdateAssistantScopeRequest, headers: UpdateAssistantScopeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateAssistantScopeResponse>;
    /**
     * 更新 AI 助理使用范围
     *
     * @param request - UpdateAssistantScopeRequest
     * @returns UpdateAssistantScopeResponse
     */
    updateAssistantScope(request: UpdateAssistantScopeRequest): Promise<UpdateAssistantScopeResponse>;
}
