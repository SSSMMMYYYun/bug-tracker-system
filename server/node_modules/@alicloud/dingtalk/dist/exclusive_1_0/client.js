"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteAcrossCloudStroageConfigsHeaders = exports.DataSyncResponse = exports.DataSyncResponseBody = exports.DataSyncRequest = exports.DataSyncHeaders = exports.CreateVirusScanTaskResponse = exports.CreateVirusScanTaskResponseBody = exports.CreateVirusScanTaskRequest = exports.CreateVirusScanTaskHeaders = exports.CreateTrustedDeviceBatchResponse = exports.CreateTrustedDeviceBatchResponseBody = exports.CreateTrustedDeviceBatchRequest = exports.CreateTrustedDeviceBatchHeaders = exports.CreateTrustedDeviceResponse = exports.CreateTrustedDeviceResponseBody = exports.CreateTrustedDeviceRequest = exports.CreateTrustedDeviceHeaders = exports.CreateRuleResponse = exports.CreateRuleResponseBody = exports.CreateRuleRequest = exports.CreateRuleHeaders = exports.CreateMessageCategoryResponse = exports.CreateMessageCategoryResponseBody = exports.CreateMessageCategoryRequest = exports.CreateMessageCategoryHeaders = exports.CreateDlpTaskResponse = exports.CreateDlpTaskResponseBody = exports.CreateDlpTaskRequest = exports.CreateDlpTaskHeaders = exports.CreateCategoryAndBindingGroupsResponse = exports.CreateCategoryAndBindingGroupsResponseBody = exports.CreateCategoryAndBindingGroupsRequest = exports.CreateCategoryAndBindingGroupsHeaders = exports.BanOrOpenGroupWordsResponse = exports.BanOrOpenGroupWordsResponseBody = exports.BanOrOpenGroupWordsRequest = exports.BanOrOpenGroupWordsHeaders = exports.ApproveProcessCallbackResponse = exports.ApproveProcessCallbackResponseBody = exports.ApproveProcessCallbackRequest = exports.ApproveProcessCallbackHeaders = exports.AddOrgResponse = exports.AddOrgResponseBody = exports.AddOrgRequest = exports.AddOrgHeaders = exports.AddCustomSignConfigResponse = exports.AddCustomSignConfigResponseBody = exports.AddCustomSignConfigRequest = exports.AddCustomSignConfigHeaders = exports.ConversationCategoryModel = void 0;
exports.GetAccountTransferListRequest = exports.GetAccountTransferListHeaders = exports.GenerateDarkWaterMarkResponse = exports.GenerateDarkWaterMarkResponseBody = exports.GenerateDarkWaterMarkRequest = exports.GenerateDarkWaterMarkHeaders = exports.FileStorageUpdateStorageResponse = exports.FileStorageUpdateStorageResponseBody = exports.FileStorageUpdateStorageRequest = exports.FileStorageUpdateStorageHeaders = exports.FileStorageGetStorageStateResponse = exports.FileStorageGetStorageStateResponseBody = exports.FileStorageGetStorageStateRequest = exports.FileStorageGetStorageStateHeaders = exports.FileStorageGetQuotaDataResponse = exports.FileStorageGetQuotaDataResponseBody = exports.FileStorageGetQuotaDataRequest = exports.FileStorageGetQuotaDataHeaders = exports.FileStorageCheckConnectionResponse = exports.FileStorageCheckConnectionResponseBody = exports.FileStorageCheckConnectionRequest = exports.FileStorageCheckConnectionHeaders = exports.FileStorageActiveStorageResponse = exports.FileStorageActiveStorageResponseBody = exports.FileStorageActiveStorageRequest = exports.FileStorageActiveStorageHeaders = exports.ExclusiveCreateDingPortalResponse = exports.ExclusiveCreateDingPortalResponseBody = exports.ExclusiveCreateDingPortalRequest = exports.ExclusiveCreateDingPortalHeaders = exports.ExchangeMainAdminResponse = exports.ExchangeMainAdminResponseBody = exports.ExchangeMainAdminRequest = exports.ExchangeMainAdminHeaders = exports.EditSecurityConfigMemberResponse = exports.EditSecurityConfigMemberResponseBody = exports.EditSecurityConfigMemberRequest = exports.EditSecurityConfigMemberHeaders = exports.DistributePartnerAppResponse = exports.DistributePartnerAppResponseBody = exports.DistributePartnerAppRequest = exports.DistributePartnerAppHeaders = exports.DeleteTrustedDeviceResponse = exports.DeleteTrustedDeviceResponseBody = exports.DeleteTrustedDeviceRequest = exports.DeleteTrustedDeviceHeaders = exports.DeleteCommentResponse = exports.DeleteCommentHeaders = exports.DeleteAcrossCloudStroageConfigsResponse = exports.DeleteAcrossCloudStroageConfigsResponseBody = void 0;
exports.GetDocCreatedDeptSummaryRequest = exports.GetDocCreatedDeptSummaryHeaders = exports.GetDingReportSummaryResponse = exports.GetDingReportSummaryResponseBody = exports.GetDingReportSummaryHeaders = exports.GetDingReportDeptSummaryResponse = exports.GetDingReportDeptSummaryResponseBody = exports.GetDingReportDeptSummaryRequest = exports.GetDingReportDeptSummaryHeaders = exports.GetConversationDetailResponse = exports.GetConversationDetailResponseBody = exports.GetConversationDetailRequest = exports.GetConversationDetailHeaders = exports.GetConversationCategoryResponse = exports.GetConversationCategoryResponseBody = exports.GetConversationCategoryHeaders = exports.GetConferenceDetailResponse = exports.GetConferenceDetailResponseBody = exports.GetConferenceDetailHeaders = exports.GetConfBaseInfoByLogicalIdResponse = exports.GetConfBaseInfoByLogicalIdResponseBody = exports.GetConfBaseInfoByLogicalIdRequest = exports.GetConfBaseInfoByLogicalIdHeaders = exports.GetCommentListResponse = exports.GetCommentListResponseBody = exports.GetCommentListRequest = exports.GetCommentListHeaders = exports.GetCidsByBotCodeResponse = exports.GetCidsByBotCodeResponseBody = exports.GetCidsByBotCodeRequest = exports.GetCidsByBotCodeHeaders = exports.GetCalenderSummaryResponse = exports.GetCalenderSummaryResponseBody = exports.GetCalenderSummaryHeaders = exports.GetAppDispatchInfoResponse = exports.GetAppDispatchInfoResponseBody = exports.GetAppDispatchInfoRequest = exports.GetAppDispatchInfoHeaders = exports.GetAllLabelableDeptsResponse = exports.GetAllLabelableDeptsResponseBody = exports.GetAllLabelableDeptsHeaders = exports.GetAgentIdByRelatedAppIdResponse = exports.GetAgentIdByRelatedAppIdResponseBody = exports.GetAgentIdByRelatedAppIdRequest = exports.GetAgentIdByRelatedAppIdHeaders = exports.GetActiveUserSummaryResponse = exports.GetActiveUserSummaryResponseBody = exports.GetActiveUserSummaryHeaders = exports.GetAccountTransferListResponse = exports.GetAccountTransferListResponseBody = void 0;
exports.GetOutGroupsByPageRequest = exports.GetOutGroupsByPageHeaders = exports.GetOaOperatorLogListResponse = exports.GetOaOperatorLogListResponseBody = exports.GetOaOperatorLogListRequest = exports.GetOaOperatorLogListHeaders = exports.GetMsgLocationResponse = exports.GetMsgLocationResponseBody = exports.GetMsgLocationRequest = exports.GetMsgLocationHeaders = exports.GetMsgConfigResponse = exports.GetMsgConfigResponseBody = exports.GetMsgConfigRequest = exports.GetMsgConfigHeaders = exports.GetLastOrgAuthDataResponse = exports.GetLastOrgAuthDataResponseBody = exports.GetLastOrgAuthDataRequest = exports.GetLastOrgAuthDataHeaders = exports.GetInActiveUserListResponse = exports.GetInActiveUserListResponseBody = exports.GetInActiveUserListRequest = exports.GetInActiveUserListHeaders = exports.GetGroupOrgByCidResponse = exports.GetGroupOrgByCidResponseBody = exports.GetGroupOrgByCidRequest = exports.GetGroupOrgByCidHeaders = exports.GetGroupInfoByCidResponse = exports.GetGroupInfoByCidResponseBody = exports.GetGroupInfoByCidRequest = exports.GetGroupInfoByCidHeaders = exports.GetGroupActiveInfoResponse = exports.GetGroupActiveInfoResponseBody = exports.GetGroupActiveInfoRequest = exports.GetGroupActiveInfoHeaders = exports.GetGeneralFormCreatedSummaryResponse = exports.GetGeneralFormCreatedSummaryResponseBody = exports.GetGeneralFormCreatedSummaryHeaders = exports.GetGeneralFormCreatedDeptSummaryResponse = exports.GetGeneralFormCreatedDeptSummaryResponseBody = exports.GetGeneralFormCreatedDeptSummaryRequest = exports.GetGeneralFormCreatedDeptSummaryHeaders = exports.GetExclusiveAccountAllOrgListResponse = exports.GetExclusiveAccountAllOrgListResponseBody = exports.GetExclusiveAccountAllOrgListRequest = exports.GetExclusiveAccountAllOrgListHeaders = exports.GetDocCreatedSummaryResponse = exports.GetDocCreatedSummaryResponseBody = exports.GetDocCreatedSummaryHeaders = exports.GetDocCreatedDeptSummaryResponse = exports.GetDocCreatedDeptSummaryResponseBody = void 0;
exports.GetUserRealPeopleStateHeaders = exports.GetUserFaceStateResponse = exports.GetUserFaceStateResponseBody = exports.GetUserFaceStateRequest = exports.GetUserFaceStateHeaders = exports.GetUserAppVersionSummaryResponse = exports.GetUserAppVersionSummaryResponseBody = exports.GetUserAppVersionSummaryRequest = exports.GetUserAppVersionSummaryHeaders = exports.GetTrustDeviceListResponse = exports.GetTrustDeviceListResponseBody = exports.GetTrustDeviceListRequest = exports.GetTrustDeviceListHeaders = exports.GetSignedDetailByPageResponse = exports.GetSignedDetailByPageResponseBody = exports.GetSignedDetailByPageRequest = exports.GetSignedDetailByPageHeaders = exports.GetSecurityConfigMemberResponse = exports.GetSecurityConfigMemberResponseBody = exports.GetSecurityConfigMemberRequest = exports.GetSecurityConfigMemberHeaders = exports.GetRobotInfoByCodeResponse = exports.GetRobotInfoByCodeResponseBody = exports.GetRobotInfoByCodeRequest = exports.GetRobotInfoByCodeHeaders = exports.GetRecognizeRecordsResponse = exports.GetRecognizeRecordsResponseBody = exports.GetRecognizeRecordsRequest = exports.GetRecognizeRecordsHeaders = exports.GetRealPeopleRecordsResponse = exports.GetRealPeopleRecordsResponseBody = exports.GetRealPeopleRecordsRequest = exports.GetRealPeopleRecordsHeaders = exports.GetPublisherSummaryResponse = exports.GetPublisherSummaryResponseBody = exports.GetPublisherSummaryRequest = exports.GetPublisherSummaryHeaders = exports.GetPublicDevicesResponse = exports.GetPublicDevicesResponseBody = exports.GetPublicDevicesRequest = exports.GetPublicDevicesHeaders = exports.GetPartnerTypeByParentIdResponse = exports.GetPartnerTypeByParentIdResponseBody = exports.GetPartnerTypeByParentIdHeaders = exports.GetOutsideAuditGroupMessageByPageResponse = exports.GetOutsideAuditGroupMessageByPageResponseBody = exports.GetOutsideAuditGroupMessageByPageRequest = exports.GetOutsideAuditGroupMessageByPageHeaders = exports.GetOutGroupsByPageResponse = exports.GetOutGroupsByPageResponseBody = void 0;
exports.ListPartnerRolesResponseBody = exports.ListPartnerRolesHeaders = exports.ListMiniAppHistoryVersionResponse = exports.ListMiniAppHistoryVersionResponseBody = exports.ListMiniAppHistoryVersionRequest = exports.ListMiniAppHistoryVersionHeaders = exports.ListMiniAppAvailableVersionResponse = exports.ListMiniAppAvailableVersionResponseBody = exports.ListMiniAppAvailableVersionRequest = exports.ListMiniAppAvailableVersionHeaders = exports.ListJoinOrgInfoResponse = exports.ListJoinOrgInfoResponseBody = exports.ListJoinOrgInfoRequest = exports.ListJoinOrgInfoHeaders = exports.ListCategorysResponse = exports.ListCategorysResponseBody = exports.ListCategorysShrinkRequest = exports.ListCategorysRequest = exports.ListCategorysHeaders = exports.ListByPluginIdsResponse = exports.ListByPluginIdsResponseBody = exports.ListByPluginIdsRequest = exports.ListByPluginIdsHeaders = exports.ListByCodesResponse = exports.ListByCodesResponseBody = exports.ListByCodesRequest = exports.ListByCodesHeaders = exports.ListAuditLogResponse = exports.ListAuditLogResponseBody = exports.ListAuditLogRequest = exports.ListAuditLogHeaders = exports.GroupQueryByOpenIdResponse = exports.GroupQueryByOpenIdResponseBody = exports.GroupQueryByOpenIdRequest = exports.GroupQueryByOpenIdHeaders = exports.GroupQueryByAttrResponse = exports.GroupQueryByAttrResponseBody = exports.GroupQueryByAttrRequest = exports.GroupQueryByAttrHeaders = exports.GetVirusScanResultResponse = exports.GetVirusScanResultResponseBody = exports.GetVirusScanResultRequest = exports.GetVirusScanResultHeaders = exports.GetUserStayLengthResponse = exports.GetUserStayLengthResponseBody = exports.GetUserStayLengthRequest = exports.GetUserStayLengthHeaders = exports.GetUserRealPeopleStateResponse = exports.GetUserRealPeopleStateResponseBody = exports.GetUserRealPeopleStateRequest = void 0;
exports.QueryExclusiveBenefitsHeaders = exports.QueryConversationPageResponse = exports.QueryConversationPageResponseBody = exports.QueryConversationPageRequest = exports.QueryConversationPageHeaders = exports.QueryChannelStaffInfoByMobileResponse = exports.QueryChannelStaffInfoByMobileResponseBody = exports.QueryChannelStaffInfoByMobileRequest = exports.QueryChannelStaffInfoByMobileHeaders = exports.QueryAcrossCloudStroageConfigsResponse = exports.QueryAcrossCloudStroageConfigsResponseBody = exports.QueryAcrossCloudStroageConfigsRequest = exports.QueryAcrossCloudStroageConfigsHeaders = exports.PushBadgeResponse = exports.PushBadgeResponseBody = exports.PushBadgeRequest = exports.PushBadgeHeaders = exports.PublishRuleResponse = exports.PublishRuleResponseBody = exports.PublishRuleRequest = exports.PublishRuleHeaders = exports.PublishFileChangeNoticeResponse = exports.PublishFileChangeNoticeRequest = exports.PublishFileChangeNoticeHeaders = exports.PreventCheatingCheckRiskResponse = exports.PreventCheatingCheckRiskResponseBody = exports.PreventCheatingCheckRiskRequest = exports.PreventCheatingCheckRiskHeaders = exports.OpportunitySearchResponse = exports.OpportunitySearchResponseBody = exports.OpportunitySearchRequest = exports.OpportunitySearchHeaders = exports.OpenBenefitPackageResponse = exports.OpenBenefitPackageResponseBody = exports.OpenBenefitPackageRequest = exports.OpenBenefitPackageHeaders = exports.LogoutResponse = exports.LogoutResponseBody = exports.LogoutRequest = exports.LogoutHeaders = exports.ListRulesResponse = exports.ListRulesResponseBody = exports.ListRulesShrinkRequest = exports.ListRulesRequest = exports.ListRulesHeaders = exports.ListPunchScheduleByConditionWithPagingResponse = exports.ListPunchScheduleByConditionWithPagingResponseBody = exports.ListPunchScheduleByConditionWithPagingRequest = exports.ListPunchScheduleByConditionWithPagingHeaders = exports.ListPartnerRolesResponse = void 0;
exports.SendAppDingRequest = exports.SendAppDingHeaders = exports.SearchOrgInnerGroupInfoResponse = exports.SearchOrgInnerGroupInfoResponseBody = exports.SearchOrgInnerGroupInfoRequest = exports.SearchOrgInnerGroupInfoHeaders = exports.SaveWhiteAppResponse = exports.SaveWhiteAppResponseBody = exports.SaveWhiteAppRequest = exports.SaveWhiteAppHeaders = exports.SaveStorageSwitchResponse = exports.SaveStorageSwitchResponseBody = exports.SaveStorageSwitchRequest = exports.SaveStorageSwitchHeaders = exports.SaveStorageFunctionSwitchResponse = exports.SaveStorageFunctionSwitchResponseBody = exports.SaveStorageFunctionSwitchRequest = exports.SaveStorageFunctionSwitchHeaders = exports.SaveOpenTerminalInfoResponse = exports.SaveOpenTerminalInfoResponseBody = exports.SaveOpenTerminalInfoRequest = exports.SaveOpenTerminalInfoHeaders = exports.SaveAndSubmitAuthInfoResponse = exports.SaveAndSubmitAuthInfoResponseBody = exports.SaveAndSubmitAuthInfoRequest = exports.SaveAndSubmitAuthInfoHeaders = exports.SaveAcrossCloudStroageConfigsResponse = exports.SaveAcrossCloudStroageConfigsResponseBody = exports.SaveAcrossCloudStroageConfigsRequest = exports.SaveAcrossCloudStroageConfigsHeaders = exports.RuleBatchReceiverResponse = exports.RuleBatchReceiverResponseBody = exports.RuleBatchReceiverRequest = exports.RuleBatchReceiverHeaders = exports.RollbackMiniAppVersionResponse = exports.RollbackMiniAppVersionResponseBody = exports.RollbackMiniAppVersionRequest = exports.RollbackMiniAppVersionHeaders = exports.QueryUserBehaviorResponse = exports.QueryUserBehaviorResponseBody = exports.QueryUserBehaviorRequest = exports.QueryUserBehaviorHeaders = exports.QueryTemplateInfoResponse = exports.QueryTemplateInfoResponseBody = exports.QueryTemplateInfoHeaders = exports.QueryPartnerInfoResponse = exports.QueryPartnerInfoResponseBody = exports.QueryPartnerInfoHeaders = exports.QueryExclusiveBenefitsResponse = exports.QueryExclusiveBenefitsResponseBody = void 0;
exports.TaskInfoUpdateTaskResponseBody = exports.TaskInfoUpdateTaskRequest = exports.TaskInfoUpdateTaskHeaders = exports.TaskInfoFinishTaskResponse = exports.TaskInfoFinishTaskResponseBody = exports.TaskInfoFinishTaskRequest = exports.TaskInfoFinishTaskHeaders = exports.TaskInfoCreateAndStartTaskResponse = exports.TaskInfoCreateAndStartTaskResponseBody = exports.TaskInfoCreateAndStartTaskRequest = exports.TaskInfoCreateAndStartTaskHeaders = exports.TaskInfoCancelOrDelTaskResponse = exports.TaskInfoCancelOrDelTaskResponseBody = exports.TaskInfoCancelOrDelTaskRequest = exports.TaskInfoCancelOrDelTaskHeaders = exports.TaskInfoAddDelTaskPersonResponse = exports.TaskInfoAddDelTaskPersonResponseBody = exports.TaskInfoAddDelTaskPersonRequest = exports.TaskInfoAddDelTaskPersonHeaders = exports.SpecialRuleBatchReceiverResponse = exports.SpecialRuleBatchReceiverResponseBody = exports.SpecialRuleBatchReceiverRequest = exports.SpecialRuleBatchReceiverHeaders = exports.SetOrgTopConversationCategoryResponse = exports.SetOrgTopConversationCategoryResponseBody = exports.SetOrgTopConversationCategoryRequest = exports.SetOrgTopConversationCategoryHeaders = exports.SetDeptPartnerTypeAndNumResponse = exports.SetDeptPartnerTypeAndNumRequest = exports.SetDeptPartnerTypeAndNumHeaders = exports.SetConversationTopCategoryResponse = exports.SetConversationTopCategoryResponseBody = exports.SetConversationTopCategoryRequest = exports.SetConversationTopCategoryHeaders = exports.SetConversationSubtitleResponse = exports.SetConversationSubtitleResponseBody = exports.SetConversationSubtitleRequest = exports.SetConversationSubtitleHeaders = exports.SetConversationCategoryResponse = exports.SetConversationCategoryResponseBody = exports.SetConversationCategoryRequest = exports.SetConversationCategoryHeaders = exports.SendPhoneDingResponse = exports.SendPhoneDingResponseBody = exports.SendPhoneDingRequest = exports.SendPhoneDingHeaders = exports.SendInvitationResponse = exports.SendInvitationRequest = exports.SendInvitationHeaders = exports.SendAppDingResponse = void 0;
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4 = exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3 = exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2 = exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1 = exports.GetAccountTransferListResponseBodyItemList = exports.GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList = exports.FileStorageGetQuotaDataResponseBodyQuotaModelList = exports.CreateTrustedDeviceBatchRequestDetailList = exports.CreateRuleRequestCustomPlan = exports.ApproveProcessCallbackRequestRequest = exports.AddCustomSignConfigRequestSignTermFiles = exports.UpdateVoiceMsgCtrlStatusResponse = exports.UpdateVoiceMsgCtrlStatusResponseBody = exports.UpdateVoiceMsgCtrlStatusRequest = exports.UpdateVoiceMsgCtrlStatusHeaders = exports.UpdateStorageModeResponse = exports.UpdateStorageModeResponseBody = exports.UpdateStorageModeRequest = exports.UpdateStorageModeHeaders = exports.UpdateRoleVisibilityResponse = exports.UpdateRoleVisibilityRequest = exports.UpdateRoleVisibilityHeaders = exports.UpdateRealmLicenseResponse = exports.UpdateRealmLicenseResponseBody = exports.UpdateRealmLicenseRequest = exports.UpdateRealmLicenseHeaders = exports.UpdatePartnerVisibilityResponse = exports.UpdatePartnerVisibilityRequest = exports.UpdatePartnerVisibilityHeaders = exports.UpdateMiniAppVersionStatusResponse = exports.UpdateMiniAppVersionStatusResponseBody = exports.UpdateMiniAppVersionStatusRequest = exports.UpdateMiniAppVersionStatusHeaders = exports.UpdateFileStatusResponse = exports.UpdateFileStatusResponseBody = exports.UpdateFileStatusRequest = exports.UpdateFileStatusHeaders = exports.UpdateConversationTypeResponse = exports.UpdateConversationTypeResponseBody = exports.UpdateConversationTypeRequest = exports.UpdateConversationTypeHeaders = exports.UpdateCategoryNameResponse = exports.UpdateCategoryNameResponseBody = exports.UpdateCategoryNameRequest = exports.UpdateCategoryNameHeaders = exports.TransferExclusiveAccountOrgResponse = exports.TransferExclusiveAccountOrgResponseBody = exports.TransferExclusiveAccountOrgRequest = exports.TransferExclusiveAccountOrgHeaders = exports.TaskInfoUpdateTaskResponse = void 0;
exports.GetUserRealPeopleStateResponseBodyData = exports.GetUserFaceStateResponseBodyData = exports.GetUserAppVersionSummaryResponseBodyData = exports.GetTrustDeviceListResponseBodyData = exports.GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList = exports.GetSecurityConfigMemberResponseBodyResult = exports.GetSecurityConfigMemberResponseBodyResultUserInfos = exports.GetRobotInfoByCodeResponseBodyRobotInfoVO = exports.GetRecognizeRecordsResponseBodyData = exports.GetRealPeopleRecordsResponseBodyData = exports.GetPublisherSummaryResponseBodyPublisherArticlePvTop5 = exports.GetPublisherSummaryResponseBodyData = exports.GetPublicDevicesResponseBodyData = exports.GetPublicDevicesResponseBodyDataDeviceStaffs = exports.GetPublicDevicesResponseBodyDataDeviceRoles = exports.GetPublicDevicesResponseBodyDataDeviceDepts = exports.GetPartnerTypeByParentIdResponseBodyData = exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBody = exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList = exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender = exports.GetOutGroupsByPageResponseBodyResponseBody = exports.GetOutGroupsByPageResponseBodyResponseBodyGroupList = exports.GetOaOperatorLogListResponseBodyData = exports.GetMsgConfigResponseBodyData = exports.GetMsgConfigResponseBodyDataUnitAttributes = exports.GetMsgConfigResponseBodyDataReceiverAttributes = exports.GetMsgConfigResponseBodyDataMsgConfigs = exports.GetMsgConfigResponseBodyDataGroupAttributes = exports.GetMsgConfigResponseBodyDataGroupAttributesListReceiver = exports.GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr = exports.GetMsgConfigRequestListDynamicAttr = exports.GetInActiveUserListResponseBodyMetaList = exports.GetGroupInfoByCidResponseBodyGroupInfo = exports.GetGroupActiveInfoResponseBodyData = exports.GetGeneralFormCreatedDeptSummaryResponseBodyData = exports.GetExclusiveAccountAllOrgListResponseBodyOrgInfoList = exports.GetDocCreatedDeptSummaryResponseBodyData = exports.GetDingReportDeptSummaryResponseBodyData = exports.GetConversationDetailResponseBodyResult = exports.GetConversationDetailResponseBodyResultMultipleCategoryList = exports.GetConferenceDetailResponseBodyMemberList = exports.GetCommentListResponseBodyData = exports.GetCidsByBotCodeResponseBodyGroupInfos = exports.GetAppDispatchInfoResponseBodyWindows = exports.GetAppDispatchInfoResponseBodyMac = exports.GetAppDispatchInfoResponseBodyIOS = exports.GetAppDispatchInfoResponseBodyIOSExt = exports.GetAppDispatchInfoResponseBodyAndroid = exports.GetAllLabelableDeptsResponseBodyData = exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5 = void 0;
exports.SetOrgTopConversationCategoryRequestBody = exports.SetConversationTopCategoryRequestSetCategoryList = exports.SearchOrgInnerGroupInfoResponseBodyItems = exports.SaveStorageFunctionSwitchRequestFunctionList = exports.RuleBatchReceiverResponseBodyRows = exports.RuleBatchReceiverResponseBodyData = exports.RuleBatchReceiverRequestData = exports.RuleBatchReceiverRequestDataAttrs = exports.QueryUserBehaviorResponseBodyData = exports.QueryTemplateInfoResponseBodyTemplateVisibility = exports.QueryTemplateInfoResponseBodyTemplateVisibilityUserIds = exports.QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds = exports.QueryTemplateInfoResponseBodyTemplateIntroduction = exports.QueryTemplateInfoResponseBodyParentTemplateDetailVO = exports.QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList = exports.QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList = exports.QueryTemplateInfoResponseBodyGroupSettingList = exports.QueryTemplateInfoResponseBodyGrayInfo = exports.QueryTemplateInfoResponseBodyAppInfo = exports.QueryPartnerInfoResponseBodyPartnerLabelList = exports.QueryPartnerInfoResponseBodyPartnerDeptList = exports.QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1 = exports.QueryConversationPageResponseBodyResult = exports.QueryConversationPageResponseBodyResultData = exports.QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList = exports.QueryChannelStaffInfoByMobileResponseBodyEmpInfo = exports.PushBadgeRequestBadgeItems = exports.PreventCheatingCheckRiskResponseBodyResult = exports.ListRulesRequestBody = exports.ListPunchScheduleByConditionWithPagingResponseBodyList = exports.ListPartnerRolesResponseBodyList = exports.ListPartnerRolesResponseBodyListWarningUsers = exports.ListPartnerRolesResponseBodyListWarningDepts = exports.ListPartnerRolesResponseBodyListVisibleUsers = exports.ListPartnerRolesResponseBodyListVisibleDepts = exports.ListMiniAppHistoryVersionResponseBodyList = exports.ListMiniAppAvailableVersionResponseBodyList = exports.ListJoinOrgInfoResponseBodyOrgInfoList = exports.ListCategorysRequestBody = exports.ListByPluginIdsResponseBodyPluginInfoList = exports.ListByCodesResponseBodyRobotInfoList = exports.ListAuditLogResponseBodyList = exports.ListAuditLogResponseBodyListDocReceiverList = exports.ListAuditLogResponseBodyListDocMemberList = exports.GroupQueryByOpenIdResponseBodyData = exports.GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr = exports.GroupQueryByAttrResponseBodyData = exports.GroupQueryByAttrResponseBodyDataList = exports.GroupQueryByAttrRequestListDynamicAttr = exports.GetUserStayLengthResponseBodyItemList = void 0;
exports.UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo = exports.UpdateRealmLicenseRequestDetailList = exports.TaskInfoUpdateTaskResponseBodyData = exports.TaskInfoUpdateTaskResponseBodyDataGroupVoList = exports.TaskInfoUpdateTaskRequestTaskExecutePersonDTOS = exports.TaskInfoUpdateTaskRequestDetailUrl = exports.TaskInfoUpdateTaskRequestCardDTO = exports.TaskInfoUpdateTaskRequestAttr = exports.TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr = exports.TaskInfoFinishTaskRequestTaskExecutePersonDTOS = exports.TaskInfoFinishTaskRequestCardDTO = exports.TaskInfoCreateAndStartTaskResponseBodyData = exports.TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList = exports.TaskInfoCreateAndStartTaskRequestTaskGroupDTOList = exports.TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS = exports.TaskInfoCreateAndStartTaskRequestDetailUrl = exports.TaskInfoCreateAndStartTaskRequestCardDTO = exports.TaskInfoCreateAndStartTaskRequestBacklogDTO = exports.TaskInfoCreateAndStartTaskRequestBacklogDTOContent = exports.TaskInfoCreateAndStartTaskRequestAttr = exports.TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr = exports.TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS = exports.TaskInfoCancelOrDelTaskRequestCardDTO = exports.TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS = exports.SpecialRuleBatchReceiverResponseBodyRows = exports.SpecialRuleBatchReceiverResponseBodyData = exports.SpecialRuleBatchReceiverRequestData = exports.SpecialRuleBatchReceiverRequestDataAttrs = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ConversationCategoryModel extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            categoryName: 'categoryName',
            children: 'children',
            levelNum: 'levelNum',
            order: 'order',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            categoryName: 'string',
            children: { 'type': 'array', 'itemType': ConversationCategoryModel },
            levelNum: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ConversationCategoryModel = ConversationCategoryModel;
class AddCustomSignConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCustomSignConfigHeaders = AddCustomSignConfigHeaders;
class AddCustomSignConfigRequest extends $tea.Model {
    static names() {
        return {
            allEffect: 'allEffect',
            canDownload: 'canDownload',
            protocolName: 'protocolName',
            pushDeptIds: 'pushDeptIds',
            pushStaffIds: 'pushStaffIds',
            signTermFiles: 'signTermFiles',
            termMessage: 'termMessage',
            unpushDeptIds: 'unpushDeptIds',
            unpushStaffIds: 'unpushStaffIds',
        };
    }
    static types() {
        return {
            allEffect: 'boolean',
            canDownload: 'boolean',
            protocolName: 'string',
            pushDeptIds: { 'type': 'array', 'itemType': 'string' },
            pushStaffIds: { 'type': 'array', 'itemType': 'string' },
            signTermFiles: { 'type': 'array', 'itemType': AddCustomSignConfigRequestSignTermFiles },
            termMessage: 'string',
            unpushDeptIds: { 'type': 'array', 'itemType': 'string' },
            unpushStaffIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCustomSignConfigRequest = AddCustomSignConfigRequest;
class AddCustomSignConfigResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCustomSignConfigResponseBody = AddCustomSignConfigResponseBody;
class AddCustomSignConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCustomSignConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCustomSignConfigResponse = AddCustomSignConfigResponse;
class AddOrgHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddOrgHeaders = AddOrgHeaders;
class AddOrgRequest extends $tea.Model {
    static names() {
        return {
            city: 'city',
            industry: 'industry',
            industryCode: 'industryCode',
            mobileNum: 'mobileNum',
            name: 'name',
            province: 'province',
        };
    }
    static types() {
        return {
            city: 'string',
            industry: 'string',
            industryCode: 'number',
            mobileNum: 'string',
            name: 'string',
            province: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddOrgRequest = AddOrgRequest;
class AddOrgResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddOrgResponseBody = AddOrgResponseBody;
class AddOrgResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddOrgResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddOrgResponse = AddOrgResponse;
class ApproveProcessCallbackHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ApproveProcessCallbackHeaders = ApproveProcessCallbackHeaders;
class ApproveProcessCallbackRequest extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            request: 'request',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            request: ApproveProcessCallbackRequestRequest,
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ApproveProcessCallbackRequest = ApproveProcessCallbackRequest;
class ApproveProcessCallbackResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ApproveProcessCallbackResponseBody = ApproveProcessCallbackResponseBody;
class ApproveProcessCallbackResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ApproveProcessCallbackResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ApproveProcessCallbackResponse = ApproveProcessCallbackResponse;
class BanOrOpenGroupWordsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BanOrOpenGroupWordsHeaders = BanOrOpenGroupWordsHeaders;
class BanOrOpenGroupWordsRequest extends $tea.Model {
    static names() {
        return {
            banWordsType: 'banWordsType',
            openConverationId: 'openConverationId',
        };
    }
    static types() {
        return {
            banWordsType: 'number',
            openConverationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BanOrOpenGroupWordsRequest = BanOrOpenGroupWordsRequest;
class BanOrOpenGroupWordsResponseBody extends $tea.Model {
    static names() {
        return {
            cause: 'cause',
            code: 'code',
        };
    }
    static types() {
        return {
            cause: 'string',
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BanOrOpenGroupWordsResponseBody = BanOrOpenGroupWordsResponseBody;
class BanOrOpenGroupWordsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BanOrOpenGroupWordsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BanOrOpenGroupWordsResponse = BanOrOpenGroupWordsResponse;
class CreateCategoryAndBindingGroupsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCategoryAndBindingGroupsHeaders = CreateCategoryAndBindingGroupsHeaders;
class CreateCategoryAndBindingGroupsRequest extends $tea.Model {
    static names() {
        return {
            categoryName: 'categoryName',
            groupIds: 'groupIds',
        };
    }
    static types() {
        return {
            categoryName: 'string',
            groupIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCategoryAndBindingGroupsRequest = CreateCategoryAndBindingGroupsRequest;
class CreateCategoryAndBindingGroupsResponseBody extends $tea.Model {
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCategoryAndBindingGroupsResponseBody = CreateCategoryAndBindingGroupsResponseBody;
class CreateCategoryAndBindingGroupsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCategoryAndBindingGroupsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCategoryAndBindingGroupsResponse = CreateCategoryAndBindingGroupsResponse;
class CreateDlpTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDlpTaskHeaders = CreateDlpTaskHeaders;
class CreateDlpTaskRequest extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            spaceId: 'spaceId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            spaceId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDlpTaskRequest = CreateDlpTaskRequest;
class CreateDlpTaskResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDlpTaskResponseBody = CreateDlpTaskResponseBody;
class CreateDlpTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateDlpTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDlpTaskResponse = CreateDlpTaskResponse;
class CreateMessageCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMessageCategoryHeaders = CreateMessageCategoryHeaders;
class CreateMessageCategoryRequest extends $tea.Model {
    static names() {
        return {
            categoryName: 'categoryName',
            groupIds: 'groupIds',
        };
    }
    static types() {
        return {
            categoryName: 'string',
            groupIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMessageCategoryRequest = CreateMessageCategoryRequest;
class CreateMessageCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMessageCategoryResponseBody = CreateMessageCategoryResponseBody;
class CreateMessageCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateMessageCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMessageCategoryResponse = CreateMessageCategoryResponse;
class CreateRuleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRuleHeaders = CreateRuleHeaders;
class CreateRuleRequest extends $tea.Model {
    static names() {
        return {
            customPlan: 'customPlan',
        };
    }
    static types() {
        return {
            customPlan: CreateRuleRequestCustomPlan,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRuleRequest = CreateRuleRequest;
class CreateRuleResponseBody extends $tea.Model {
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRuleResponseBody = CreateRuleResponseBody;
class CreateRuleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateRuleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRuleResponse = CreateRuleResponse;
class CreateTrustedDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceHeaders = CreateTrustedDeviceHeaders;
class CreateTrustedDeviceRequest extends $tea.Model {
    static names() {
        return {
            did: 'did',
            macAddress: 'macAddress',
            platform: 'platform',
            status: 'status',
            title: 'title',
            userId: 'userId',
        };
    }
    static types() {
        return {
            did: 'string',
            macAddress: 'string',
            platform: 'string',
            status: 'number',
            title: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceRequest = CreateTrustedDeviceRequest;
class CreateTrustedDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceResponseBody = CreateTrustedDeviceResponseBody;
class CreateTrustedDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTrustedDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceResponse = CreateTrustedDeviceResponse;
class CreateTrustedDeviceBatchHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceBatchHeaders = CreateTrustedDeviceBatchHeaders;
class CreateTrustedDeviceBatchRequest extends $tea.Model {
    static names() {
        return {
            detailList: 'detailList',
            macAddressList: 'macAddressList',
            platform: 'platform',
            userId: 'userId',
        };
    }
    static types() {
        return {
            detailList: { 'type': 'array', 'itemType': CreateTrustedDeviceBatchRequestDetailList },
            macAddressList: { 'type': 'array', 'itemType': 'string' },
            platform: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceBatchRequest = CreateTrustedDeviceBatchRequest;
class CreateTrustedDeviceBatchResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceBatchResponseBody = CreateTrustedDeviceBatchResponseBody;
class CreateTrustedDeviceBatchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTrustedDeviceBatchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceBatchResponse = CreateTrustedDeviceBatchResponse;
class CreateVirusScanTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVirusScanTaskHeaders = CreateVirusScanTaskHeaders;
class CreateVirusScanTaskRequest extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            downloadUrl: 'downloadUrl',
            fileMd5: 'fileMd5',
            fileName: 'fileName',
            fileSize: 'fileSize',
            source: 'source',
            spaceId: 'spaceId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            downloadUrl: 'string',
            fileMd5: 'string',
            fileName: 'string',
            fileSize: 'number',
            source: 'number',
            spaceId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVirusScanTaskRequest = CreateVirusScanTaskRequest;
class CreateVirusScanTaskResponseBody extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVirusScanTaskResponseBody = CreateVirusScanTaskResponseBody;
class CreateVirusScanTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateVirusScanTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVirusScanTaskResponse = CreateVirusScanTaskResponse;
class DataSyncHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DataSyncHeaders = DataSyncHeaders;
class DataSyncRequest extends $tea.Model {
    static names() {
        return {
            sql: 'sql',
        };
    }
    static types() {
        return {
            sql: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DataSyncRequest = DataSyncRequest;
class DataSyncResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            rowsAffected: 'rowsAffected',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            rowsAffected: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DataSyncResponseBody = DataSyncResponseBody;
class DataSyncResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DataSyncResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DataSyncResponse = DataSyncResponse;
class DeleteAcrossCloudStroageConfigsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteAcrossCloudStroageConfigsHeaders = DeleteAcrossCloudStroageConfigsHeaders;
class DeleteAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteAcrossCloudStroageConfigsResponseBody = DeleteAcrossCloudStroageConfigsResponseBody;
class DeleteAcrossCloudStroageConfigsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAcrossCloudStroageConfigsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteAcrossCloudStroageConfigsResponse = DeleteAcrossCloudStroageConfigsResponse;
class DeleteCommentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCommentHeaders = DeleteCommentHeaders;
class DeleteCommentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteCommentResponse = DeleteCommentResponse;
class DeleteTrustedDeviceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTrustedDeviceHeaders = DeleteTrustedDeviceHeaders;
class DeleteTrustedDeviceRequest extends $tea.Model {
    static names() {
        return {
            id: 'id',
            kickOff: 'kickOff',
            macAddress: 'macAddress',
            userId: 'userId',
        };
    }
    static types() {
        return {
            id: 'number',
            kickOff: 'boolean',
            macAddress: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTrustedDeviceRequest = DeleteTrustedDeviceRequest;
class DeleteTrustedDeviceResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTrustedDeviceResponseBody = DeleteTrustedDeviceResponseBody;
class DeleteTrustedDeviceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteTrustedDeviceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTrustedDeviceResponse = DeleteTrustedDeviceResponse;
class DistributePartnerAppHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DistributePartnerAppHeaders = DistributePartnerAppHeaders;
class DistributePartnerAppRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            deptId: 'deptId',
            subCorpId: 'subCorpId',
            type: 'type',
        };
    }
    static types() {
        return {
            appId: 'number',
            deptId: 'number',
            subCorpId: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DistributePartnerAppRequest = DistributePartnerAppRequest;
class DistributePartnerAppResponseBody extends $tea.Model {
    static names() {
        return {
            inviteUrl: 'inviteUrl',
        };
    }
    static types() {
        return {
            inviteUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DistributePartnerAppResponseBody = DistributePartnerAppResponseBody;
class DistributePartnerAppResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DistributePartnerAppResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DistributePartnerAppResponse = DistributePartnerAppResponse;
class EditSecurityConfigMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSecurityConfigMemberHeaders = EditSecurityConfigMemberHeaders;
class EditSecurityConfigMemberRequest extends $tea.Model {
    static names() {
        return {
            configKey: 'configKey',
            operateType: 'operateType',
            operateUserId: 'operateUserId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            configKey: 'string',
            operateType: 'string',
            operateUserId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSecurityConfigMemberRequest = EditSecurityConfigMemberRequest;
class EditSecurityConfigMemberResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSecurityConfigMemberResponseBody = EditSecurityConfigMemberResponseBody;
class EditSecurityConfigMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditSecurityConfigMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSecurityConfigMemberResponse = EditSecurityConfigMemberResponse;
class ExchangeMainAdminHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExchangeMainAdminHeaders = ExchangeMainAdminHeaders;
class ExchangeMainAdminRequest extends $tea.Model {
    static names() {
        return {
            newAdminUserId: 'newAdminUserId',
            oldAdminUserId: 'oldAdminUserId',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            newAdminUserId: 'string',
            oldAdminUserId: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExchangeMainAdminRequest = ExchangeMainAdminRequest;
class ExchangeMainAdminResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExchangeMainAdminResponseBody = ExchangeMainAdminResponseBody;
class ExchangeMainAdminResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExchangeMainAdminResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExchangeMainAdminResponse = ExchangeMainAdminResponse;
class ExclusiveCreateDingPortalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExclusiveCreateDingPortalHeaders = ExclusiveCreateDingPortalHeaders;
class ExclusiveCreateDingPortalRequest extends $tea.Model {
    static names() {
        return {
            dingPortalName: 'dingPortalName',
            targetCorpId: 'targetCorpId',
            templateAppUuid: 'templateAppUuid',
            templateCorpId: 'templateCorpId',
        };
    }
    static types() {
        return {
            dingPortalName: 'string',
            targetCorpId: 'string',
            templateAppUuid: 'string',
            templateCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExclusiveCreateDingPortalRequest = ExclusiveCreateDingPortalRequest;
class ExclusiveCreateDingPortalResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExclusiveCreateDingPortalResponseBody = ExclusiveCreateDingPortalResponseBody;
class ExclusiveCreateDingPortalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExclusiveCreateDingPortalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExclusiveCreateDingPortalResponse = ExclusiveCreateDingPortalResponse;
class FileStorageActiveStorageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageActiveStorageHeaders = FileStorageActiveStorageHeaders;
class FileStorageActiveStorageRequest extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            oss: 'oss',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            oss: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageActiveStorageRequest = FileStorageActiveStorageRequest;
class FileStorageActiveStorageResponseBody extends $tea.Model {
    static names() {
        return {
            createDate: 'createDate',
            fileStorageOpenStatus: 'fileStorageOpenStatus',
            storageStatus: 'storageStatus',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createDate: 'string',
            fileStorageOpenStatus: 'number',
            storageStatus: 'number',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageActiveStorageResponseBody = FileStorageActiveStorageResponseBody;
class FileStorageActiveStorageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageActiveStorageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageActiveStorageResponse = FileStorageActiveStorageResponse;
class FileStorageCheckConnectionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageCheckConnectionHeaders = FileStorageCheckConnectionHeaders;
class FileStorageCheckConnectionRequest extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            oss: 'oss',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            oss: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageCheckConnectionRequest = FileStorageCheckConnectionRequest;
class FileStorageCheckConnectionResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            checkState: 'checkState',
            oss: 'oss',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            checkState: 'number',
            oss: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageCheckConnectionResponseBody = FileStorageCheckConnectionResponseBody;
class FileStorageCheckConnectionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageCheckConnectionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageCheckConnectionResponse = FileStorageCheckConnectionResponse;
class FileStorageGetQuotaDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetQuotaDataHeaders = FileStorageGetQuotaDataHeaders;
class FileStorageGetQuotaDataRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            targetCorpId: 'targetCorpId',
            type: 'type',
        };
    }
    static types() {
        return {
            endTime: 'string',
            startTime: 'string',
            targetCorpId: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetQuotaDataRequest = FileStorageGetQuotaDataRequest;
class FileStorageGetQuotaDataResponseBody extends $tea.Model {
    static names() {
        return {
            quotaModelList: 'quotaModelList',
        };
    }
    static types() {
        return {
            quotaModelList: { 'type': 'array', 'itemType': FileStorageGetQuotaDataResponseBodyQuotaModelList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetQuotaDataResponseBody = FileStorageGetQuotaDataResponseBody;
class FileStorageGetQuotaDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageGetQuotaDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetQuotaDataResponse = FileStorageGetQuotaDataResponse;
class FileStorageGetStorageStateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetStorageStateHeaders = FileStorageGetStorageStateHeaders;
class FileStorageGetStorageStateRequest extends $tea.Model {
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetStorageStateRequest = FileStorageGetStorageStateRequest;
class FileStorageGetStorageStateResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            createDate: 'createDate',
            fileStorageOpenStatus: 'fileStorageOpenStatus',
            oss: 'oss',
            storageStatus: 'storageStatus',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            createDate: 'string',
            fileStorageOpenStatus: 'number',
            oss: 'string',
            storageStatus: 'number',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetStorageStateResponseBody = FileStorageGetStorageStateResponseBody;
class FileStorageGetStorageStateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageGetStorageStateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetStorageStateResponse = FileStorageGetStorageStateResponse;
class FileStorageUpdateStorageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageUpdateStorageHeaders = FileStorageUpdateStorageHeaders;
class FileStorageUpdateStorageRequest extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageUpdateStorageRequest = FileStorageUpdateStorageRequest;
class FileStorageUpdateStorageResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            oss: 'oss',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            oss: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageUpdateStorageResponseBody = FileStorageUpdateStorageResponseBody;
class FileStorageUpdateStorageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageUpdateStorageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageUpdateStorageResponse = FileStorageUpdateStorageResponse;
class GenerateDarkWaterMarkHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GenerateDarkWaterMarkHeaders = GenerateDarkWaterMarkHeaders;
class GenerateDarkWaterMarkRequest extends $tea.Model {
    static names() {
        return {
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GenerateDarkWaterMarkRequest = GenerateDarkWaterMarkRequest;
class GenerateDarkWaterMarkResponseBody extends $tea.Model {
    static names() {
        return {
            darkWatermarkVOList: 'darkWatermarkVOList',
        };
    }
    static types() {
        return {
            darkWatermarkVOList: { 'type': 'array', 'itemType': GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GenerateDarkWaterMarkResponseBody = GenerateDarkWaterMarkResponseBody;
class GenerateDarkWaterMarkResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GenerateDarkWaterMarkResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GenerateDarkWaterMarkResponse = GenerateDarkWaterMarkResponse;
class GetAccountTransferListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAccountTransferListHeaders = GetAccountTransferListHeaders;
class GetAccountTransferListRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            status: 'status',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAccountTransferListRequest = GetAccountTransferListRequest;
class GetAccountTransferListResponseBody extends $tea.Model {
    static names() {
        return {
            itemList: 'itemList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            itemList: { 'type': 'array', 'itemType': GetAccountTransferListResponseBodyItemList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAccountTransferListResponseBody = GetAccountTransferListResponseBody;
class GetAccountTransferListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAccountTransferListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAccountTransferListResponse = GetAccountTransferListResponse;
class GetActiveUserSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetActiveUserSummaryHeaders = GetActiveUserSummaryHeaders;
class GetActiveUserSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            actUsrCnt1m: 'actUsrCnt1m',
        };
    }
    static types() {
        return {
            actUsrCnt1m: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetActiveUserSummaryResponseBody = GetActiveUserSummaryResponseBody;
class GetActiveUserSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetActiveUserSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetActiveUserSummaryResponse = GetActiveUserSummaryResponse;
class GetAgentIdByRelatedAppIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAgentIdByRelatedAppIdHeaders = GetAgentIdByRelatedAppIdHeaders;
class GetAgentIdByRelatedAppIdRequest extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            appId: 'number',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAgentIdByRelatedAppIdRequest = GetAgentIdByRelatedAppIdRequest;
class GetAgentIdByRelatedAppIdResponseBody extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
        };
    }
    static types() {
        return {
            agentId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAgentIdByRelatedAppIdResponseBody = GetAgentIdByRelatedAppIdResponseBody;
class GetAgentIdByRelatedAppIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAgentIdByRelatedAppIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAgentIdByRelatedAppIdResponse = GetAgentIdByRelatedAppIdResponse;
class GetAllLabelableDeptsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsHeaders = GetAllLabelableDeptsHeaders;
class GetAllLabelableDeptsResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetAllLabelableDeptsResponseBodyData },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBody = GetAllLabelableDeptsResponseBody;
class GetAllLabelableDeptsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllLabelableDeptsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponse = GetAllLabelableDeptsResponse;
class GetAppDispatchInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoHeaders = GetAppDispatchInfoHeaders;
class GetAppDispatchInfoRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoRequest = GetAppDispatchInfoRequest;
class GetAppDispatchInfoResponseBody extends $tea.Model {
    static names() {
        return {
            android: 'android',
            iOS: 'iOS',
            mac: 'mac',
            windows: 'windows',
        };
    }
    static types() {
        return {
            android: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyAndroid },
            iOS: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyIOS },
            mac: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyMac },
            windows: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyWindows },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponseBody = GetAppDispatchInfoResponseBody;
class GetAppDispatchInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAppDispatchInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponse = GetAppDispatchInfoResponse;
class GetCalenderSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCalenderSummaryHeaders = GetCalenderSummaryHeaders;
class GetCalenderSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            calendarCreateUserCnt: 'calendarCreateUserCnt',
            recvCalendarUserCnt1d: 'recvCalendarUserCnt1d',
            useCalendarUserCnt1d: 'useCalendarUserCnt1d',
        };
    }
    static types() {
        return {
            calendarCreateUserCnt: 'string',
            recvCalendarUserCnt1d: 'string',
            useCalendarUserCnt1d: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCalenderSummaryResponseBody = GetCalenderSummaryResponseBody;
class GetCalenderSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCalenderSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCalenderSummaryResponse = GetCalenderSummaryResponse;
class GetCidsByBotCodeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCidsByBotCodeHeaders = GetCidsByBotCodeHeaders;
class GetCidsByBotCodeRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            robotCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCidsByBotCodeRequest = GetCidsByBotCodeRequest;
class GetCidsByBotCodeResponseBody extends $tea.Model {
    static names() {
        return {
            groupInfos: 'groupInfos',
            hasMore: 'hasMore',
        };
    }
    static types() {
        return {
            groupInfos: { 'type': 'array', 'itemType': GetCidsByBotCodeResponseBodyGroupInfos },
            hasMore: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCidsByBotCodeResponseBody = GetCidsByBotCodeResponseBody;
class GetCidsByBotCodeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCidsByBotCodeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCidsByBotCodeResponse = GetCidsByBotCodeResponse;
class GetCommentListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCommentListHeaders = GetCommentListHeaders;
class GetCommentListRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCommentListRequest = GetCommentListRequest;
class GetCommentListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetCommentListResponseBodyData },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCommentListResponseBody = GetCommentListResponseBody;
class GetCommentListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCommentListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCommentListResponse = GetCommentListResponse;
class GetConfBaseInfoByLogicalIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConfBaseInfoByLogicalIdHeaders = GetConfBaseInfoByLogicalIdHeaders;
class GetConfBaseInfoByLogicalIdRequest extends $tea.Model {
    static names() {
        return {
            logicalConferenceId: 'logicalConferenceId',
        };
    }
    static types() {
        return {
            logicalConferenceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConfBaseInfoByLogicalIdRequest = GetConfBaseInfoByLogicalIdRequest;
class GetConfBaseInfoByLogicalIdResponseBody extends $tea.Model {
    static names() {
        return {
            conferenceId: 'conferenceId',
            logicalConferenceId: 'logicalConferenceId',
            nickname: 'nickname',
            startTime: 'startTime',
            title: 'title',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            logicalConferenceId: 'string',
            nickname: 'string',
            startTime: 'number',
            title: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConfBaseInfoByLogicalIdResponseBody = GetConfBaseInfoByLogicalIdResponseBody;
class GetConfBaseInfoByLogicalIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConfBaseInfoByLogicalIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConfBaseInfoByLogicalIdResponse = GetConfBaseInfoByLogicalIdResponse;
class GetConferenceDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConferenceDetailHeaders = GetConferenceDetailHeaders;
class GetConferenceDetailResponseBody extends $tea.Model {
    static names() {
        return {
            attendeeNum: 'attendeeNum',
            attendeePercentage: 'attendeePercentage',
            callerId: 'callerId',
            callerName: 'callerName',
            confStartTime: 'confStartTime',
            conferenceId: 'conferenceId',
            duration: 'duration',
            memberList: 'memberList',
            title: 'title',
            totalNum: 'totalNum',
        };
    }
    static types() {
        return {
            attendeeNum: 'number',
            attendeePercentage: 'string',
            callerId: 'string',
            callerName: 'string',
            confStartTime: 'number',
            conferenceId: 'string',
            duration: 'number',
            memberList: { 'type': 'array', 'itemType': GetConferenceDetailResponseBodyMemberList },
            title: 'string',
            totalNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConferenceDetailResponseBody = GetConferenceDetailResponseBody;
class GetConferenceDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConferenceDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConferenceDetailResponse = GetConferenceDetailResponse;
class GetConversationCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationCategoryHeaders = GetConversationCategoryHeaders;
class GetConversationCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ConversationCategoryModel },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationCategoryResponseBody = GetConversationCategoryResponseBody;
class GetConversationCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConversationCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationCategoryResponse = GetConversationCategoryResponse;
class GetConversationDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationDetailHeaders = GetConversationDetailHeaders;
class GetConversationDetailRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationDetailRequest = GetConversationDetailRequest;
class GetConversationDetailResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetConversationDetailResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationDetailResponseBody = GetConversationDetailResponseBody;
class GetConversationDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConversationDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationDetailResponse = GetConversationDetailResponse;
class GetDingReportDeptSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportDeptSummaryHeaders = GetDingReportDeptSummaryHeaders;
class GetDingReportDeptSummaryRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportDeptSummaryRequest = GetDingReportDeptSummaryRequest;
class GetDingReportDeptSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetDingReportDeptSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportDeptSummaryResponseBody = GetDingReportDeptSummaryResponseBody;
class GetDingReportDeptSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDingReportDeptSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportDeptSummaryResponse = GetDingReportDeptSummaryResponse;
class GetDingReportSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportSummaryHeaders = GetDingReportSummaryHeaders;
class GetDingReportSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            reportCommentUserCnt1d: 'reportCommentUserCnt1d',
        };
    }
    static types() {
        return {
            reportCommentUserCnt1d: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportSummaryResponseBody = GetDingReportSummaryResponseBody;
class GetDingReportSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDingReportSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportSummaryResponse = GetDingReportSummaryResponse;
class GetDocCreatedDeptSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedDeptSummaryHeaders = GetDocCreatedDeptSummaryHeaders;
class GetDocCreatedDeptSummaryRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedDeptSummaryRequest = GetDocCreatedDeptSummaryRequest;
class GetDocCreatedDeptSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetDocCreatedDeptSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedDeptSummaryResponseBody = GetDocCreatedDeptSummaryResponseBody;
class GetDocCreatedDeptSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDocCreatedDeptSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedDeptSummaryResponse = GetDocCreatedDeptSummaryResponse;
class GetDocCreatedSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedSummaryHeaders = GetDocCreatedSummaryHeaders;
class GetDocCreatedSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            docCreateUserCnt1d: 'docCreateUserCnt1d',
            docCreatedCnt: 'docCreatedCnt',
        };
    }
    static types() {
        return {
            docCreateUserCnt1d: 'string',
            docCreatedCnt: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedSummaryResponseBody = GetDocCreatedSummaryResponseBody;
class GetDocCreatedSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDocCreatedSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedSummaryResponse = GetDocCreatedSummaryResponse;
class GetExclusiveAccountAllOrgListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetExclusiveAccountAllOrgListHeaders = GetExclusiveAccountAllOrgListHeaders;
class GetExclusiveAccountAllOrgListRequest extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetExclusiveAccountAllOrgListRequest = GetExclusiveAccountAllOrgListRequest;
class GetExclusiveAccountAllOrgListResponseBody extends $tea.Model {
    static names() {
        return {
            orgInfoList: 'orgInfoList',
        };
    }
    static types() {
        return {
            orgInfoList: { 'type': 'array', 'itemType': GetExclusiveAccountAllOrgListResponseBodyOrgInfoList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetExclusiveAccountAllOrgListResponseBody = GetExclusiveAccountAllOrgListResponseBody;
class GetExclusiveAccountAllOrgListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetExclusiveAccountAllOrgListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetExclusiveAccountAllOrgListResponse = GetExclusiveAccountAllOrgListResponse;
class GetGeneralFormCreatedDeptSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedDeptSummaryHeaders = GetGeneralFormCreatedDeptSummaryHeaders;
class GetGeneralFormCreatedDeptSummaryRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedDeptSummaryRequest = GetGeneralFormCreatedDeptSummaryRequest;
class GetGeneralFormCreatedDeptSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetGeneralFormCreatedDeptSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedDeptSummaryResponseBody = GetGeneralFormCreatedDeptSummaryResponseBody;
class GetGeneralFormCreatedDeptSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGeneralFormCreatedDeptSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedDeptSummaryResponse = GetGeneralFormCreatedDeptSummaryResponse;
class GetGeneralFormCreatedSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedSummaryHeaders = GetGeneralFormCreatedSummaryHeaders;
class GetGeneralFormCreatedSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            generalFormCreatedCnt: 'generalFormCreatedCnt',
            useGeneralFormUserCnt1d: 'useGeneralFormUserCnt1d',
        };
    }
    static types() {
        return {
            generalFormCreatedCnt: 'string',
            useGeneralFormUserCnt1d: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedSummaryResponseBody = GetGeneralFormCreatedSummaryResponseBody;
class GetGeneralFormCreatedSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGeneralFormCreatedSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedSummaryResponse = GetGeneralFormCreatedSummaryResponse;
class GetGroupActiveInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupActiveInfoHeaders = GetGroupActiveInfoHeaders;
class GetGroupActiveInfoRequest extends $tea.Model {
    static names() {
        return {
            dingGroupId: 'dingGroupId',
            groupType: 'groupType',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            dingGroupId: 'string',
            groupType: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupActiveInfoRequest = GetGroupActiveInfoRequest;
class GetGroupActiveInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetGroupActiveInfoResponseBodyData },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupActiveInfoResponseBody = GetGroupActiveInfoResponseBody;
class GetGroupActiveInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGroupActiveInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupActiveInfoResponse = GetGroupActiveInfoResponse;
class GetGroupInfoByCidHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupInfoByCidHeaders = GetGroupInfoByCidHeaders;
class GetGroupInfoByCidRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupInfoByCidRequest = GetGroupInfoByCidRequest;
class GetGroupInfoByCidResponseBody extends $tea.Model {
    static names() {
        return {
            groupInfo: 'groupInfo',
        };
    }
    static types() {
        return {
            groupInfo: GetGroupInfoByCidResponseBodyGroupInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupInfoByCidResponseBody = GetGroupInfoByCidResponseBody;
class GetGroupInfoByCidResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGroupInfoByCidResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupInfoByCidResponse = GetGroupInfoByCidResponse;
class GetGroupOrgByCidHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupOrgByCidHeaders = GetGroupOrgByCidHeaders;
class GetGroupOrgByCidRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupOrgByCidRequest = GetGroupOrgByCidRequest;
class GetGroupOrgByCidResponseBody extends $tea.Model {
    static names() {
        return {
            groupOrganization: 'groupOrganization',
        };
    }
    static types() {
        return {
            groupOrganization: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupOrgByCidResponseBody = GetGroupOrgByCidResponseBody;
class GetGroupOrgByCidResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGroupOrgByCidResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupOrgByCidResponse = GetGroupOrgByCidResponse;
class GetInActiveUserListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInActiveUserListHeaders = GetInActiveUserListHeaders;
class GetInActiveUserListRequest extends $tea.Model {
    static names() {
        return {
            deptIds: 'deptIds',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'string' },
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInActiveUserListRequest = GetInActiveUserListRequest;
class GetInActiveUserListResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': GetInActiveUserListResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInActiveUserListResponseBody = GetInActiveUserListResponseBody;
class GetInActiveUserListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInActiveUserListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInActiveUserListResponse = GetInActiveUserListResponse;
class GetLastOrgAuthDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLastOrgAuthDataHeaders = GetLastOrgAuthDataHeaders;
class GetLastOrgAuthDataRequest extends $tea.Model {
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLastOrgAuthDataRequest = GetLastOrgAuthDataRequest;
class GetLastOrgAuthDataResponseBody extends $tea.Model {
    static names() {
        return {
            authRemark: 'authRemark',
            authStatus: 'authStatus',
        };
    }
    static types() {
        return {
            authRemark: 'string',
            authStatus: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLastOrgAuthDataResponseBody = GetLastOrgAuthDataResponseBody;
class GetLastOrgAuthDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetLastOrgAuthDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLastOrgAuthDataResponse = GetLastOrgAuthDataResponse;
class GetMsgConfigHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigHeaders = GetMsgConfigHeaders;
class GetMsgConfigRequest extends $tea.Model {
    static names() {
        return {
            groupTopic: 'groupTopic',
            groupType: 'groupType',
            listDynamicAttr: 'listDynamicAttr',
            listEmployeeCode: 'listEmployeeCode',
            listUnitId: 'listUnitId',
            ownerJobNo: 'ownerJobNo',
            ruleBusinessCode: 'ruleBusinessCode',
            ruleCategory: 'ruleCategory',
            ruleCode: 'ruleCode',
            secretKey: 'secretKey',
            sysCode: 'sysCode',
        };
    }
    static types() {
        return {
            groupTopic: 'string',
            groupType: 'string',
            listDynamicAttr: { 'type': 'array', 'itemType': GetMsgConfigRequestListDynamicAttr },
            listEmployeeCode: { 'type': 'array', 'itemType': 'string' },
            listUnitId: { 'type': 'array', 'itemType': 'number' },
            ownerJobNo: 'string',
            ruleBusinessCode: 'string',
            ruleCategory: 'number',
            ruleCode: 'string',
            secretKey: 'string',
            sysCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigRequest = GetMsgConfigRequest;
class GetMsgConfigResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetMsgConfigResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBody = GetMsgConfigResponseBody;
class GetMsgConfigResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMsgConfigResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponse = GetMsgConfigResponse;
class GetMsgLocationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgLocationHeaders = GetMsgLocationHeaders;
class GetMsgLocationRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
            openMsgId: 'openMsgId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            openMsgId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgLocationRequest = GetMsgLocationRequest;
class GetMsgLocationResponseBody extends $tea.Model {
    static names() {
        return {
            msgLocationUrl: 'msgLocationUrl',
        };
    }
    static types() {
        return {
            msgLocationUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgLocationResponseBody = GetMsgLocationResponseBody;
class GetMsgLocationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMsgLocationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgLocationResponse = GetMsgLocationResponse;
class GetOaOperatorLogListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOaOperatorLogListHeaders = GetOaOperatorLogListHeaders;
class GetOaOperatorLogListRequest extends $tea.Model {
    static names() {
        return {
            categoryList: 'categoryList',
            endTime: 'endTime',
            opUserId: 'opUserId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            categoryList: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            opUserId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOaOperatorLogListRequest = GetOaOperatorLogListRequest;
class GetOaOperatorLogListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            itemCount: 'itemCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetOaOperatorLogListResponseBodyData },
            itemCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOaOperatorLogListResponseBody = GetOaOperatorLogListResponseBody;
class GetOaOperatorLogListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOaOperatorLogListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOaOperatorLogListResponse = GetOaOperatorLogListResponse;
class GetOutGroupsByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutGroupsByPageHeaders = GetOutGroupsByPageHeaders;
class GetOutGroupsByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutGroupsByPageRequest = GetOutGroupsByPageRequest;
class GetOutGroupsByPageResponseBody extends $tea.Model {
    static names() {
        return {
            responseBody: 'responseBody',
        };
    }
    static types() {
        return {
            responseBody: GetOutGroupsByPageResponseBodyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutGroupsByPageResponseBody = GetOutGroupsByPageResponseBody;
class GetOutGroupsByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOutGroupsByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutGroupsByPageResponse = GetOutGroupsByPageResponse;
class GetOutsideAuditGroupMessageByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageHeaders = GetOutsideAuditGroupMessageByPageHeaders;
class GetOutsideAuditGroupMessageByPageRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageRequest = GetOutsideAuditGroupMessageByPageRequest;
class GetOutsideAuditGroupMessageByPageResponseBody extends $tea.Model {
    static names() {
        return {
            responseBody: 'responseBody',
        };
    }
    static types() {
        return {
            responseBody: GetOutsideAuditGroupMessageByPageResponseBodyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBody = GetOutsideAuditGroupMessageByPageResponseBody;
class GetOutsideAuditGroupMessageByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOutsideAuditGroupMessageByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageResponse = GetOutsideAuditGroupMessageByPageResponse;
class GetPartnerTypeByParentIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPartnerTypeByParentIdHeaders = GetPartnerTypeByParentIdHeaders;
class GetPartnerTypeByParentIdResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetPartnerTypeByParentIdResponseBodyData },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPartnerTypeByParentIdResponseBody = GetPartnerTypeByParentIdResponseBody;
class GetPartnerTypeByParentIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPartnerTypeByParentIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPartnerTypeByParentIdResponse = GetPartnerTypeByParentIdResponse;
class GetPublicDevicesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesHeaders = GetPublicDevicesHeaders;
class GetPublicDevicesRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            macAddress: 'macAddress',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            platform: 'platform',
            startTime: 'startTime',
            title: 'title',
        };
    }
    static types() {
        return {
            endTime: 'number',
            macAddress: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            platform: 'string',
            startTime: 'number',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesRequest = GetPublicDevicesRequest;
class GetPublicDevicesResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            dataCnt: 'dataCnt',
            totalCnt: 'totalCnt',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyData },
            dataCnt: 'number',
            totalCnt: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesResponseBody = GetPublicDevicesResponseBody;
class GetPublicDevicesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPublicDevicesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesResponse = GetPublicDevicesResponse;
class GetPublisherSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublisherSummaryHeaders = GetPublisherSummaryHeaders;
class GetPublisherSummaryRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublisherSummaryRequest = GetPublisherSummaryRequest;
class GetPublisherSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            publisherArticleCntStd: 'publisherArticleCntStd',
            publisherArticlePvCntStd: 'publisherArticlePvCntStd',
            publisherArticlePvTop5: 'publisherArticlePvTop5',
            publisherCntStd: 'publisherCntStd',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetPublisherSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
            publisherArticleCntStd: 'string',
            publisherArticlePvCntStd: 'string',
            publisherArticlePvTop5: { 'type': 'array', 'itemType': GetPublisherSummaryResponseBodyPublisherArticlePvTop5 },
            publisherCntStd: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublisherSummaryResponseBody = GetPublisherSummaryResponseBody;
class GetPublisherSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPublisherSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublisherSummaryResponse = GetPublisherSummaryResponse;
class GetRealPeopleRecordsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRealPeopleRecordsHeaders = GetRealPeopleRecordsHeaders;
class GetRealPeopleRecordsRequest extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
            fromTime: 'fromTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            personIdentification: 'personIdentification',
            scene: 'scene',
            toTime: 'toTime',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            agentId: 'number',
            fromTime: 'number',
            maxResults: 'number',
            nextToken: 'number',
            personIdentification: 'number',
            scene: 'number',
            toTime: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRealPeopleRecordsRequest = GetRealPeopleRecordsRequest;
class GetRealPeopleRecordsResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            nextToken: 'nextToken',
            total: 'total',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetRealPeopleRecordsResponseBodyData },
            nextToken: 'number',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRealPeopleRecordsResponseBody = GetRealPeopleRecordsResponseBody;
class GetRealPeopleRecordsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRealPeopleRecordsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRealPeopleRecordsResponse = GetRealPeopleRecordsResponse;
class GetRecognizeRecordsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecognizeRecordsHeaders = GetRecognizeRecordsHeaders;
class GetRecognizeRecordsRequest extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
            faceCompareResult: 'faceCompareResult',
            fromTime: 'fromTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            toTime: 'toTime',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            agentId: 'number',
            faceCompareResult: 'number',
            fromTime: 'number',
            maxResults: 'number',
            nextToken: 'number',
            toTime: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecognizeRecordsRequest = GetRecognizeRecordsRequest;
class GetRecognizeRecordsResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            nextToken: 'nextToken',
            total: 'total',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetRecognizeRecordsResponseBodyData },
            nextToken: 'number',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecognizeRecordsResponseBody = GetRecognizeRecordsResponseBody;
class GetRecognizeRecordsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecognizeRecordsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecognizeRecordsResponse = GetRecognizeRecordsResponse;
class GetRobotInfoByCodeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRobotInfoByCodeHeaders = GetRobotInfoByCodeHeaders;
class GetRobotInfoByCodeRequest extends $tea.Model {
    static names() {
        return {
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            robotCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRobotInfoByCodeRequest = GetRobotInfoByCodeRequest;
class GetRobotInfoByCodeResponseBody extends $tea.Model {
    static names() {
        return {
            robotInfoVO: 'robotInfoVO',
        };
    }
    static types() {
        return {
            robotInfoVO: GetRobotInfoByCodeResponseBodyRobotInfoVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRobotInfoByCodeResponseBody = GetRobotInfoByCodeResponseBody;
class GetRobotInfoByCodeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRobotInfoByCodeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRobotInfoByCodeResponse = GetRobotInfoByCodeResponse;
class GetSecurityConfigMemberHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSecurityConfigMemberHeaders = GetSecurityConfigMemberHeaders;
class GetSecurityConfigMemberRequest extends $tea.Model {
    static names() {
        return {
            configKey: 'configKey',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            configKey: 'string',
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSecurityConfigMemberRequest = GetSecurityConfigMemberRequest;
class GetSecurityConfigMemberResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetSecurityConfigMemberResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSecurityConfigMemberResponseBody = GetSecurityConfigMemberResponseBody;
class GetSecurityConfigMemberResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSecurityConfigMemberResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSecurityConfigMemberResponse = GetSecurityConfigMemberResponse;
class GetSignedDetailByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignedDetailByPageHeaders = GetSignedDetailByPageHeaders;
class GetSignedDetailByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            signStatus: 'signStatus',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            signStatus: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignedDetailByPageRequest = GetSignedDetailByPageRequest;
class GetSignedDetailByPageResponseBody extends $tea.Model {
    static names() {
        return {
            auditSignedDetailDTOList: 'auditSignedDetailDTOList',
            currentPage: 'currentPage',
            pageSize: 'pageSize',
            total: 'total',
        };
    }
    static types() {
        return {
            auditSignedDetailDTOList: { 'type': 'array', 'itemType': GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList },
            currentPage: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignedDetailByPageResponseBody = GetSignedDetailByPageResponseBody;
class GetSignedDetailByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignedDetailByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignedDetailByPageResponse = GetSignedDetailByPageResponse;
class GetTrustDeviceListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrustDeviceListHeaders = GetTrustDeviceListHeaders;
class GetTrustDeviceListRequest extends $tea.Model {
    static names() {
        return {
            gmtCreateEnd: 'gmtCreateEnd',
            gmtCreateStart: 'gmtCreateStart',
            gmtModifiedEnd: 'gmtModifiedEnd',
            gmtModifiedStart: 'gmtModifiedStart',
            macAddress: 'macAddress',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            platform: 'platform',
            status: 'status',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            gmtCreateEnd: 'number',
            gmtCreateStart: 'number',
            gmtModifiedEnd: 'number',
            gmtModifiedStart: 'number',
            macAddress: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            platform: 'string',
            status: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrustDeviceListRequest = GetTrustDeviceListRequest;
class GetTrustDeviceListResponseBody extends $tea.Model {
    static names() {
        return {
            currentPage: 'currentPage',
            data: 'data',
            pageSize: 'pageSize',
            total: 'total',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            data: { 'type': 'array', 'itemType': GetTrustDeviceListResponseBodyData },
            pageSize: 'number',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrustDeviceListResponseBody = GetTrustDeviceListResponseBody;
class GetTrustDeviceListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTrustDeviceListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrustDeviceListResponse = GetTrustDeviceListResponse;
class GetUserAppVersionSummaryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAppVersionSummaryHeaders = GetUserAppVersionSummaryHeaders;
class GetUserAppVersionSummaryRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAppVersionSummaryRequest = GetUserAppVersionSummaryRequest;
class GetUserAppVersionSummaryResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetUserAppVersionSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAppVersionSummaryResponseBody = GetUserAppVersionSummaryResponseBody;
class GetUserAppVersionSummaryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserAppVersionSummaryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAppVersionSummaryResponse = GetUserAppVersionSummaryResponse;
class GetUserFaceStateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserFaceStateHeaders = GetUserFaceStateHeaders;
class GetUserFaceStateRequest extends $tea.Model {
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserFaceStateRequest = GetUserFaceStateRequest;
class GetUserFaceStateResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetUserFaceStateResponseBodyData },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserFaceStateResponseBody = GetUserFaceStateResponseBody;
class GetUserFaceStateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserFaceStateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserFaceStateResponse = GetUserFaceStateResponse;
class GetUserRealPeopleStateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealPeopleStateHeaders = GetUserRealPeopleStateHeaders;
class GetUserRealPeopleStateRequest extends $tea.Model {
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealPeopleStateRequest = GetUserRealPeopleStateRequest;
class GetUserRealPeopleStateResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetUserRealPeopleStateResponseBodyData },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealPeopleStateResponseBody = GetUserRealPeopleStateResponseBody;
class GetUserRealPeopleStateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserRealPeopleStateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealPeopleStateResponse = GetUserRealPeopleStateResponse;
class GetUserStayLengthHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserStayLengthHeaders = GetUserStayLengthHeaders;
class GetUserStayLengthRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserStayLengthRequest = GetUserStayLengthRequest;
class GetUserStayLengthResponseBody extends $tea.Model {
    static names() {
        return {
            itemList: 'itemList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            itemList: { 'type': 'array', 'itemType': GetUserStayLengthResponseBodyItemList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserStayLengthResponseBody = GetUserStayLengthResponseBody;
class GetUserStayLengthResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserStayLengthResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserStayLengthResponse = GetUserStayLengthResponse;
class GetVirusScanResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetVirusScanResultHeaders = GetVirusScanResultHeaders;
class GetVirusScanResultRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetVirusScanResultRequest = GetVirusScanResultRequest;
class GetVirusScanResultResponseBody extends $tea.Model {
    static names() {
        return {
            reason: 'reason',
            status: 'status',
        };
    }
    static types() {
        return {
            reason: 'string',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetVirusScanResultResponseBody = GetVirusScanResultResponseBody;
class GetVirusScanResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetVirusScanResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetVirusScanResultResponse = GetVirusScanResultResponse;
class GroupQueryByAttrHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrHeaders = GroupQueryByAttrHeaders;
class GroupQueryByAttrRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            groupTopic: 'groupTopic',
            groupType: 'groupType',
            listDynamicAttr: 'listDynamicAttr',
            pageIndex: 'pageIndex',
            pageSize: 'pageSize',
            secretKey: 'secretKey',
        };
    }
    static types() {
        return {
            corpId: 'string',
            groupTopic: 'string',
            groupType: 'string',
            listDynamicAttr: { 'type': 'array', 'itemType': GroupQueryByAttrRequestListDynamicAttr },
            pageIndex: 'number',
            pageSize: 'number',
            secretKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrRequest = GroupQueryByAttrRequest;
class GroupQueryByAttrResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GroupQueryByAttrResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrResponseBody = GroupQueryByAttrResponseBody;
class GroupQueryByAttrResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GroupQueryByAttrResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrResponse = GroupQueryByAttrResponse;
class GroupQueryByOpenIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByOpenIdHeaders = GroupQueryByOpenIdHeaders;
class GroupQueryByOpenIdRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
            secretKey: 'secretKey',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            secretKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByOpenIdRequest = GroupQueryByOpenIdRequest;
class GroupQueryByOpenIdResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GroupQueryByOpenIdResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByOpenIdResponseBody = GroupQueryByOpenIdResponseBody;
class GroupQueryByOpenIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GroupQueryByOpenIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByOpenIdResponse = GroupQueryByOpenIdResponse;
class ListAuditLogHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogHeaders = ListAuditLogHeaders;
class ListAuditLogRequest extends $tea.Model {
    static names() {
        return {
            endDate: 'endDate',
            nextBizId: 'nextBizId',
            nextGmtCreate: 'nextGmtCreate',
            pageSize: 'pageSize',
            startDate: 'startDate',
        };
    }
    static types() {
        return {
            endDate: 'number',
            nextBizId: 'number',
            nextGmtCreate: 'number',
            pageSize: 'number',
            startDate: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogRequest = ListAuditLogRequest;
class ListAuditLogResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListAuditLogResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogResponseBody = ListAuditLogResponseBody;
class ListAuditLogResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAuditLogResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogResponse = ListAuditLogResponse;
class ListByCodesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByCodesHeaders = ListByCodesHeaders;
class ListByCodesRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByCodesRequest = ListByCodesRequest;
class ListByCodesResponseBody extends $tea.Model {
    static names() {
        return {
            robotInfoList: 'robotInfoList',
        };
    }
    static types() {
        return {
            robotInfoList: { 'type': 'array', 'itemType': ListByCodesResponseBodyRobotInfoList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByCodesResponseBody = ListByCodesResponseBody;
class ListByCodesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListByCodesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByCodesResponse = ListByCodesResponse;
class ListByPluginIdsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByPluginIdsHeaders = ListByPluginIdsHeaders;
class ListByPluginIdsRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByPluginIdsRequest = ListByPluginIdsRequest;
class ListByPluginIdsResponseBody extends $tea.Model {
    static names() {
        return {
            pluginInfoList: 'pluginInfoList',
        };
    }
    static types() {
        return {
            pluginInfoList: { 'type': 'array', 'itemType': ListByPluginIdsResponseBodyPluginInfoList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByPluginIdsResponseBody = ListByPluginIdsResponseBody;
class ListByPluginIdsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListByPluginIdsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByPluginIdsResponse = ListByPluginIdsResponse;
class ListCategorysHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCategorysHeaders = ListCategorysHeaders;
class ListCategorysRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: ListCategorysRequestBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCategorysRequest = ListCategorysRequest;
class ListCategorysShrinkRequest extends $tea.Model {
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCategorysShrinkRequest = ListCategorysShrinkRequest;
class ListCategorysResponseBody extends $tea.Model {
    static names() {
        return {
            detailModelList: 'detailModelList',
        };
    }
    static types() {
        return {
            detailModelList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCategorysResponseBody = ListCategorysResponseBody;
class ListCategorysResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCategorysResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCategorysResponse = ListCategorysResponse;
class ListJoinOrgInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListJoinOrgInfoHeaders = ListJoinOrgInfoHeaders;
class ListJoinOrgInfoRequest extends $tea.Model {
    static names() {
        return {
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            mobile: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListJoinOrgInfoRequest = ListJoinOrgInfoRequest;
class ListJoinOrgInfoResponseBody extends $tea.Model {
    static names() {
        return {
            orgInfoList: 'orgInfoList',
        };
    }
    static types() {
        return {
            orgInfoList: { 'type': 'array', 'itemType': ListJoinOrgInfoResponseBodyOrgInfoList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListJoinOrgInfoResponseBody = ListJoinOrgInfoResponseBody;
class ListJoinOrgInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListJoinOrgInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListJoinOrgInfoResponse = ListJoinOrgInfoResponse;
class ListMiniAppAvailableVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppAvailableVersionHeaders = ListMiniAppAvailableVersionHeaders;
class ListMiniAppAvailableVersionRequest extends $tea.Model {
    static names() {
        return {
            miniAppId: 'miniAppId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            versionTypeSet: 'versionTypeSet',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            versionTypeSet: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppAvailableVersionRequest = ListMiniAppAvailableVersionRequest;
class ListMiniAppAvailableVersionResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListMiniAppAvailableVersionResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppAvailableVersionResponseBody = ListMiniAppAvailableVersionResponseBody;
class ListMiniAppAvailableVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListMiniAppAvailableVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppAvailableVersionResponse = ListMiniAppAvailableVersionResponse;
class ListMiniAppHistoryVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppHistoryVersionHeaders = ListMiniAppHistoryVersionHeaders;
class ListMiniAppHistoryVersionRequest extends $tea.Model {
    static names() {
        return {
            miniAppId: 'miniAppId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppHistoryVersionRequest = ListMiniAppHistoryVersionRequest;
class ListMiniAppHistoryVersionResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListMiniAppHistoryVersionResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppHistoryVersionResponseBody = ListMiniAppHistoryVersionResponseBody;
class ListMiniAppHistoryVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListMiniAppHistoryVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppHistoryVersionResponse = ListMiniAppHistoryVersionResponse;
class ListPartnerRolesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesHeaders = ListPartnerRolesHeaders;
class ListPartnerRolesResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponseBody = ListPartnerRolesResponseBody;
class ListPartnerRolesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPartnerRolesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponse = ListPartnerRolesResponse;
class ListPunchScheduleByConditionWithPagingHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPunchScheduleByConditionWithPagingHeaders = ListPunchScheduleByConditionWithPagingHeaders;
class ListPunchScheduleByConditionWithPagingRequest extends $tea.Model {
    static names() {
        return {
            bizInstanceId: 'bizInstanceId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            scheduleDateEnd: 'scheduleDateEnd',
            scheduleDateStart: 'scheduleDateStart',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            bizInstanceId: 'string',
            maxResults: 'number',
            nextToken: 'number',
            scheduleDateEnd: 'string',
            scheduleDateStart: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPunchScheduleByConditionWithPagingRequest = ListPunchScheduleByConditionWithPagingRequest;
class ListPunchScheduleByConditionWithPagingResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': ListPunchScheduleByConditionWithPagingResponseBodyList },
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPunchScheduleByConditionWithPagingResponseBody = ListPunchScheduleByConditionWithPagingResponseBody;
class ListPunchScheduleByConditionWithPagingResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPunchScheduleByConditionWithPagingResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPunchScheduleByConditionWithPagingResponse = ListPunchScheduleByConditionWithPagingResponse;
class ListRulesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRulesHeaders = ListRulesHeaders;
class ListRulesRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: ListRulesRequestBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRulesRequest = ListRulesRequest;
class ListRulesShrinkRequest extends $tea.Model {
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRulesShrinkRequest = ListRulesShrinkRequest;
class ListRulesResponseBody extends $tea.Model {
    static names() {
        return {
            detailModelList: 'detailModelList',
        };
    }
    static types() {
        return {
            detailModelList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRulesResponseBody = ListRulesResponseBody;
class ListRulesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRulesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRulesResponse = ListRulesResponse;
class LogoutHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LogoutHeaders = LogoutHeaders;
class LogoutRequest extends $tea.Model {
    static names() {
        return {
            deviceType: 'deviceType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deviceType: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LogoutRequest = LogoutRequest;
class LogoutResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LogoutResponseBody = LogoutResponseBody;
class LogoutResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LogoutResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LogoutResponse = LogoutResponse;
class OpenBenefitPackageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenBenefitPackageHeaders = OpenBenefitPackageHeaders;
class OpenBenefitPackageRequest extends $tea.Model {
    static names() {
        return {
            benefitPackage: 'benefitPackage',
            endDate: 'endDate',
            startDate: 'startDate',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            benefitPackage: 'number',
            endDate: 'number',
            startDate: 'number',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenBenefitPackageRequest = OpenBenefitPackageRequest;
class OpenBenefitPackageResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenBenefitPackageResponseBody = OpenBenefitPackageResponseBody;
class OpenBenefitPackageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenBenefitPackageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenBenefitPackageResponse = OpenBenefitPackageResponse;
class OpportunitySearchHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpportunitySearchHeaders = OpportunitySearchHeaders;
class OpportunitySearchRequest extends $tea.Model {
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpportunitySearchRequest = OpportunitySearchRequest;
class OpportunitySearchResponseBody extends $tea.Model {
    static names() {
        return {
            opportunityExist: 'opportunityExist',
        };
    }
    static types() {
        return {
            opportunityExist: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpportunitySearchResponseBody = OpportunitySearchResponseBody;
class OpportunitySearchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpportunitySearchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpportunitySearchResponse = OpportunitySearchResponse;
class PreventCheatingCheckRiskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreventCheatingCheckRiskHeaders = PreventCheatingCheckRiskHeaders;
class PreventCheatingCheckRiskRequest extends $tea.Model {
    static names() {
        return {
            clientVer: 'clientVer',
            platform: 'platform',
            platformVer: 'platformVer',
            sec: 'sec',
            userId: 'userId',
        };
    }
    static types() {
        return {
            clientVer: 'string',
            platform: 'string',
            platformVer: 'string',
            sec: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreventCheatingCheckRiskRequest = PreventCheatingCheckRiskRequest;
class PreventCheatingCheckRiskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: PreventCheatingCheckRiskResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreventCheatingCheckRiskResponseBody = PreventCheatingCheckRiskResponseBody;
class PreventCheatingCheckRiskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PreventCheatingCheckRiskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreventCheatingCheckRiskResponse = PreventCheatingCheckRiskResponse;
class PublishFileChangeNoticeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishFileChangeNoticeHeaders = PublishFileChangeNoticeHeaders;
class PublishFileChangeNoticeRequest extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            operateType: 'operateType',
            operatorUnionId: 'operatorUnionId',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            operateType: 'string',
            operatorUnionId: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishFileChangeNoticeRequest = PublishFileChangeNoticeRequest;
class PublishFileChangeNoticeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishFileChangeNoticeResponse = PublishFileChangeNoticeResponse;
class PublishRuleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishRuleHeaders = PublishRuleHeaders;
class PublishRuleRequest extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishRuleRequest = PublishRuleRequest;
class PublishRuleResponseBody extends $tea.Model {
    static names() {
        return {
            isPublish: 'isPublish',
        };
    }
    static types() {
        return {
            isPublish: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishRuleResponseBody = PublishRuleResponseBody;
class PublishRuleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PublishRuleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PublishRuleResponse = PublishRuleResponse;
class PushBadgeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushBadgeHeaders = PushBadgeHeaders;
class PushBadgeRequest extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
            badgeItems: 'badgeItems',
            pushType: 'pushType',
        };
    }
    static types() {
        return {
            agentId: 'string',
            badgeItems: { 'type': 'array', 'itemType': PushBadgeRequestBadgeItems },
            pushType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushBadgeRequest = PushBadgeRequest;
class PushBadgeResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushBadgeResponseBody = PushBadgeResponseBody;
class PushBadgeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushBadgeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushBadgeResponse = PushBadgeResponse;
class QueryAcrossCloudStroageConfigsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAcrossCloudStroageConfigsHeaders = QueryAcrossCloudStroageConfigsHeaders;
class QueryAcrossCloudStroageConfigsRequest extends $tea.Model {
    static names() {
        return {
            targetCloudType: 'targetCloudType',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCloudType: 'number',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAcrossCloudStroageConfigsRequest = QueryAcrossCloudStroageConfigsRequest;
class QueryAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            bucketName: 'bucketName',
            cloudType: 'cloudType',
            endpoint: 'endpoint',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            bucketName: 'string',
            cloudType: 'number',
            endpoint: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAcrossCloudStroageConfigsResponseBody = QueryAcrossCloudStroageConfigsResponseBody;
class QueryAcrossCloudStroageConfigsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAcrossCloudStroageConfigsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAcrossCloudStroageConfigsResponse = QueryAcrossCloudStroageConfigsResponse;
class QueryChannelStaffInfoByMobileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChannelStaffInfoByMobileHeaders = QueryChannelStaffInfoByMobileHeaders;
class QueryChannelStaffInfoByMobileRequest extends $tea.Model {
    static names() {
        return {
            mobile: 'mobile',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            mobile: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChannelStaffInfoByMobileRequest = QueryChannelStaffInfoByMobileRequest;
class QueryChannelStaffInfoByMobileResponseBody extends $tea.Model {
    static names() {
        return {
            empInfo: 'empInfo',
            exclusiveAccountEmpInfoList: 'exclusiveAccountEmpInfoList',
        };
    }
    static types() {
        return {
            empInfo: QueryChannelStaffInfoByMobileResponseBodyEmpInfo,
            exclusiveAccountEmpInfoList: { 'type': 'array', 'itemType': QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChannelStaffInfoByMobileResponseBody = QueryChannelStaffInfoByMobileResponseBody;
class QueryChannelStaffInfoByMobileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryChannelStaffInfoByMobileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChannelStaffInfoByMobileResponse = QueryChannelStaffInfoByMobileResponse;
class QueryConversationPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationPageHeaders = QueryConversationPageHeaders;
class QueryConversationPageRequest extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            maxResults: 'number',
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationPageRequest = QueryConversationPageRequest;
class QueryConversationPageResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryConversationPageResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationPageResponseBody = QueryConversationPageResponseBody;
class QueryConversationPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryConversationPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationPageResponse = QueryConversationPageResponse;
class QueryExclusiveBenefitsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryExclusiveBenefitsHeaders = QueryExclusiveBenefitsHeaders;
class QueryExclusiveBenefitsResponseBody extends $tea.Model {
    static names() {
        return {
            benefitsList: 'benefitsList',
        };
    }
    static types() {
        return {
            benefitsList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryExclusiveBenefitsResponseBody = QueryExclusiveBenefitsResponseBody;
class QueryExclusiveBenefitsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryExclusiveBenefitsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryExclusiveBenefitsResponse = QueryExclusiveBenefitsResponse;
class QueryPartnerInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPartnerInfoHeaders = QueryPartnerInfoHeaders;
class QueryPartnerInfoResponseBody extends $tea.Model {
    static names() {
        return {
            partnerDeptList: 'partnerDeptList',
            partnerLabelList: 'partnerLabelList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            partnerDeptList: { 'type': 'array', 'itemType': QueryPartnerInfoResponseBodyPartnerDeptList },
            partnerLabelList: { 'type': 'array', 'itemType': QueryPartnerInfoResponseBodyPartnerLabelList },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPartnerInfoResponseBody = QueryPartnerInfoResponseBody;
class QueryPartnerInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPartnerInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPartnerInfoResponse = QueryPartnerInfoResponse;
class QueryTemplateInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoHeaders = QueryTemplateInfoHeaders;
class QueryTemplateInfoResponseBody extends $tea.Model {
    static names() {
        return {
            abilitySwitch: 'abilitySwitch',
            appInfo: 'appInfo',
            conversationScope: 'conversationScope',
            createAt: 'createAt',
            description: 'description',
            grayConversationIds: 'grayConversationIds',
            grayInfo: 'grayInfo',
            grayTemplateId: 'grayTemplateId',
            groupSettingList: 'groupSettingList',
            iconMediaId: 'iconMediaId',
            modifiedAt: 'modifiedAt',
            modifyOrderId: 'modifyOrderId',
            modifyStatus: 'modifyStatus',
            parentTemplateDetailVO: 'parentTemplateDetailVO',
            publishSubState: 'publishSubState',
            robotTemplateList: 'robotTemplateList',
            status: 'status',
            templateId: 'templateId',
            templateIntroduction: 'templateIntroduction',
            templateName: 'templateName',
            templateType: 'templateType',
            templateVisibility: 'templateVisibility',
            toolbarPluginList: 'toolbarPluginList',
            version: 'version',
        };
    }
    static types() {
        return {
            abilitySwitch: 'number',
            appInfo: QueryTemplateInfoResponseBodyAppInfo,
            conversationScope: { 'type': 'array', 'itemType': 'string' },
            createAt: 'number',
            description: 'string',
            grayConversationIds: { 'type': 'array', 'itemType': 'string' },
            grayInfo: QueryTemplateInfoResponseBodyGrayInfo,
            grayTemplateId: 'string',
            groupSettingList: { 'type': 'array', 'itemType': QueryTemplateInfoResponseBodyGroupSettingList },
            iconMediaId: 'string',
            modifiedAt: 'number',
            modifyOrderId: 'number',
            modifyStatus: 'number',
            parentTemplateDetailVO: QueryTemplateInfoResponseBodyParentTemplateDetailVO,
            publishSubState: 'string',
            robotTemplateList: { 'type': 'array', 'itemType': 'string' },
            status: 'number',
            templateId: 'string',
            templateIntroduction: QueryTemplateInfoResponseBodyTemplateIntroduction,
            templateName: 'string',
            templateType: 'number',
            templateVisibility: QueryTemplateInfoResponseBodyTemplateVisibility,
            toolbarPluginList: { 'type': 'array', 'itemType': 'string' },
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBody = QueryTemplateInfoResponseBody;
class QueryTemplateInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTemplateInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponse = QueryTemplateInfoResponse;
class QueryUserBehaviorHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserBehaviorHeaders = QueryUserBehaviorHeaders;
class QueryUserBehaviorRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            platform: 'platform',
            startTime: 'startTime',
            type: 'type',
            userId: 'userId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            platform: 'number',
            startTime: 'number',
            type: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserBehaviorRequest = QueryUserBehaviorRequest;
class QueryUserBehaviorResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            dataCnt: 'dataCnt',
            totalCnt: 'totalCnt',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': QueryUserBehaviorResponseBodyData },
            dataCnt: 'number',
            totalCnt: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserBehaviorResponseBody = QueryUserBehaviorResponseBody;
class QueryUserBehaviorResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserBehaviorResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserBehaviorResponse = QueryUserBehaviorResponse;
class RollbackMiniAppVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackMiniAppVersionHeaders = RollbackMiniAppVersionHeaders;
class RollbackMiniAppVersionRequest extends $tea.Model {
    static names() {
        return {
            miniAppId: 'miniAppId',
            rollbackVersion: 'rollbackVersion',
            targetVersion: 'targetVersion',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            rollbackVersion: 'string',
            targetVersion: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackMiniAppVersionRequest = RollbackMiniAppVersionRequest;
class RollbackMiniAppVersionResponseBody extends $tea.Model {
    static names() {
        return {
            cause: 'cause',
            code: 'code',
        };
    }
    static types() {
        return {
            cause: 'string',
            code: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackMiniAppVersionResponseBody = RollbackMiniAppVersionResponseBody;
class RollbackMiniAppVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RollbackMiniAppVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollbackMiniAppVersionResponse = RollbackMiniAppVersionResponse;
class RuleBatchReceiverHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverHeaders = RuleBatchReceiverHeaders;
class RuleBatchReceiverRequest extends $tea.Model {
    static names() {
        return {
            batchNo: 'batchNo',
            cardOptions: 'cardOptions',
            data: 'data',
            ruleCode: 'ruleCode',
            secretKey: 'secretKey',
            specialStrategy: 'specialStrategy',
            taskBatchNo: 'taskBatchNo',
        };
    }
    static types() {
        return {
            batchNo: 'string',
            cardOptions: 'string',
            data: { 'type': 'array', 'itemType': RuleBatchReceiverRequestData },
            ruleCode: 'string',
            secretKey: 'string',
            specialStrategy: 'boolean',
            taskBatchNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverRequest = RuleBatchReceiverRequest;
class RuleBatchReceiverResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            msg: 'msg',
            msgId: 'msgId',
            rows: 'rows',
        };
    }
    static types() {
        return {
            code: 'number',
            data: { 'type': 'array', 'itemType': RuleBatchReceiverResponseBodyData },
            msg: 'string',
            msgId: 'string',
            rows: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': RuleBatchReceiverResponseBodyRows } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverResponseBody = RuleBatchReceiverResponseBody;
class RuleBatchReceiverResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RuleBatchReceiverResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverResponse = RuleBatchReceiverResponse;
class SaveAcrossCloudStroageConfigsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAcrossCloudStroageConfigsHeaders = SaveAcrossCloudStroageConfigsHeaders;
class SaveAcrossCloudStroageConfigsRequest extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            bucketName: 'bucketName',
            cloudType: 'cloudType',
            endpoint: 'endpoint',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            bucketName: 'string',
            cloudType: 'number',
            endpoint: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAcrossCloudStroageConfigsRequest = SaveAcrossCloudStroageConfigsRequest;
class SaveAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            endpoint: 'endpoint',
            state: 'state',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            endpoint: 'string',
            state: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAcrossCloudStroageConfigsResponseBody = SaveAcrossCloudStroageConfigsResponseBody;
class SaveAcrossCloudStroageConfigsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveAcrossCloudStroageConfigsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAcrossCloudStroageConfigsResponse = SaveAcrossCloudStroageConfigsResponse;
class SaveAndSubmitAuthInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAndSubmitAuthInfoHeaders = SaveAndSubmitAuthInfoHeaders;
class SaveAndSubmitAuthInfoRequest extends $tea.Model {
    static names() {
        return {
            applyRemark: 'applyRemark',
            authorizeMediaId: 'authorizeMediaId',
            industry: 'industry',
            legalPerson: 'legalPerson',
            legalPersonIdCard: 'legalPersonIdCard',
            licenseMediaId: 'licenseMediaId',
            locCity: 'locCity',
            locCityName: 'locCityName',
            locProvince: 'locProvince',
            locProvinceName: 'locProvinceName',
            mobileNum: 'mobileNum',
            orgName: 'orgName',
            organizationCode: 'organizationCode',
            organizationCodeMediaId: 'organizationCodeMediaId',
            registLocation: 'registLocation',
            registNum: 'registNum',
            targetCorpId: 'targetCorpId',
            unifiedSocialCredit: 'unifiedSocialCredit',
        };
    }
    static types() {
        return {
            applyRemark: 'string',
            authorizeMediaId: 'string',
            industry: 'string',
            legalPerson: 'string',
            legalPersonIdCard: 'string',
            licenseMediaId: 'string',
            locCity: 'number',
            locCityName: 'string',
            locProvince: 'number',
            locProvinceName: 'string',
            mobileNum: 'string',
            orgName: 'string',
            organizationCode: 'string',
            organizationCodeMediaId: 'string',
            registLocation: 'string',
            registNum: 'string',
            targetCorpId: 'string',
            unifiedSocialCredit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAndSubmitAuthInfoRequest = SaveAndSubmitAuthInfoRequest;
class SaveAndSubmitAuthInfoResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAndSubmitAuthInfoResponseBody = SaveAndSubmitAuthInfoResponseBody;
class SaveAndSubmitAuthInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveAndSubmitAuthInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveAndSubmitAuthInfoResponse = SaveAndSubmitAuthInfoResponse;
class SaveOpenTerminalInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveOpenTerminalInfoHeaders = SaveOpenTerminalInfoHeaders;
class SaveOpenTerminalInfoRequest extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            logSource: 'logSource',
            logType: 'logType',
            openExt: 'openExt',
        };
    }
    static types() {
        return {
            corpId: 'string',
            logSource: 'string',
            logType: 'string',
            openExt: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveOpenTerminalInfoRequest = SaveOpenTerminalInfoRequest;
class SaveOpenTerminalInfoResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveOpenTerminalInfoResponseBody = SaveOpenTerminalInfoResponseBody;
class SaveOpenTerminalInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveOpenTerminalInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveOpenTerminalInfoResponse = SaveOpenTerminalInfoResponse;
class SaveStorageFunctionSwitchHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageFunctionSwitchHeaders = SaveStorageFunctionSwitchHeaders;
class SaveStorageFunctionSwitchRequest extends $tea.Model {
    static names() {
        return {
            functionList: 'functionList',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            functionList: { 'type': 'array', 'itemType': SaveStorageFunctionSwitchRequestFunctionList },
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageFunctionSwitchRequest = SaveStorageFunctionSwitchRequest;
class SaveStorageFunctionSwitchResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageFunctionSwitchResponseBody = SaveStorageFunctionSwitchResponseBody;
class SaveStorageFunctionSwitchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveStorageFunctionSwitchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageFunctionSwitchResponse = SaveStorageFunctionSwitchResponse;
class SaveStorageSwitchHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageSwitchHeaders = SaveStorageSwitchHeaders;
class SaveStorageSwitchRequest extends $tea.Model {
    static names() {
        return {
            openStorage: 'openStorage',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            openStorage: 'number',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageSwitchRequest = SaveStorageSwitchRequest;
class SaveStorageSwitchResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageSwitchResponseBody = SaveStorageSwitchResponseBody;
class SaveStorageSwitchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveStorageSwitchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageSwitchResponse = SaveStorageSwitchResponse;
class SaveWhiteAppHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveWhiteAppHeaders = SaveWhiteAppHeaders;
class SaveWhiteAppRequest extends $tea.Model {
    static names() {
        return {
            agentIdList: 'agentIdList',
            agentIdMap: 'agentIdMap',
            operation: 'operation',
        };
    }
    static types() {
        return {
            agentIdList: { 'type': 'array', 'itemType': 'number' },
            agentIdMap: 'string',
            operation: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveWhiteAppRequest = SaveWhiteAppRequest;
class SaveWhiteAppResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveWhiteAppResponseBody = SaveWhiteAppResponseBody;
class SaveWhiteAppResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveWhiteAppResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveWhiteAppResponse = SaveWhiteAppResponse;
class SearchOrgInnerGroupInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchOrgInnerGroupInfoHeaders = SearchOrgInnerGroupInfoHeaders;
class SearchOrgInnerGroupInfoRequest extends $tea.Model {
    static names() {
        return {
            createTimeEnd: 'createTimeEnd',
            createTimeStart: 'createTimeStart',
            groupMembersCountEnd: 'groupMembersCountEnd',
            groupMembersCountStart: 'groupMembersCountStart',
            groupName: 'groupName',
            groupOwner: 'groupOwner',
            lastActiveTimeEnd: 'lastActiveTimeEnd',
            lastActiveTimeStart: 'lastActiveTimeStart',
            operatorUserId: 'operatorUserId',
            pageSize: 'pageSize',
            pageStart: 'pageStart',
            syncToDingpan: 'syncToDingpan',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            createTimeEnd: 'number',
            createTimeStart: 'number',
            groupMembersCountEnd: 'number',
            groupMembersCountStart: 'number',
            groupName: 'string',
            groupOwner: 'string',
            lastActiveTimeEnd: 'number',
            lastActiveTimeStart: 'number',
            operatorUserId: 'string',
            pageSize: 'number',
            pageStart: 'number',
            syncToDingpan: 'number',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchOrgInnerGroupInfoRequest = SearchOrgInnerGroupInfoRequest;
class SearchOrgInnerGroupInfoResponseBody extends $tea.Model {
    static names() {
        return {
            itemCount: 'itemCount',
            items: 'items',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            itemCount: 'number',
            items: { 'type': 'array', 'itemType': SearchOrgInnerGroupInfoResponseBodyItems },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchOrgInnerGroupInfoResponseBody = SearchOrgInnerGroupInfoResponseBody;
class SearchOrgInnerGroupInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchOrgInnerGroupInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchOrgInnerGroupInfoResponse = SearchOrgInnerGroupInfoResponse;
class SendAppDingHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAppDingHeaders = SendAppDingHeaders;
class SendAppDingRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            userids: 'userids',
        };
    }
    static types() {
        return {
            content: 'string',
            userids: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAppDingRequest = SendAppDingRequest;
class SendAppDingResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendAppDingResponse = SendAppDingResponse;
class SendInvitationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendInvitationHeaders = SendInvitationHeaders;
class SendInvitationRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            orgAlias: 'orgAlias',
            partnerLabelId: 'partnerLabelId',
            partnerNum: 'partnerNum',
            phone: 'phone',
        };
    }
    static types() {
        return {
            deptId: 'string',
            orgAlias: 'string',
            partnerLabelId: 'number',
            partnerNum: 'string',
            phone: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendInvitationRequest = SendInvitationRequest;
class SendInvitationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendInvitationResponse = SendInvitationResponse;
class SendPhoneDingHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPhoneDingHeaders = SendPhoneDingHeaders;
class SendPhoneDingRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            userids: 'userids',
        };
    }
    static types() {
        return {
            content: 'string',
            userids: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPhoneDingRequest = SendPhoneDingRequest;
class SendPhoneDingResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPhoneDingResponseBody = SendPhoneDingResponseBody;
class SendPhoneDingResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendPhoneDingResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendPhoneDingResponse = SendPhoneDingResponse;
class SetConversationCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationCategoryHeaders = SetConversationCategoryHeaders;
class SetConversationCategoryRequest extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationCategoryRequest = SetConversationCategoryRequest;
class SetConversationCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationCategoryResponseBody = SetConversationCategoryResponseBody;
class SetConversationCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetConversationCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationCategoryResponse = SetConversationCategoryResponse;
class SetConversationSubtitleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationSubtitleHeaders = SetConversationSubtitleHeaders;
class SetConversationSubtitleRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
            subtitle: 'subtitle',
            subtitleColor: 'subtitleColor',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            subtitle: 'string',
            subtitleColor: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationSubtitleRequest = SetConversationSubtitleRequest;
class SetConversationSubtitleResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationSubtitleResponseBody = SetConversationSubtitleResponseBody;
class SetConversationSubtitleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetConversationSubtitleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationSubtitleResponse = SetConversationSubtitleResponse;
class SetConversationTopCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationTopCategoryHeaders = SetConversationTopCategoryHeaders;
class SetConversationTopCategoryRequest extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
            setCategoryList: 'setCategoryList',
            sign: 'sign',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            setCategoryList: { 'type': 'array', 'itemType': SetConversationTopCategoryRequestSetCategoryList },
            sign: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationTopCategoryRequest = SetConversationTopCategoryRequest;
class SetConversationTopCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationTopCategoryResponseBody = SetConversationTopCategoryResponseBody;
class SetConversationTopCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetConversationTopCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationTopCategoryResponse = SetConversationTopCategoryResponse;
class SetDeptPartnerTypeAndNumHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetDeptPartnerTypeAndNumHeaders = SetDeptPartnerTypeAndNumHeaders;
class SetDeptPartnerTypeAndNumRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            labelIds: 'labelIds',
            partnerNum: 'partnerNum',
        };
    }
    static types() {
        return {
            deptId: 'string',
            labelIds: { 'type': 'array', 'itemType': 'string' },
            partnerNum: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetDeptPartnerTypeAndNumRequest = SetDeptPartnerTypeAndNumRequest;
class SetDeptPartnerTypeAndNumResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetDeptPartnerTypeAndNumResponse = SetDeptPartnerTypeAndNumResponse;
class SetOrgTopConversationCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetOrgTopConversationCategoryHeaders = SetOrgTopConversationCategoryHeaders;
class SetOrgTopConversationCategoryRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': SetOrgTopConversationCategoryRequestBody },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetOrgTopConversationCategoryRequest = SetOrgTopConversationCategoryRequest;
class SetOrgTopConversationCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetOrgTopConversationCategoryResponseBody = SetOrgTopConversationCategoryResponseBody;
class SetOrgTopConversationCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetOrgTopConversationCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetOrgTopConversationCategoryResponse = SetOrgTopConversationCategoryResponse;
class SpecialRuleBatchReceiverHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverHeaders = SpecialRuleBatchReceiverHeaders;
class SpecialRuleBatchReceiverRequest extends $tea.Model {
    static names() {
        return {
            batchNo: 'batchNo',
            cardOptions: 'cardOptions',
            data: 'data',
            ruleCode: 'ruleCode',
            secretKey: 'secretKey',
            specialStrategy: 'specialStrategy',
            taskBatchNo: 'taskBatchNo',
        };
    }
    static types() {
        return {
            batchNo: 'string',
            cardOptions: 'string',
            data: { 'type': 'array', 'itemType': SpecialRuleBatchReceiverRequestData },
            ruleCode: 'string',
            secretKey: 'string',
            specialStrategy: 'boolean',
            taskBatchNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverRequest = SpecialRuleBatchReceiverRequest;
class SpecialRuleBatchReceiverResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            msg: 'msg',
            msgId: 'msgId',
            rows: 'rows',
        };
    }
    static types() {
        return {
            code: 'number',
            data: { 'type': 'array', 'itemType': SpecialRuleBatchReceiverResponseBodyData },
            msg: 'string',
            msgId: 'string',
            rows: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': SpecialRuleBatchReceiverResponseBodyRows } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverResponseBody = SpecialRuleBatchReceiverResponseBody;
class SpecialRuleBatchReceiverResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SpecialRuleBatchReceiverResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverResponse = SpecialRuleBatchReceiverResponse;
class TaskInfoAddDelTaskPersonHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoAddDelTaskPersonHeaders = TaskInfoAddDelTaskPersonHeaders;
class TaskInfoAddDelTaskPersonRequest extends $tea.Model {
    static names() {
        return {
            operateType: 'operateType',
            operatorAccount: 'operatorAccount',
            outTaskId: 'outTaskId',
            projId: 'projId',
            secretKey: 'secretKey',
            taskExecutePersonDTOS: 'taskExecutePersonDTOS',
        };
    }
    static types() {
        return {
            operateType: 'number',
            operatorAccount: 'string',
            outTaskId: 'string',
            projId: 'string',
            secretKey: 'string',
            taskExecutePersonDTOS: { 'type': 'array', 'itemType': TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoAddDelTaskPersonRequest = TaskInfoAddDelTaskPersonRequest;
class TaskInfoAddDelTaskPersonResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'any',
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoAddDelTaskPersonResponseBody = TaskInfoAddDelTaskPersonResponseBody;
class TaskInfoAddDelTaskPersonResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TaskInfoAddDelTaskPersonResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoAddDelTaskPersonResponse = TaskInfoAddDelTaskPersonResponse;
class TaskInfoCancelOrDelTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCancelOrDelTaskHeaders = TaskInfoCancelOrDelTaskHeaders;
class TaskInfoCancelOrDelTaskRequest extends $tea.Model {
    static names() {
        return {
            cardDTO: 'cardDTO',
            operatorAccount: 'operatorAccount',
            outTaskId: 'outTaskId',
            projId: 'projId',
            secretKey: 'secretKey',
            sendMsgFlag: 'sendMsgFlag',
            taskExecutePersonDTOS: 'taskExecutePersonDTOS',
        };
    }
    static types() {
        return {
            cardDTO: TaskInfoCancelOrDelTaskRequestCardDTO,
            operatorAccount: 'string',
            outTaskId: 'string',
            projId: 'string',
            secretKey: 'string',
            sendMsgFlag: 'number',
            taskExecutePersonDTOS: { 'type': 'array', 'itemType': TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCancelOrDelTaskRequest = TaskInfoCancelOrDelTaskRequest;
class TaskInfoCancelOrDelTaskResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'any',
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCancelOrDelTaskResponseBody = TaskInfoCancelOrDelTaskResponseBody;
class TaskInfoCancelOrDelTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TaskInfoCancelOrDelTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCancelOrDelTaskResponse = TaskInfoCancelOrDelTaskResponse;
class TaskInfoCreateAndStartTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskHeaders = TaskInfoCreateAndStartTaskHeaders;
class TaskInfoCreateAndStartTaskRequest extends $tea.Model {
    static names() {
        return {
            attr: 'attr',
            backlogDTO: 'backlogDTO',
            backlogGenerateFlag: 'backlogGenerateFlag',
            businessCode: 'businessCode',
            canceldelTaskCardId: 'canceldelTaskCardId',
            cardDTO: 'cardDTO',
            customFlag: 'customFlag',
            detailUrl: 'detailUrl',
            finishTaskCardId: 'finishTaskCardId',
            operatorAccount: 'operatorAccount',
            outTaskId: 'outTaskId',
            projId: 'projId',
            robotCode: 'robotCode',
            secretKey: 'secretKey',
            sendMsgFlag: 'sendMsgFlag',
            sort: 'sort',
            startTaskCardId: 'startTaskCardId',
            state: 'state',
            taskContent: 'taskContent',
            taskEndTime: 'taskEndTime',
            taskExecutePersonDTOS: 'taskExecutePersonDTOS',
            taskGroupDTOList: 'taskGroupDTOList',
            taskSystem: 'taskSystem',
            taskTemplCode: 'taskTemplCode',
            taskTitle: 'taskTitle',
            taskType: 'taskType',
            taskUrlMobile: 'taskUrlMobile',
            taskUrlPc: 'taskUrlPc',
            updateTaskCardId: 'updateTaskCardId',
        };
    }
    static types() {
        return {
            attr: TaskInfoCreateAndStartTaskRequestAttr,
            backlogDTO: TaskInfoCreateAndStartTaskRequestBacklogDTO,
            backlogGenerateFlag: 'number',
            businessCode: 'string',
            canceldelTaskCardId: 'string',
            cardDTO: TaskInfoCreateAndStartTaskRequestCardDTO,
            customFlag: 'number',
            detailUrl: TaskInfoCreateAndStartTaskRequestDetailUrl,
            finishTaskCardId: 'string',
            operatorAccount: 'string',
            outTaskId: 'string',
            projId: 'string',
            robotCode: 'string',
            secretKey: 'string',
            sendMsgFlag: 'number',
            sort: 'number',
            startTaskCardId: 'string',
            state: 'number',
            taskContent: 'string',
            taskEndTime: 'number',
            taskExecutePersonDTOS: { 'type': 'array', 'itemType': TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS },
            taskGroupDTOList: { 'type': 'array', 'itemType': TaskInfoCreateAndStartTaskRequestTaskGroupDTOList },
            taskSystem: 'string',
            taskTemplCode: 'string',
            taskTitle: 'string',
            taskType: 'string',
            taskUrlMobile: 'string',
            taskUrlPc: 'string',
            updateTaskCardId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequest = TaskInfoCreateAndStartTaskRequest;
class TaskInfoCreateAndStartTaskResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TaskInfoCreateAndStartTaskResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskResponseBody = TaskInfoCreateAndStartTaskResponseBody;
class TaskInfoCreateAndStartTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TaskInfoCreateAndStartTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskResponse = TaskInfoCreateAndStartTaskResponse;
class TaskInfoFinishTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoFinishTaskHeaders = TaskInfoFinishTaskHeaders;
class TaskInfoFinishTaskRequest extends $tea.Model {
    static names() {
        return {
            cardDTO: 'cardDTO',
            operatorAccount: 'operatorAccount',
            outTaskId: 'outTaskId',
            projId: 'projId',
            secretKey: 'secretKey',
            sendMsgFlag: 'sendMsgFlag',
            taskExecutePersonDTOS: 'taskExecutePersonDTOS',
        };
    }
    static types() {
        return {
            cardDTO: TaskInfoFinishTaskRequestCardDTO,
            operatorAccount: 'string',
            outTaskId: 'string',
            projId: 'string',
            secretKey: 'string',
            sendMsgFlag: 'number',
            taskExecutePersonDTOS: { 'type': 'array', 'itemType': TaskInfoFinishTaskRequestTaskExecutePersonDTOS },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoFinishTaskRequest = TaskInfoFinishTaskRequest;
class TaskInfoFinishTaskResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'any',
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoFinishTaskResponseBody = TaskInfoFinishTaskResponseBody;
class TaskInfoFinishTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TaskInfoFinishTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoFinishTaskResponse = TaskInfoFinishTaskResponse;
class TaskInfoUpdateTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskHeaders = TaskInfoUpdateTaskHeaders;
class TaskInfoUpdateTaskRequest extends $tea.Model {
    static names() {
        return {
            attr: 'attr',
            canceldelTaskCardId: 'canceldelTaskCardId',
            cardDTO: 'cardDTO',
            detailUrl: 'detailUrl',
            finishTaskCardId: 'finishTaskCardId',
            listOpenConversationId: 'listOpenConversationId',
            operateType: 'operateType',
            operatorAccount: 'operatorAccount',
            outTaskId: 'outTaskId',
            projId: 'projId',
            secretKey: 'secretKey',
            sendMsgFlag: 'sendMsgFlag',
            startTaskCardId: 'startTaskCardId',
            taskContent: 'taskContent',
            taskEndTime: 'taskEndTime',
            taskExecutePersonDTOS: 'taskExecutePersonDTOS',
            taskTitle: 'taskTitle',
            taskUrlMobile: 'taskUrlMobile',
            taskUrlPc: 'taskUrlPc',
            updateTaskCardId: 'updateTaskCardId',
        };
    }
    static types() {
        return {
            attr: TaskInfoUpdateTaskRequestAttr,
            canceldelTaskCardId: 'string',
            cardDTO: TaskInfoUpdateTaskRequestCardDTO,
            detailUrl: TaskInfoUpdateTaskRequestDetailUrl,
            finishTaskCardId: 'string',
            listOpenConversationId: { 'type': 'array', 'itemType': 'string' },
            operateType: 'number',
            operatorAccount: 'string',
            outTaskId: 'string',
            projId: 'string',
            secretKey: 'string',
            sendMsgFlag: 'number',
            startTaskCardId: 'string',
            taskContent: 'string',
            taskEndTime: 'number',
            taskExecutePersonDTOS: { 'type': 'array', 'itemType': TaskInfoUpdateTaskRequestTaskExecutePersonDTOS },
            taskTitle: 'string',
            taskUrlMobile: 'string',
            taskUrlPc: 'string',
            updateTaskCardId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskRequest = TaskInfoUpdateTaskRequest;
class TaskInfoUpdateTaskResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: TaskInfoUpdateTaskResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskResponseBody = TaskInfoUpdateTaskResponseBody;
class TaskInfoUpdateTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TaskInfoUpdateTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskResponse = TaskInfoUpdateTaskResponse;
class TransferExclusiveAccountOrgHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TransferExclusiveAccountOrgHeaders = TransferExclusiveAccountOrgHeaders;
class TransferExclusiveAccountOrgRequest extends $tea.Model {
    static names() {
        return {
            isSettingMainOrg: 'isSettingMainOrg',
            targetCorpId: 'targetCorpId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            isSettingMainOrg: 'boolean',
            targetCorpId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TransferExclusiveAccountOrgRequest = TransferExclusiveAccountOrgRequest;
class TransferExclusiveAccountOrgResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TransferExclusiveAccountOrgResponseBody = TransferExclusiveAccountOrgResponseBody;
class TransferExclusiveAccountOrgResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TransferExclusiveAccountOrgResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TransferExclusiveAccountOrgResponse = TransferExclusiveAccountOrgResponse;
class UpdateCategoryNameHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCategoryNameHeaders = UpdateCategoryNameHeaders;
class UpdateCategoryNameRequest extends $tea.Model {
    static names() {
        return {
            currentCategoryName: 'currentCategoryName',
            targetCategoryName: 'targetCategoryName',
        };
    }
    static types() {
        return {
            currentCategoryName: 'string',
            targetCategoryName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCategoryNameRequest = UpdateCategoryNameRequest;
class UpdateCategoryNameResponseBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCategoryNameResponseBody = UpdateCategoryNameResponseBody;
class UpdateCategoryNameResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCategoryNameResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCategoryNameResponse = UpdateCategoryNameResponse;
class UpdateConversationTypeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateConversationTypeHeaders = UpdateConversationTypeHeaders;
class UpdateConversationTypeRequest extends $tea.Model {
    static names() {
        return {
            manageSign: 'manageSign',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            manageSign: 'number',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateConversationTypeRequest = UpdateConversationTypeRequest;
class UpdateConversationTypeResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateConversationTypeResponseBody = UpdateConversationTypeResponseBody;
class UpdateConversationTypeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateConversationTypeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateConversationTypeResponse = UpdateConversationTypeResponse;
class UpdateFileStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFileStatusHeaders = UpdateFileStatusHeaders;
class UpdateFileStatusRequest extends $tea.Model {
    static names() {
        return {
            requestIds: 'requestIds',
            status: 'status',
        };
    }
    static types() {
        return {
            requestIds: { 'type': 'array', 'itemType': 'string' },
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFileStatusRequest = UpdateFileStatusRequest;
class UpdateFileStatusResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFileStatusResponseBody = UpdateFileStatusResponseBody;
class UpdateFileStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateFileStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateFileStatusResponse = UpdateFileStatusResponse;
class UpdateMiniAppVersionStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateMiniAppVersionStatusHeaders = UpdateMiniAppVersionStatusHeaders;
class UpdateMiniAppVersionStatusRequest extends $tea.Model {
    static names() {
        return {
            miniAppId: 'miniAppId',
            version: 'version',
            versionType: 'versionType',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            version: 'string',
            versionType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateMiniAppVersionStatusRequest = UpdateMiniAppVersionStatusRequest;
class UpdateMiniAppVersionStatusResponseBody extends $tea.Model {
    static names() {
        return {
            cause: 'cause',
            code: 'code',
        };
    }
    static types() {
        return {
            cause: 'string',
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateMiniAppVersionStatusResponseBody = UpdateMiniAppVersionStatusResponseBody;
class UpdateMiniAppVersionStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateMiniAppVersionStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateMiniAppVersionStatusResponse = UpdateMiniAppVersionStatusResponse;
class UpdatePartnerVisibilityHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePartnerVisibilityHeaders = UpdatePartnerVisibilityHeaders;
class UpdatePartnerVisibilityRequest extends $tea.Model {
    static names() {
        return {
            deptIds: 'deptIds',
            labelId: 'labelId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            labelId: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePartnerVisibilityRequest = UpdatePartnerVisibilityRequest;
class UpdatePartnerVisibilityResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdatePartnerVisibilityResponse = UpdatePartnerVisibilityResponse;
class UpdateRealmLicenseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRealmLicenseHeaders = UpdateRealmLicenseHeaders;
class UpdateRealmLicenseRequest extends $tea.Model {
    static names() {
        return {
            detailList: 'detailList',
        };
    }
    static types() {
        return {
            detailList: { 'type': 'array', 'itemType': UpdateRealmLicenseRequestDetailList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRealmLicenseRequest = UpdateRealmLicenseRequest;
class UpdateRealmLicenseResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRealmLicenseResponseBody = UpdateRealmLicenseResponseBody;
class UpdateRealmLicenseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateRealmLicenseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRealmLicenseResponse = UpdateRealmLicenseResponse;
class UpdateRoleVisibilityHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRoleVisibilityHeaders = UpdateRoleVisibilityHeaders;
class UpdateRoleVisibilityRequest extends $tea.Model {
    static names() {
        return {
            deptIds: 'deptIds',
            labelId: 'labelId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            labelId: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRoleVisibilityRequest = UpdateRoleVisibilityRequest;
class UpdateRoleVisibilityResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRoleVisibilityResponse = UpdateRoleVisibilityResponse;
class UpdateStorageModeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateStorageModeHeaders = UpdateStorageModeHeaders;
class UpdateStorageModeRequest extends $tea.Model {
    static names() {
        return {
            fileStorageMode: 'fileStorageMode',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            fileStorageMode: 'string',
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateStorageModeRequest = UpdateStorageModeRequest;
class UpdateStorageModeResponseBody extends $tea.Model {
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateStorageModeResponseBody = UpdateStorageModeResponseBody;
class UpdateStorageModeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateStorageModeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateStorageModeResponse = UpdateStorageModeResponse;
class UpdateVoiceMsgCtrlStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVoiceMsgCtrlStatusHeaders = UpdateVoiceMsgCtrlStatusHeaders;
class UpdateVoiceMsgCtrlStatusRequest extends $tea.Model {
    static names() {
        return {
            status: 'status',
            voiceMsgCtrlInfo: 'voiceMsgCtrlInfo',
        };
    }
    static types() {
        return {
            status: 'number',
            voiceMsgCtrlInfo: UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVoiceMsgCtrlStatusRequest = UpdateVoiceMsgCtrlStatusRequest;
class UpdateVoiceMsgCtrlStatusResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVoiceMsgCtrlStatusResponseBody = UpdateVoiceMsgCtrlStatusResponseBody;
class UpdateVoiceMsgCtrlStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateVoiceMsgCtrlStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVoiceMsgCtrlStatusResponse = UpdateVoiceMsgCtrlStatusResponse;
class AddCustomSignConfigRequestSignTermFiles extends $tea.Model {
    static names() {
        return {
            fileName: 'fileName',
            mediaId: 'mediaId',
        };
    }
    static types() {
        return {
            fileName: 'string',
            mediaId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddCustomSignConfigRequestSignTermFiles = AddCustomSignConfigRequestSignTermFiles;
class ApproveProcessCallbackRequestRequest extends $tea.Model {
    static names() {
        return {
            approveResult: 'approveResult',
            approveType: 'approveType',
            approvers: 'approvers',
            createTime: 'createTime',
            eventType: 'eventType',
            finishTime: 'finishTime',
            params: 'params',
            processInstanceId: 'processInstanceId',
            title: 'title',
        };
    }
    static types() {
        return {
            approveResult: 'string',
            approveType: 'string',
            approvers: { 'type': 'array', 'itemType': 'string' },
            createTime: 'number',
            eventType: 'string',
            finishTime: 'number',
            params: 'string',
            processInstanceId: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ApproveProcessCallbackRequestRequest = ApproveProcessCallbackRequestRequest;
class CreateRuleRequestCustomPlan extends $tea.Model {
    static names() {
        return {
            currentCategoryList: 'currentCategoryList',
            deptIds: 'deptIds',
            planName: 'planName',
            unSelectCategoryList: 'unSelectCategoryList',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            currentCategoryList: { 'type': 'array', 'itemType': 'string' },
            deptIds: { 'type': 'array', 'itemType': 'number' },
            planName: 'string',
            unSelectCategoryList: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateRuleRequestCustomPlan = CreateRuleRequestCustomPlan;
class CreateTrustedDeviceBatchRequestDetailList extends $tea.Model {
    static names() {
        return {
            macAddress: 'macAddress',
            title: 'title',
        };
    }
    static types() {
        return {
            macAddress: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTrustedDeviceBatchRequestDetailList = CreateTrustedDeviceBatchRequestDetailList;
class FileStorageGetQuotaDataResponseBodyQuotaModelList extends $tea.Model {
    static names() {
        return {
            statisticTime: 'statisticTime',
            usedStorage: 'usedStorage',
        };
    }
    static types() {
        return {
            statisticTime: 'string',
            usedStorage: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FileStorageGetQuotaDataResponseBodyQuotaModelList = FileStorageGetQuotaDataResponseBodyQuotaModelList;
class GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList extends $tea.Model {
    static names() {
        return {
            darkWatermark: 'darkWatermark',
            userId: 'userId',
        };
    }
    static types() {
        return {
            darkWatermark: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList = GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList;
class GetAccountTransferListResponseBodyItemList extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'number',
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAccountTransferListResponseBodyItemList = GetAccountTransferListResponseBodyItemList;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1 extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2 extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3 extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4 extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5 extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5;
class GetAllLabelableDeptsResponseBodyData extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            memberCount: 'memberCount',
            partnerLabelVOLevel1: 'partnerLabelVOLevel1',
            partnerLabelVOLevel2: 'partnerLabelVOLevel2',
            partnerLabelVOLevel3: 'partnerLabelVOLevel3',
            partnerLabelVOLevel4: 'partnerLabelVOLevel4',
            partnerLabelVOLevel5: 'partnerLabelVOLevel5',
            partnerNum: 'partnerNum',
            superDeptId: 'superDeptId',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            memberCount: 'number',
            partnerLabelVOLevel1: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1,
            partnerLabelVOLevel2: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2,
            partnerLabelVOLevel3: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3,
            partnerLabelVOLevel4: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4,
            partnerLabelVOLevel5: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5,
            partnerNum: 'string',
            superDeptId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAllLabelableDeptsResponseBodyData = GetAllLabelableDeptsResponseBodyData;
class GetAppDispatchInfoResponseBodyAndroid extends $tea.Model {
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponseBodyAndroid = GetAppDispatchInfoResponseBodyAndroid;
class GetAppDispatchInfoResponseBodyIOSExt extends $tea.Model {
    static names() {
        return {
            plist: 'plist',
        };
    }
    static types() {
        return {
            plist: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponseBodyIOSExt = GetAppDispatchInfoResponseBodyIOSExt;
class GetAppDispatchInfoResponseBodyIOS extends $tea.Model {
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            ext: 'ext',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            ext: GetAppDispatchInfoResponseBodyIOSExt,
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponseBodyIOS = GetAppDispatchInfoResponseBodyIOS;
class GetAppDispatchInfoResponseBodyMac extends $tea.Model {
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponseBodyMac = GetAppDispatchInfoResponseBodyMac;
class GetAppDispatchInfoResponseBodyWindows extends $tea.Model {
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAppDispatchInfoResponseBodyWindows = GetAppDispatchInfoResponseBodyWindows;
class GetCidsByBotCodeResponseBodyGroupInfos extends $tea.Model {
    static names() {
        return {
            botCreator: 'botCreator',
            botCreatorIsOrgMember: 'botCreatorIsOrgMember',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            botCreator: 'string',
            botCreatorIsOrgMember: 'boolean',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCidsByBotCodeResponseBodyGroupInfos = GetCidsByBotCodeResponseBodyGroupInfos;
class GetCommentListResponseBodyData extends $tea.Model {
    static names() {
        return {
            commentId: 'commentId',
            commentTime: 'commentTime',
            commentUserName: 'commentUserName',
            content: 'content',
        };
    }
    static types() {
        return {
            commentId: 'string',
            commentTime: 'number',
            commentUserName: 'string',
            content: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCommentListResponseBodyData = GetCommentListResponseBodyData;
class GetConferenceDetailResponseBodyMemberList extends $tea.Model {
    static names() {
        return {
            attendDuration: 'attendDuration',
            name: 'name',
            staffId: 'staffId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            attendDuration: 'number',
            name: 'string',
            staffId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConferenceDetailResponseBodyMemberList = GetConferenceDetailResponseBodyMemberList;
class GetConversationDetailResponseBodyResultMultipleCategoryList extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            categoryName: 'categoryName',
            order: 'order',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            categoryName: 'string',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationDetailResponseBodyResultMultipleCategoryList = GetConversationDetailResponseBodyResultMultipleCategoryList;
class GetConversationDetailResponseBodyResult extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            categoryName: 'categoryName',
            groupCode: 'groupCode',
            groupMembersCnt: 'groupMembersCnt',
            groupName: 'groupName',
            groupOwnerName: 'groupOwnerName',
            groupOwnerUserId: 'groupOwnerUserId',
            isKpConversation: 'isKpConversation',
            manageSign: 'manageSign',
            multipleCategoryList: 'multipleCategoryList',
            openConversationId: 'openConversationId',
            order: 'order',
            status: 'status',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            categoryName: 'string',
            groupCode: 'string',
            groupMembersCnt: 'number',
            groupName: 'string',
            groupOwnerName: 'string',
            groupOwnerUserId: 'string',
            isKpConversation: 'boolean',
            manageSign: 'number',
            multipleCategoryList: { 'type': 'array', 'itemType': GetConversationDetailResponseBodyResultMultipleCategoryList },
            openConversationId: 'string',
            order: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetConversationDetailResponseBodyResult = GetConversationDetailResponseBodyResult;
class GetDingReportDeptSummaryResponseBodyData extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            dingReportSendCnt: 'dingReportSendCnt',
            dingReportSendUsrCnt: 'dingReportSendUsrCnt',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            dingReportSendCnt: 'string',
            dingReportSendUsrCnt: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDingReportDeptSummaryResponseBodyData = GetDingReportDeptSummaryResponseBodyData;
class GetDocCreatedDeptSummaryResponseBodyData extends $tea.Model {
    static names() {
        return {
            createDocUserCnt1d: 'createDocUserCnt1d',
            deptId: 'deptId',
            deptName: 'deptName',
            docCreatedCnt: 'docCreatedCnt',
        };
    }
    static types() {
        return {
            createDocUserCnt1d: 'string',
            deptId: 'string',
            deptName: 'string',
            docCreatedCnt: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocCreatedDeptSummaryResponseBodyData = GetDocCreatedDeptSummaryResponseBodyData;
class GetExclusiveAccountAllOrgListResponseBodyOrgInfoList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            isMainOrg: 'isMainOrg',
            logoUrl: 'logoUrl',
            orgFullName: 'orgFullName',
            orgName: 'orgName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isMainOrg: 'boolean',
            logoUrl: 'string',
            orgFullName: 'string',
            orgName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetExclusiveAccountAllOrgListResponseBodyOrgInfoList = GetExclusiveAccountAllOrgListResponseBodyOrgInfoList;
class GetGeneralFormCreatedDeptSummaryResponseBodyData extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            generalFormCreateCnt1d: 'generalFormCreateCnt1d',
            useGeneralFormUserCnt1d: 'useGeneralFormUserCnt1d',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            generalFormCreateCnt1d: 'string',
            useGeneralFormUserCnt1d: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGeneralFormCreatedDeptSummaryResponseBodyData = GetGeneralFormCreatedDeptSummaryResponseBodyData;
class GetGroupActiveInfoResponseBodyData extends $tea.Model {
    static names() {
        return {
            dingGroupId: 'dingGroupId',
            groupCreateTime: 'groupCreateTime',
            groupCreateUserId: 'groupCreateUserId',
            groupCreateUserName: 'groupCreateUserName',
            groupName: 'groupName',
            groupType: 'groupType',
            groupUserCnt1d: 'groupUserCnt1d',
            openConvUv1d: 'openConvUv1d',
            sendMessageCnt1d: 'sendMessageCnt1d',
            sendMessageUserCnt1d: 'sendMessageUserCnt1d',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            dingGroupId: 'string',
            groupCreateTime: 'string',
            groupCreateUserId: 'string',
            groupCreateUserName: 'string',
            groupName: 'string',
            groupType: 'number',
            groupUserCnt1d: 'number',
            openConvUv1d: 'number',
            sendMessageCnt1d: 'number',
            sendMessageUserCnt1d: 'number',
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupActiveInfoResponseBodyData = GetGroupActiveInfoResponseBodyData;
class GetGroupInfoByCidResponseBodyGroupInfo extends $tea.Model {
    static names() {
        return {
            allOrgMember: 'allOrgMember',
            groupName: 'groupName',
            groupNumber: 'groupNumber',
            groupOrganization: 'groupOrganization',
            joinGroupUrl: 'joinGroupUrl',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            allOrgMember: 'boolean',
            groupName: 'string',
            groupNumber: 'number',
            groupOrganization: 'string',
            joinGroupUrl: 'string',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetGroupInfoByCidResponseBodyGroupInfo = GetGroupInfoByCidResponseBodyGroupInfo;
class GetInActiveUserListResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInActiveUserListResponseBodyMetaList = GetInActiveUserListResponseBodyMetaList;
class GetMsgConfigRequestListDynamicAttr extends $tea.Model {
    static names() {
        return {
            attrCode: 'attrCode',
            listAttrOptionsCode: 'listAttrOptionsCode',
        };
    }
    static types() {
        return {
            attrCode: 'string',
            listAttrOptionsCode: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigRequestListDynamicAttr = GetMsgConfigRequestListDynamicAttr;
class GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr extends $tea.Model {
    static names() {
        return {
            attrCode: 'attrCode',
            listAttrOptionsCode: 'listAttrOptionsCode',
        };
    }
    static types() {
        return {
            attrCode: 'string',
            listAttrOptionsCode: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr = GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr;
class GetMsgConfigResponseBodyDataGroupAttributesListReceiver extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
            employeeName: 'employeeName',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
            employeeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyDataGroupAttributesListReceiver = GetMsgConfigResponseBodyDataGroupAttributesListReceiver;
class GetMsgConfigResponseBodyDataGroupAttributes extends $tea.Model {
    static names() {
        return {
            configGroupId: 'configGroupId',
            corpId: 'corpId',
            groupTopic: 'groupTopic',
            groupType: 'groupType',
            listDynamicAttr: 'listDynamicAttr',
            listReceiver: 'listReceiver',
            openConversationId: 'openConversationId',
            ownerJobNo: 'ownerJobNo',
            subRuleCode: 'subRuleCode',
        };
    }
    static types() {
        return {
            configGroupId: 'number',
            corpId: 'string',
            groupTopic: 'string',
            groupType: 'string',
            listDynamicAttr: { 'type': 'array', 'itemType': GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr },
            listReceiver: { 'type': 'array', 'itemType': GetMsgConfigResponseBodyDataGroupAttributesListReceiver },
            openConversationId: 'string',
            ownerJobNo: 'string',
            subRuleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyDataGroupAttributes = GetMsgConfigResponseBodyDataGroupAttributes;
class GetMsgConfigResponseBodyDataMsgConfigs extends $tea.Model {
    static names() {
        return {
            cardId: 'cardId',
            corpId: 'corpId',
            customParameters: 'customParameters',
            msgContentConsisFlag: 'msgContentConsisFlag',
            msgId: 'msgId',
            robotCode: 'robotCode',
            ruleBusinessCode: 'ruleBusinessCode',
            ruleCategory: 'ruleCategory',
            ruleCode: 'ruleCode',
            ruleName: 'ruleName',
            subRuleCode: 'subRuleCode',
            systemCode: 'systemCode',
            taskBatchNo: 'taskBatchNo',
        };
    }
    static types() {
        return {
            cardId: 'string',
            corpId: 'string',
            customParameters: 'string',
            msgContentConsisFlag: 'number',
            msgId: 'string',
            robotCode: 'string',
            ruleBusinessCode: 'string',
            ruleCategory: 'number',
            ruleCode: 'string',
            ruleName: 'string',
            subRuleCode: 'string',
            systemCode: 'string',
            taskBatchNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyDataMsgConfigs = GetMsgConfigResponseBodyDataMsgConfigs;
class GetMsgConfigResponseBodyDataReceiverAttributes extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyDataReceiverAttributes = GetMsgConfigResponseBodyDataReceiverAttributes;
class GetMsgConfigResponseBodyDataUnitAttributes extends $tea.Model {
    static names() {
        return {
            unitId: 'unitId',
        };
    }
    static types() {
        return {
            unitId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyDataUnitAttributes = GetMsgConfigResponseBodyDataUnitAttributes;
class GetMsgConfigResponseBodyData extends $tea.Model {
    static names() {
        return {
            groupAttributes: 'groupAttributes',
            msgConfigs: 'msgConfigs',
            receiverAttributes: 'receiverAttributes',
            unitAttributes: 'unitAttributes',
        };
    }
    static types() {
        return {
            groupAttributes: { 'type': 'array', 'itemType': GetMsgConfigResponseBodyDataGroupAttributes },
            msgConfigs: GetMsgConfigResponseBodyDataMsgConfigs,
            receiverAttributes: { 'type': 'array', 'itemType': GetMsgConfigResponseBodyDataReceiverAttributes },
            unitAttributes: { 'type': 'array', 'itemType': GetMsgConfigResponseBodyDataUnitAttributes },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMsgConfigResponseBodyData = GetMsgConfigResponseBodyData;
class GetOaOperatorLogListResponseBodyData extends $tea.Model {
    static names() {
        return {
            category1Name: 'category1Name',
            category2Name: 'category2Name',
            content: 'content',
            opName: 'opName',
            opTime: 'opTime',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            category1Name: 'string',
            category2Name: 'string',
            content: 'string',
            opName: 'string',
            opTime: 'number',
            opUserId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOaOperatorLogListResponseBodyData = GetOaOperatorLogListResponseBodyData;
class GetOutGroupsByPageResponseBodyResponseBodyGroupList extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutGroupsByPageResponseBodyResponseBodyGroupList = GetOutGroupsByPageResponseBodyResponseBodyGroupList;
class GetOutGroupsByPageResponseBodyResponseBody extends $tea.Model {
    static names() {
        return {
            groupList: 'groupList',
            total: 'total',
        };
    }
    static types() {
        return {
            groupList: { 'type': 'array', 'itemType': GetOutGroupsByPageResponseBodyResponseBodyGroupList },
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutGroupsByPageResponseBodyResponseBody = GetOutGroupsByPageResponseBodyResponseBody;
class GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender extends $tea.Model {
    static names() {
        return {
            id: 'id',
            idType: 'idType',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            idType: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender = GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender;
class GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList extends $tea.Model {
    static names() {
        return {
            content: 'content',
            contentType: 'contentType',
            createAt: 'createAt',
            openConversationId: 'openConversationId',
            sender: 'sender',
        };
    }
    static types() {
        return {
            content: 'string',
            contentType: 'string',
            createAt: 'string',
            openConversationId: 'string',
            sender: GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList = GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList;
class GetOutsideAuditGroupMessageByPageResponseBodyResponseBody extends $tea.Model {
    static names() {
        return {
            messageList: 'messageList',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            messageList: { 'type': 'array', 'itemType': GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBody = GetOutsideAuditGroupMessageByPageResponseBodyResponseBody;
class GetPartnerTypeByParentIdResponseBodyData extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            typeId: 'typeId',
            typeName: 'typeName',
        };
    }
    static types() {
        return {
            labelId: 'string',
            typeId: 'number',
            typeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPartnerTypeByParentIdResponseBodyData = GetPartnerTypeByParentIdResponseBodyData;
class GetPublicDevicesResponseBodyDataDeviceDepts extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesResponseBodyDataDeviceDepts = GetPublicDevicesResponseBodyDataDeviceDepts;
class GetPublicDevicesResponseBodyDataDeviceRoles extends $tea.Model {
    static names() {
        return {
            name: 'name',
            tagCode: 'tagCode',
        };
    }
    static types() {
        return {
            name: 'string',
            tagCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesResponseBodyDataDeviceRoles = GetPublicDevicesResponseBodyDataDeviceRoles;
class GetPublicDevicesResponseBodyDataDeviceStaffs extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesResponseBodyDataDeviceStaffs = GetPublicDevicesResponseBodyDataDeviceStaffs;
class GetPublicDevicesResponseBodyData extends $tea.Model {
    static names() {
        return {
            deviceDepts: 'deviceDepts',
            deviceRoles: 'deviceRoles',
            deviceScopeType: 'deviceScopeType',
            deviceStaffs: 'deviceStaffs',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            macAddress: 'macAddress',
            platform: 'platform',
            title: 'title',
        };
    }
    static types() {
        return {
            deviceDepts: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyDataDeviceDepts },
            deviceRoles: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyDataDeviceRoles },
            deviceScopeType: 'number',
            deviceStaffs: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyDataDeviceStaffs },
            gmtCreate: 'number',
            gmtModified: 'number',
            macAddress: 'string',
            platform: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublicDevicesResponseBodyData = GetPublicDevicesResponseBodyData;
class GetPublisherSummaryResponseBodyData extends $tea.Model {
    static names() {
        return {
            publisherArticleCntStd: 'publisherArticleCntStd',
            publisherArticlePvCntStd: 'publisherArticlePvCntStd',
            publisherName: 'publisherName',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            publisherArticleCntStd: 'string',
            publisherArticlePvCntStd: 'string',
            publisherName: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublisherSummaryResponseBodyData = GetPublisherSummaryResponseBodyData;
class GetPublisherSummaryResponseBodyPublisherArticlePvTop5 extends $tea.Model {
    static names() {
        return {
            name: 'name',
        };
    }
    static types() {
        return {
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPublisherSummaryResponseBodyPublisherArticlePvTop5 = GetPublisherSummaryResponseBodyPublisherArticlePvTop5;
class GetRealPeopleRecordsResponseBodyData extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
            invokeTime: 'invokeTime',
            personIdentification: 'personIdentification',
            platform: 'platform',
            scene: 'scene',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            invokeTime: 'number',
            personIdentification: 'number',
            platform: 'number',
            scene: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRealPeopleRecordsResponseBodyData = GetRealPeopleRecordsResponseBodyData;
class GetRecognizeRecordsResponseBodyData extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
            faceCompareResult: 'faceCompareResult',
            invokeTime: 'invokeTime',
            platform: 'platform',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            faceCompareResult: 'number',
            invokeTime: 'number',
            platform: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRecognizeRecordsResponseBodyData = GetRecognizeRecordsResponseBodyData;
class GetRobotInfoByCodeResponseBodyRobotInfoVO extends $tea.Model {
    static names() {
        return {
            agentId: 'agentId',
            brief: 'brief',
            description: 'description',
            name: 'name',
            robotOrganization: 'robotOrganization',
        };
    }
    static types() {
        return {
            agentId: 'number',
            brief: 'string',
            description: 'string',
            name: 'string',
            robotOrganization: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetRobotInfoByCodeResponseBodyRobotInfoVO = GetRobotInfoByCodeResponseBodyRobotInfoVO;
class GetSecurityConfigMemberResponseBodyResultUserInfos extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSecurityConfigMemberResponseBodyResultUserInfos = GetSecurityConfigMemberResponseBodyResultUserInfos;
class GetSecurityConfigMemberResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasNext: 'hasNext',
            nextToken: 'nextToken',
            scopeType: 'scopeType',
            userInfos: 'userInfos',
        };
    }
    static types() {
        return {
            hasNext: 'boolean',
            nextToken: 'number',
            scopeType: 'number',
            userInfos: { 'type': 'array', 'itemType': GetSecurityConfigMemberResponseBodyResultUserInfos },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSecurityConfigMemberResponseBodyResult = GetSecurityConfigMemberResponseBodyResult;
class GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            phone: 'phone',
            roles: 'roles',
            staffId: 'staffId',
            title: 'title',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: 'string',
            phone: 'string',
            roles: 'string',
            staffId: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList = GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList;
class GetTrustDeviceListResponseBodyData extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            id: 'id',
            macAddress: 'macAddress',
            model: 'model',
            modifiedTime: 'modifiedTime',
            platform: 'platform',
            status: 'status',
            title: 'title',
            userId: 'userId',
        };
    }
    static types() {
        return {
            createTime: 'number',
            id: 'number',
            macAddress: 'string',
            model: 'string',
            modifiedTime: 'number',
            platform: 'string',
            status: 'number',
            title: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrustDeviceListResponseBodyData = GetTrustDeviceListResponseBodyData;
class GetUserAppVersionSummaryResponseBodyData extends $tea.Model {
    static names() {
        return {
            appVersion: 'appVersion',
            client: 'client',
            orgName: 'orgName',
            statDate: 'statDate',
            userCnt: 'userCnt',
        };
    }
    static types() {
        return {
            appVersion: 'string',
            client: 'string',
            orgName: 'string',
            statDate: 'string',
            userCnt: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAppVersionSummaryResponseBodyData = GetUserAppVersionSummaryResponseBodyData;
class GetUserFaceStateResponseBodyData extends $tea.Model {
    static names() {
        return {
            state: 'state',
            userId: 'userId',
        };
    }
    static types() {
        return {
            state: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserFaceStateResponseBodyData = GetUserFaceStateResponseBodyData;
class GetUserRealPeopleStateResponseBodyData extends $tea.Model {
    static names() {
        return {
            state: 'state',
            userId: 'userId',
        };
    }
    static types() {
        return {
            state: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealPeopleStateResponseBodyData = GetUserRealPeopleStateResponseBodyData;
class GetUserStayLengthResponseBodyItemList extends $tea.Model {
    static names() {
        return {
            name: 'name',
            statDate: 'statDate',
            stayTimeLenApp1d: 'stayTimeLenApp1d',
            stayTimeLenPc1d: 'stayTimeLenPc1d',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            statDate: 'string',
            stayTimeLenApp1d: 'number',
            stayTimeLenPc1d: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserStayLengthResponseBodyItemList = GetUserStayLengthResponseBodyItemList;
class GroupQueryByAttrRequestListDynamicAttr extends $tea.Model {
    static names() {
        return {
            attrCode: 'attrCode',
            listAttrOptionsCode: 'listAttrOptionsCode',
        };
    }
    static types() {
        return {
            attrCode: 'string',
            listAttrOptionsCode: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrRequestListDynamicAttr = GroupQueryByAttrRequestListDynamicAttr;
class GroupQueryByAttrResponseBodyDataList extends $tea.Model {
    static names() {
        return {
            groupMemberCount: 'groupMemberCount',
            groupName: 'groupName',
            openConversationId: 'openConversationId',
            ownerJobNo: 'ownerJobNo',
            ownerUserName: 'ownerUserName',
        };
    }
    static types() {
        return {
            groupMemberCount: 'number',
            groupName: 'string',
            openConversationId: 'string',
            ownerJobNo: 'string',
            ownerUserName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrResponseBodyDataList = GroupQueryByAttrResponseBodyDataList;
class GroupQueryByAttrResponseBodyData extends $tea.Model {
    static names() {
        return {
            counts: 'counts',
            list: 'list',
            pageIndex: 'pageIndex',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            counts: 'number',
            list: { 'type': 'array', 'itemType': GroupQueryByAttrResponseBodyDataList },
            pageIndex: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByAttrResponseBodyData = GroupQueryByAttrResponseBodyData;
class GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr extends $tea.Model {
    static names() {
        return {
            attrCode: 'attrCode',
            listAttrOptionsCode: 'listAttrOptionsCode',
        };
    }
    static types() {
        return {
            attrCode: 'string',
            listAttrOptionsCode: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr = GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr;
class GroupQueryByOpenIdResponseBodyData extends $tea.Model {
    static names() {
        return {
            groupName: 'groupName',
            groupTemplateId: 'groupTemplateId',
            groupTemplateName: 'groupTemplateName',
            groupTopic: 'groupTopic',
            groupType: 'groupType',
            id: 'id',
            listGroupDynamicAttr: 'listGroupDynamicAttr',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            groupTemplateId: 'string',
            groupTemplateName: 'string',
            groupTopic: 'string',
            groupType: 'string',
            id: 'number',
            listGroupDynamicAttr: { 'type': 'array', 'itemType': GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr },
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GroupQueryByOpenIdResponseBodyData = GroupQueryByOpenIdResponseBodyData;
class ListAuditLogResponseBodyListDocMemberList extends $tea.Model {
    static names() {
        return {
            memberName: 'memberName',
            memberType: 'memberType',
            memberTypeView: 'memberTypeView',
            permissionRole: 'permissionRole',
            permissionRoleView: 'permissionRoleView',
        };
    }
    static types() {
        return {
            memberName: 'string',
            memberType: 'number',
            memberTypeView: 'string',
            permissionRole: 'number',
            permissionRoleView: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogResponseBodyListDocMemberList = ListAuditLogResponseBodyListDocMemberList;
class ListAuditLogResponseBodyListDocReceiverList extends $tea.Model {
    static names() {
        return {
            receiverName: 'receiverName',
            receiverType: 'receiverType',
            receiverTypeView: 'receiverTypeView',
        };
    }
    static types() {
        return {
            receiverName: 'string',
            receiverType: 'number',
            receiverTypeView: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogResponseBodyListDocReceiverList = ListAuditLogResponseBodyListDocReceiverList;
class ListAuditLogResponseBodyList extends $tea.Model {
    static names() {
        return {
            action: 'action',
            actionView: 'actionView',
            bizId: 'bizId',
            docMemberList: 'docMemberList',
            docMobileUrl: 'docMobileUrl',
            docPcUrl: 'docPcUrl',
            docReceiverList: 'docReceiverList',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            ipAddress: 'ipAddress',
            operateModule: 'operateModule',
            operateModuleView: 'operateModuleView',
            operatorName: 'operatorName',
            orgName: 'orgName',
            platform: 'platform',
            platformView: 'platformView',
            prevWorkSpaceId: 'prevWorkSpaceId',
            prevWorkSpaceMobileUrl: 'prevWorkSpaceMobileUrl',
            prevWorkSpaceName: 'prevWorkSpaceName',
            prevWorkSpacePcUrl: 'prevWorkSpacePcUrl',
            realName: 'realName',
            receiverName: 'receiverName',
            receiverType: 'receiverType',
            receiverTypeView: 'receiverTypeView',
            resource: 'resource',
            resourceExtension: 'resourceExtension',
            resourceSize: 'resourceSize',
            status: 'status',
            targetSpaceId: 'targetSpaceId',
            userId: 'userId',
            workSpaceId: 'workSpaceId',
            workSpaceMobileUrl: 'workSpaceMobileUrl',
            workSpaceName: 'workSpaceName',
            workSpacePcUrl: 'workSpacePcUrl',
        };
    }
    static types() {
        return {
            action: 'number',
            actionView: 'string',
            bizId: 'string',
            docMemberList: { 'type': 'array', 'itemType': ListAuditLogResponseBodyListDocMemberList },
            docMobileUrl: 'string',
            docPcUrl: 'string',
            docReceiverList: { 'type': 'array', 'itemType': ListAuditLogResponseBodyListDocReceiverList },
            gmtCreate: 'number',
            gmtModified: 'number',
            ipAddress: 'string',
            operateModule: 'number',
            operateModuleView: 'string',
            operatorName: 'string',
            orgName: 'string',
            platform: 'number',
            platformView: 'string',
            prevWorkSpaceId: 'number',
            prevWorkSpaceMobileUrl: 'string',
            prevWorkSpaceName: 'string',
            prevWorkSpacePcUrl: 'string',
            realName: 'string',
            receiverName: 'string',
            receiverType: 'number',
            receiverTypeView: 'string',
            resource: 'string',
            resourceExtension: 'string',
            resourceSize: 'number',
            status: 'number',
            targetSpaceId: 'number',
            userId: 'string',
            workSpaceId: 'number',
            workSpaceMobileUrl: 'string',
            workSpaceName: 'string',
            workSpacePcUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAuditLogResponseBodyList = ListAuditLogResponseBodyList;
class ListByCodesResponseBodyRobotInfoList extends $tea.Model {
    static names() {
        return {
            brief: 'brief',
            code: 'code',
            createAt: 'createAt',
            description: 'description',
            dev: 'dev',
            icon: 'icon',
            modifiedAt: 'modifiedAt',
            name: 'name',
            outgoingToken: 'outgoingToken',
            outgoingUrl: 'outgoingUrl',
            previewMediaId: 'previewMediaId',
            sourceUrl: 'sourceUrl',
            status: 'status',
        };
    }
    static types() {
        return {
            brief: 'string',
            code: 'string',
            createAt: 'number',
            description: 'string',
            dev: 'string',
            icon: 'string',
            modifiedAt: 'number',
            name: 'string',
            outgoingToken: 'string',
            outgoingUrl: 'string',
            previewMediaId: 'string',
            sourceUrl: 'string',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByCodesResponseBodyRobotInfoList = ListByCodesResponseBodyRobotInfoList;
class ListByPluginIdsResponseBodyPluginInfoList extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            createAt: 'createAt',
            desc: 'desc',
            icons: 'icons',
            modifiedAt: 'modifiedAt',
            name: 'name',
            pcUrl: 'pcUrl',
            pluginId: 'pluginId',
            status: 'status',
            url: 'url',
        };
    }
    static types() {
        return {
            appId: 'string',
            createAt: 'number',
            desc: 'string',
            icons: 'string',
            modifiedAt: 'number',
            name: 'string',
            pcUrl: 'string',
            pluginId: 'string',
            status: 'number',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListByPluginIdsResponseBodyPluginInfoList = ListByPluginIdsResponseBodyPluginInfoList;
class ListCategorysRequestBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListCategorysRequestBody = ListCategorysRequestBody;
class ListJoinOrgInfoResponseBodyOrgInfoList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            domain: 'domain',
            orgFullName: 'orgFullName',
            orgName: 'orgName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            domain: 'string',
            orgFullName: 'string',
            orgName: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListJoinOrgInfoResponseBodyOrgInfoList = ListJoinOrgInfoResponseBodyOrgInfoList;
class ListMiniAppAvailableVersionResponseBodyList extends $tea.Model {
    static names() {
        return {
            buildStatus: 'buildStatus',
            version: 'version',
        };
    }
    static types() {
        return {
            buildStatus: 'number',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppAvailableVersionResponseBodyList = ListMiniAppAvailableVersionResponseBodyList;
class ListMiniAppHistoryVersionResponseBodyList extends $tea.Model {
    static names() {
        return {
            buildStatus: 'buildStatus',
            h5Bundle: 'h5Bundle',
            packageSize: 'packageSize',
            packageUrl: 'packageUrl',
            version: 'version',
        };
    }
    static types() {
        return {
            buildStatus: 'number',
            h5Bundle: 'string',
            packageSize: 'string',
            packageUrl: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListMiniAppHistoryVersionResponseBodyList = ListMiniAppHistoryVersionResponseBodyList;
class ListPartnerRolesResponseBodyListVisibleDepts extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponseBodyListVisibleDepts = ListPartnerRolesResponseBodyListVisibleDepts;
class ListPartnerRolesResponseBodyListVisibleUsers extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponseBodyListVisibleUsers = ListPartnerRolesResponseBodyListVisibleUsers;
class ListPartnerRolesResponseBodyListWarningDepts extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponseBodyListWarningDepts = ListPartnerRolesResponseBodyListWarningDepts;
class ListPartnerRolesResponseBodyListWarningUsers extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponseBodyListWarningUsers = ListPartnerRolesResponseBodyListWarningUsers;
class ListPartnerRolesResponseBodyList extends $tea.Model {
    static names() {
        return {
            id: 'id',
            isNecessary: 'isNecessary',
            name: 'name',
            visibleDepts: 'visibleDepts',
            visibleUsers: 'visibleUsers',
            warningDepts: 'warningDepts',
            warningUsers: 'warningUsers',
        };
    }
    static types() {
        return {
            id: 'number',
            isNecessary: 'number',
            name: 'string',
            visibleDepts: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListVisibleDepts },
            visibleUsers: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListVisibleUsers },
            warningDepts: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListWarningDepts },
            warningUsers: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListWarningUsers },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPartnerRolesResponseBodyList = ListPartnerRolesResponseBodyList;
class ListPunchScheduleByConditionWithPagingResponseBodyList extends $tea.Model {
    static names() {
        return {
            bizOuterId: 'bizOuterId',
            positionName: 'positionName',
            punchSymbol: 'punchSymbol',
            userId: 'userId',
            userPunchTime: 'userPunchTime',
        };
    }
    static types() {
        return {
            bizOuterId: 'string',
            positionName: 'string',
            punchSymbol: 'string',
            userId: 'string',
            userPunchTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPunchScheduleByConditionWithPagingResponseBodyList = ListPunchScheduleByConditionWithPagingResponseBodyList;
class ListRulesRequestBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRulesRequestBody = ListRulesRequestBody;
class PreventCheatingCheckRiskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasRisk: 'hasRisk',
            riskInfo: 'riskInfo',
        };
    }
    static types() {
        return {
            hasRisk: 'boolean',
            riskInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PreventCheatingCheckRiskResponseBodyResult = PreventCheatingCheckRiskResponseBodyResult;
class PushBadgeRequestBadgeItems extends $tea.Model {
    static names() {
        return {
            pushValue: 'pushValue',
            userId: 'userId',
        };
    }
    static types() {
        return {
            pushValue: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PushBadgeRequestBadgeItems = PushBadgeRequestBadgeItems;
class QueryChannelStaffInfoByMobileResponseBodyEmpInfo extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChannelStaffInfoByMobileResponseBodyEmpInfo = QueryChannelStaffInfoByMobileResponseBodyEmpInfo;
class QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList = QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList;
class QueryConversationPageResponseBodyResultData extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            categoryName: 'categoryName',
            groupCode: 'groupCode',
            groupMembersCnt: 'groupMembersCnt',
            groupName: 'groupName',
            groupOwnerName: 'groupOwnerName',
            groupOwnerUserId: 'groupOwnerUserId',
            isKpConversation: 'isKpConversation',
            manageSign: 'manageSign',
            openConversationId: 'openConversationId',
            order: 'order',
            status: 'status',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            categoryName: 'string',
            groupCode: 'string',
            groupMembersCnt: 'number',
            groupName: 'string',
            groupOwnerName: 'string',
            groupOwnerUserId: 'string',
            isKpConversation: 'boolean',
            manageSign: 'number',
            openConversationId: 'string',
            order: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationPageResponseBodyResultData = QueryConversationPageResponseBodyResultData;
class QueryConversationPageResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': QueryConversationPageResponseBodyResultData },
            maxResults: 'number',
            nextToken: 'string',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationPageResponseBodyResult = QueryConversationPageResponseBodyResult;
class QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1 extends $tea.Model {
    static names() {
        return {
            labelId: 'labelId',
            labelname: 'labelname',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelname: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1 = QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1;
class QueryPartnerInfoResponseBodyPartnerDeptList extends $tea.Model {
    static names() {
        return {
            memberCount: 'memberCount',
            partnerLabelModelLevel1: 'partnerLabelModelLevel1',
            partnerNum: 'partnerNum',
            title: 'title',
            value: 'value',
        };
    }
    static types() {
        return {
            memberCount: 'number',
            partnerLabelModelLevel1: QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1,
            partnerNum: 'string',
            title: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPartnerInfoResponseBodyPartnerDeptList = QueryPartnerInfoResponseBodyPartnerDeptList;
class QueryPartnerInfoResponseBodyPartnerLabelList extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPartnerInfoResponseBodyPartnerLabelList = QueryPartnerInfoResponseBodyPartnerLabelList;
class QueryTemplateInfoResponseBodyAppInfo extends $tea.Model {
    static names() {
        return {
            appIcon: 'appIcon',
            appId: 'appId',
            appName: 'appName',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            appIcon: 'string',
            appId: 'string',
            appName: 'string',
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyAppInfo = QueryTemplateInfoResponseBodyAppInfo;
class QueryTemplateInfoResponseBodyGrayInfo extends $tea.Model {
    static names() {
        return {
            tenThousandPercent: 'tenThousandPercent',
            whiteSet: 'whiteSet',
        };
    }
    static types() {
        return {
            tenThousandPercent: 'number',
            whiteSet: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyGrayInfo = QueryTemplateInfoResponseBodyGrayInfo;
class QueryTemplateInfoResponseBodyGroupSettingList extends $tea.Model {
    static names() {
        return {
            desc: 'desc',
            name: 'name',
            state: 'state',
        };
    }
    static types() {
        return {
            desc: 'string',
            name: 'string',
            state: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyGroupSettingList = QueryTemplateInfoResponseBodyGroupSettingList;
class QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList extends $tea.Model {
    static names() {
        return {
            brief: 'brief',
            code: 'code',
            corpId: 'corpId',
            createAt: 'createAt',
            description: 'description',
            dev: 'dev',
            groupTemplateId: 'groupTemplateId',
            icon: 'icon',
            modifiedAt: 'modifiedAt',
            name: 'name',
            outgoingToken: 'outgoingToken',
            outgoingUrl: 'outgoingUrl',
            previewMediaId: 'previewMediaId',
            sourceUrl: 'sourceUrl',
            status: 'status',
        };
    }
    static types() {
        return {
            brief: 'string',
            code: 'string',
            corpId: 'string',
            createAt: 'number',
            description: 'string',
            dev: 'string',
            groupTemplateId: 'string',
            icon: 'string',
            modifiedAt: 'number',
            name: 'string',
            outgoingToken: 'string',
            outgoingUrl: 'string',
            previewMediaId: 'string',
            sourceUrl: 'string',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList = QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList;
class QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            createAt: 'createAt',
            desc: 'desc',
            icons: 'icons',
            modifiedAt: 'modifiedAt',
            name: 'name',
            pcUrl: 'pcUrl',
            pluginId: 'pluginId',
            status: 'status',
            url: 'url',
        };
    }
    static types() {
        return {
            appId: 'string',
            createAt: 'number',
            desc: 'string',
            icons: 'string',
            modifiedAt: 'number',
            name: 'string',
            pcUrl: 'string',
            pluginId: 'string',
            status: 'number',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList = QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList;
class QueryTemplateInfoResponseBodyParentTemplateDetailVO extends $tea.Model {
    static names() {
        return {
            robotTemplateList: 'robotTemplateList',
            templateId: 'templateId',
            toolbarPluginList: 'toolbarPluginList',
        };
    }
    static types() {
        return {
            robotTemplateList: { 'type': 'array', 'itemType': QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList },
            templateId: 'string',
            toolbarPluginList: { 'type': 'array', 'itemType': QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyParentTemplateDetailVO = QueryTemplateInfoResponseBodyParentTemplateDetailVO;
class QueryTemplateInfoResponseBodyTemplateIntroduction extends $tea.Model {
    static names() {
        return {
            banner: 'banner',
            detail: 'detail',
            title: 'title',
        };
    }
    static types() {
        return {
            banner: 'string',
            detail: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyTemplateIntroduction = QueryTemplateInfoResponseBodyTemplateIntroduction;
class QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds = QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds;
class QueryTemplateInfoResponseBodyTemplateVisibilityUserIds extends $tea.Model {
    static names() {
        return {
            avatar: 'avatar',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatar: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyTemplateVisibilityUserIds = QueryTemplateInfoResponseBodyTemplateVisibilityUserIds;
class QueryTemplateInfoResponseBodyTemplateVisibility extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            deptIds: 'deptIds',
            roleIds: 'roleIds',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deptIds: { 'type': 'array', 'itemType': QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds },
            roleIds: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': QueryTemplateInfoResponseBodyTemplateVisibilityUserIds },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTemplateInfoResponseBodyTemplateVisibility = QueryTemplateInfoResponseBodyTemplateVisibility;
class QueryUserBehaviorResponseBodyData extends $tea.Model {
    static names() {
        return {
            pictureUrl: 'pictureUrl',
            platform: 'platform',
            scene: 'scene',
            time: 'time',
            type: 'type',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            pictureUrl: 'string',
            platform: 'number',
            scene: 'string',
            time: 'number',
            type: 'number',
            userId: 'string',
            userName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserBehaviorResponseBodyData = QueryUserBehaviorResponseBodyData;
class RuleBatchReceiverRequestDataAttrs extends $tea.Model {
    static names() {
        return {
            listUnitId: 'listUnitId',
        };
    }
    static types() {
        return {
            listUnitId: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverRequestDataAttrs = RuleBatchReceiverRequestDataAttrs;
class RuleBatchReceiverRequestData extends $tea.Model {
    static names() {
        return {
            atAccount: 'atAccount',
            attrs: 'attrs',
            callbackUrl: 'callbackUrl',
            cardCallbackUrl: 'cardCallbackUrl',
            content: 'content',
            isAtAll: 'isAtAll',
            receiverAccount: 'receiverAccount',
            receiverType: 'receiverType',
            serialNumber: 'serialNumber',
        };
    }
    static types() {
        return {
            atAccount: 'string',
            attrs: RuleBatchReceiverRequestDataAttrs,
            callbackUrl: 'string',
            cardCallbackUrl: 'string',
            content: { 'type': 'map', 'keyType': 'string', 'valueType': '{[key: string]: any}' },
            isAtAll: 'boolean',
            receiverAccount: 'string',
            receiverType: 'number',
            serialNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverRequestData = RuleBatchReceiverRequestData;
class RuleBatchReceiverResponseBodyData extends $tea.Model {
    static names() {
        return {
            msgId: 'msgId',
            serialNumber: 'serialNumber',
        };
    }
    static types() {
        return {
            msgId: 'string',
            serialNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverResponseBodyData = RuleBatchReceiverResponseBodyData;
class RuleBatchReceiverResponseBodyRows extends $tea.Model {
    static names() {
        return {
            serialNumber: 'serialNumber',
            msgId: 'msgId',
        };
    }
    static types() {
        return {
            serialNumber: 'string',
            msgId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RuleBatchReceiverResponseBodyRows = RuleBatchReceiverResponseBodyRows;
class SaveStorageFunctionSwitchRequestFunctionList extends $tea.Model {
    static names() {
        return {
            functionKey: 'functionKey',
            functionValue: 'functionValue',
        };
    }
    static types() {
        return {
            functionKey: 'string',
            functionValue: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveStorageFunctionSwitchRequestFunctionList = SaveStorageFunctionSwitchRequestFunctionList;
class SearchOrgInnerGroupInfoResponseBodyItems extends $tea.Model {
    static names() {
        return {
            extensions: 'extensions',
            groupAdminsCount: 'groupAdminsCount',
            groupCreateTime: 'groupCreateTime',
            groupLastActiveTime: 'groupLastActiveTime',
            groupLastActiveTimeShow: 'groupLastActiveTimeShow',
            groupMembersCount: 'groupMembersCount',
            groupName: 'groupName',
            groupOwner: 'groupOwner',
            groupOwnerUserId: 'groupOwnerUserId',
            openConversationId: 'openConversationId',
            status: 'status',
            syncToDingpan: 'syncToDingpan',
            templateId: 'templateId',
            templateName: 'templateName',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            extensions: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            groupAdminsCount: 'number',
            groupCreateTime: 'number',
            groupLastActiveTime: 'number',
            groupLastActiveTimeShow: 'string',
            groupMembersCount: 'number',
            groupName: 'string',
            groupOwner: 'string',
            groupOwnerUserId: 'string',
            openConversationId: 'string',
            status: 'number',
            syncToDingpan: 'number',
            templateId: 'string',
            templateName: 'string',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchOrgInnerGroupInfoResponseBodyItems = SearchOrgInnerGroupInfoResponseBodyItems;
class SetConversationTopCategoryRequestSetCategoryList extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            order: 'order',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetConversationTopCategoryRequestSetCategoryList = SetConversationTopCategoryRequestSetCategoryList;
class SetOrgTopConversationCategoryRequestBody extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            categoryName: 'categoryName',
            order: 'order',
        };
    }
    static types() {
        return {
            categoryId: 'number',
            categoryName: 'string',
            order: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetOrgTopConversationCategoryRequestBody = SetOrgTopConversationCategoryRequestBody;
class SpecialRuleBatchReceiverRequestDataAttrs extends $tea.Model {
    static names() {
        return {
            listUnitId: 'listUnitId',
        };
    }
    static types() {
        return {
            listUnitId: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverRequestDataAttrs = SpecialRuleBatchReceiverRequestDataAttrs;
class SpecialRuleBatchReceiverRequestData extends $tea.Model {
    static names() {
        return {
            atAccount: 'atAccount',
            attrs: 'attrs',
            callbackUrl: 'callbackUrl',
            cardCallbackUrl: 'cardCallbackUrl',
            content: 'content',
            isAtAll: 'isAtAll',
            privateContent: 'privateContent',
            receiverAccount: 'receiverAccount',
            receiverType: 'receiverType',
            serialNumber: 'serialNumber',
        };
    }
    static types() {
        return {
            atAccount: 'string',
            attrs: SpecialRuleBatchReceiverRequestDataAttrs,
            callbackUrl: 'string',
            cardCallbackUrl: 'string',
            content: { 'type': 'map', 'keyType': 'string', 'valueType': '{[key: string]: any}' },
            isAtAll: 'boolean',
            privateContent: { 'type': 'map', 'keyType': 'string', 'valueType': '{[key: string]: any}' },
            receiverAccount: 'string',
            receiverType: 'number',
            serialNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverRequestData = SpecialRuleBatchReceiverRequestData;
class SpecialRuleBatchReceiverResponseBodyData extends $tea.Model {
    static names() {
        return {
            msgId: 'msgId',
            serialNumber: 'serialNumber',
        };
    }
    static types() {
        return {
            msgId: 'string',
            serialNumber: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverResponseBodyData = SpecialRuleBatchReceiverResponseBodyData;
class SpecialRuleBatchReceiverResponseBodyRows extends $tea.Model {
    static names() {
        return {
            serialNumber: 'serialNumber',
            msgId: 'msgId',
        };
    }
    static types() {
        return {
            serialNumber: 'string',
            msgId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpecialRuleBatchReceiverResponseBodyRows = SpecialRuleBatchReceiverResponseBodyRows;
class TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
            personType: 'personType',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
            personType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS = TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS;
class TaskInfoCancelOrDelTaskRequestCardDTO extends $tea.Model {
    static names() {
        return {
            atAccount: 'atAccount',
            cardCallbackUrl: 'cardCallbackUrl',
            content: 'content',
            isAtAll: 'isAtAll',
            receiverAccount: 'receiverAccount',
        };
    }
    static types() {
        return {
            atAccount: 'string',
            cardCallbackUrl: 'string',
            content: 'any',
            isAtAll: 'boolean',
            receiverAccount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCancelOrDelTaskRequestCardDTO = TaskInfoCancelOrDelTaskRequestCardDTO;
class TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
            personType: 'personType',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
            personType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS = TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS;
class TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr extends $tea.Model {
    static names() {
        return {
            attrCode: 'attrCode',
            listAttrOptionsCode: 'listAttrOptionsCode',
        };
    }
    static types() {
        return {
            attrCode: 'string',
            listAttrOptionsCode: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr = TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr;
class TaskInfoCreateAndStartTaskRequestAttr extends $tea.Model {
    static names() {
        return {
            listTaskDynamicAttr: 'listTaskDynamicAttr',
        };
    }
    static types() {
        return {
            listTaskDynamicAttr: { 'type': 'array', 'itemType': TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestAttr = TaskInfoCreateAndStartTaskRequestAttr;
class TaskInfoCreateAndStartTaskRequestBacklogDTOContent extends $tea.Model {
    static names() {
        return {
            isOnlyShowExecutor: 'isOnlyShowExecutor',
            priority: 'priority',
        };
    }
    static types() {
        return {
            isOnlyShowExecutor: 'boolean',
            priority: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestBacklogDTOContent = TaskInfoCreateAndStartTaskRequestBacklogDTOContent;
class TaskInfoCreateAndStartTaskRequestBacklogDTO extends $tea.Model {
    static names() {
        return {
            content: 'content',
        };
    }
    static types() {
        return {
            content: TaskInfoCreateAndStartTaskRequestBacklogDTOContent,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestBacklogDTO = TaskInfoCreateAndStartTaskRequestBacklogDTO;
class TaskInfoCreateAndStartTaskRequestCardDTO extends $tea.Model {
    static names() {
        return {
            atAccount: 'atAccount',
            cardCallbackUrl: 'cardCallbackUrl',
            content: 'content',
            isAtAll: 'isAtAll',
            receiverAccount: 'receiverAccount',
        };
    }
    static types() {
        return {
            atAccount: 'string',
            cardCallbackUrl: 'string',
            content: 'any',
            isAtAll: 'boolean',
            receiverAccount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestCardDTO = TaskInfoCreateAndStartTaskRequestCardDTO;
class TaskInfoCreateAndStartTaskRequestDetailUrl extends $tea.Model {
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestDetailUrl = TaskInfoCreateAndStartTaskRequestDetailUrl;
class TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
            personType: 'personType',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
            personType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS = TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS;
class TaskInfoCreateAndStartTaskRequestTaskGroupDTOList extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskRequestTaskGroupDTOList = TaskInfoCreateAndStartTaskRequestTaskGroupDTOList;
class TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList = TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList;
class TaskInfoCreateAndStartTaskResponseBodyData extends $tea.Model {
    static names() {
        return {
            groupVoList: 'groupVoList',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            groupVoList: { 'type': 'array', 'itemType': TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList },
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoCreateAndStartTaskResponseBodyData = TaskInfoCreateAndStartTaskResponseBodyData;
class TaskInfoFinishTaskRequestCardDTO extends $tea.Model {
    static names() {
        return {
            atAccount: 'atAccount',
            cardCallbackUrl: 'cardCallbackUrl',
            content: 'content',
            isAtAll: 'isAtAll',
            receiverAccount: 'receiverAccount',
        };
    }
    static types() {
        return {
            atAccount: 'string',
            cardCallbackUrl: 'string',
            content: 'any',
            isAtAll: 'boolean',
            receiverAccount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoFinishTaskRequestCardDTO = TaskInfoFinishTaskRequestCardDTO;
class TaskInfoFinishTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
            personType: 'personType',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
            personType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoFinishTaskRequestTaskExecutePersonDTOS = TaskInfoFinishTaskRequestTaskExecutePersonDTOS;
class TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr extends $tea.Model {
    static names() {
        return {
            attrCode: 'attrCode',
            listAttrOptionsCode: 'listAttrOptionsCode',
        };
    }
    static types() {
        return {
            attrCode: 'string',
            listAttrOptionsCode: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr = TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr;
class TaskInfoUpdateTaskRequestAttr extends $tea.Model {
    static names() {
        return {
            listTaskDynamicAttr: 'listTaskDynamicAttr',
        };
    }
    static types() {
        return {
            listTaskDynamicAttr: { 'type': 'array', 'itemType': TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskRequestAttr = TaskInfoUpdateTaskRequestAttr;
class TaskInfoUpdateTaskRequestCardDTO extends $tea.Model {
    static names() {
        return {
            atAccount: 'atAccount',
            cardCallbackUrl: 'cardCallbackUrl',
            content: 'content',
            isAtAll: 'isAtAll',
            receiverAccount: 'receiverAccount',
        };
    }
    static types() {
        return {
            atAccount: 'string',
            cardCallbackUrl: 'string',
            content: 'any',
            isAtAll: 'boolean',
            receiverAccount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskRequestCardDTO = TaskInfoUpdateTaskRequestCardDTO;
class TaskInfoUpdateTaskRequestDetailUrl extends $tea.Model {
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskRequestDetailUrl = TaskInfoUpdateTaskRequestDetailUrl;
class TaskInfoUpdateTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    static names() {
        return {
            employeeCode: 'employeeCode',
            personType: 'personType',
        };
    }
    static types() {
        return {
            employeeCode: 'string',
            personType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskRequestTaskExecutePersonDTOS = TaskInfoUpdateTaskRequestTaskExecutePersonDTOS;
class TaskInfoUpdateTaskResponseBodyDataGroupVoList extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            openConversationId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskResponseBodyDataGroupVoList = TaskInfoUpdateTaskResponseBodyDataGroupVoList;
class TaskInfoUpdateTaskResponseBodyData extends $tea.Model {
    static names() {
        return {
            groupVoList: 'groupVoList',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            groupVoList: { 'type': 'array', 'itemType': TaskInfoUpdateTaskResponseBodyDataGroupVoList },
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TaskInfoUpdateTaskResponseBodyData = TaskInfoUpdateTaskResponseBodyData;
class UpdateRealmLicenseRequestDetailList extends $tea.Model {
    static names() {
        return {
            licenseType: 'licenseType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            licenseType: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRealmLicenseRequestDetailList = UpdateRealmLicenseRequestDetailList;
class UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo extends $tea.Model {
    static names() {
        return {
            openConversationId: 'openConversationId',
            openMsgId: 'openMsgId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            openMsgId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo = UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 添加自主协议
     *
     * @param request - AddCustomSignConfigRequest
     * @param headers - AddCustomSignConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCustomSignConfigResponse
     */
    async addCustomSignConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.allEffect)) {
            body["allEffect"] = request.allEffect;
        }
        if (!tea_util_1.default.isUnset(request.canDownload)) {
            body["canDownload"] = request.canDownload;
        }
        if (!tea_util_1.default.isUnset(request.protocolName)) {
            body["protocolName"] = request.protocolName;
        }
        if (!tea_util_1.default.isUnset(request.pushDeptIds)) {
            body["pushDeptIds"] = request.pushDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.pushStaffIds)) {
            body["pushStaffIds"] = request.pushStaffIds;
        }
        if (!tea_util_1.default.isUnset(request.signTermFiles)) {
            body["signTermFiles"] = request.signTermFiles;
        }
        if (!tea_util_1.default.isUnset(request.termMessage)) {
            body["termMessage"] = request.termMessage;
        }
        if (!tea_util_1.default.isUnset(request.unpushDeptIds)) {
            body["unpushDeptIds"] = request.unpushDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.unpushStaffIds)) {
            body["unpushStaffIds"] = request.unpushStaffIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddCustomSignConfig",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/sign/addCustomSignConfig`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCustomSignConfigResponse({}));
    }
    /**
     * 添加自主协议
     *
     * @param request - AddCustomSignConfigRequest
     * @returns AddCustomSignConfigResponse
     */
    async addCustomSignConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCustomSignConfigHeaders({});
        return await this.addCustomSignConfigWithOptions(request, headers, runtime);
    }
    /**
     * 新增企业
     *
     * @param request - AddOrgRequest
     * @param headers - AddOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddOrgResponse
     */
    async addOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.city)) {
            body["city"] = request.city;
        }
        if (!tea_util_1.default.isUnset(request.industry)) {
            body["industry"] = request.industry;
        }
        if (!tea_util_1.default.isUnset(request.industryCode)) {
            body["industryCode"] = request.industryCode;
        }
        if (!tea_util_1.default.isUnset(request.mobileNum)) {
            body["mobileNum"] = request.mobileNum;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.province)) {
            body["province"] = request.province;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddOrg",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/orgnizations`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddOrgResponse({}));
    }
    /**
     * 新增企业
     *
     * @param request - AddOrgRequest
     * @returns AddOrgResponse
     */
    async addOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddOrgHeaders({});
        return await this.addOrgWithOptions(request, headers, runtime);
    }
    /**
     * 专属审批结果回调
     *
     * @param request - ApproveProcessCallbackRequest
     * @param headers - ApproveProcessCallbackHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ApproveProcessCallbackResponse
     */
    async approveProcessCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.request)) {
            body["request"] = request.request;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ApproveProcessCallback",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/approvalResults/callback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ApproveProcessCallbackResponse({}));
    }
    /**
     * 专属审批结果回调
     *
     * @param request - ApproveProcessCallbackRequest
     * @returns ApproveProcessCallbackResponse
     */
    async approveProcessCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ApproveProcessCallbackHeaders({});
        return await this.approveProcessCallbackWithOptions(request, headers, runtime);
    }
    /**
     * 群禁言或解禁
     *
     * @param request - BanOrOpenGroupWordsRequest
     * @param headers - BanOrOpenGroupWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BanOrOpenGroupWordsResponse
     */
    async banOrOpenGroupWordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.banWordsType)) {
            body["banWordsType"] = request.banWordsType;
        }
        if (!tea_util_1.default.isUnset(request.openConverationId)) {
            body["openConverationId"] = request.openConverationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BanOrOpenGroupWords",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/enterpriseSecurities/banOrOpenGroupWords`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BanOrOpenGroupWordsResponse({}));
    }
    /**
     * 群禁言或解禁
     *
     * @param request - BanOrOpenGroupWordsRequest
     * @returns BanOrOpenGroupWordsResponse
     */
    async banOrOpenGroupWords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BanOrOpenGroupWordsHeaders({});
        return await this.banOrOpenGroupWordsWithOptions(request, headers, runtime);
    }
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateCategoryAndBindingGroupsRequest
     * @param headers - CreateCategoryAndBindingGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCategoryAndBindingGroupsResponse
     */
    async createCategoryAndBindingGroupsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryName)) {
            body["categoryName"] = request.categoryName;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCategoryAndBindingGroups",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/createAndBind`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCategoryAndBindingGroupsResponse({}));
    }
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateCategoryAndBindingGroupsRequest
     * @returns CreateCategoryAndBindingGroupsResponse
     */
    async createCategoryAndBindingGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCategoryAndBindingGroupsHeaders({});
        return await this.createCategoryAndBindingGroupsWithOptions(request, headers, runtime);
    }
    /**
     * 创建文件检测任务
     *
     * @param request - CreateDlpTaskRequest
     * @param headers - CreateDlpTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDlpTaskResponse
     */
    async createDlpTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryId)) {
            body["dentryId"] = request.dentryId;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            body["spaceId"] = request.spaceId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateDlpTask",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/dlpTasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateDlpTaskResponse({}));
    }
    /**
     * 创建文件检测任务
     *
     * @param request - CreateDlpTaskRequest
     * @returns CreateDlpTaskResponse
     */
    async createDlpTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDlpTaskHeaders({});
        return await this.createDlpTaskWithOptions(request, headers, runtime);
    }
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateMessageCategoryRequest
     * @param headers - CreateMessageCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateMessageCategoryResponse
     */
    async createMessageCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryName)) {
            body["categoryName"] = request.categoryName;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateMessageCategory",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/create`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateMessageCategoryResponse({}));
    }
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateMessageCategoryRequest
     * @returns CreateMessageCategoryResponse
     */
    async createMessageCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMessageCategoryHeaders({});
        return await this.createMessageCategoryWithOptions(request, headers, runtime);
    }
    /**
     * 创建规则
     *
     * @param request - CreateRuleRequest
     * @param headers - CreateRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateRuleResponse
     */
    async createRuleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.customPlan)) {
            body["customPlan"] = request.customPlan;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateRule",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/rules`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateRuleResponse({}));
    }
    /**
     * 创建规则
     *
     * @param request - CreateRuleRequest
     * @returns CreateRuleResponse
     */
    async createRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRuleHeaders({});
        return await this.createRuleWithOptions(request, headers, runtime);
    }
    /**
     * 存入可信设备信息
     *
     * @param request - CreateTrustedDeviceRequest
     * @param headers - CreateTrustedDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTrustedDeviceResponse
     */
    async createTrustedDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.did)) {
            body["did"] = request.did;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            body["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTrustedDevice",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trustedDevices`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTrustedDeviceResponse({}));
    }
    /**
     * 存入可信设备信息
     *
     * @param request - CreateTrustedDeviceRequest
     * @returns CreateTrustedDeviceResponse
     */
    async createTrustedDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTrustedDeviceHeaders({});
        return await this.createTrustedDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 批量新增可信设备
     *
     * @param request - CreateTrustedDeviceBatchRequest
     * @param headers - CreateTrustedDeviceBatchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTrustedDeviceBatchResponse
     */
    async createTrustedDeviceBatchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        if (!tea_util_1.default.isUnset(request.macAddressList)) {
            body["macAddressList"] = request.macAddressList;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTrustedDeviceBatch",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trusts/devices`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTrustedDeviceBatchResponse({}));
    }
    /**
     * 批量新增可信设备
     *
     * @param request - CreateTrustedDeviceBatchRequest
     * @returns CreateTrustedDeviceBatchResponse
     */
    async createTrustedDeviceBatch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTrustedDeviceBatchHeaders({});
        return await this.createTrustedDeviceBatchWithOptions(request, headers, runtime);
    }
    /**
     * 触发文件病毒扫描任务
     *
     * @param request - CreateVirusScanTaskRequest
     * @param headers - CreateVirusScanTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateVirusScanTaskResponse
     */
    async createVirusScanTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryId)) {
            body["dentryId"] = request.dentryId;
        }
        if (!tea_util_1.default.isUnset(request.downloadUrl)) {
            body["downloadUrl"] = request.downloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.fileMd5)) {
            body["fileMd5"] = request.fileMd5;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            body["fileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.fileSize)) {
            body["fileSize"] = request.fileSize;
        }
        if (!tea_util_1.default.isUnset(request.source)) {
            body["source"] = request.source;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            body["spaceId"] = request.spaceId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateVirusScanTask",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/virusScanTasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateVirusScanTaskResponse({}));
    }
    /**
     * 触发文件病毒扫描任务
     *
     * @param request - CreateVirusScanTaskRequest
     * @returns CreateVirusScanTaskResponse
     */
    async createVirusScanTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateVirusScanTaskHeaders({});
        return await this.createVirusScanTaskWithOptions(request, headers, runtime);
    }
    /**
     * 为应用同步数据到专属存储
     *
     * @param request - DataSyncRequest
     * @param headers - DataSyncHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DataSyncResponse
     */
    async dataSyncWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.sql)) {
            body["sql"] = request.sql;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DataSync",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/datas/sync`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DataSyncResponse({}));
    }
    /**
     * 为应用同步数据到专属存储
     *
     * @param request - DataSyncRequest
     * @returns DataSyncResponse
     */
    async dataSync(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DataSyncHeaders({});
        return await this.dataSyncWithOptions(request, headers, runtime);
    }
    /**
     * 删除跨云存储配置
     *
     * @param headers - DeleteAcrossCloudStroageConfigsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAcrossCloudStroageConfigsResponse
     */
    async deleteAcrossCloudStroageConfigsWithOptions(targetCorpId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteAcrossCloudStroageConfigs",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/configurations/${targetCorpId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteAcrossCloudStroageConfigsResponse({}));
    }
    /**
     * 删除跨云存储配置
     * @returns DeleteAcrossCloudStroageConfigsResponse
     */
    async deleteAcrossCloudStroageConfigs(targetCorpId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteAcrossCloudStroageConfigsHeaders({});
        return await this.deleteAcrossCloudStroageConfigsWithOptions(targetCorpId, headers, runtime);
    }
    /**
     * 删除评论
     *
     * @param headers - DeleteCommentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteCommentResponse
     */
    async deleteCommentWithOptions(publisherId, commentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteComment",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/publishers/${publisherId}/comments/${commentId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteCommentResponse({}));
    }
    /**
     * 删除评论
     * @returns DeleteCommentResponse
     */
    async deleteComment(publisherId, commentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteCommentHeaders({});
        return await this.deleteCommentWithOptions(publisherId, commentId, headers, runtime);
    }
    /**
     * 删除指定可信设备
     *
     * @param request - DeleteTrustedDeviceRequest
     * @param headers - DeleteTrustedDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTrustedDeviceResponse
     */
    async deleteTrustedDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.kickOff)) {
            body["kickOff"] = request.kickOff;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            body["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTrustedDevice",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trustedDevices/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteTrustedDeviceResponse({}));
    }
    /**
     * 删除指定可信设备
     *
     * @param request - DeleteTrustedDeviceRequest
     * @returns DeleteTrustedDeviceResponse
     */
    async deleteTrustedDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteTrustedDeviceHeaders({});
        return await this.deleteTrustedDeviceWithOptions(request, headers, runtime);
    }
    /**
     * 分发伙伴应用
     *
     * @param request - DistributePartnerAppRequest
     * @param headers - DistributePartnerAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DistributePartnerAppResponse
     */
    async distributePartnerAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            body["subCorpId"] = request.subCorpId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DistributePartnerApp",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partners/applications/distribute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DistributePartnerAppResponse({}));
    }
    /**
     * 分发伙伴应用
     *
     * @param request - DistributePartnerAppRequest
     * @returns DistributePartnerAppResponse
     */
    async distributePartnerApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DistributePartnerAppHeaders({});
        return await this.distributePartnerAppWithOptions(request, headers, runtime);
    }
    /**
     * 编辑安全卡片管控成员
     *
     * @param request - EditSecurityConfigMemberRequest
     * @param headers - EditSecurityConfigMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EditSecurityConfigMemberResponse
     */
    async editSecurityConfigMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.configKey)) {
            body["configKey"] = request.configKey;
        }
        if (!tea_util_1.default.isUnset(request.operateType)) {
            body["operateType"] = request.operateType;
        }
        if (!tea_util_1.default.isUnset(request.operateUserId)) {
            body["operateUserId"] = request.operateUserId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditSecurityConfigMember",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/securities/configs/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditSecurityConfigMemberResponse({}));
    }
    /**
     * 编辑安全卡片管控成员
     *
     * @param request - EditSecurityConfigMemberRequest
     * @returns EditSecurityConfigMemberResponse
     */
    async editSecurityConfigMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditSecurityConfigMemberHeaders({});
        return await this.editSecurityConfigMemberWithOptions(request, headers, runtime);
    }
    /**
     * 更换组织主管理员
     *
     * @param request - ExchangeMainAdminRequest
     * @param headers - ExchangeMainAdminHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExchangeMainAdminResponse
     */
    async exchangeMainAdminWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.newAdminUserId)) {
            body["newAdminUserId"] = request.newAdminUserId;
        }
        if (!tea_util_1.default.isUnset(request.oldAdminUserId)) {
            body["oldAdminUserId"] = request.oldAdminUserId;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExchangeMainAdmin",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/orgnizations/mainAdministrators/exchange`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExchangeMainAdminResponse({}));
    }
    /**
     * 更换组织主管理员
     *
     * @param request - ExchangeMainAdminRequest
     * @returns ExchangeMainAdminResponse
     */
    async exchangeMainAdmin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExchangeMainAdminHeaders({});
        return await this.exchangeMainAdminWithOptions(request, headers, runtime);
    }
    /**
     * 分发工作台模版
     *
     * @param request - ExclusiveCreateDingPortalRequest
     * @param headers - ExclusiveCreateDingPortalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExclusiveCreateDingPortalResponse
     */
    async exclusiveCreateDingPortalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dingPortalName)) {
            body["dingPortalName"] = request.dingPortalName;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.templateAppUuid)) {
            body["templateAppUuid"] = request.templateAppUuid;
        }
        if (!tea_util_1.default.isUnset(request.templateCorpId)) {
            body["templateCorpId"] = request.templateCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExclusiveCreateDingPortal",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/workbenches/templates/spread`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExclusiveCreateDingPortalResponse({}));
    }
    /**
     * 分发工作台模版
     *
     * @param request - ExclusiveCreateDingPortalRequest
     * @returns ExclusiveCreateDingPortalResponse
     */
    async exclusiveCreateDingPortal(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExclusiveCreateDingPortalHeaders({});
        return await this.exclusiveCreateDingPortalWithOptions(request, headers, runtime);
    }
    /**
     * 专属文件第一次设置，激活配置
     *
     * @param request - FileStorageActiveStorageRequest
     * @param headers - FileStorageActiveStorageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageActiveStorageResponse
     */
    async fileStorageActiveStorageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.oss)) {
            body["oss"] = request.oss;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageActiveStorage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/active`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageActiveStorageResponse({}));
    }
    /**
     * 专属文件第一次设置，激活配置
     *
     * @param request - FileStorageActiveStorageRequest
     * @returns FileStorageActiveStorageResponse
     */
    async fileStorageActiveStorage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageActiveStorageHeaders({});
        return await this.fileStorageActiveStorageWithOptions(request, headers, runtime);
    }
    /**
     * 检查专属存储OSS连接
     *
     * @param request - FileStorageCheckConnectionRequest
     * @param headers - FileStorageCheckConnectionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageCheckConnectionResponse
     */
    async fileStorageCheckConnectionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.oss)) {
            body["oss"] = request.oss;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageCheckConnection",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/connections/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageCheckConnectionResponse({}));
    }
    /**
     * 检查专属存储OSS连接
     *
     * @param request - FileStorageCheckConnectionRequest
     * @returns FileStorageCheckConnectionResponse
     */
    async fileStorageCheckConnection(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageCheckConnectionHeaders({});
        return await this.fileStorageCheckConnectionWithOptions(request, headers, runtime);
    }
    /**
     * 专属文件存储获取存储情况(按时间区间)
     *
     * @param request - FileStorageGetQuotaDataRequest
     * @param headers - FileStorageGetQuotaDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageGetQuotaDataResponse
     */
    async fileStorageGetQuotaDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageGetQuotaData",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/quotaDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageGetQuotaDataResponse({}));
    }
    /**
     * 专属文件存储获取存储情况(按时间区间)
     *
     * @param request - FileStorageGetQuotaDataRequest
     * @returns FileStorageGetQuotaDataResponse
     */
    async fileStorageGetQuotaData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageGetQuotaDataHeaders({});
        return await this.fileStorageGetQuotaDataWithOptions(request, headers, runtime);
    }
    /**
     * 专属文件存储获取存储情况和配置
     *
     * @param request - FileStorageGetStorageStateRequest
     * @param headers - FileStorageGetStorageStateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageGetStorageStateResponse
     */
    async fileStorageGetStorageStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageGetStorageState",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/states`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageGetStorageStateResponse({}));
    }
    /**
     * 专属文件存储获取存储情况和配置
     *
     * @param request - FileStorageGetStorageStateRequest
     * @returns FileStorageGetStorageStateResponse
     */
    async fileStorageGetStorageState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageGetStorageStateHeaders({});
        return await this.fileStorageGetStorageStateWithOptions(request, headers, runtime);
    }
    /**
     * 更新文件专属存储配置
     *
     * @param request - FileStorageUpdateStorageRequest
     * @param headers - FileStorageUpdateStorageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageUpdateStorageResponse
     */
    async fileStorageUpdateStorageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageUpdateStorage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/configurations`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageUpdateStorageResponse({}));
    }
    /**
     * 更新文件专属存储配置
     *
     * @param request - FileStorageUpdateStorageRequest
     * @returns FileStorageUpdateStorageResponse
     */
    async fileStorageUpdateStorage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageUpdateStorageHeaders({});
        return await this.fileStorageUpdateStorageWithOptions(request, headers, runtime);
    }
    /**
     * 生成暗水印
     *
     * @param request - GenerateDarkWaterMarkRequest
     * @param headers - GenerateDarkWaterMarkHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GenerateDarkWaterMarkResponse
     */
    async generateDarkWaterMarkWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GenerateDarkWaterMark",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/enterpriseSecurities/darkWatermarks/generate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GenerateDarkWaterMarkResponse({}));
    }
    /**
     * 生成暗水印
     *
     * @param request - GenerateDarkWaterMarkRequest
     * @returns GenerateDarkWaterMarkResponse
     */
    async generateDarkWaterMark(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GenerateDarkWaterMarkHeaders({});
        return await this.generateDarkWaterMarkWithOptions(request, headers, runtime);
    }
    /**
     * 获取专属钉钉账号数据迁移结果
     *
     * @param request - GetAccountTransferListRequest
     * @param headers - GetAccountTransferListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAccountTransferListResponse
     */
    async getAccountTransferListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAccountTransferList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/dataTransfer/accounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAccountTransferListResponse({}));
    }
    /**
     * 获取专属钉钉账号数据迁移结果
     *
     * @param request - GetAccountTransferListRequest
     * @returns GetAccountTransferListResponse
     */
    async getAccountTransferList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAccountTransferListHeaders({});
        return await this.getAccountTransferListWithOptions(request, headers, runtime);
    }
    /**
     * 获得组织维度的用户dau
     *
     * @param headers - GetActiveUserSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetActiveUserSummaryResponse
     */
    async getActiveUserSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetActiveUserSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/dau/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetActiveUserSummaryResponse({}));
    }
    /**
     * 获得组织维度的用户dau
     * @returns GetActiveUserSummaryResponse
     */
    async getActiveUserSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetActiveUserSummaryHeaders({});
        return await this.getActiveUserSummaryWithOptions(dataId, headers, runtime);
    }
    /**
     * 根据AppId获取微应用在该组织下的agentId
     *
     * @param request - GetAgentIdByRelatedAppIdRequest
     * @param headers - GetAgentIdByRelatedAppIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAgentIdByRelatedAppIdResponse
     */
    async getAgentIdByRelatedAppIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAgentIdByRelatedAppId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveDesigns/agentId`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAgentIdByRelatedAppIdResponse({}));
    }
    /**
     * 根据AppId获取微应用在该组织下的agentId
     *
     * @param request - GetAgentIdByRelatedAppIdRequest
     * @returns GetAgentIdByRelatedAppIdResponse
     */
    async getAgentIdByRelatedAppId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAgentIdByRelatedAppIdHeaders({});
        return await this.getAgentIdByRelatedAppIdWithOptions(request, headers, runtime);
    }
    /**
     * 伙伴钉可打标签部门查询
     *
     * @param headers - GetAllLabelableDeptsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAllLabelableDeptsResponse
     */
    async getAllLabelableDeptsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetAllLabelableDepts",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllLabelableDeptsResponse({}));
    }
    /**
     * 伙伴钉可打标签部门查询
     * @returns GetAllLabelableDeptsResponse
     */
    async getAllLabelableDepts() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllLabelableDeptsHeaders({});
        return await this.getAllLabelableDeptsWithOptions(headers, runtime);
    }
    /**
     * 获得app分发信息
     *
     * @param request - GetAppDispatchInfoRequest
     * @param headers - GetAppDispatchInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAppDispatchInfoResponse
     */
    async getAppDispatchInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAppDispatchInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/apps/distributionInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAppDispatchInfoResponse({}));
    }
    /**
     * 获得app分发信息
     *
     * @param request - GetAppDispatchInfoRequest
     * @returns GetAppDispatchInfoResponse
     */
    async getAppDispatchInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAppDispatchInfoHeaders({});
        return await this.getAppDispatchInfoWithOptions(request, headers, runtime);
    }
    /**
     * 获得组织维度日程相关信息
     *
     * @param headers - GetCalenderSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCalenderSummaryResponse
     */
    async getCalenderSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCalenderSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/calendar/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCalenderSummaryResponse({}));
    }
    /**
     * 获得组织维度日程相关信息
     * @returns GetCalenderSummaryResponse
     */
    async getCalenderSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCalenderSummaryHeaders({});
        return await this.getCalenderSummaryWithOptions(dataId, headers, runtime);
    }
    /**
     * 根据机器人code获取群openConversationId列表
     *
     * @param request - GetCidsByBotCodeRequest
     * @param headers - GetCidsByBotCodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCidsByBotCodeResponse
     */
    async getCidsByBotCodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            query["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCidsByBotCode",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/groups/openConversationIds`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCidsByBotCodeResponse({}));
    }
    /**
     * 根据机器人code获取群openConversationId列表
     *
     * @param request - GetCidsByBotCodeRequest
     * @returns GetCidsByBotCodeResponse
     */
    async getCidsByBotCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCidsByBotCodeHeaders({});
        return await this.getCidsByBotCodeWithOptions(request, headers, runtime);
    }
    /**
     * 获取发布号的评论列表
     *
     * @param request - GetCommentListRequest
     * @param headers - GetCommentListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCommentListResponse
     */
    async getCommentListWithOptions(publisherId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCommentList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/publishers/${publisherId}/comments/list`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCommentListResponse({}));
    }
    /**
     * 获取发布号的评论列表
     *
     * @param request - GetCommentListRequest
     * @returns GetCommentListResponse
     */
    async getCommentList(publisherId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCommentListHeaders({});
        return await this.getCommentListWithOptions(publisherId, request, headers, runtime);
    }
    /**
     * 根据逻辑会议id获取会议基本信息
     *
     * @param request - GetConfBaseInfoByLogicalIdRequest
     * @param headers - GetConfBaseInfoByLogicalIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConfBaseInfoByLogicalIdResponse
     */
    async getConfBaseInfoByLogicalIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.logicalConferenceId)) {
            query["logicalConferenceId"] = request.logicalConferenceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetConfBaseInfoByLogicalId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/conferences`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConfBaseInfoByLogicalIdResponse({}));
    }
    /**
     * 根据逻辑会议id获取会议基本信息
     *
     * @param request - GetConfBaseInfoByLogicalIdRequest
     * @returns GetConfBaseInfoByLogicalIdResponse
     */
    async getConfBaseInfoByLogicalId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConfBaseInfoByLogicalIdHeaders({});
        return await this.getConfBaseInfoByLogicalIdWithOptions(request, headers, runtime);
    }
    /**
     * 获取视频会议明细
     *
     * @param headers - GetConferenceDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConferenceDetailResponse
     */
    async getConferenceDetailWithOptions(conferenceId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetConferenceDetail",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/conferences/${conferenceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConferenceDetailResponse({}));
    }
    /**
     * 获取视频会议明细
     * @returns GetConferenceDetailResponse
     */
    async getConferenceDetail(conferenceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConferenceDetailHeaders({});
        return await this.getConferenceDetailWithOptions(conferenceId, headers, runtime);
    }
    /**
     * 获取会话分组数据
     *
     * @param headers - GetConversationCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationCategoryResponse
     */
    async getConversationCategoryWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetConversationCategory",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/conversationCategories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConversationCategoryResponse({}));
    }
    /**
     * 获取会话分组数据
     * @returns GetConversationCategoryResponse
     */
    async getConversationCategory() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConversationCategoryHeaders({});
        return await this.getConversationCategoryWithOptions(headers, runtime);
    }
    /**
     * 获取会话分组详情
     *
     * @param request - GetConversationDetailRequest
     * @param headers - GetConversationDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationDetailResponse
     */
    async getConversationDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetConversationDetail",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/categories/conversations/details/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConversationDetailResponse({}));
    }
    /**
     * 获取会话分组详情
     *
     * @param request - GetConversationDetailRequest
     * @returns GetConversationDetailResponse
     */
    async getConversationDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConversationDetailHeaders({});
        return await this.getConversationDetailWithOptions(request, headers, runtime);
    }
    /**
     * 获取部门维度发布日志信息
     *
     * @param request - GetDingReportDeptSummaryRequest
     * @param headers - GetDingReportDeptSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDingReportDeptSummaryResponse
     */
    async getDingReportDeptSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDingReportDeptSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/report/dept/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDingReportDeptSummaryResponse({}));
    }
    /**
     * 获取部门维度发布日志信息
     *
     * @param request - GetDingReportDeptSummaryRequest
     * @returns GetDingReportDeptSummaryResponse
     */
    async getDingReportDeptSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDingReportDeptSummaryHeaders({});
        return await this.getDingReportDeptSummaryWithOptions(dataId, request, headers, runtime);
    }
    /**
     * 获取组织维度发布日志信息
     *
     * @param headers - GetDingReportSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDingReportSummaryResponse
     */
    async getDingReportSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetDingReportSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/datas/${dataId}/reports/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDingReportSummaryResponse({}));
    }
    /**
     * 获取组织维度发布日志信息
     * @returns GetDingReportSummaryResponse
     */
    async getDingReportSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDingReportSummaryHeaders({});
        return await this.getDingReportSummaryWithOptions(dataId, headers, runtime);
    }
    /**
     * 获得部门维度用户创建文档数和创建文档人数
     *
     * @param request - GetDocCreatedDeptSummaryRequest
     * @param headers - GetDocCreatedDeptSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDocCreatedDeptSummaryResponse
     */
    async getDocCreatedDeptSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDocCreatedDeptSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/doc/dept/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDocCreatedDeptSummaryResponse({}));
    }
    /**
     * 获得部门维度用户创建文档数和创建文档人数
     *
     * @param request - GetDocCreatedDeptSummaryRequest
     * @returns GetDocCreatedDeptSummaryResponse
     */
    async getDocCreatedDeptSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDocCreatedDeptSummaryHeaders({});
        return await this.getDocCreatedDeptSummaryWithOptions(dataId, request, headers, runtime);
    }
    /**
     * 获取组织维度用户创建文档数和创建文档人数
     *
     * @param headers - GetDocCreatedSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDocCreatedSummaryResponse
     */
    async getDocCreatedSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetDocCreatedSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/doc/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDocCreatedSummaryResponse({}));
    }
    /**
     * 获取组织维度用户创建文档数和创建文档人数
     * @returns GetDocCreatedSummaryResponse
     */
    async getDocCreatedSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDocCreatedSummaryHeaders({});
        return await this.getDocCreatedSummaryWithOptions(dataId, headers, runtime);
    }
    /**
     * 获取专属账号所有组织列表
     *
     * @param request - GetExclusiveAccountAllOrgListRequest
     * @param headers - GetExclusiveAccountAllOrgListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetExclusiveAccountAllOrgListResponse
     */
    async getExclusiveAccountAllOrgListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetExclusiveAccountAllOrgList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveAccounts/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetExclusiveAccountAllOrgListResponse({}));
    }
    /**
     * 获取专属账号所有组织列表
     *
     * @param request - GetExclusiveAccountAllOrgListRequest
     * @returns GetExclusiveAccountAllOrgListResponse
     */
    async getExclusiveAccountAllOrgList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetExclusiveAccountAllOrgListHeaders({});
        return await this.getExclusiveAccountAllOrgListWithOptions(request, headers, runtime);
    }
    /**
     * 获取部门维度发布智能填表数量和使用智能填表人数
     *
     * @param request - GetGeneralFormCreatedDeptSummaryRequest
     * @param headers - GetGeneralFormCreatedDeptSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGeneralFormCreatedDeptSummaryResponse
     */
    async getGeneralFormCreatedDeptSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGeneralFormCreatedDeptSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/generalForm/dept/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGeneralFormCreatedDeptSummaryResponse({}));
    }
    /**
     * 获取部门维度发布智能填表数量和使用智能填表人数
     *
     * @param request - GetGeneralFormCreatedDeptSummaryRequest
     * @returns GetGeneralFormCreatedDeptSummaryResponse
     */
    async getGeneralFormCreatedDeptSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGeneralFormCreatedDeptSummaryHeaders({});
        return await this.getGeneralFormCreatedDeptSummaryWithOptions(dataId, request, headers, runtime);
    }
    /**
     * 获取组织维度发布智能填表数量和使用智能填表人数
     *
     * @param headers - GetGeneralFormCreatedSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGeneralFormCreatedSummaryResponse
     */
    async getGeneralFormCreatedSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetGeneralFormCreatedSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/generalForm/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGeneralFormCreatedSummaryResponse({}));
    }
    /**
     * 获取组织维度发布智能填表数量和使用智能填表人数
     * @returns GetGeneralFormCreatedSummaryResponse
     */
    async getGeneralFormCreatedSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGeneralFormCreatedSummaryHeaders({});
        return await this.getGeneralFormCreatedSummaryWithOptions(dataId, headers, runtime);
    }
    /**
     * 获取群活跃明细
     *
     * @param request - GetGroupActiveInfoRequest
     * @param headers - GetGroupActiveInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupActiveInfoResponse
     */
    async getGroupActiveInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dingGroupId)) {
            query["dingGroupId"] = request.dingGroupId;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            query["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGroupActiveInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/activeGroups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGroupActiveInfoResponse({}));
    }
    /**
     * 获取群活跃明细
     *
     * @param request - GetGroupActiveInfoRequest
     * @returns GetGroupActiveInfoResponse
     */
    async getGroupActiveInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGroupActiveInfoHeaders({});
        return await this.getGroupActiveInfoWithOptions(request, headers, runtime);
    }
    /**
     * 根据群会话id获取群相关信息
     *
     * @param request - GetGroupInfoByCidRequest
     * @param headers - GetGroupInfoByCidHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupInfoByCidResponse
     */
    async getGroupInfoByCidWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            query["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGroupInfoByCid",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/groups/infos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGroupInfoByCidResponse({}));
    }
    /**
     * 根据群会话id获取群相关信息
     *
     * @param request - GetGroupInfoByCidRequest
     * @returns GetGroupInfoByCidResponse
     */
    async getGroupInfoByCid(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGroupInfoByCidHeaders({});
        return await this.getGroupInfoByCidWithOptions(request, headers, runtime);
    }
    /**
     * 根据群会话id获取组织cropid
     *
     * @param request - GetGroupOrgByCidRequest
     * @param headers - GetGroupOrgByCidHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupOrgByCidResponse
     */
    async getGroupOrgByCidWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            query["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGroupOrgByCid",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/groups/organizations/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGroupOrgByCidResponse({}));
    }
    /**
     * 根据群会话id获取组织cropid
     *
     * @param request - GetGroupOrgByCidRequest
     * @returns GetGroupOrgByCidResponse
     */
    async getGroupOrgByCid(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGroupOrgByCidHeaders({});
        return await this.getGroupOrgByCidWithOptions(request, headers, runtime);
    }
    /**
     * 获取未活跃用户登陆统计明细
     *
     * @param request - GetInActiveUserListRequest
     * @param headers - GetInActiveUserListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInActiveUserListResponse
     */
    async getInActiveUserListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            body["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInActiveUserList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/inactives/users/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInActiveUserListResponse({}));
    }
    /**
     * 获取未活跃用户登陆统计明细
     *
     * @param request - GetInActiveUserListRequest
     * @returns GetInActiveUserListResponse
     */
    async getInActiveUserList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInActiveUserListHeaders({});
        return await this.getInActiveUserListWithOptions(request, headers, runtime);
    }
    /**
     * 获取最后一次验证通过的企业认证信息
     *
     * @param request - GetLastOrgAuthDataRequest
     * @param headers - GetLastOrgAuthDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetLastOrgAuthDataResponse
     */
    async getLastOrgAuthDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetLastOrgAuthData",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/organizations/authInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetLastOrgAuthDataResponse({}));
    }
    /**
     * 获取最后一次验证通过的企业认证信息
     *
     * @param request - GetLastOrgAuthDataRequest
     * @returns GetLastOrgAuthDataResponse
     */
    async getLastOrgAuthData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetLastOrgAuthDataHeaders({});
        return await this.getLastOrgAuthDataWithOptions(request, headers, runtime);
    }
    /**
     * 消息规则配置和群属性接口
     *
     * @param request - GetMsgConfigRequest
     * @param headers - GetMsgConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMsgConfigResponse
     */
    async getMsgConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupTopic)) {
            body["groupTopic"] = request.groupTopic;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            body["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.listDynamicAttr)) {
            body["listDynamicAttr"] = request.listDynamicAttr;
        }
        if (!tea_util_1.default.isUnset(request.listEmployeeCode)) {
            body["listEmployeeCode"] = request.listEmployeeCode;
        }
        if (!tea_util_1.default.isUnset(request.listUnitId)) {
            body["listUnitId"] = request.listUnitId;
        }
        if (!tea_util_1.default.isUnset(request.ownerJobNo)) {
            body["ownerJobNo"] = request.ownerJobNo;
        }
        if (!tea_util_1.default.isUnset(request.ruleBusinessCode)) {
            body["ruleBusinessCode"] = request.ruleBusinessCode;
        }
        if (!tea_util_1.default.isUnset(request.ruleCategory)) {
            body["ruleCategory"] = request.ruleCategory;
        }
        if (!tea_util_1.default.isUnset(request.ruleCode)) {
            body["ruleCode"] = request.ruleCode;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.sysCode)) {
            body["sysCode"] = request.sysCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetMsgConfig",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/portals/msgConfigs/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMsgConfigResponse({}));
    }
    /**
     * 消息规则配置和群属性接口
     *
     * @param request - GetMsgConfigRequest
     * @returns GetMsgConfigResponse
     */
    async getMsgConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMsgConfigHeaders({});
        return await this.getMsgConfigWithOptions(request, headers, runtime);
    }
    /**
     * 获取消息定位链接
     *
     * @param request - GetMsgLocationRequest
     * @param headers - GetMsgLocationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMsgLocationResponse
     */
    async getMsgLocationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.openMsgId)) {
            body["openMsgId"] = request.openMsgId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetMsgLocation",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageLocations/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMsgLocationResponse({}));
    }
    /**
     * 获取消息定位链接
     *
     * @param request - GetMsgLocationRequest
     * @returns GetMsgLocationResponse
     */
    async getMsgLocation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMsgLocationHeaders({});
        return await this.getMsgLocationWithOptions(request, headers, runtime);
    }
    /**
     * 获取oa后台操作日志记录
     *
     * @param request - GetOaOperatorLogListRequest
     * @param headers - GetOaOperatorLogListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOaOperatorLogListResponse
     */
    async getOaOperatorLogListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryList)) {
            body["categoryList"] = request.categoryList;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOaOperatorLogList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/oaOperatorLogs/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOaOperatorLogListResponse({}));
    }
    /**
     * 获取oa后台操作日志记录
     *
     * @param request - GetOaOperatorLogListRequest
     * @returns GetOaOperatorLogListResponse
     */
    async getOaOperatorLogList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOaOperatorLogListHeaders({});
        return await this.getOaOperatorLogListWithOptions(request, headers, runtime);
    }
    /**
     * 获取企业的外部审计群列表
     *
     * @param request - GetOutGroupsByPageRequest
     * @param headers - GetOutGroupsByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOutGroupsByPageResponse
     */
    async getOutGroupsByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOutGroupsByPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/audits/outsideGroups/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOutGroupsByPageResponse({}));
    }
    /**
     * 获取企业的外部审计群列表
     *
     * @param request - GetOutGroupsByPageRequest
     * @returns GetOutGroupsByPageResponse
     */
    async getOutGroupsByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOutGroupsByPageHeaders({});
        return await this.getOutGroupsByPageWithOptions(request, headers, runtime);
    }
    /**
     * 获取外部审计群消息记录
     *
     * @param request - GetOutsideAuditGroupMessageByPageRequest
     * @param headers - GetOutsideAuditGroupMessageByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOutsideAuditGroupMessageByPageResponse
     */
    async getOutsideAuditGroupMessageByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOutsideAuditGroupMessageByPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/audits/outsideGroups/messages/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOutsideAuditGroupMessageByPageResponse({}));
    }
    /**
     * 获取外部审计群消息记录
     *
     * @param request - GetOutsideAuditGroupMessageByPageRequest
     * @returns GetOutsideAuditGroupMessageByPageResponse
     */
    async getOutsideAuditGroupMessageByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOutsideAuditGroupMessageByPageHeaders({});
        return await this.getOutsideAuditGroupMessageByPageWithOptions(request, headers, runtime);
    }
    /**
     * 伙伴钉根据父标签查询子标签
     *
     * @param headers - GetPartnerTypeByParentIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPartnerTypeByParentIdResponse
     */
    async getPartnerTypeByParentIdWithOptions(parentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetPartnerTypeByParentId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerLabels/${parentId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPartnerTypeByParentIdResponse({}));
    }
    /**
     * 伙伴钉根据父标签查询子标签
     * @returns GetPartnerTypeByParentIdResponse
     */
    async getPartnerTypeByParentId(parentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPartnerTypeByParentIdHeaders({});
        return await this.getPartnerTypeByParentIdWithOptions(parentId, headers, runtime);
    }
    /**
     * 获取公共设备列表。
     *
     * @param request - GetPublicDevicesRequest
     * @param headers - GetPublicDevicesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPublicDevicesResponse
     */
    async getPublicDevicesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            query["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            query["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            query["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPublicDevices",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trusts/publicDevices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPublicDevicesResponse({}));
    }
    /**
     * 获取公共设备列表。
     *
     * @param request - GetPublicDevicesRequest
     * @returns GetPublicDevicesResponse
     */
    async getPublicDevices(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPublicDevicesHeaders({});
        return await this.getPublicDevicesWithOptions(request, headers, runtime);
    }
    /**
     * 获取互动服务窗相关数据
     *
     * @param request - GetPublisherSummaryRequest
     * @param headers - GetPublisherSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPublisherSummaryResponse
     */
    async getPublisherSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPublisherSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/publisher/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPublisherSummaryResponse({}));
    }
    /**
     * 获取互动服务窗相关数据
     *
     * @param request - GetPublisherSummaryRequest
     * @returns GetPublisherSummaryResponse
     */
    async getPublisherSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPublisherSummaryHeaders({});
        return await this.getPublisherSummaryWithOptions(dataId, request, headers, runtime);
    }
    /**
     * 获取实人认证接口调用记录
     *
     * @param request - GetRealPeopleRecordsRequest
     * @param headers - GetRealPeopleRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRealPeopleRecordsResponse
     */
    async getRealPeopleRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.fromTime)) {
            body["fromTime"] = request.fromTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.personIdentification)) {
            body["personIdentification"] = request.personIdentification;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.toTime)) {
            body["toTime"] = request.toTime;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetRealPeopleRecords",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/persons/identificationRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRealPeopleRecordsResponse({}));
    }
    /**
     * 获取实人认证接口调用记录
     *
     * @param request - GetRealPeopleRecordsRequest
     * @returns GetRealPeopleRecordsResponse
     */
    async getRealPeopleRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRealPeopleRecordsHeaders({});
        return await this.getRealPeopleRecordsWithOptions(request, headers, runtime);
    }
    /**
     * 获取人脸对比接口调用记录
     *
     * @param request - GetRecognizeRecordsRequest
     * @param headers - GetRecognizeRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecognizeRecordsResponse
     */
    async getRecognizeRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.faceCompareResult)) {
            body["faceCompareResult"] = request.faceCompareResult;
        }
        if (!tea_util_1.default.isUnset(request.fromTime)) {
            body["fromTime"] = request.fromTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.toTime)) {
            body["toTime"] = request.toTime;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetRecognizeRecords",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/faces/recognizeRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRecognizeRecordsResponse({}));
    }
    /**
     * 获取人脸对比接口调用记录
     *
     * @param request - GetRecognizeRecordsRequest
     * @returns GetRecognizeRecordsResponse
     */
    async getRecognizeRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecognizeRecordsHeaders({});
        return await this.getRecognizeRecordsWithOptions(request, headers, runtime);
    }
    /**
     * 根据机器人标识查询机器人信息
     *
     * @param request - GetRobotInfoByCodeRequest
     * @param headers - GetRobotInfoByCodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRobotInfoByCodeResponse
     */
    async getRobotInfoByCodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            query["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRobotInfoByCode",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/robots/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRobotInfoByCodeResponse({}));
    }
    /**
     * 根据机器人标识查询机器人信息
     *
     * @param request - GetRobotInfoByCodeRequest
     * @returns GetRobotInfoByCodeResponse
     */
    async getRobotInfoByCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRobotInfoByCodeHeaders({});
        return await this.getRobotInfoByCodeWithOptions(request, headers, runtime);
    }
    /**
     * 获取安全管控卡片成员
     *
     * @param request - GetSecurityConfigMemberRequest
     * @param headers - GetSecurityConfigMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSecurityConfigMemberResponse
     */
    async getSecurityConfigMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.configKey)) {
            body["configKey"] = request.configKey;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSecurityConfigMember",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/securities/configs/members/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSecurityConfigMemberResponse({}));
    }
    /**
     * 获取安全管控卡片成员
     *
     * @param request - GetSecurityConfigMemberRequest
     * @returns GetSecurityConfigMemberResponse
     */
    async getSecurityConfigMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSecurityConfigMemberHeaders({});
        return await this.getSecurityConfigMemberWithOptions(request, headers, runtime);
    }
    /**
     * 获取审计协议签署人员信息
     *
     * @param request - GetSignedDetailByPageRequest
     * @param headers - GetSignedDetailByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSignedDetailByPageResponse
     */
    async getSignedDetailByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.signStatus)) {
            query["signStatus"] = request.signStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSignedDetailByPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/audits/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignedDetailByPageResponse({}));
    }
    /**
     * 获取审计协议签署人员信息
     *
     * @param request - GetSignedDetailByPageRequest
     * @returns GetSignedDetailByPageResponse
     */
    async getSignedDetailByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignedDetailByPageHeaders({});
        return await this.getSignedDetailByPageWithOptions(request, headers, runtime);
    }
    /**
     * 获取多个可信设备信息，包括mac地址、staffId、platform
     *
     * @param request - GetTrustDeviceListRequest
     * @param headers - GetTrustDeviceListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTrustDeviceListResponse
     */
    async getTrustDeviceListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.gmtCreateEnd)) {
            body["gmtCreateEnd"] = request.gmtCreateEnd;
        }
        if (!tea_util_1.default.isUnset(request.gmtCreateStart)) {
            body["gmtCreateStart"] = request.gmtCreateStart;
        }
        if (!tea_util_1.default.isUnset(request.gmtModifiedEnd)) {
            body["gmtModifiedEnd"] = request.gmtModifiedEnd;
        }
        if (!tea_util_1.default.isUnset(request.gmtModifiedStart)) {
            body["gmtModifiedStart"] = request.gmtModifiedStart;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            body["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTrustDeviceList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trustedDevices/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTrustDeviceListResponse({}));
    }
    /**
     * 获取多个可信设备信息，包括mac地址、staffId、platform
     *
     * @param request - GetTrustDeviceListRequest
     * @returns GetTrustDeviceListResponse
     */
    async getTrustDeviceList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTrustDeviceListHeaders({});
        return await this.getTrustDeviceListWithOptions(request, headers, runtime);
    }
    /**
     * 获得组织维度用户版本分布情况
     *
     * @param request - GetUserAppVersionSummaryRequest
     * @param headers - GetUserAppVersionSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserAppVersionSummaryResponse
     */
    async getUserAppVersionSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserAppVersionSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/appVersion/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserAppVersionSummaryResponse({}));
    }
    /**
     * 获得组织维度用户版本分布情况
     *
     * @param request - GetUserAppVersionSummaryRequest
     * @returns GetUserAppVersionSummaryResponse
     */
    async getUserAppVersionSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserAppVersionSummaryHeaders({});
        return await this.getUserAppVersionSummaryWithOptions(dataId, request, headers, runtime);
    }
    /**
     * 人脸录入状态查询
     *
     * @param request - GetUserFaceStateRequest
     * @param headers - GetUserFaceStateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserFaceStateResponse
     */
    async getUserFaceStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserFaceState",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/faces/recognizeStates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserFaceStateResponse({}));
    }
    /**
     * 人脸录入状态查询
     *
     * @param request - GetUserFaceStateRequest
     * @returns GetUserFaceStateResponse
     */
    async getUserFaceState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserFaceStateHeaders({});
        return await this.getUserFaceStateWithOptions(request, headers, runtime);
    }
    /**
     * 实人认证状态查询
     *
     * @param request - GetUserRealPeopleStateRequest
     * @param headers - GetUserRealPeopleStateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserRealPeopleStateResponse
     */
    async getUserRealPeopleStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserRealPeopleState",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/persons/identificationStates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserRealPeopleStateResponse({}));
    }
    /**
     * 实人认证状态查询
     *
     * @param request - GetUserRealPeopleStateRequest
     * @returns GetUserRealPeopleStateResponse
     */
    async getUserRealPeopleState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserRealPeopleStateHeaders({});
        return await this.getUserRealPeopleStateWithOptions(request, headers, runtime);
    }
    /**
     * 获取用户停留时长
     *
     * @param request - GetUserStayLengthRequest
     * @param headers - GetUserStayLengthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserStayLengthResponse
     */
    async getUserStayLengthWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserStayLength",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/users/stayTimes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserStayLengthResponse({}));
    }
    /**
     * 获取用户停留时长
     *
     * @param request - GetUserStayLengthRequest
     * @returns GetUserStayLengthResponse
     */
    async getUserStayLength(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserStayLengthHeaders({});
        return await this.getUserStayLengthWithOptions(request, headers, runtime);
    }
    /**
     * 获取文件病毒扫描结果
     *
     * @param request - GetVirusScanResultRequest
     * @param headers - GetVirusScanResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetVirusScanResultResponse
     */
    async getVirusScanResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetVirusScanResult",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/virusScanTasks/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetVirusScanResultResponse({}));
    }
    /**
     * 获取文件病毒扫描结果
     *
     * @param request - GetVirusScanResultRequest
     * @returns GetVirusScanResultResponse
     */
    async getVirusScanResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetVirusScanResultHeaders({});
        return await this.getVirusScanResultWithOptions(request, headers, runtime);
    }
    /**
     * 根据群属性查询群ID
     *
     * @param request - GroupQueryByAttrRequest
     * @param headers - GroupQueryByAttrHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupQueryByAttrResponse
     */
    async groupQueryByAttrWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.groupTopic)) {
            body["groupTopic"] = request.groupTopic;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            body["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.listDynamicAttr)) {
            body["listDynamicAttr"] = request.listDynamicAttr;
        }
        if (!tea_util_1.default.isUnset(request.pageIndex)) {
            body["pageIndex"] = request.pageIndex;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupQueryByAttr",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/portals/groups/queryGroup`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupQueryByAttrResponse({}));
    }
    /**
     * 根据群属性查询群ID
     *
     * @param request - GroupQueryByAttrRequest
     * @returns GroupQueryByAttrResponse
     */
    async groupQueryByAttr(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupQueryByAttrHeaders({});
        return await this.groupQueryByAttrWithOptions(request, headers, runtime);
    }
    /**
     * 根据群ID查询群属性
     *
     * @param request - GroupQueryByOpenIdRequest
     * @param headers - GroupQueryByOpenIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupQueryByOpenIdResponse
     */
    async groupQueryByOpenIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupQueryByOpenId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/portals/groups/getGroupByOpenConversationId`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupQueryByOpenIdResponse({}));
    }
    /**
     * 根据群ID查询群属性
     *
     * @param request - GroupQueryByOpenIdRequest
     * @returns GroupQueryByOpenIdResponse
     */
    async groupQueryByOpenId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupQueryByOpenIdHeaders({});
        return await this.groupQueryByOpenIdWithOptions(request, headers, runtime);
    }
    /**
     * 获取企业文件审计日志
     *
     * @param request - ListAuditLogRequest
     * @param headers - ListAuditLogHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuditLogResponse
     */
    async listAuditLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endDate)) {
            query["endDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.nextBizId)) {
            query["nextBizId"] = request.nextBizId;
        }
        if (!tea_util_1.default.isUnset(request.nextGmtCreate)) {
            query["nextGmtCreate"] = request.nextGmtCreate;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            query["startDate"] = request.startDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAuditLog",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileAuditLogs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAuditLogResponse({}));
    }
    /**
     * 获取企业文件审计日志
     *
     * @param request - ListAuditLogRequest
     * @returns ListAuditLogResponse
     */
    async listAuditLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAuditLogHeaders({});
        return await this.listAuditLogWithOptions(request, headers, runtime);
    }
    /**
     * 根据机器人code列表查询机器人信息
     *
     * @param request - ListByCodesRequest
     * @param headers - ListByCodesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListByCodesResponse
     */
    async listByCodesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: request.body,
        });
        let params = new $OpenApi.Params({
            action: "ListByCodes",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/sceneGroups/robotInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListByCodesResponse({}));
    }
    /**
     * 根据机器人code列表查询机器人信息
     *
     * @param request - ListByCodesRequest
     * @returns ListByCodesResponse
     */
    async listByCodes(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListByCodesHeaders({});
        return await this.listByCodesWithOptions(request, headers, runtime);
    }
    /**
     * 根据插件id列表查询插件信息
     *
     * @param request - ListByPluginIdsRequest
     * @param headers - ListByPluginIdsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListByPluginIdsResponse
     */
    async listByPluginIdsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: request.body,
        });
        let params = new $OpenApi.Params({
            action: "ListByPluginIds",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/sceneGroups/pluginInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListByPluginIdsResponse({}));
    }
    /**
     * 根据插件id列表查询插件信息
     *
     * @param request - ListByPluginIdsRequest
     * @returns ListByPluginIdsResponse
     */
    async listByPluginIds(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListByPluginIdsHeaders({});
        return await this.listByPluginIdsWithOptions(request, headers, runtime);
    }
    /**
     * 查询分组列表
     *
     * @param tmpReq - ListCategorysRequest
     * @param headers - ListCategorysHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListCategorysResponse
     */
    async listCategorysWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ListCategorysShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCategorys",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/listCategories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCategorysResponse({}));
    }
    /**
     * 查询分组列表
     *
     * @param request - ListCategorysRequest
     * @returns ListCategorysResponse
     */
    async listCategorys(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCategorysHeaders({});
        return await this.listCategorysWithOptions(request, headers, runtime);
    }
    /**
     * 通过手机号获取已加入的属于渠道组织的列表信息
     *
     * @param request - ListJoinOrgInfoRequest
     * @param headers - ListJoinOrgInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListJoinOrgInfoResponse
     */
    async listJoinOrgInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListJoinOrgInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveAccounts/organizations/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListJoinOrgInfoResponse({}));
    }
    /**
     * 通过手机号获取已加入的属于渠道组织的列表信息
     *
     * @param request - ListJoinOrgInfoRequest
     * @returns ListJoinOrgInfoResponse
     */
    async listJoinOrgInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListJoinOrgInfoHeaders({});
        return await this.listJoinOrgInfoWithOptions(request, headers, runtime);
    }
    /**
     * 获取小程序版本列表
     *
     * @param request - ListMiniAppAvailableVersionRequest
     * @param headers - ListMiniAppAvailableVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMiniAppAvailableVersionResponse
     */
    async listMiniAppAvailableVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.versionTypeSet)) {
            body["versionTypeSet"] = request.versionTypeSet;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListMiniAppAvailableVersion",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/availableLists`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListMiniAppAvailableVersionResponse({}));
    }
    /**
     * 获取小程序版本列表
     *
     * @param request - ListMiniAppAvailableVersionRequest
     * @returns ListMiniAppAvailableVersionResponse
     */
    async listMiniAppAvailableVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListMiniAppAvailableVersionHeaders({});
        return await this.listMiniAppAvailableVersionWithOptions(request, headers, runtime);
    }
    /**
     * 获取小程序历史版本列表
     *
     * @param request - ListMiniAppHistoryVersionRequest
     * @param headers - ListMiniAppHistoryVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMiniAppHistoryVersionResponse
     */
    async listMiniAppHistoryVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListMiniAppHistoryVersion",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/historyLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListMiniAppHistoryVersionResponse({}));
    }
    /**
     * 获取小程序历史版本列表
     *
     * @param request - ListMiniAppHistoryVersionRequest
     * @returns ListMiniAppHistoryVersionResponse
     */
    async listMiniAppHistoryVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListMiniAppHistoryVersionHeaders({});
        return await this.listMiniAppHistoryVersionWithOptions(request, headers, runtime);
    }
    /**
     * 查询伙伴角色
     *
     * @param headers - ListPartnerRolesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPartnerRolesResponse
     */
    async listPartnerRolesWithOptions(parentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListPartnerRoles",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partners/roles/${parentId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPartnerRolesResponse({}));
    }
    /**
     * 查询伙伴角色
     * @returns ListPartnerRolesResponse
     */
    async listPartnerRoles(parentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPartnerRolesHeaders({});
        return await this.listPartnerRolesWithOptions(parentId, headers, runtime);
    }
    /**
     * 获取巡点信息列表
     *
     * @param request - ListPunchScheduleByConditionWithPagingRequest
     * @param headers - ListPunchScheduleByConditionWithPagingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPunchScheduleByConditionWithPagingResponse
     */
    async listPunchScheduleByConditionWithPagingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizInstanceId)) {
            body["bizInstanceId"] = request.bizInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.scheduleDateEnd)) {
            body["scheduleDateEnd"] = request.scheduleDateEnd;
        }
        if (!tea_util_1.default.isUnset(request.scheduleDateStart)) {
            body["scheduleDateStart"] = request.scheduleDateStart;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListPunchScheduleByConditionWithPaging",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/punchSchedules/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPunchScheduleByConditionWithPagingResponse({}));
    }
    /**
     * 获取巡点信息列表
     *
     * @param request - ListPunchScheduleByConditionWithPagingRequest
     * @returns ListPunchScheduleByConditionWithPagingResponse
     */
    async listPunchScheduleByConditionWithPaging(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPunchScheduleByConditionWithPagingHeaders({});
        return await this.listPunchScheduleByConditionWithPagingWithOptions(request, headers, runtime);
    }
    /**
     * 查询规则列表
     *
     * @param tmpReq - ListRulesRequest
     * @param headers - ListRulesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRulesResponse
     */
    async listRulesWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ListRulesShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRules",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/rules/listRules`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRulesResponse({}));
    }
    /**
     * 查询规则列表
     *
     * @param request - ListRulesRequest
     * @returns ListRulesResponse
     */
    async listRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRulesHeaders({});
        return await this.listRulesWithOptions(request, headers, runtime);
    }
    /**
     * 指定用户强制下线
     *
     * @param request - LogoutRequest
     * @param headers - LogoutHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LogoutResponse
     */
    async logoutWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceType)) {
            body["deviceType"] = request.deviceType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Logout",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/users/logout`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LogoutResponse({}));
    }
    /**
     * 指定用户强制下线
     *
     * @param request - LogoutRequest
     * @returns LogoutResponse
     */
    async logout(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LogoutHeaders({});
        return await this.logoutWithOptions(request, headers, runtime);
    }
    /**
     * 购买权益包
     *
     * @param request - OpenBenefitPackageRequest
     * @param headers - OpenBenefitPackageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenBenefitPackageResponse
     */
    async openBenefitPackageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.benefitPackage)) {
            body["benefitPackage"] = request.benefitPackage;
        }
        if (!tea_util_1.default.isUnset(request.endDate)) {
            body["endDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            body["startDate"] = request.startDate;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OpenBenefitPackage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/benefitPackages/purchase`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OpenBenefitPackageResponse({}));
    }
    /**
     * 购买权益包
     *
     * @param request - OpenBenefitPackageRequest
     * @returns OpenBenefitPackageResponse
     */
    async openBenefitPackage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OpenBenefitPackageHeaders({});
        return await this.openBenefitPackageWithOptions(request, headers, runtime);
    }
    /**
     * 商机冲突检测
     *
     * @param request - OpportunitySearchRequest
     * @param headers - OpportunitySearchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpportunitySearchResponse
     */
    async opportunitySearchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OpportunitySearch",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/opportunities/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OpportunitySearchResponse({}));
    }
    /**
     * 商机冲突检测
     *
     * @param request - OpportunitySearchRequest
     * @returns OpportunitySearchResponse
     */
    async opportunitySearch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OpportunitySearchHeaders({});
        return await this.opportunitySearchWithOptions(request, headers, runtime);
    }
    /**
     * 防作弊风险检测
     *
     * @param request - PreventCheatingCheckRiskRequest
     * @param headers - PreventCheatingCheckRiskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PreventCheatingCheckRiskResponse
     */
    async preventCheatingCheckRiskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.clientVer)) {
            body["clientVer"] = request.clientVer;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.platformVer)) {
            body["platformVer"] = request.platformVer;
        }
        if (!tea_util_1.default.isUnset(request.sec)) {
            body["sec"] = request.sec;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PreventCheatingCheckRisk",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/preventCheats/risks/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PreventCheatingCheckRiskResponse({}));
    }
    /**
     * 防作弊风险检测
     *
     * @param request - PreventCheatingCheckRiskRequest
     * @returns PreventCheatingCheckRiskResponse
     */
    async preventCheatingCheckRisk(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PreventCheatingCheckRiskHeaders({});
        return await this.preventCheatingCheckRiskWithOptions(request, headers, runtime);
    }
    /**
     * 发送文件更改的评论
     *
     * @param request - PublishFileChangeNoticeRequest
     * @param headers - PublishFileChangeNoticeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PublishFileChangeNoticeResponse
     */
    async publishFileChangeNoticeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fileId)) {
            body["fileId"] = request.fileId;
        }
        if (!tea_util_1.default.isUnset(request.operateType)) {
            body["operateType"] = request.operateType;
        }
        if (!tea_util_1.default.isUnset(request.operatorUnionId)) {
            body["operatorUnionId"] = request.operatorUnionId;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            body["spaceId"] = request.spaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PublishFileChangeNotice",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/comments/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PublishFileChangeNoticeResponse({}));
    }
    /**
     * 发送文件更改的评论
     *
     * @param request - PublishFileChangeNoticeRequest
     * @returns PublishFileChangeNoticeResponse
     */
    async publishFileChangeNotice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PublishFileChangeNoticeHeaders({});
        return await this.publishFileChangeNoticeWithOptions(request, headers, runtime);
    }
    /**
     * 发布规则
     *
     * @param request - PublishRuleRequest
     * @param headers - PublishRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PublishRuleResponse
     */
    async publishRuleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PublishRule",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/rules/publish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PublishRuleResponse({}));
    }
    /**
     * 发布规则
     *
     * @param request - PublishRuleRequest
     * @returns PublishRuleResponse
     */
    async publishRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PublishRuleHeaders({});
        return await this.publishRuleWithOptions(request, headers, runtime);
    }
    /**
     * 推送专属设计中自建/第三方应用的小红点
     *
     * @param request - PushBadgeRequest
     * @param headers - PushBadgeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushBadgeResponse
     */
    async pushBadgeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.badgeItems)) {
            body["badgeItems"] = request.badgeItems;
        }
        if (!tea_util_1.default.isUnset(request.pushType)) {
            body["pushType"] = request.pushType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PushBadge",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveDesigns/redPoints/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PushBadgeResponse({}));
    }
    /**
     * 推送专属设计中自建/第三方应用的小红点
     *
     * @param request - PushBadgeRequest
     * @returns PushBadgeResponse
     */
    async pushBadge(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PushBadgeHeaders({});
        return await this.pushBadgeWithOptions(request, headers, runtime);
    }
    /**
     * 查询跨云存储配置
     *
     * @param request - QueryAcrossCloudStroageConfigsRequest
     * @param headers - QueryAcrossCloudStroageConfigsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAcrossCloudStroageConfigsResponse
     */
    async queryAcrossCloudStroageConfigsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCloudType)) {
            query["targetCloudType"] = request.targetCloudType;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAcrossCloudStroageConfigs",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/configurations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAcrossCloudStroageConfigsResponse({}));
    }
    /**
     * 查询跨云存储配置
     *
     * @param request - QueryAcrossCloudStroageConfigsRequest
     * @returns QueryAcrossCloudStroageConfigsResponse
     */
    async queryAcrossCloudStroageConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAcrossCloudStroageConfigsHeaders({});
        return await this.queryAcrossCloudStroageConfigsWithOptions(request, headers, runtime);
    }
    /**
     * 根据手机号查询渠道组织中的员工信息
     *
     * @param request - QueryChannelStaffInfoByMobileRequest
     * @param headers - QueryChannelStaffInfoByMobileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryChannelStaffInfoByMobileResponse
     */
    async queryChannelStaffInfoByMobileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryChannelStaffInfoByMobile",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/channelOrganizations/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryChannelStaffInfoByMobileResponse({}));
    }
    /**
     * 根据手机号查询渠道组织中的员工信息
     *
     * @param request - QueryChannelStaffInfoByMobileRequest
     * @returns QueryChannelStaffInfoByMobileResponse
     */
    async queryChannelStaffInfoByMobile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryChannelStaffInfoByMobileHeaders({});
        return await this.queryChannelStaffInfoByMobileWithOptions(request, headers, runtime);
    }
    /**
     * 获取分组下会话列表
     *
     * @param request - QueryConversationPageRequest
     * @param headers - QueryConversationPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryConversationPageResponse
     */
    async queryConversationPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.categoryId)) {
            query["categoryId"] = request.categoryId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryConversationPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/categories/conversations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryConversationPageResponse({}));
    }
    /**
     * 获取分组下会话列表
     *
     * @param request - QueryConversationPageRequest
     * @returns QueryConversationPageResponse
     */
    async queryConversationPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryConversationPageHeaders({});
        return await this.queryConversationPageWithOptions(request, headers, runtime);
    }
    /**
     * 查询专属版权益
     *
     * @param headers - QueryExclusiveBenefitsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryExclusiveBenefitsResponse
     */
    async queryExclusiveBenefitsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryExclusiveBenefits",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/benefits`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryExclusiveBenefitsResponse({}));
    }
    /**
     * 查询专属版权益
     * @returns QueryExclusiveBenefitsResponse
     */
    async queryExclusiveBenefits() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryExclusiveBenefitsHeaders({});
        return await this.queryExclusiveBenefitsWithOptions(headers, runtime);
    }
    /**
     * 伙伴钉根据uid查询人员的标签信息
     *
     * @param headers - QueryPartnerInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPartnerInfoResponse
     */
    async queryPartnerInfoWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryPartnerInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partners/users/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPartnerInfoResponse({}));
    }
    /**
     * 伙伴钉根据uid查询人员的标签信息
     * @returns QueryPartnerInfoResponse
     */
    async queryPartnerInfo(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPartnerInfoHeaders({});
        return await this.queryPartnerInfoWithOptions(userId, headers, runtime);
    }
    /**
     * 根据templateId查询模版信息
     *
     * @param headers - QueryTemplateInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTemplateInfoResponse
     */
    async queryTemplateInfoWithOptions(templateId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryTemplateInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/sceneGroups/templates/${templateId}/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTemplateInfoResponse({}));
    }
    /**
     * 根据templateId查询模版信息
     * @returns QueryTemplateInfoResponse
     */
    async queryTemplateInfo(templateId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTemplateInfoHeaders({});
        return await this.queryTemplateInfoWithOptions(templateId, headers, runtime);
    }
    /**
     * 获取用户截屏操作记录
     *
     * @param request - QueryUserBehaviorRequest
     * @param headers - QueryUserBehaviorHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserBehaviorResponse
     */
    async queryUserBehaviorWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserBehavior",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/enterpriseSecurities/userBehaviors/screenshots/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserBehaviorResponse({}));
    }
    /**
     * 获取用户截屏操作记录
     *
     * @param request - QueryUserBehaviorRequest
     * @returns QueryUserBehaviorResponse
     */
    async queryUserBehavior(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserBehaviorHeaders({});
        return await this.queryUserBehaviorWithOptions(request, headers, runtime);
    }
    /**
     * 小程序版本回滚
     *
     * @param request - RollbackMiniAppVersionRequest
     * @param headers - RollbackMiniAppVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RollbackMiniAppVersionResponse
     */
    async rollbackMiniAppVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.rollbackVersion)) {
            body["rollbackVersion"] = request.rollbackVersion;
        }
        if (!tea_util_1.default.isUnset(request.targetVersion)) {
            body["targetVersion"] = request.targetVersion;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RollbackMiniAppVersion",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/rollback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RollbackMiniAppVersionResponse({}));
    }
    /**
     * 小程序版本回滚
     *
     * @param request - RollbackMiniAppVersionRequest
     * @returns RollbackMiniAppVersionResponse
     */
    async rollbackMiniAppVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RollbackMiniAppVersionHeaders({});
        return await this.rollbackMiniAppVersionWithOptions(request, headers, runtime);
    }
    /**
     * 按规则批量发消息
     *
     * @param request - RuleBatchReceiverRequest
     * @param headers - RuleBatchReceiverHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RuleBatchReceiverResponse
     */
    async ruleBatchReceiverWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.batchNo)) {
            body["batchNo"] = request.batchNo;
        }
        if (!tea_util_1.default.isUnset(request.cardOptions)) {
            body["cardOptions"] = request.cardOptions;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.ruleCode)) {
            body["ruleCode"] = request.ruleCode;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.specialStrategy)) {
            body["specialStrategy"] = request.specialStrategy;
        }
        if (!tea_util_1.default.isUnset(request.taskBatchNo)) {
            body["taskBatchNo"] = request.taskBatchNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RuleBatchReceiver",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/dmc/rules/messages/batchSend`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RuleBatchReceiverResponse({}));
    }
    /**
     * 按规则批量发消息
     *
     * @param request - RuleBatchReceiverRequest
     * @returns RuleBatchReceiverResponse
     */
    async ruleBatchReceiver(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RuleBatchReceiverHeaders({});
        return await this.ruleBatchReceiverWithOptions(request, headers, runtime);
    }
    /**
     * 新增跨云存储配置
     *
     * @param request - SaveAcrossCloudStroageConfigsRequest
     * @param headers - SaveAcrossCloudStroageConfigsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveAcrossCloudStroageConfigsResponse
     */
    async saveAcrossCloudStroageConfigsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.bucketName)) {
            body["bucketName"] = request.bucketName;
        }
        if (!tea_util_1.default.isUnset(request.cloudType)) {
            body["cloudType"] = request.cloudType;
        }
        if (!tea_util_1.default.isUnset(request.endpoint)) {
            body["endpoint"] = request.endpoint;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveAcrossCloudStroageConfigs",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/configurations`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveAcrossCloudStroageConfigsResponse({}));
    }
    /**
     * 新增跨云存储配置
     *
     * @param request - SaveAcrossCloudStroageConfigsRequest
     * @returns SaveAcrossCloudStroageConfigsResponse
     */
    async saveAcrossCloudStroageConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveAcrossCloudStroageConfigsHeaders({});
        return await this.saveAcrossCloudStroageConfigsWithOptions(request, headers, runtime);
    }
    /**
     * 保存并提交认证信息
     *
     * @param request - SaveAndSubmitAuthInfoRequest
     * @param headers - SaveAndSubmitAuthInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveAndSubmitAuthInfoResponse
     */
    async saveAndSubmitAuthInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.applyRemark)) {
            body["applyRemark"] = request.applyRemark;
        }
        if (!tea_util_1.default.isUnset(request.authorizeMediaId)) {
            body["authorizeMediaId"] = request.authorizeMediaId;
        }
        if (!tea_util_1.default.isUnset(request.industry)) {
            body["industry"] = request.industry;
        }
        if (!tea_util_1.default.isUnset(request.legalPerson)) {
            body["legalPerson"] = request.legalPerson;
        }
        if (!tea_util_1.default.isUnset(request.legalPersonIdCard)) {
            body["legalPersonIdCard"] = request.legalPersonIdCard;
        }
        if (!tea_util_1.default.isUnset(request.licenseMediaId)) {
            body["licenseMediaId"] = request.licenseMediaId;
        }
        if (!tea_util_1.default.isUnset(request.locCity)) {
            body["locCity"] = request.locCity;
        }
        if (!tea_util_1.default.isUnset(request.locCityName)) {
            body["locCityName"] = request.locCityName;
        }
        if (!tea_util_1.default.isUnset(request.locProvince)) {
            body["locProvince"] = request.locProvince;
        }
        if (!tea_util_1.default.isUnset(request.locProvinceName)) {
            body["locProvinceName"] = request.locProvinceName;
        }
        if (!tea_util_1.default.isUnset(request.mobileNum)) {
            body["mobileNum"] = request.mobileNum;
        }
        if (!tea_util_1.default.isUnset(request.orgName)) {
            body["orgName"] = request.orgName;
        }
        if (!tea_util_1.default.isUnset(request.organizationCode)) {
            body["organizationCode"] = request.organizationCode;
        }
        if (!tea_util_1.default.isUnset(request.organizationCodeMediaId)) {
            body["organizationCodeMediaId"] = request.organizationCodeMediaId;
        }
        if (!tea_util_1.default.isUnset(request.registLocation)) {
            body["registLocation"] = request.registLocation;
        }
        if (!tea_util_1.default.isUnset(request.registNum)) {
            body["registNum"] = request.registNum;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.unifiedSocialCredit)) {
            body["unifiedSocialCredit"] = request.unifiedSocialCredit;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveAndSubmitAuthInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/ognizations/authInfos/saveAndSubmit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveAndSubmitAuthInfoResponse({}));
    }
    /**
     * 保存并提交认证信息
     *
     * @param request - SaveAndSubmitAuthInfoRequest
     * @returns SaveAndSubmitAuthInfoResponse
     */
    async saveAndSubmitAuthInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveAndSubmitAuthInfoHeaders({});
        return await this.saveAndSubmitAuthInfoWithOptions(request, headers, runtime);
    }
    /**
     * 亿格云能力结合
     *
     * @param request - SaveOpenTerminalInfoRequest
     * @param headers - SaveOpenTerminalInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveOpenTerminalInfoResponse
     */
    async saveOpenTerminalInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.logSource)) {
            body["logSource"] = request.logSource;
        }
        if (!tea_util_1.default.isUnset(request.logType)) {
            body["logType"] = request.logType;
        }
        if (!tea_util_1.default.isUnset(request.openExt)) {
            body["openExt"] = request.openExt;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveOpenTerminalInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/externalLogs/terminalInfos/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveOpenTerminalInfoResponse({}));
    }
    /**
     * 亿格云能力结合
     *
     * @param request - SaveOpenTerminalInfoRequest
     * @returns SaveOpenTerminalInfoResponse
     */
    async saveOpenTerminalInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveOpenTerminalInfoHeaders({});
        return await this.saveOpenTerminalInfoWithOptions(request, headers, runtime);
    }
    /**
     * 保存专属文件存储的功能项
     *
     * @param request - SaveStorageFunctionSwitchRequest
     * @param headers - SaveStorageFunctionSwitchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveStorageFunctionSwitchResponse
     */
    async saveStorageFunctionSwitchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.functionList)) {
            body["functionList"] = request.functionList;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveStorageFunctionSwitch",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/storages/functions/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveStorageFunctionSwitchResponse({}));
    }
    /**
     * 保存专属文件存储的功能项
     *
     * @param request - SaveStorageFunctionSwitchRequest
     * @returns SaveStorageFunctionSwitchResponse
     */
    async saveStorageFunctionSwitch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveStorageFunctionSwitchHeaders({});
        return await this.saveStorageFunctionSwitchWithOptions(request, headers, runtime);
    }
    /**
     * 保存专属文件存储整体开关
     *
     * @param request - SaveStorageSwitchRequest
     * @param headers - SaveStorageSwitchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveStorageSwitchResponse
     */
    async saveStorageSwitchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openStorage)) {
            body["openStorage"] = request.openStorage;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveStorageSwitch",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/storages/switches/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveStorageSwitchResponse({}));
    }
    /**
     * 保存专属文件存储整体开关
     *
     * @param request - SaveStorageSwitchRequest
     * @returns SaveStorageSwitchResponse
     */
    async saveStorageSwitch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveStorageSwitchHeaders({});
        return await this.saveStorageSwitchWithOptions(request, headers, runtime);
    }
    /**
     * 用于提供mdm微应用白名单配置能力
     *
     * @param request - SaveWhiteAppRequest
     * @param headers - SaveWhiteAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveWhiteAppResponse
     */
    async saveWhiteAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentIdList)) {
            body["agentIdList"] = request.agentIdList;
        }
        if (!tea_util_1.default.isUnset(request.agentIdMap)) {
            body["agentIdMap"] = request.agentIdMap;
        }
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["operation"] = request.operation;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveWhiteApp",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/whiteLists/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveWhiteAppResponse({}));
    }
    /**
     * 用于提供mdm微应用白名单配置能力
     *
     * @param request - SaveWhiteAppRequest
     * @returns SaveWhiteAppResponse
     */
    async saveWhiteApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveWhiteAppHeaders({});
        return await this.saveWhiteAppWithOptions(request, headers, runtime);
    }
    /**
     * 查询企业内部群信息
     *
     * @param request - SearchOrgInnerGroupInfoRequest
     * @param headers - SearchOrgInnerGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchOrgInnerGroupInfoResponse
     */
    async searchOrgInnerGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.createTimeEnd)) {
            query["createTimeEnd"] = request.createTimeEnd;
        }
        if (!tea_util_1.default.isUnset(request.createTimeStart)) {
            query["createTimeStart"] = request.createTimeStart;
        }
        if (!tea_util_1.default.isUnset(request.groupMembersCountEnd)) {
            query["groupMembersCountEnd"] = request.groupMembersCountEnd;
        }
        if (!tea_util_1.default.isUnset(request.groupMembersCountStart)) {
            query["groupMembersCountStart"] = request.groupMembersCountStart;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.groupOwner)) {
            query["groupOwner"] = request.groupOwner;
        }
        if (!tea_util_1.default.isUnset(request.lastActiveTimeEnd)) {
            query["lastActiveTimeEnd"] = request.lastActiveTimeEnd;
        }
        if (!tea_util_1.default.isUnset(request.lastActiveTimeStart)) {
            query["lastActiveTimeStart"] = request.lastActiveTimeStart;
        }
        if (!tea_util_1.default.isUnset(request.operatorUserId)) {
            query["operatorUserId"] = request.operatorUserId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.pageStart)) {
            query["pageStart"] = request.pageStart;
        }
        if (!tea_util_1.default.isUnset(request.syncToDingpan)) {
            query["syncToDingpan"] = request.syncToDingpan;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            query["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchOrgInnerGroupInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/securities/orgGroupInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchOrgInnerGroupInfoResponse({}));
    }
    /**
     * 查询企业内部群信息
     *
     * @param request - SearchOrgInnerGroupInfoRequest
     * @returns SearchOrgInnerGroupInfoResponse
     */
    async searchOrgInnerGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchOrgInnerGroupInfoHeaders({});
        return await this.searchOrgInnerGroupInfoWithOptions(request, headers, runtime);
    }
    /**
     * 通过接口发送应用内DING
     *
     * @param request - SendAppDingRequest
     * @param headers - SendAppDingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendAppDingResponse
     */
    async sendAppDingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.userids)) {
            body["userids"] = request.userids;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendAppDing",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/appDings/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendAppDingResponse({}));
    }
    /**
     * 通过接口发送应用内DING
     *
     * @param request - SendAppDingRequest
     * @returns SendAppDingResponse
     */
    async sendAppDing(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendAppDingHeaders({});
        return await this.sendAppDingWithOptions(request, headers, runtime);
    }
    /**
     * 发送邀请函
     *
     * @param request - SendInvitationRequest
     * @param headers - SendInvitationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendInvitationResponse
     */
    async sendInvitationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.orgAlias)) {
            body["orgAlias"] = request.orgAlias;
        }
        if (!tea_util_1.default.isUnset(request.partnerLabelId)) {
            body["partnerLabelId"] = request.partnerLabelId;
        }
        if (!tea_util_1.default.isUnset(request.partnerNum)) {
            body["partnerNum"] = request.partnerNum;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            body["phone"] = request.phone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendInvitation",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments/invitations/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendInvitationResponse({}));
    }
    /**
     * 发送邀请函
     *
     * @param request - SendInvitationRequest
     * @returns SendInvitationResponse
     */
    async sendInvitation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendInvitationHeaders({});
        return await this.sendInvitationWithOptions(request, headers, runtime);
    }
    /**
     * 通过接口发送电话DING
     *
     * @param request - SendPhoneDingRequest
     * @param headers - SendPhoneDingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendPhoneDingResponse
     */
    async sendPhoneDingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.userids)) {
            body["userids"] = request.userids;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendPhoneDing",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/phoneDings/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendPhoneDingResponse({}));
    }
    /**
     * 通过接口发送电话DING
     *
     * @param request - SendPhoneDingRequest
     * @returns SendPhoneDingResponse
     */
    async sendPhoneDing(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendPhoneDingHeaders({});
        return await this.sendPhoneDingWithOptions(request, headers, runtime);
    }
    /**
     * 设置会话所属分组
     *
     * @param request - SetConversationCategoryRequest
     * @param headers - SetConversationCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetConversationCategoryResponse
     */
    async setConversationCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryId)) {
            body["categoryId"] = request.categoryId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetConversationCategory",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/conversationCategories/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetConversationCategoryResponse({}));
    }
    /**
     * 设置会话所属分组
     *
     * @param request - SetConversationCategoryRequest
     * @returns SetConversationCategoryResponse
     */
    async setConversationCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetConversationCategoryHeaders({});
        return await this.setConversationCategoryWithOptions(request, headers, runtime);
    }
    /**
     * 设置会话副标题
     *
     * @param request - SetConversationSubtitleRequest
     * @param headers - SetConversationSubtitleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetConversationSubtitleResponse
     */
    async setConversationSubtitleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.subtitle)) {
            body["subtitle"] = request.subtitle;
        }
        if (!tea_util_1.default.isUnset(request.subtitleColor)) {
            body["subtitleColor"] = request.subtitleColor;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetConversationSubtitle",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/conversations/subtitles/set`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetConversationSubtitleResponse({}));
    }
    /**
     * 设置会话副标题
     *
     * @param request - SetConversationSubtitleRequest
     * @returns SetConversationSubtitleResponse
     */
    async setConversationSubtitle(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetConversationSubtitleHeaders({});
        return await this.setConversationSubtitleWithOptions(request, headers, runtime);
    }
    /**
     * 设置会话所属顶部分组
     *
     * @param request - SetConversationTopCategoryRequest
     * @param headers - SetConversationTopCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetConversationTopCategoryResponse
     */
    async setConversationTopCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.setCategoryList)) {
            body["setCategoryList"] = request.setCategoryList;
        }
        if (!tea_util_1.default.isUnset(request.sign)) {
            body["sign"] = request.sign;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetConversationTopCategory",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/conversations/topCategories/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetConversationTopCategoryResponse({}));
    }
    /**
     * 设置会话所属顶部分组
     *
     * @param request - SetConversationTopCategoryRequest
     * @returns SetConversationTopCategoryResponse
     */
    async setConversationTopCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetConversationTopCategoryHeaders({});
        return await this.setConversationTopCategoryWithOptions(request, headers, runtime);
    }
    /**
     * 伙伴钉设置部门伙伴编码和伙伴类型
     *
     * @param request - SetDeptPartnerTypeAndNumRequest
     * @param headers - SetDeptPartnerTypeAndNumHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetDeptPartnerTypeAndNumResponse
     */
    async setDeptPartnerTypeAndNumWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.labelIds)) {
            body["labelIds"] = request.labelIds;
        }
        if (!tea_util_1.default.isUnset(request.partnerNum)) {
            body["partnerNum"] = request.partnerNum;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetDeptPartnerTypeAndNum",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetDeptPartnerTypeAndNumResponse({}));
    }
    /**
     * 伙伴钉设置部门伙伴编码和伙伴类型
     *
     * @param request - SetDeptPartnerTypeAndNumRequest
     * @returns SetDeptPartnerTypeAndNumResponse
     */
    async setDeptPartnerTypeAndNum(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetDeptPartnerTypeAndNumHeaders({});
        return await this.setDeptPartnerTypeAndNumWithOptions(request, headers, runtime);
    }
    /**
     * 设置企业全局顶部会话分组
     *
     * @param request - SetOrgTopConversationCategoryRequest
     * @param headers - SetOrgTopConversationCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetOrgTopConversationCategoryResponse
     */
    async setOrgTopConversationCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "SetOrgTopConversationCategory",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/topConversations/categories/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetOrgTopConversationCategoryResponse({}));
    }
    /**
     * 设置企业全局顶部会话分组
     *
     * @param request - SetOrgTopConversationCategoryRequest
     * @returns SetOrgTopConversationCategoryResponse
     */
    async setOrgTopConversationCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetOrgTopConversationCategoryHeaders({});
        return await this.setOrgTopConversationCategoryWithOptions(request, headers, runtime);
    }
    /**
     * 千人千面按规则批量发消息
     *
     * @param request - SpecialRuleBatchReceiverRequest
     * @param headers - SpecialRuleBatchReceiverHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SpecialRuleBatchReceiverResponse
     */
    async specialRuleBatchReceiverWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.batchNo)) {
            body["batchNo"] = request.batchNo;
        }
        if (!tea_util_1.default.isUnset(request.cardOptions)) {
            body["cardOptions"] = request.cardOptions;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.ruleCode)) {
            body["ruleCode"] = request.ruleCode;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.specialStrategy)) {
            body["specialStrategy"] = request.specialStrategy;
        }
        if (!tea_util_1.default.isUnset(request.taskBatchNo)) {
            body["taskBatchNo"] = request.taskBatchNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SpecialRuleBatchReceiver",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/dmc/rules/specialMessages/batchSend`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SpecialRuleBatchReceiverResponse({}));
    }
    /**
     * 千人千面按规则批量发消息
     *
     * @param request - SpecialRuleBatchReceiverRequest
     * @returns SpecialRuleBatchReceiverResponse
     */
    async specialRuleBatchReceiver(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SpecialRuleBatchReceiverHeaders({});
        return await this.specialRuleBatchReceiverWithOptions(request, headers, runtime);
    }
    /**
     * 增加/删除任务人员
     *
     * @param request - TaskInfoAddDelTaskPersonRequest
     * @param headers - TaskInfoAddDelTaskPersonHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoAddDelTaskPersonResponse
     */
    async taskInfoAddDelTaskPersonWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operateType)) {
            body["operateType"] = request.operateType;
        }
        if (!tea_util_1.default.isUnset(request.operatorAccount)) {
            body["operatorAccount"] = request.operatorAccount;
        }
        if (!tea_util_1.default.isUnset(request.outTaskId)) {
            body["outTaskId"] = request.outTaskId;
        }
        if (!tea_util_1.default.isUnset(request.projId)) {
            body["projId"] = request.projId;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.taskExecutePersonDTOS)) {
            body["taskExecutePersonDTOS"] = request.taskExecutePersonDTOS;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TaskInfoAddDelTaskPerson",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/taskCenters/taskInfos/addDelTaskPerson`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TaskInfoAddDelTaskPersonResponse({}));
    }
    /**
     * 增加/删除任务人员
     *
     * @param request - TaskInfoAddDelTaskPersonRequest
     * @returns TaskInfoAddDelTaskPersonResponse
     */
    async taskInfoAddDelTaskPerson(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TaskInfoAddDelTaskPersonHeaders({});
        return await this.taskInfoAddDelTaskPersonWithOptions(request, headers, runtime);
    }
    /**
     * 删除任务
     *
     * @param request - TaskInfoCancelOrDelTaskRequest
     * @param headers - TaskInfoCancelOrDelTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoCancelOrDelTaskResponse
     */
    async taskInfoCancelOrDelTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardDTO)) {
            body["cardDTO"] = request.cardDTO;
        }
        if (!tea_util_1.default.isUnset(request.operatorAccount)) {
            body["operatorAccount"] = request.operatorAccount;
        }
        if (!tea_util_1.default.isUnset(request.outTaskId)) {
            body["outTaskId"] = request.outTaskId;
        }
        if (!tea_util_1.default.isUnset(request.projId)) {
            body["projId"] = request.projId;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.sendMsgFlag)) {
            body["sendMsgFlag"] = request.sendMsgFlag;
        }
        if (!tea_util_1.default.isUnset(request.taskExecutePersonDTOS)) {
            body["taskExecutePersonDTOS"] = request.taskExecutePersonDTOS;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TaskInfoCancelOrDelTask",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/taskCenters/taskInfos/cancelOrDelTask`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TaskInfoCancelOrDelTaskResponse({}));
    }
    /**
     * 删除任务
     *
     * @param request - TaskInfoCancelOrDelTaskRequest
     * @returns TaskInfoCancelOrDelTaskResponse
     */
    async taskInfoCancelOrDelTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TaskInfoCancelOrDelTaskHeaders({});
        return await this.taskInfoCancelOrDelTaskWithOptions(request, headers, runtime);
    }
    /**
     * 创建并启动任务
     *
     * @param request - TaskInfoCreateAndStartTaskRequest
     * @param headers - TaskInfoCreateAndStartTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoCreateAndStartTaskResponse
     */
    async taskInfoCreateAndStartTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attr)) {
            body["attr"] = request.attr;
        }
        if (!tea_util_1.default.isUnset(request.backlogDTO)) {
            body["backlogDTO"] = request.backlogDTO;
        }
        if (!tea_util_1.default.isUnset(request.backlogGenerateFlag)) {
            body["backlogGenerateFlag"] = request.backlogGenerateFlag;
        }
        if (!tea_util_1.default.isUnset(request.businessCode)) {
            body["businessCode"] = request.businessCode;
        }
        if (!tea_util_1.default.isUnset(request.canceldelTaskCardId)) {
            body["canceldelTaskCardId"] = request.canceldelTaskCardId;
        }
        if (!tea_util_1.default.isUnset(request.cardDTO)) {
            body["cardDTO"] = request.cardDTO;
        }
        if (!tea_util_1.default.isUnset(request.customFlag)) {
            body["customFlag"] = request.customFlag;
        }
        if (!tea_util_1.default.isUnset(request.detailUrl)) {
            body["detailUrl"] = request.detailUrl;
        }
        if (!tea_util_1.default.isUnset(request.finishTaskCardId)) {
            body["finishTaskCardId"] = request.finishTaskCardId;
        }
        if (!tea_util_1.default.isUnset(request.operatorAccount)) {
            body["operatorAccount"] = request.operatorAccount;
        }
        if (!tea_util_1.default.isUnset(request.outTaskId)) {
            body["outTaskId"] = request.outTaskId;
        }
        if (!tea_util_1.default.isUnset(request.projId)) {
            body["projId"] = request.projId;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.sendMsgFlag)) {
            body["sendMsgFlag"] = request.sendMsgFlag;
        }
        if (!tea_util_1.default.isUnset(request.sort)) {
            body["sort"] = request.sort;
        }
        if (!tea_util_1.default.isUnset(request.startTaskCardId)) {
            body["startTaskCardId"] = request.startTaskCardId;
        }
        if (!tea_util_1.default.isUnset(request.state)) {
            body["state"] = request.state;
        }
        if (!tea_util_1.default.isUnset(request.taskContent)) {
            body["taskContent"] = request.taskContent;
        }
        if (!tea_util_1.default.isUnset(request.taskEndTime)) {
            body["taskEndTime"] = request.taskEndTime;
        }
        if (!tea_util_1.default.isUnset(request.taskExecutePersonDTOS)) {
            body["taskExecutePersonDTOS"] = request.taskExecutePersonDTOS;
        }
        if (!tea_util_1.default.isUnset(request.taskGroupDTOList)) {
            body["taskGroupDTOList"] = request.taskGroupDTOList;
        }
        if (!tea_util_1.default.isUnset(request.taskSystem)) {
            body["taskSystem"] = request.taskSystem;
        }
        if (!tea_util_1.default.isUnset(request.taskTemplCode)) {
            body["taskTemplCode"] = request.taskTemplCode;
        }
        if (!tea_util_1.default.isUnset(request.taskTitle)) {
            body["taskTitle"] = request.taskTitle;
        }
        if (!tea_util_1.default.isUnset(request.taskType)) {
            body["taskType"] = request.taskType;
        }
        if (!tea_util_1.default.isUnset(request.taskUrlMobile)) {
            body["taskUrlMobile"] = request.taskUrlMobile;
        }
        if (!tea_util_1.default.isUnset(request.taskUrlPc)) {
            body["taskUrlPc"] = request.taskUrlPc;
        }
        if (!tea_util_1.default.isUnset(request.updateTaskCardId)) {
            body["updateTaskCardId"] = request.updateTaskCardId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TaskInfoCreateAndStartTask",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/taskCenters/taskInfos/createAndStart`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TaskInfoCreateAndStartTaskResponse({}));
    }
    /**
     * 创建并启动任务
     *
     * @param request - TaskInfoCreateAndStartTaskRequest
     * @returns TaskInfoCreateAndStartTaskResponse
     */
    async taskInfoCreateAndStartTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TaskInfoCreateAndStartTaskHeaders({});
        return await this.taskInfoCreateAndStartTaskWithOptions(request, headers, runtime);
    }
    /**
     * 完成任务
     *
     * @param request - TaskInfoFinishTaskRequest
     * @param headers - TaskInfoFinishTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoFinishTaskResponse
     */
    async taskInfoFinishTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardDTO)) {
            body["cardDTO"] = request.cardDTO;
        }
        if (!tea_util_1.default.isUnset(request.operatorAccount)) {
            body["operatorAccount"] = request.operatorAccount;
        }
        if (!tea_util_1.default.isUnset(request.outTaskId)) {
            body["outTaskId"] = request.outTaskId;
        }
        if (!tea_util_1.default.isUnset(request.projId)) {
            body["projId"] = request.projId;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.sendMsgFlag)) {
            body["sendMsgFlag"] = request.sendMsgFlag;
        }
        if (!tea_util_1.default.isUnset(request.taskExecutePersonDTOS)) {
            body["taskExecutePersonDTOS"] = request.taskExecutePersonDTOS;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TaskInfoFinishTask",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/taskCenters/taskInfos/finishTask`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TaskInfoFinishTaskResponse({}));
    }
    /**
     * 完成任务
     *
     * @param request - TaskInfoFinishTaskRequest
     * @returns TaskInfoFinishTaskResponse
     */
    async taskInfoFinishTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TaskInfoFinishTaskHeaders({});
        return await this.taskInfoFinishTaskWithOptions(request, headers, runtime);
    }
    /**
     * 更新任务
     *
     * @param request - TaskInfoUpdateTaskRequest
     * @param headers - TaskInfoUpdateTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoUpdateTaskResponse
     */
    async taskInfoUpdateTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attr)) {
            body["attr"] = request.attr;
        }
        if (!tea_util_1.default.isUnset(request.canceldelTaskCardId)) {
            body["canceldelTaskCardId"] = request.canceldelTaskCardId;
        }
        if (!tea_util_1.default.isUnset(request.cardDTO)) {
            body["cardDTO"] = request.cardDTO;
        }
        if (!tea_util_1.default.isUnset(request.detailUrl)) {
            body["detailUrl"] = request.detailUrl;
        }
        if (!tea_util_1.default.isUnset(request.finishTaskCardId)) {
            body["finishTaskCardId"] = request.finishTaskCardId;
        }
        if (!tea_util_1.default.isUnset(request.listOpenConversationId)) {
            body["listOpenConversationId"] = request.listOpenConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operateType)) {
            body["operateType"] = request.operateType;
        }
        if (!tea_util_1.default.isUnset(request.operatorAccount)) {
            body["operatorAccount"] = request.operatorAccount;
        }
        if (!tea_util_1.default.isUnset(request.outTaskId)) {
            body["outTaskId"] = request.outTaskId;
        }
        if (!tea_util_1.default.isUnset(request.projId)) {
            body["projId"] = request.projId;
        }
        if (!tea_util_1.default.isUnset(request.secretKey)) {
            body["secretKey"] = request.secretKey;
        }
        if (!tea_util_1.default.isUnset(request.sendMsgFlag)) {
            body["sendMsgFlag"] = request.sendMsgFlag;
        }
        if (!tea_util_1.default.isUnset(request.startTaskCardId)) {
            body["startTaskCardId"] = request.startTaskCardId;
        }
        if (!tea_util_1.default.isUnset(request.taskContent)) {
            body["taskContent"] = request.taskContent;
        }
        if (!tea_util_1.default.isUnset(request.taskEndTime)) {
            body["taskEndTime"] = request.taskEndTime;
        }
        if (!tea_util_1.default.isUnset(request.taskExecutePersonDTOS)) {
            body["taskExecutePersonDTOS"] = request.taskExecutePersonDTOS;
        }
        if (!tea_util_1.default.isUnset(request.taskTitle)) {
            body["taskTitle"] = request.taskTitle;
        }
        if (!tea_util_1.default.isUnset(request.taskUrlMobile)) {
            body["taskUrlMobile"] = request.taskUrlMobile;
        }
        if (!tea_util_1.default.isUnset(request.taskUrlPc)) {
            body["taskUrlPc"] = request.taskUrlPc;
        }
        if (!tea_util_1.default.isUnset(request.updateTaskCardId)) {
            body["updateTaskCardId"] = request.updateTaskCardId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TaskInfoUpdateTask",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/taskCenters/taskInfos/update`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TaskInfoUpdateTaskResponse({}));
    }
    /**
     * 更新任务
     *
     * @param request - TaskInfoUpdateTaskRequest
     * @returns TaskInfoUpdateTaskResponse
     */
    async taskInfoUpdateTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TaskInfoUpdateTaskHeaders({});
        return await this.taskInfoUpdateTaskWithOptions(request, headers, runtime);
    }
    /**
     * 切换组织归属
     *
     * @param request - TransferExclusiveAccountOrgRequest
     * @param headers - TransferExclusiveAccountOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TransferExclusiveAccountOrgResponse
     */
    async transferExclusiveAccountOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.isSettingMainOrg)) {
            body["isSettingMainOrg"] = request.isSettingMainOrg;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TransferExclusiveAccountOrg",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/organizations/transfer`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TransferExclusiveAccountOrgResponse({}));
    }
    /**
     * 切换组织归属
     *
     * @param request - TransferExclusiveAccountOrgRequest
     * @returns TransferExclusiveAccountOrgResponse
     */
    async transferExclusiveAccountOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TransferExclusiveAccountOrgHeaders({});
        return await this.transferExclusiveAccountOrgWithOptions(request, headers, runtime);
    }
    /**
     * 更改分组名称
     *
     * @param request - UpdateCategoryNameRequest
     * @param headers - UpdateCategoryNameHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCategoryNameResponse
     */
    async updateCategoryNameWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.currentCategoryName)) {
            body["currentCategoryName"] = request.currentCategoryName;
        }
        if (!tea_util_1.default.isUnset(request.targetCategoryName)) {
            body["targetCategoryName"] = request.targetCategoryName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCategoryName",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/names`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCategoryNameResponse({}));
    }
    /**
     * 更改分组名称
     *
     * @param request - UpdateCategoryNameRequest
     * @returns UpdateCategoryNameResponse
     */
    async updateCategoryName(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCategoryNameHeaders({});
        return await this.updateCategoryNameWithOptions(request, headers, runtime);
    }
    /**
     * 变更群聊类型
     *
     * @param request - UpdateConversationTypeRequest
     * @param headers - UpdateConversationTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateConversationTypeResponse
     */
    async updateConversationTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.manageSign)) {
            body["manageSign"] = request.manageSign;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateConversationType",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/conversationTypes`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateConversationTypeResponse({}));
    }
    /**
     * 变更群聊类型
     *
     * @param request - UpdateConversationTypeRequest
     * @returns UpdateConversationTypeResponse
     */
    async updateConversationType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateConversationTypeHeaders({});
        return await this.updateConversationTypeWithOptions(request, headers, runtime);
    }
    /**
     * 更新发送文件的检测状态
     *
     * @param request - UpdateFileStatusRequest
     * @param headers - UpdateFileStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateFileStatusResponse
     */
    async updateFileStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.requestIds)) {
            body["requestIds"] = request.requestIds;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateFileStatus",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/sending/files/status`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateFileStatusResponse({}));
    }
    /**
     * 更新发送文件的检测状态
     *
     * @param request - UpdateFileStatusRequest
     * @returns UpdateFileStatusResponse
     */
    async updateFileStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateFileStatusHeaders({});
        return await this.updateFileStatusWithOptions(request, headers, runtime);
    }
    /**
     * 发布版本
     *
     * @param request - UpdateMiniAppVersionStatusRequest
     * @param headers - UpdateMiniAppVersionStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateMiniAppVersionStatusResponse
     */
    async updateMiniAppVersionStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        if (!tea_util_1.default.isUnset(request.versionType)) {
            body["versionType"] = request.versionType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateMiniAppVersionStatus",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/versionStatus`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateMiniAppVersionStatusResponse({}));
    }
    /**
     * 发布版本
     *
     * @param request - UpdateMiniAppVersionStatusRequest
     * @returns UpdateMiniAppVersionStatusResponse
     */
    async updateMiniAppVersionStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateMiniAppVersionStatusHeaders({});
        return await this.updateMiniAppVersionStatusWithOptions(request, headers, runtime);
    }
    /**
     * 修改伙伴类型可见性
     *
     * @param request - UpdatePartnerVisibilityRequest
     * @param headers - UpdatePartnerVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePartnerVisibilityResponse
     */
    async updatePartnerVisibilityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.labelId)) {
            body["labelId"] = request.labelId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePartnerVisibility",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments/visibilityPartners`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePartnerVisibilityResponse({}));
    }
    /**
     * 修改伙伴类型可见性
     *
     * @param request - UpdatePartnerVisibilityRequest
     * @returns UpdatePartnerVisibilityResponse
     */
    async updatePartnerVisibility(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePartnerVisibilityHeaders({});
        return await this.updatePartnerVisibilityWithOptions(request, headers, runtime);
    }
    /**
     * 专属一线版-企业修改员工license
     *
     * @param request - UpdateRealmLicenseRequest
     * @param headers - UpdateRealmLicenseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRealmLicenseResponse
     */
    async updateRealmLicenseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.detailList)) {
            body["detailList"] = request.detailList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRealmLicense",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/frontLines/licenses`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRealmLicenseResponse({}));
    }
    /**
     * 专属一线版-企业修改员工license
     *
     * @param request - UpdateRealmLicenseRequest
     * @returns UpdateRealmLicenseResponse
     */
    async updateRealmLicense(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRealmLicenseHeaders({});
        return await this.updateRealmLicenseWithOptions(request, headers, runtime);
    }
    /**
     * 修改角色可见性
     *
     * @param request - UpdateRoleVisibilityRequest
     * @param headers - UpdateRoleVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRoleVisibilityResponse
     */
    async updateRoleVisibilityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.labelId)) {
            body["labelId"] = request.labelId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRoleVisibility",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments/visibilityRoles`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRoleVisibilityResponse({}));
    }
    /**
     * 修改角色可见性
     *
     * @param request - UpdateRoleVisibilityRequest
     * @returns UpdateRoleVisibilityResponse
     */
    async updateRoleVisibility(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRoleVisibilityHeaders({});
        return await this.updateRoleVisibilityWithOptions(request, headers, runtime);
    }
    /**
     * 更新组织专属存储模式
     *
     * @param request - UpdateStorageModeRequest
     * @param headers - UpdateStorageModeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateStorageModeResponse
     */
    async updateStorageModeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fileStorageMode)) {
            body["fileStorageMode"] = request.fileStorageMode;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateStorageMode",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/storageModes`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateStorageModeResponse({}));
    }
    /**
     * 更新组织专属存储模式
     *
     * @param request - UpdateStorageModeRequest
     * @returns UpdateStorageModeResponse
     */
    async updateStorageMode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateStorageModeHeaders({});
        return await this.updateStorageModeWithOptions(request, headers, runtime);
    }
    /**
     * 允许三方调用该API，决定对应的语音消息管控状态
     *
     * @param request - UpdateVoiceMsgCtrlStatusRequest
     * @param headers - UpdateVoiceMsgCtrlStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateVoiceMsgCtrlStatusResponse
     */
    async updateVoiceMsgCtrlStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.voiceMsgCtrlInfo)) {
            body["voiceMsgCtrlInfo"] = request.voiceMsgCtrlInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateVoiceMsgCtrlStatus",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/voiceMessages/ctrlStatuses`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateVoiceMsgCtrlStatusResponse({}));
    }
    /**
     * 允许三方调用该API，决定对应的语音消息管控状态
     *
     * @param request - UpdateVoiceMsgCtrlStatusRequest
     * @returns UpdateVoiceMsgCtrlStatusResponse
     */
    async updateVoiceMsgCtrlStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateVoiceMsgCtrlStatusHeaders({});
        return await this.updateVoiceMsgCtrlStatusWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map