/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ConversationCategoryModel extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    categoryId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 分组
     */
    categoryName?: string;
    children?: ConversationCategoryModel[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    levelNum?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSignConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSignConfigRequest extends $tea.Model {
    allEffect?: boolean;
    canDownload?: boolean;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxx协议
     */
    protocolName?: string;
    pushDeptIds?: string[];
    pushStaffIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    signTermFiles?: AddCustomSignConfigRequestSignTermFiles[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxx协议说明
     */
    termMessage?: string;
    unpushDeptIds?: string[];
    unpushStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSignConfigResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSignConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCustomSignConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgRequest extends $tea.Model {
    city?: string;
    industry?: string;
    industryCode?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 15800000000
     */
    mobileNum?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试组织
     */
    name?: string;
    province?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgResponseBody extends $tea.Model {
    /**
     * @example
     * dinge4a454fa5f32aba6f5bf40edxxxxxxxx
     */
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApproveProcessCallbackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApproveProcessCallbackRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleSecretId1234
     */
    accessKeySecret?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    request?: ApproveProcessCallbackRequestRequest;
    /**
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApproveProcessCallbackResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApproveProcessCallbackResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ApproveProcessCallbackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BanOrOpenGroupWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BanOrOpenGroupWordsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    banWordsType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    openConverationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BanOrOpenGroupWordsResponseBody extends $tea.Model {
    /**
     * @example
     * 成功
     */
    cause?: string;
    /**
     * @example
     * 200
     */
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BanOrOpenGroupWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BanOrOpenGroupWordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCategoryAndBindingGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCategoryAndBindingGroupsRequest extends $tea.Model {
    categoryName?: string;
    groupIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCategoryAndBindingGroupsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCategoryAndBindingGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCategoryAndBindingGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDlpTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDlpTaskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    dentryId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    spaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDlpTaskResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDlpTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDlpTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMessageCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMessageCategoryRequest extends $tea.Model {
    categoryName?: string;
    groupIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMessageCategoryResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMessageCategoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateMessageCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleRequest extends $tea.Model {
    customPlan?: CreateRuleRequestCustomPlan;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleResponseBody extends $tea.Model {
    /**
     * @example
     * 1
     */
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceRequest extends $tea.Model {
    /**
     * @example
     * CV11z5d2bdbb2260d1576000b4a9955fa
     */
    did?: string;
    /**
     * @example
     * 88:92:5a:1f:e8:24
     */
    macAddress?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Mac
     */
    platform?: string;
    /**
     * @example
     * 2
     */
    status?: number;
    /**
     * @example
     * 设备名称
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 65224157501039784
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTrustedDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceBatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceBatchRequest extends $tea.Model {
    detailList?: CreateTrustedDeviceBatchRequestDetailList[];
    macAddressList?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * Win
     */
    platform?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceBatchResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceBatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTrustedDeviceBatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVirusScanTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVirusScanTaskRequest extends $tea.Model {
    dentryId?: string;
    downloadUrl?: string;
    fileMd5?: string;
    fileName?: string;
    fileSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    source?: number;
    spaceId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVirusScanTaskResponseBody extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVirusScanTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateVirusScanTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DataSyncHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DataSyncRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sql语句
     */
    sql?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DataSyncResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    /**
     * @example
     * 1
     */
    rowsAffected?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DataSyncResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DataSyncResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAcrossCloudStroageConfigsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAcrossCloudStroageConfigsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteAcrossCloudStroageConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCommentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCommentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTrustedDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTrustedDeviceRequest extends $tea.Model {
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * false
     */
    kickOff?: boolean;
    /**
     * @example
     * 88:92:5a:1f:e8:24
     */
    macAddress?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0119194439361061403
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTrustedDeviceResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTrustedDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteTrustedDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DistributePartnerAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DistributePartnerAppRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    appId?: number;
    deptId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    subCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DistributePartnerAppResponseBody extends $tea.Model {
    inviteUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DistributePartnerAppResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DistributePartnerAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSecurityConfigMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSecurityConfigMemberRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ctrl.xxx
     */
    configKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * add
     */
    operateType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * staffxxx
     */
    operateUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSecurityConfigMemberResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSecurityConfigMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EditSecurityConfigMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExchangeMainAdminHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExchangeMainAdminRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 509999
     */
    newAdminUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 4045678
     */
    oldAdminUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExchangeMainAdminResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExchangeMainAdminResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExchangeMainAdminResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExclusiveCreateDingPortalHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExclusiveCreateDingPortalRequest extends $tea.Model {
    /**
     * @example
     * XX工作台
     */
    dingPortalName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * TPL_APP-C97B75277B144ED7AEFE7XXXXXXXX6BA
     */
    templateAppUuid?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    templateCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExclusiveCreateDingPortalResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExclusiveCreateDingPortalResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExclusiveCreateDingPortalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageActiveStorageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageActiveStorageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleSecretId1234
     */
    accessKeySecret?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://oss.aliyuncs.com/bucket-name/
     */
    oss?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageActiveStorageResponseBody extends $tea.Model {
    createDate?: string;
    fileStorageOpenStatus?: number;
    storageStatus?: number;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageActiveStorageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FileStorageActiveStorageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageCheckConnectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageCheckConnectionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleSecretId1234
     */
    accessKeySecret?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://oss.aliyuncs.com/bucket-name/
     */
    oss?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageCheckConnectionResponseBody extends $tea.Model {
    /**
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    checkState?: number;
    /**
     * @example
     * https://oss-cn-test.aliyuncs.com\
     */
    oss?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageCheckConnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FileStorageCheckConnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetQuotaDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetQuotaDataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2022-04
     */
    endTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2021-04
     */
    startTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding77b8cac4e026cc123xxxxxxxxeb6378f
     */
    targetCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetQuotaDataResponseBody extends $tea.Model {
    quotaModelList?: FileStorageGetQuotaDataResponseBodyQuotaModelList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetQuotaDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FileStorageGetQuotaDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetStorageStateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetStorageStateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding77b8cac4e026cc123xxxxxxxxeb6378f
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetStorageStateResponseBody extends $tea.Model {
    accessKeyId?: string;
    createDate?: string;
    fileStorageOpenStatus?: number;
    oss?: string;
    storageStatus?: number;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetStorageStateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FileStorageGetStorageStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageUpdateStorageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageUpdateStorageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleSecretId1234
     */
    accessKeySecret?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageUpdateStorageResponseBody extends $tea.Model {
    /**
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @example
     * https://oss-cn-test.aliyuncs.com\
     */
    oss?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageUpdateStorageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FileStorageUpdateStorageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDarkWaterMarkHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDarkWaterMarkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDarkWaterMarkResponseBody extends $tea.Model {
    /**
     * @example
     * 200
     */
    darkWatermarkVOList?: GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDarkWaterMarkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GenerateDarkWaterMarkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountTransferListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountTransferListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountTransferListResponseBody extends $tea.Model {
    itemList?: GetAccountTransferListResponseBodyItemList[];
    /**
     * @example
     * 1000
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountTransferListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAccountTransferListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActiveUserSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActiveUserSummaryResponseBody extends $tea.Model {
    /**
     * @example
     * 20
     */
    actUsrCnt1m?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActiveUserSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetActiveUserSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentIdByRelatedAppIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentIdByRelatedAppIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10000
     */
    appId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding24f2f5ccxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentIdByRelatedAppIdResponseBody extends $tea.Model {
    /**
     * @example
     * 3300000
     */
    agentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAgentIdByRelatedAppIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAgentIdByRelatedAppIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    data?: GetAllLabelableDeptsResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAllLabelableDeptsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoRequest extends $tea.Model {
    /**
     * @example
     * 1655709383307
     */
    endTime?: number;
    /**
     * @example
     * 1655709383307
     */
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponseBody extends $tea.Model {
    android?: GetAppDispatchInfoResponseBodyAndroid[];
    iOS?: GetAppDispatchInfoResponseBodyIOS[];
    mac?: GetAppDispatchInfoResponseBodyMac[];
    windows?: GetAppDispatchInfoResponseBodyWindows[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAppDispatchInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCalenderSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCalenderSummaryResponseBody extends $tea.Model {
    /**
     * @example
     * 20
     */
    calendarCreateUserCnt?: string;
    /**
     * @example
     * 20
     */
    recvCalendarUserCnt1d?: string;
    /**
     * @example
     * 20
     */
    useCalendarUserCnt1d?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCalenderSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCalenderSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCidsByBotCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCidsByBotCodeRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCidsByBotCodeResponseBody extends $tea.Model {
    groupInfos?: GetCidsByBotCodeResponseBodyGroupInfos[];
    hasMore?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCidsByBotCodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCidsByBotCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCommentListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCommentListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCommentListResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    data?: GetCommentListResponseBodyData[];
    /**
     * @remarks
     * This parameter is required.
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCommentListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCommentListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfBaseInfoByLogicalIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfBaseInfoByLogicalIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    logicalConferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfBaseInfoByLogicalIdResponseBody extends $tea.Model {
    conferenceId?: string;
    logicalConferenceId?: string;
    nickname?: string;
    startTime?: number;
    title?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfBaseInfoByLogicalIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConfBaseInfoByLogicalIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConferenceDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConferenceDetailResponseBody extends $tea.Model {
    attendeeNum?: number;
    attendeePercentage?: string;
    callerId?: string;
    callerName?: string;
    confStartTime?: number;
    conferenceId?: string;
    duration?: number;
    memberList?: GetConferenceDetailResponseBodyMemberList[];
    title?: string;
    totalNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConferenceDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConferenceDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationCategoryResponseBody extends $tea.Model {
    result?: ConversationCategoryModel[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationCategoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationDetailRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cid123xxx
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationDetailResponseBody extends $tea.Model {
    result?: GetConversationDetailResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportDeptSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportDeptSummaryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportDeptSummaryResponseBody extends $tea.Model {
    data?: GetDingReportDeptSummaryResponseBodyData[];
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * 2
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportDeptSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDingReportDeptSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportSummaryResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 100
     */
    reportCommentUserCnt1d?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDingReportSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedDeptSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedDeptSummaryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedDeptSummaryResponseBody extends $tea.Model {
    data?: GetDocCreatedDeptSummaryResponseBodyData[];
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * 2
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedDeptSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDocCreatedDeptSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedSummaryResponseBody extends $tea.Model {
    /**
     * @example
     * 100
     */
    docCreateUserCnt1d?: string;
    /**
     * @example
     * 100
     */
    docCreatedCnt?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDocCreatedSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExclusiveAccountAllOrgListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExclusiveAccountAllOrgListRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * TBXK65QHiiorHvxxxxxxxxP6giEiE
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExclusiveAccountAllOrgListResponseBody extends $tea.Model {
    orgInfoList?: GetExclusiveAccountAllOrgListResponseBodyOrgInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExclusiveAccountAllOrgListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetExclusiveAccountAllOrgListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedDeptSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedDeptSummaryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedDeptSummaryResponseBody extends $tea.Model {
    data?: GetGeneralFormCreatedDeptSummaryResponseBodyData[];
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * 2
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedDeptSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGeneralFormCreatedDeptSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedSummaryResponseBody extends $tea.Model {
    /**
     * @example
     * 100
     */
    generalFormCreatedCnt?: string;
    /**
     * @example
     * 100
     */
    useGeneralFormUserCnt1d?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGeneralFormCreatedSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupActiveInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupActiveInfoRequest extends $tea.Model {
    /**
     * @example
     * cidV3xxxrSuxxxxxxnB8o8gJw==
     */
    dingGroupId?: string;
    /**
     * @example
     * 1
     */
    groupType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20200305
     */
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupActiveInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    data?: GetGroupActiveInfoResponseBodyData[];
    /**
     * @remarks
     * This parameter is required.
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupActiveInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGroupActiveInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupInfoByCidHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupInfoByCidRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupInfoByCidResponseBody extends $tea.Model {
    groupInfo?: GetGroupInfoByCidResponseBodyGroupInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupInfoByCidResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGroupInfoByCidResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupOrgByCidHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupOrgByCidRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupOrgByCidResponseBody extends $tea.Model {
    groupOrganization?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupOrgByCidResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGroupOrgByCidResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInActiveUserListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInActiveUserListRequest extends $tea.Model {
    /**
     * **if can be null:**
     * true
     */
    deptIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInActiveUserListResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: GetInActiveUserListResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInActiveUserListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInActiveUserListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLastOrgAuthDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLastOrgAuthDataRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding77b8cac4e026cc123xxxxxxxxeb6378f
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLastOrgAuthDataResponseBody extends $tea.Model {
    /**
     * @example
     * 营业执照照片不清晰
     */
    authRemark?: string;
    /**
     * @example
     * 2
     */
    authStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLastOrgAuthDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetLastOrgAuthDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigRequest extends $tea.Model {
    groupTopic?: string;
    groupType?: string;
    listDynamicAttr?: GetMsgConfigRequestListDynamicAttr[];
    listEmployeeCode?: string[];
    listUnitId?: number[];
    ownerJobNo?: string;
    ruleBusinessCode?: string;
    ruleCategory?: number;
    ruleCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    sysCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBody extends $tea.Model {
    code?: number;
    data?: GetMsgConfigResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMsgConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgLocationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgLocationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openMsgId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgLocationResponseBody extends $tea.Model {
    msgLocationUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgLocationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMsgLocationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOaOperatorLogListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOaOperatorLogListRequest extends $tea.Model {
    categoryList?: string[];
    /**
     * @remarks
     * This parameter is required.
     */
    endTime?: number;
    opUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 50
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOaOperatorLogListResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    data?: GetOaOperatorLogListResponseBodyData[];
    /**
     * @remarks
     * This parameter is required.
     */
    itemCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOaOperatorLogListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOaOperatorLogListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutGroupsByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutGroupsByPageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 20
     */
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutGroupsByPageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    responseBody?: GetOutGroupsByPageResponseBodyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutGroupsByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOutGroupsByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageRequest extends $tea.Model {
    /**
     * @example
     * 20
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1680493837426
     */
    nextToken?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    responseBody?: GetOutsideAuditGroupMessageByPageResponseBodyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOutsideAuditGroupMessageByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPartnerTypeByParentIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPartnerTypeByParentIdResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    data?: GetPartnerTypeByParentIdResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPartnerTypeByParentIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPartnerTypeByParentIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesRequest extends $tea.Model {
    /**
     * @example
     * 1671767361000
     */
    endTime?: number;
    /**
     * @example
     * 88:66:5a:07:2b:04
     */
    macAddress?: string;
    /**
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 100
     */
    pageSize?: number;
    /**
     * @example
     * Mac
     */
    platform?: string;
    /**
     * @example
     * 1671767361000
     */
    startTime?: number;
    /**
     * @example
     * 这是标题
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesResponseBody extends $tea.Model {
    data?: GetPublicDevicesResponseBodyData[];
    /**
     * @example
     * 100
     */
    dataCnt?: number;
    /**
     * @example
     * 100
     */
    totalCnt?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPublicDevicesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublisherSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublisherSummaryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublisherSummaryResponseBody extends $tea.Model {
    data?: GetPublisherSummaryResponseBodyData[];
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * 2
     */
    nextToken?: number;
    /**
     * @example
     * 100
     */
    publisherArticleCntStd?: string;
    /**
     * @example
     * 100
     */
    publisherArticlePvCntStd?: string;
    /**
     * @example
     * 阅读量最高文章，阅读量第二高文章
     */
    publisherArticlePvTop5?: GetPublisherSummaryResponseBodyPublisherArticlePvTop5[];
    /**
     * @example
     * 100
     */
    publisherCntStd?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublisherSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPublisherSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRealPeopleRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRealPeopleRecordsRequest extends $tea.Model {
    /**
     * @example
     * 123333
     */
    agentId?: number;
    /**
     * @example
     * 1667000000
     */
    fromTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    /**
     * @example
     * 1
     */
    personIdentification?: number;
    /**
     * @example
     * 1
     */
    scene?: number;
    /**
     * @example
     * 1669000000
     */
    toTime?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRealPeopleRecordsResponseBody extends $tea.Model {
    data?: GetRealPeopleRecordsResponseBodyData[];
    /**
     * @example
     * 1
     */
    nextToken?: number;
    /**
     * @example
     * 20
     */
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRealPeopleRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRealPeopleRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecognizeRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecognizeRecordsRequest extends $tea.Model {
    /**
     * @example
     * 123333
     */
    agentId?: number;
    /**
     * @example
     * 1
     */
    faceCompareResult?: number;
    /**
     * @example
     * 1667000000
     */
    fromTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    /**
     * @example
     * 1669000000
     */
    toTime?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecognizeRecordsResponseBody extends $tea.Model {
    data?: GetRecognizeRecordsResponseBodyData[];
    /**
     * @example
     * 1
     */
    nextToken?: number;
    /**
     * @example
     * 20
     */
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecognizeRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecognizeRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRobotInfoByCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRobotInfoByCodeRequest extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRobotInfoByCodeResponseBody extends $tea.Model {
    robotInfoVO?: GetRobotInfoByCodeResponseBodyRobotInfoVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRobotInfoByCodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRobotInfoByCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSecurityConfigMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSecurityConfigMemberRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ctrl.xxx
     */
    configKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSecurityConfigMemberResponseBody extends $tea.Model {
    result?: GetSecurityConfigMemberResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSecurityConfigMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSecurityConfigMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignedDetailByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignedDetailByPageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    signStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignedDetailByPageResponseBody extends $tea.Model {
    auditSignedDetailDTOList?: GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList[];
    /**
     * @example
     * 1
     */
    currentPage?: number;
    /**
     * @example
     * 50
     */
    pageSize?: number;
    /**
     * @example
     * 1000
     */
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignedDetailByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSignedDetailByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrustDeviceListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrustDeviceListRequest extends $tea.Model {
    /**
     * @example
     * 1721718854814
     */
    gmtCreateEnd?: number;
    /**
     * @example
     * 1721718854814
     */
    gmtCreateStart?: number;
    /**
     * @example
     * 1721718854814
     */
    gmtModifiedEnd?: number;
    /**
     * @example
     * 1721718854814
     */
    gmtModifiedStart?: number;
    /**
     * @example
     * xx:xx:xx:xx:xx:xx
     */
    macAddress?: string;
    /**
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @example
     * 500
     */
    pageSize?: number;
    /**
     * @example
     * Android
     */
    platform?: string;
    status?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrustDeviceListResponseBody extends $tea.Model {
    currentPage?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    data?: GetTrustDeviceListResponseBodyData[];
    pageSize?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrustDeviceListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTrustDeviceListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAppVersionSummaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAppVersionSummaryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAppVersionSummaryResponseBody extends $tea.Model {
    data?: GetUserAppVersionSummaryResponseBodyData[];
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    /**
     * @example
     * 10
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAppVersionSummaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserAppVersionSummaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFaceStateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFaceStateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFaceStateResponseBody extends $tea.Model {
    data?: GetUserFaceStateResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFaceStateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserFaceStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealPeopleStateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealPeopleStateRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealPeopleStateResponseBody extends $tea.Model {
    data?: GetUserRealPeopleStateResponseBodyData[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealPeopleStateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserRealPeopleStateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserStayLengthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserStayLengthRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 20220501
     */
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserStayLengthResponseBody extends $tea.Model {
    itemList?: GetUserStayLengthResponseBodyItemList[];
    /**
     * @example
     * 1000
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserStayLengthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserStayLengthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVirusScanResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVirusScanResultRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVirusScanResultResponseBody extends $tea.Model {
    reason?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVirusScanResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetVirusScanResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    corpId?: string;
    groupTopic?: string;
    groupType?: string;
    listDynamicAttr?: GroupQueryByAttrRequestListDynamicAttr[];
    pageIndex?: number;
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrResponseBody extends $tea.Model {
    code?: number;
    data?: GroupQueryByAttrResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupQueryByAttrResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByOpenIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByOpenIdRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByOpenIdResponseBody extends $tea.Model {
    code?: number;
    data?: GroupQueryByOpenIdResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByOpenIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupQueryByOpenIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1577945731837
     */
    endDate?: number;
    /**
     * @example
     * 6406817113
     */
    nextBizId?: number;
    /**
     * @example
     * 1577340931837
     */
    nextGmtCreate?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 500
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1577340931837
     */
    startDate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogResponseBody extends $tea.Model {
    list?: ListAuditLogResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAuditLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByCodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByCodesRequest extends $tea.Model {
    body?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByCodesResponseBody extends $tea.Model {
    robotInfoList?: ListByCodesResponseBodyRobotInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByCodesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListByCodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByPluginIdsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByPluginIdsRequest extends $tea.Model {
    body?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByPluginIdsResponseBody extends $tea.Model {
    pluginInfoList?: ListByPluginIdsResponseBodyPluginInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByPluginIdsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListByPluginIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCategorysHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCategorysRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    body?: ListCategorysRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCategorysShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    bodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCategorysResponseBody extends $tea.Model {
    detailModelList?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCategorysResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListCategorysResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJoinOrgInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJoinOrgInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 15800000000
     */
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJoinOrgInfoResponseBody extends $tea.Model {
    orgInfoList?: ListJoinOrgInfoResponseBodyOrgInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJoinOrgInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListJoinOrgInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppAvailableVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppAvailableVersionRequest extends $tea.Model {
    /**
     * @example
     * 5000003
     */
    miniAppId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    versionTypeSet?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppAvailableVersionResponseBody extends $tea.Model {
    list?: ListMiniAppAvailableVersionResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppAvailableVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListMiniAppAvailableVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppHistoryVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppHistoryVersionRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 500000003
     */
    miniAppId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppHistoryVersionResponseBody extends $tea.Model {
    list?: ListMiniAppHistoryVersionResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppHistoryVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListMiniAppHistoryVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    list?: ListPartnerRolesResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPartnerRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPunchScheduleByConditionWithPagingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPunchScheduleByConditionWithPagingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2aa6736c715944329xxxxxxxxd38be41
     */
    bizInstanceId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    nextToken?: number;
    /**
     * @example
     * 2022-03-13
     */
    scheduleDateEnd?: string;
    /**
     * @example
     * 2022-03-13
     */
    scheduleDateStart?: string;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPunchScheduleByConditionWithPagingResponseBody extends $tea.Model {
    /**
     * @example
     * false
     */
    hasMore?: boolean;
    list?: ListPunchScheduleByConditionWithPagingResponseBodyList[];
    /**
     * @example
     * 10000
     */
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPunchScheduleByConditionWithPagingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPunchScheduleByConditionWithPagingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRulesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRulesRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    body?: ListRulesRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRulesShrinkRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    bodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRulesResponseBody extends $tea.Model {
    detailModelList?: {
        [key: string]: string;
    }[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRulesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogoutHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogoutRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    deviceType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * a523641
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogoutResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LogoutResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LogoutResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenBenefitPackageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenBenefitPackageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    benefitPackage?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    endDate?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    startDate?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenBenefitPackageResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenBenefitPackageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpenBenefitPackageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpportunitySearchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpportunitySearchRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试组织
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpportunitySearchResponseBody extends $tea.Model {
    opportunityExist?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpportunitySearchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OpportunitySearchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreventCheatingCheckRiskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreventCheatingCheckRiskRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 6.3.30
     */
    clientVer?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * iOS
     */
    platform?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 15
     */
    platformVer?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"lbsWuaToken": "lbsWua","ddSec":"ddSec"}
     */
    sec?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * user1
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreventCheatingCheckRiskResponseBody extends $tea.Model {
    result?: PreventCheatingCheckRiskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreventCheatingCheckRiskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PreventCheatingCheckRiskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishFileChangeNoticeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishFileChangeNoticeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    fileId?: string;
    /**
     * @example
     * 1
     */
    operateType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    operatorUnionId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxx
     */
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishFileChangeNoticeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishRuleRequest extends $tea.Model {
    /**
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishRuleResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    isPublish?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PublishRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBadgeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBadgeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 110000000
     */
    agentId?: string;
    badgeItems?: PushBadgeRequestBadgeItems[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    pushType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBadgeResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBadgeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushBadgeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcrossCloudStroageConfigsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcrossCloudStroageConfigsRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    targetCloudType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding77b8cac4e026cc123xxxxxxxxeb6378f
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * sampleSecretId1234
     */
    accessKeySecret?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * xxxxbucket
     */
    bucketName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    cloudType?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://oss-cn-test.aliyuncs.com
     */
    endpoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcrossCloudStroageConfigsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAcrossCloudStroageConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryChannelStaffInfoByMobileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryChannelStaffInfoByMobileRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 158xxxxxxxx
     */
    mobile?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryChannelStaffInfoByMobileResponseBody extends $tea.Model {
    empInfo?: QueryChannelStaffInfoByMobileResponseBodyEmpInfo;
    exclusiveAccountEmpInfoList?: QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryChannelStaffInfoByMobileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryChannelStaffInfoByMobileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationPageRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * -1
     */
    categoryId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationPageResponseBody extends $tea.Model {
    result?: QueryConversationPageResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryConversationPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryExclusiveBenefitsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryExclusiveBenefitsResponseBody extends $tea.Model {
    benefitsList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryExclusiveBenefitsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryExclusiveBenefitsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPartnerInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPartnerInfoResponseBody extends $tea.Model {
    partnerDeptList?: QueryPartnerInfoResponseBodyPartnerDeptList[];
    partnerLabelList?: QueryPartnerInfoResponseBodyPartnerLabelList[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPartnerInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPartnerInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBody extends $tea.Model {
    abilitySwitch?: number;
    appInfo?: QueryTemplateInfoResponseBodyAppInfo;
    conversationScope?: string[];
    createAt?: number;
    description?: string;
    grayConversationIds?: string[];
    grayInfo?: QueryTemplateInfoResponseBodyGrayInfo;
    grayTemplateId?: string;
    groupSettingList?: QueryTemplateInfoResponseBodyGroupSettingList[];
    iconMediaId?: string;
    modifiedAt?: number;
    modifyOrderId?: number;
    modifyStatus?: number;
    parentTemplateDetailVO?: QueryTemplateInfoResponseBodyParentTemplateDetailVO;
    publishSubState?: string;
    robotTemplateList?: string[];
    status?: number;
    templateId?: string;
    templateIntroduction?: QueryTemplateInfoResponseBodyTemplateIntroduction;
    templateName?: string;
    templateType?: number;
    templateVisibility?: QueryTemplateInfoResponseBodyTemplateVisibility;
    toolbarPluginList?: string[];
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTemplateInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserBehaviorHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserBehaviorRequest extends $tea.Model {
    endTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageNumber?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    platform?: number;
    startTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    type?: number;
    /**
     * @example
     * 12034-1233
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserBehaviorResponseBody extends $tea.Model {
    data?: QueryUserBehaviorResponseBodyData[];
    dataCnt?: number;
    totalCnt?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserBehaviorResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserBehaviorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackMiniAppVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackMiniAppVersionRequest extends $tea.Model {
    /**
     * @example
     * 5000000003
     */
    miniAppId?: string;
    /**
     * @example
     * 0.0.5
     */
    rollbackVersion?: string;
    /**
     * @example
     * 0.0.4
     */
    targetVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackMiniAppVersionResponseBody extends $tea.Model {
    /**
     * @example
     * 成功
     */
    cause?: string;
    /**
     * @example
     * 200
     */
    code?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackMiniAppVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RollbackMiniAppVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverRequest extends $tea.Model {
    batchNo?: string;
    cardOptions?: string;
    data?: RuleBatchReceiverRequestData[];
    ruleCode?: string;
    secretKey?: string;
    specialStrategy?: boolean;
    taskBatchNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverResponseBody extends $tea.Model {
    code?: number;
    data?: RuleBatchReceiverResponseBodyData[];
    msg?: string;
    msgId?: string;
    rows?: RuleBatchReceiverResponseBodyRows[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RuleBatchReceiverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAcrossCloudStroageConfigsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAcrossCloudStroageConfigsRequest extends $tea.Model {
    /**
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @example
     * sampleSecretId1234
     */
    accessKeySecret?: string;
    /**
     * @example
     * xxxxbucket
     */
    bucketName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    cloudType?: number;
    /**
     * @example
     * https://oss-cn-test.aliyuncs.com
     */
    endpoint?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    /**
     * @example
     * sampleKeyId1234
     */
    accessKeyId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://oss-cn-test.aliyuncs.com
     */
    endpoint?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAcrossCloudStroageConfigsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveAcrossCloudStroageConfigsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAndSubmitAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAndSubmitAuthInfoRequest extends $tea.Model {
    /**
     * @example
     * XXX组织申请高级认证
     */
    applyRemark?: string;
    /**
     * @example
     * @lQLxxxxxxxxVvjg8zImwm6t1BYIUNv0Cas0x7UA-AA
     */
    authorizeMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 计算机
     */
    industry?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 钉三多
     */
    legalPerson?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3301XX1997XXXXXXXXX
     */
    legalPersonIdCard?: string;
    /**
     * @example
     * @lQLxxxxxxxxVvjg8zImwm6t1BYIUNv0Cas0x7UA-AA
     */
    licenseMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 330100
     */
    locCity?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 杭州
     */
    locCityName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 330000
     */
    locProvince?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 浙江
     */
    locProvinceName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 15869110714
     */
    mobileNum?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 测试组织
     */
    orgName?: string;
    /**
     * @example
     * 11111111-1
     */
    organizationCode?: string;
    /**
     * @example
     * @lQLxxxxxxxxVvjg8zImwm6t1BYIUNv0Cas0x7UA-AA
     */
    organizationCodeMediaId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 余杭区文一西路XX号
     */
    registLocation?: string;
    /**
     * @example
     * 1111111111111111
     */
    registNum?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    /**
     * @example
     * 9111111XX2957XX4X
     */
    unifiedSocialCredit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAndSubmitAuthInfoResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveAndSubmitAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveAndSubmitAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveOpenTerminalInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveOpenTerminalInfoRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingf8d907412a586
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 云枢
     */
    logSource?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * terminalInfo
     */
    logType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * [{"date":"2023-05-10","macAddress":"34-2E-B7-AF-EA-JF","devSn":"68D1F0-B76A-5CC9-BCFC-BD7548BA","staffId":"05166141678164"}]
     */
    openExt?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveOpenTerminalInfoResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveOpenTerminalInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveOpenTerminalInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageFunctionSwitchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageFunctionSwitchRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 15800000000
     */
    functionList?: SaveStorageFunctionSwitchRequestFunctionList[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageFunctionSwitchResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageFunctionSwitchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveStorageFunctionSwitchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageSwitchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageSwitchRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0-关闭，1-开启
     */
    openStorage?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageSwitchResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageSwitchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveStorageSwitchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveWhiteAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveWhiteAppRequest extends $tea.Model {
    /**
     * @deprecated
     */
    agentIdList?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * {"openShareControl":[123],"openClipboardPaste":[123]}
     */
    agentIdMap?: string;
    /**
     * @example
     * add
     *
     * @deprecated
     */
    operation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveWhiteAppResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveWhiteAppResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveWhiteAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchOrgInnerGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchOrgInnerGroupInfoRequest extends $tea.Model {
    /**
     * @example
     * 创建时间查询最大时间戳
     */
    createTimeEnd?: number;
    /**
     * @example
     * 创建时间查询最小时间戳
     */
    createTimeStart?: number;
    /**
     * @example
     * 群人数范围最大值，例如100
     */
    groupMembersCountEnd?: number;
    /**
     * @example
     * 群人数范围最小值，例如1
     */
    groupMembersCountStart?: number;
    /**
     * @example
     * 群名称
     */
    groupName?: string;
    /**
     * @example
     * 群主userId
     */
    groupOwner?: string;
    /**
     * @example
     * 最后一次活跃时间戳最大值
     */
    lastActiveTimeEnd?: number;
    /**
     * @example
     * 最后一次活跃时间戳最小值
     */
    lastActiveTimeStart?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 当前查询人的userId
     */
    operatorUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 分页大小，最大不能超过100
     */
    pageSize?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 分页号，从1开始
     */
    pageStart?: number;
    /**
     * @example
     * 是否同步到钉盘 0不同步 1同步
     */
    syncToDingpan?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 每次查询唯一标识，保证每次分页查询时该值不变
     */
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchOrgInnerGroupInfoResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    itemCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    items?: SearchOrgInnerGroupInfoResponseBodyItems[];
    /**
     * @remarks
     * This parameter is required.
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchOrgInnerGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchOrgInnerGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAppDingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAppDingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 开会
     */
    content?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userids?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAppDingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInvitationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInvitationRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    deptId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 钉开放组织别名
     */
    orgAlias?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    partnerLabelId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    partnerNum?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 133XXXXXX57
     */
    phone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInvitationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPhoneDingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPhoneDingRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 开会
     */
    content?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userids?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPhoneDingResponseBody extends $tea.Model {
    /**
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendPhoneDingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendPhoneDingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationCategoryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * -1
     */
    categoryId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationCategoryResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationCategoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetConversationCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationSubtitleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationSubtitleRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    openConversationId?: string;
    /**
     * @example
     * 副标题
     */
    subtitle?: string;
    /**
     * @example
     * #0000FF
     */
    subtitleColor?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationSubtitleResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationSubtitleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetConversationSubtitleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationTopCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationTopCategoryRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxxx
     */
    openConversationId?: string;
    /**
     * **if can be null:**
     * true
     */
    setCategoryList?: SetConversationTopCategoryRequestSetCategoryList[];
    /**
     * @example
     * 10
     *
     * **if can be null:**
     * true
     */
    sign?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationTopCategoryResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationTopCategoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetConversationTopCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeptPartnerTypeAndNumHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeptPartnerTypeAndNumRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    deptId?: string;
    labelIds?: string[];
    /**
     * @example
     * 1234
     */
    partnerNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDeptPartnerTypeAndNumResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetOrgTopConversationCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetOrgTopConversationCategoryRequest extends $tea.Model {
    body?: SetOrgTopConversationCategoryRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetOrgTopConversationCategoryResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetOrgTopConversationCategoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetOrgTopConversationCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverRequest extends $tea.Model {
    batchNo?: string;
    cardOptions?: string;
    data?: SpecialRuleBatchReceiverRequestData[];
    ruleCode?: string;
    secretKey?: string;
    specialStrategy?: boolean;
    taskBatchNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverResponseBody extends $tea.Model {
    code?: number;
    data?: SpecialRuleBatchReceiverResponseBodyData[];
    msg?: string;
    msgId?: string;
    rows?: SpecialRuleBatchReceiverResponseBodyRows[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SpecialRuleBatchReceiverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoAddDelTaskPersonHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoAddDelTaskPersonRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    operateType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorAccount?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    outTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    projId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    taskExecutePersonDTOS?: TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoAddDelTaskPersonResponseBody extends $tea.Model {
    code?: number;
    data?: any;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoAddDelTaskPersonResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TaskInfoAddDelTaskPersonResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCancelOrDelTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCancelOrDelTaskRequest extends $tea.Model {
    cardDTO?: TaskInfoCancelOrDelTaskRequestCardDTO;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorAccount?: string;
    outTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    projId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    sendMsgFlag?: number;
    taskExecutePersonDTOS?: TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCancelOrDelTaskResponseBody extends $tea.Model {
    code?: number;
    data?: any;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCancelOrDelTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TaskInfoCancelOrDelTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequest extends $tea.Model {
    attr?: TaskInfoCreateAndStartTaskRequestAttr;
    backlogDTO?: TaskInfoCreateAndStartTaskRequestBacklogDTO;
    backlogGenerateFlag?: number;
    businessCode?: string;
    canceldelTaskCardId?: string;
    cardDTO?: TaskInfoCreateAndStartTaskRequestCardDTO;
    /**
     * @remarks
     * This parameter is required.
     */
    customFlag?: number;
    detailUrl?: TaskInfoCreateAndStartTaskRequestDetailUrl;
    finishTaskCardId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorAccount?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    outTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    projId?: string;
    robotCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    sendMsgFlag?: number;
    sort?: number;
    startTaskCardId?: string;
    state?: number;
    taskContent?: string;
    taskEndTime?: number;
    taskExecutePersonDTOS?: TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS[];
    taskGroupDTOList?: TaskInfoCreateAndStartTaskRequestTaskGroupDTOList[];
    /**
     * @remarks
     * This parameter is required.
     */
    taskSystem?: string;
    taskTemplCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    taskTitle?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    taskType?: string;
    taskUrlMobile?: string;
    taskUrlPc?: string;
    updateTaskCardId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskResponseBody extends $tea.Model {
    code?: number;
    data?: TaskInfoCreateAndStartTaskResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TaskInfoCreateAndStartTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoFinishTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoFinishTaskRequest extends $tea.Model {
    cardDTO?: TaskInfoFinishTaskRequestCardDTO;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorAccount?: string;
    outTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    projId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    sendMsgFlag?: number;
    taskExecutePersonDTOS?: TaskInfoFinishTaskRequestTaskExecutePersonDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoFinishTaskResponseBody extends $tea.Model {
    code?: number;
    data?: any;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoFinishTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TaskInfoFinishTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskRequest extends $tea.Model {
    attr?: TaskInfoUpdateTaskRequestAttr;
    canceldelTaskCardId?: string;
    cardDTO?: TaskInfoUpdateTaskRequestCardDTO;
    detailUrl?: TaskInfoUpdateTaskRequestDetailUrl;
    finishTaskCardId?: string;
    listOpenConversationId?: string[];
    operateType?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    operatorAccount?: string;
    outTaskId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    projId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    secretKey?: string;
    sendMsgFlag?: number;
    startTaskCardId?: string;
    taskContent?: string;
    taskEndTime?: number;
    taskExecutePersonDTOS?: TaskInfoUpdateTaskRequestTaskExecutePersonDTOS[];
    taskTitle?: string;
    taskUrlMobile?: string;
    taskUrlPc?: string;
    updateTaskCardId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskResponseBody extends $tea.Model {
    code?: number;
    data?: TaskInfoUpdateTaskResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TaskInfoUpdateTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferExclusiveAccountOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferExclusiveAccountOrgRequest extends $tea.Model {
    isSettingMainOrg?: boolean;
    targetCorpId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferExclusiveAccountOrgResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TransferExclusiveAccountOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TransferExclusiveAccountOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategoryNameHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategoryNameRequest extends $tea.Model {
    /**
     * @example
     * demo
     */
    currentCategoryName?: string;
    /**
     * @example
     * demo01
     */
    targetCategoryName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategoryNameResponseBody extends $tea.Model {
    /**
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCategoryNameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateCategoryNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConversationTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConversationTypeRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    manageSign?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConversationTypeResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConversationTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateConversationTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFileStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFileStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    requestIds?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1-检测通过，2-检测失败
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFileStatusResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFileStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateFileStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMiniAppVersionStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMiniAppVersionStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 500000003
     */
    miniAppId?: string;
    /**
     * @example
     * 0.0.5
     */
    version?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0-开发版，1-灰度版，2-发布版，3-体验版
     */
    versionType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMiniAppVersionStatusResponseBody extends $tea.Model {
    /**
     * @example
     * 成功
     */
    cause?: string;
    /**
     * @example
     * 200
     */
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMiniAppVersionStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateMiniAppVersionStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePartnerVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePartnerVisibilityRequest extends $tea.Model {
    /**
     * @example
     * 0.0.5
     */
    deptIds?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1312312
     */
    labelId?: number;
    /**
     * @example
     * 500000003
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePartnerVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRealmLicenseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRealmLicenseRequest extends $tea.Model {
    detailList?: UpdateRealmLicenseRequestDetailList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRealmLicenseResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRealmLicenseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRealmLicenseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRoleVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRoleVisibilityRequest extends $tea.Model {
    /**
     * @example
     * 0.0.5
     */
    deptIds?: number[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1312312
     */
    labelId?: number;
    /**
     * @example
     * 500000003
     */
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRoleVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStorageModeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStorageModeRequest extends $tea.Model {
    /**
     * @example
     * 0
     */
    fileStorageMode?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * dingxxxxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStorageModeResponseBody extends $tea.Model {
    /**
     * @example
     * ding66b0e9d003fc91ed35c2f4xxxxxxxxxx
     */
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStorageModeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateStorageModeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVoiceMsgCtrlStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVoiceMsgCtrlStatusRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1-检测通过，2-检测失败
     */
    status?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    voiceMsgCtrlInfo?: UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVoiceMsgCtrlStatusResponseBody extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * true
     */
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVoiceMsgCtrlStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateVoiceMsgCtrlStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomSignConfigRequestSignTermFiles extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    fileName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApproveProcessCallbackRequestRequest extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * agree
     */
    approveResult?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    approveType?: string;
    approvers?: string[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1495592259000
     */
    createTime?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * approve_open_group_expansion
     */
    eventType?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1495592259000
     */
    finishTime?: number;
    params?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    processInstanceId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRuleRequestCustomPlan extends $tea.Model {
    currentCategoryList?: string[];
    deptIds?: number[];
    /**
     * @example
     * test
     */
    planName?: string;
    unSelectCategoryList?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTrustedDeviceBatchRequestDetailList extends $tea.Model {
    macAddress?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FileStorageGetQuotaDataResponseBodyQuotaModelList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2022-04
     */
    statisticTime?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 14000
     */
    usedStorage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://down-cdn.dingtalk.com/ddmedia/iAEKAqRmaWxlAwYEzh55BdsFzlFx040G2gAhhAGkC1HdIgKqLZPt3bUH2pAeUAPPAAABgRPQ5KgEzTBIBwAIAA.file
     */
    darkWatermark?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0138350100401024915916
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccountTransferListResponseBodyItemList extends $tea.Model {
    /**
     * @example
     * 财务部
     */
    deptName?: number;
    /**
     * @example
     * 小张
     */
    name?: string;
    /**
     * @example
     * 123***
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1 extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    labelId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 一级供应商
     */
    labelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    levelNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2 extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    labelId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 二级供应商
     */
    labelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 2
     */
    levelNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3 extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    labelId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 三级供应商
     */
    labelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 3
     */
    levelNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4 extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    labelId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 四级供应商
     */
    labelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 4
     */
    levelNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5 extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    labelId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 五级供应商
     */
    labelName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 5
     */
    levelNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllLabelableDeptsResponseBodyData extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    deptId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 管理部
     */
    deptName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 10
     */
    memberCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    partnerLabelVOLevel1?: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1;
    /**
     * @remarks
     * This parameter is required.
     */
    partnerLabelVOLevel2?: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2;
    /**
     * @remarks
     * This parameter is required.
     */
    partnerLabelVOLevel3?: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3;
    /**
     * @remarks
     * This parameter is required.
     */
    partnerLabelVOLevel4?: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4;
    /**
     * @remarks
     * This parameter is required.
     */
    partnerLabelVOLevel5?: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    partnerNum?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    superDeptId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponseBodyAndroid extends $tea.Model {
    baseLineVersion?: string;
    downloadUrl?: string;
    inGray?: boolean;
    packTime?: number;
    platform?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponseBodyIOSExt extends $tea.Model {
    plist?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponseBodyIOS extends $tea.Model {
    baseLineVersion?: string;
    downloadUrl?: string;
    ext?: GetAppDispatchInfoResponseBodyIOSExt;
    inGray?: boolean;
    packTime?: number;
    platform?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponseBodyMac extends $tea.Model {
    baseLineVersion?: string;
    downloadUrl?: string;
    inGray?: boolean;
    packTime?: number;
    platform?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppDispatchInfoResponseBodyWindows extends $tea.Model {
    baseLineVersion?: string;
    downloadUrl?: string;
    inGray?: boolean;
    packTime?: number;
    platform?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCidsByBotCodeResponseBodyGroupInfos extends $tea.Model {
    botCreator?: string;
    botCreatorIsOrgMember?: boolean;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCommentListResponseBodyData extends $tea.Model {
    commentId?: string;
    commentTime?: number;
    commentUserName?: string;
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConferenceDetailResponseBodyMemberList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    attendDuration?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    staffId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationDetailResponseBodyResultMultipleCategoryList extends $tea.Model {
    /**
     * @example
     * 0
     */
    categoryId?: number;
    /**
     * @example
     * 全部
     */
    categoryName?: string;
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationDetailResponseBodyResult extends $tea.Model {
    /**
     * @example
     * -1
     */
    categoryId?: number;
    /**
     * @example
     * categoryName
     */
    categoryName?: string;
    groupCode?: string;
    /**
     * @example
     * 5
     */
    groupMembersCnt?: number;
    /**
     * @example
     * 5
     */
    groupName?: string;
    /**
     * @example
     * groupOwnerName
     */
    groupOwnerName?: string;
    /**
     * @example
     * groupOwnerUserId
     */
    groupOwnerUserId?: string;
    isKpConversation?: boolean;
    /**
     * @example
     * 1
     */
    manageSign?: number;
    multipleCategoryList?: GetConversationDetailResponseBodyResultMultipleCategoryList[];
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * cidxxx
     */
    openConversationId?: string;
    /**
     * @example
     * 1
     */
    order?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingReportDeptSummaryResponseBodyData extends $tea.Model {
    /**
     * @example
     * 123
     */
    deptId?: string;
    /**
     * @example
     * 部门A
     */
    deptName?: string;
    /**
     * @example
     * 100
     */
    dingReportSendCnt?: string;
    /**
     * @example
     * 100
     */
    dingReportSendUsrCnt?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocCreatedDeptSummaryResponseBodyData extends $tea.Model {
    /**
     * @example
     * 100
     */
    createDocUserCnt1d?: string;
    /**
     * @example
     * 123
     */
    deptId?: string;
    /**
     * @example
     * 部门A
     */
    deptName?: string;
    /**
     * @example
     * 100
     */
    docCreatedCnt?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetExclusiveAccountAllOrgListResponseBodyOrgInfoList extends $tea.Model {
    /**
     * @example
     * ding32xxxxxxxxe0105d
     */
    corpId?: string;
    /**
     * @example
     * true
     */
    isMainOrg?: boolean;
    /**
     * @example
     * http://xxx.dingtalk.com/xxx.jpg
     */
    logoUrl?: string;
    /**
     * @example
     * 钉钉(中国)信息技术有限公司
     */
    orgFullName?: string;
    /**
     * @example
     * 钉钉
     */
    orgName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGeneralFormCreatedDeptSummaryResponseBodyData extends $tea.Model {
    /**
     * @example
     * 123
     */
    deptId?: string;
    /**
     * @example
     * 部门A
     */
    deptName?: string;
    /**
     * @example
     * 100
     */
    generalFormCreateCnt1d?: string;
    /**
     * @example
     * 100
     */
    useGeneralFormUserCnt1d?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupActiveInfoResponseBodyData extends $tea.Model {
    dingGroupId?: string;
    groupCreateTime?: string;
    groupCreateUserId?: string;
    groupCreateUserName?: string;
    groupName?: string;
    groupType?: number;
    groupUserCnt1d?: number;
    openConvUv1d?: number;
    sendMessageCnt1d?: number;
    sendMessageUserCnt1d?: number;
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupInfoByCidResponseBodyGroupInfo extends $tea.Model {
    allOrgMember?: boolean;
    groupName?: string;
    groupNumber?: number;
    groupOrganization?: string;
    joinGroupUrl?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInActiveUserListResponseBodyMetaList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    kpiCaliber?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    kpiId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    kpiName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    period?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigRequestListDynamicAttr extends $tea.Model {
    attrCode?: string;
    listAttrOptionsCode?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr extends $tea.Model {
    attrCode?: string;
    listAttrOptionsCode?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyDataGroupAttributesListReceiver extends $tea.Model {
    employeeCode?: string;
    employeeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyDataGroupAttributes extends $tea.Model {
    configGroupId?: number;
    corpId?: string;
    groupTopic?: string;
    groupType?: string;
    listDynamicAttr?: GetMsgConfigResponseBodyDataGroupAttributesListDynamicAttr[];
    listReceiver?: GetMsgConfigResponseBodyDataGroupAttributesListReceiver[];
    openConversationId?: string;
    ownerJobNo?: string;
    subRuleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyDataMsgConfigs extends $tea.Model {
    cardId?: string;
    corpId?: string;
    customParameters?: string;
    msgContentConsisFlag?: number;
    msgId?: string;
    robotCode?: string;
    ruleBusinessCode?: string;
    ruleCategory?: number;
    ruleCode?: string;
    ruleName?: string;
    subRuleCode?: string;
    systemCode?: string;
    taskBatchNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyDataReceiverAttributes extends $tea.Model {
    employeeCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyDataUnitAttributes extends $tea.Model {
    unitId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMsgConfigResponseBodyData extends $tea.Model {
    groupAttributes?: GetMsgConfigResponseBodyDataGroupAttributes[];
    msgConfigs?: GetMsgConfigResponseBodyDataMsgConfigs;
    receiverAttributes?: GetMsgConfigResponseBodyDataReceiverAttributes[];
    unitAttributes?: GetMsgConfigResponseBodyDataUnitAttributes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOaOperatorLogListResponseBodyData extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    category1Name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    category2Name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    content?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    opName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    opTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutGroupsByPageResponseBodyResponseBodyGroupList extends $tea.Model {
    /**
     * @example
     * {   "text": {     "content": "这是一段文本"   } }
     */
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutGroupsByPageResponseBodyResponseBody extends $tea.Model {
    groupList?: GetOutGroupsByPageResponseBodyResponseBodyGroupList[];
    /**
     * @example
     * 10
     */
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender extends $tea.Model {
    /**
     * @example
     * user1234
     */
    id?: string;
    /**
     * @example
     * userId
     */
    idType?: string;
    /**
     * @example
     * user
     */
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList extends $tea.Model {
    /**
     * @example
     * {   "text": {     "content": "这是一段文本"   } }
     */
    content?: string;
    /**
     * @example
     * text/audio/video
     */
    contentType?: string;
    /**
     * @example
     * 2022-07-05 15:43:03
     */
    createAt?: string;
    /**
     * @example
     * cid123456
     */
    openConversationId?: string;
    sender?: GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOutsideAuditGroupMessageByPageResponseBodyResponseBody extends $tea.Model {
    messageList?: GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList[];
    /**
     * @example
     * 1680493837428
     */
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPartnerTypeByParentIdResponseBodyData extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1234
     */
    labelId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 目前无意义
     */
    typeId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 经销商
     */
    typeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesResponseBodyDataDeviceDepts extends $tea.Model {
    /**
     * @example
     * 123
     */
    id?: number;
    /**
     * @example
     * 测试部门
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesResponseBodyDataDeviceRoles extends $tea.Model {
    /**
     * @example
     * 测试角色
     */
    name?: string;
    /**
     * @example
     * 123
     */
    tagCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesResponseBodyDataDeviceStaffs extends $tea.Model {
    /**
     * @example
     * 张三
     */
    name?: string;
    /**
     * @example
     * 123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublicDevicesResponseBodyData extends $tea.Model {
    deviceDepts?: GetPublicDevicesResponseBodyDataDeviceDepts[];
    deviceRoles?: GetPublicDevicesResponseBodyDataDeviceRoles[];
    /**
     * @example
     * 1
     */
    deviceScopeType?: number;
    deviceStaffs?: GetPublicDevicesResponseBodyDataDeviceStaffs[];
    /**
     * @example
     * 1671767361000
     */
    gmtCreate?: number;
    /**
     * @example
     * 1671767361000
     */
    gmtModified?: number;
    /**
     * @example
     * 88:66:5a:07:2b:04
     */
    macAddress?: string;
    /**
     * @example
     * Mac
     */
    platform?: string;
    /**
     * @example
     * 这是标题
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublisherSummaryResponseBodyData extends $tea.Model {
    /**
     * @example
     * 100
     */
    publisherArticleCntStd?: string;
    /**
     * @example
     * 100
     */
    publisherArticlePvCntStd?: string;
    /**
     * @example
     * 服务窗1
     */
    publisherName?: string;
    /**
     * @example
     * 123
     */
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPublisherSummaryResponseBodyPublisherArticlePvTop5 extends $tea.Model {
    /**
     * @example
     * 文章1
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRealPeopleRecordsResponseBodyData extends $tea.Model {
    /**
     * @example
     * agentId
     */
    agentId?: number;
    /**
     * @example
     * 166700000
     */
    invokeTime?: number;
    /**
     * @example
     * 1
     */
    personIdentification?: number;
    /**
     * @example
     * 1
     */
    platform?: number;
    /**
     * @example
     * 1
     */
    scene?: number;
    /**
     * @example
     * 1234
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecognizeRecordsResponseBodyData extends $tea.Model {
    /**
     * @example
     * agentId
     */
    agentId?: number;
    /**
     * @example
     * 1
     */
    faceCompareResult?: number;
    /**
     * @example
     * 166700000
     */
    invokeTime?: number;
    /**
     * @example
     * 1
     */
    platform?: number;
    /**
     * @example
     * 1234
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRobotInfoByCodeResponseBodyRobotInfoVO extends $tea.Model {
    agentId?: number;
    brief?: string;
    description?: string;
    name?: string;
    robotOrganization?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSecurityConfigMemberResponseBodyResultUserInfos extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSecurityConfigMemberResponseBodyResult extends $tea.Model {
    hasNext?: boolean;
    nextToken?: number;
    scopeType?: number;
    userInfos?: GetSecurityConfigMemberResponseBodyResultUserInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList extends $tea.Model {
    /**
     * @example
     * 部门1
     */
    deptName?: string;
    /**
     * @example
     * **@**.com
     */
    email?: string;
    /**
     * @example
     * 小张
     */
    name?: string;
    /**
     * @example
     * ***
     */
    phone?: string;
    /**
     * @example
     * 主管理员
     */
    roles?: string;
    /**
     * @example
     * 123***
     */
    staffId?: string;
    /**
     * @example
     * 经理
     */
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrustDeviceListResponseBodyData extends $tea.Model {
    /**
     * @example
     * 1628650483
     */
    createTime?: number;
    id?: number;
    /**
     * @example
     * 88:92:5a:1f:e8:24
     */
    macAddress?: string;
    model?: string;
    modifiedTime?: number;
    /**
     * @example
     * Mac
     */
    platform?: string;
    /**
     * @example
     * 2
     */
    status?: number;
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 65224157501039784
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAppVersionSummaryResponseBodyData extends $tea.Model {
    /**
     * @example
     * 6.0
     */
    appVersion?: string;
    /**
     * @example
     * iOS
     */
    client?: string;
    /**
     * @example
     * 组织1
     */
    orgName?: string;
    /**
     * @example
     * 20210808
     */
    statDate?: string;
    /**
     * @example
     * 10
     */
    userCnt?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFaceStateResponseBodyData extends $tea.Model {
    /**
     * @example
     * 1
     */
    state?: number;
    /**
     * @example
     * userId
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealPeopleStateResponseBodyData extends $tea.Model {
    /**
     * @example
     * 1
     */
    state?: number;
    /**
     * @example
     * userId
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserStayLengthResponseBodyItemList extends $tea.Model {
    /**
     * @example
     * 小张
     */
    name?: string;
    /**
     * @example
     * 20220501
     */
    statDate?: string;
    /**
     * @example
     * 1000
     */
    stayTimeLenApp1d?: number;
    /**
     * @example
     * 2000
     */
    stayTimeLenPc1d?: number;
    /**
     * @example
     * 123***
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrRequestListDynamicAttr extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    attrCode?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    listAttrOptionsCode?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrResponseBodyDataList extends $tea.Model {
    groupMemberCount?: number;
    groupName?: string;
    openConversationId?: string;
    ownerJobNo?: string;
    ownerUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByAttrResponseBodyData extends $tea.Model {
    counts?: number;
    list?: GroupQueryByAttrResponseBodyDataList[];
    pageIndex?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr extends $tea.Model {
    attrCode?: string;
    listAttrOptionsCode?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupQueryByOpenIdResponseBodyData extends $tea.Model {
    groupName?: string;
    groupTemplateId?: string;
    groupTemplateName?: string;
    groupTopic?: string;
    groupType?: string;
    id?: number;
    listGroupDynamicAttr?: GroupQueryByOpenIdResponseBodyDataListGroupDynamicAttr[];
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogResponseBodyListDocMemberList extends $tea.Model {
    /**
     * @example
     * 张三
     */
    memberName?: string;
    /**
     * @example
     * 0
     */
    memberType?: number;
    /**
     * @example
     * 部门
     */
    memberTypeView?: string;
    /**
     * @example
     * 1
     */
    permissionRole?: number;
    /**
     * @example
     * 阅读者（可查看\下载）
     */
    permissionRoleView?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogResponseBodyListDocReceiverList extends $tea.Model {
    /**
     * @example
     * 张三
     */
    receiverName?: string;
    /**
     * @example
     * 1
     */
    receiverType?: number;
    /**
     * @example
     * 单聊
     */
    receiverTypeView?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAuditLogResponseBodyList extends $tea.Model {
    /**
     * @example
     * 0
     */
    action?: number;
    /**
     * @example
     * 企业群
     */
    actionView?: string;
    /**
     * @example
     * 11258620701
     */
    bizId?: string;
    docMemberList?: ListAuditLogResponseBodyListDocMemberList[];
    docMobileUrl?: string;
    docPcUrl?: string;
    docReceiverList?: ListAuditLogResponseBodyListDocReceiverList[];
    /**
     * @example
     * 1577601221260
     */
    gmtCreate?: number;
    /**
     * @example
     * 1577601221260
     */
    gmtModified?: number;
    /**
     * @example
     * 1.1.1.1
     */
    ipAddress?: string;
    /**
     * @example
     * 2
     */
    operateModule?: number;
    /**
     * @example
     * 企业群
     */
    operateModuleView?: string;
    /**
     * @example
     * 测试
     */
    operatorName?: string;
    /**
     * @example
     * 水果公司
     */
    orgName?: string;
    /**
     * @example
     * 11
     */
    platform?: number;
    /**
     * @example
     * WIN
     */
    platformView?: string;
    prevWorkSpaceId?: number;
    prevWorkSpaceMobileUrl?: string;
    prevWorkSpaceName?: string;
    prevWorkSpacePcUrl?: string;
    /**
     * @example
     * 张三
     */
    realName?: string;
    /**
     * @example
     * 总经理办公室
     */
    receiverName?: string;
    /**
     * @example
     * 0
     */
    receiverType?: number;
    /**
     * @example
     * 单聊
     */
    receiverTypeView?: string;
    /**
     * @example
     * 文件名
     */
    resource?: string;
    /**
     * @example
     * doc
     */
    resourceExtension?: string;
    /**
     * @example
     * 1024
     */
    resourceSize?: number;
    /**
     * @example
     * 0
     */
    status?: number;
    /**
     * @example
     * 11258620
     */
    targetSpaceId?: number;
    /**
     * @example
     * 123
     */
    userId?: string;
    workSpaceId?: number;
    workSpaceMobileUrl?: string;
    workSpaceName?: string;
    workSpacePcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByCodesResponseBodyRobotInfoList extends $tea.Model {
    brief?: string;
    code?: string;
    createAt?: number;
    description?: string;
    dev?: string;
    icon?: string;
    modifiedAt?: number;
    name?: string;
    outgoingToken?: string;
    outgoingUrl?: string;
    previewMediaId?: string;
    sourceUrl?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListByPluginIdsResponseBodyPluginInfoList extends $tea.Model {
    appId?: string;
    createAt?: number;
    desc?: string;
    icons?: string;
    modifiedAt?: number;
    name?: string;
    pcUrl?: string;
    pluginId?: string;
    status?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCategorysRequestBody extends $tea.Model {
    /**
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListJoinOrgInfoResponseBodyOrgInfoList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * ding32xxxxxxxxe0105d
     */
    corpId?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * testCode
     */
    domain?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 钉钉(中国)信息技术有限公司
     */
    orgFullName?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 钉钉
     */
    orgName?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppAvailableVersionResponseBodyList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    buildStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0.0.5
     */
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMiniAppHistoryVersionResponseBodyList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0-打包中 ，1-成功，2-失败
     */
    buildStatus?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://xxx.con/download/id
     */
    h5Bundle?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 5000
     */
    packageSize?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * https://xxx.con/download/id
     */
    packageUrl?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0.0.5
     */
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponseBodyListVisibleDepts extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deptId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponseBodyListVisibleUsers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponseBodyListWarningDepts extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    deptId?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponseBodyListWarningUsers extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartnerRolesResponseBodyList extends $tea.Model {
    /**
     * @example
     * 123
     */
    id?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    isNecessary?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 供应商
     */
    name?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    visibleDepts?: ListPartnerRolesResponseBodyListVisibleDepts[];
    /**
     * @remarks
     * This parameter is required.
     */
    visibleUsers?: ListPartnerRolesResponseBodyListVisibleUsers[];
    /**
     * @remarks
     * This parameter is required.
     */
    warningDepts?: ListPartnerRolesResponseBodyListWarningDepts[];
    /**
     * @remarks
     * This parameter is required.
     */
    warningUsers?: ListPartnerRolesResponseBodyListWarningUsers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPunchScheduleByConditionWithPagingResponseBodyList extends $tea.Model {
    /**
     * @example
     * be0d84e04316488cxxxxxxxx129522b0
     */
    bizOuterId?: string;
    /**
     * @example
     * 测试打卡机
     */
    positionName?: string;
    /**
     * @example
     * checkIn
     */
    punchSymbol?: string;
    /**
     * @example
     * 200003
     */
    userId?: string;
    /**
     * @example
     * 1647333408000
     */
    userPunchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRulesRequestBody extends $tea.Model {
    /**
     * @example
     * 1
     */
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreventCheatingCheckRiskResponseBodyResult extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    hasRisk?: boolean;
    riskInfo?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushBadgeRequestBadgeItems extends $tea.Model {
    /**
     * @example
     * 1
     */
    pushValue?: string;
    /**
     * @example
     * 12345
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryChannelStaffInfoByMobileResponseBodyEmpInfo extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryChannelStaffInfoByMobileResponseBodyExclusiveAccountEmpInfoList extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationPageResponseBodyResultData extends $tea.Model {
    categoryId?: number;
    /**
     * @example
     * 未分组
     */
    categoryName?: string;
    /**
     * @example
     * S24A01123
     */
    groupCode?: string;
    groupMembersCnt?: number;
    /**
     * @example
     * 群聊
     */
    groupName?: string;
    /**
     * @example
     * ownername
     */
    groupOwnerName?: string;
    /**
     * @example
     * useridxxx
     */
    groupOwnerUserId?: string;
    isKpConversation?: boolean;
    /**
     * @example
     * 1
     */
    manageSign?: number;
    /**
     * @example
     * cid123xxxxxx
     */
    openConversationId?: string;
    order?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationPageResponseBodyResult extends $tea.Model {
    data?: QueryConversationPageResponseBodyResultData[];
    /**
     * @example
     * 10
     */
    maxResults?: number;
    /**
     * @example
     * 10
     */
    nextToken?: string;
    /**
     * @example
     * 999
     */
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1 extends $tea.Model {
    labelId?: number;
    labelname?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPartnerInfoResponseBodyPartnerDeptList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    memberCount?: number;
    partnerLabelModelLevel1?: QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1;
    partnerNum?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    title?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPartnerInfoResponseBodyPartnerLabelList extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyAppInfo extends $tea.Model {
    appIcon?: string;
    appId?: string;
    appName?: string;
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyGrayInfo extends $tea.Model {
    tenThousandPercent?: number;
    whiteSet?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyGroupSettingList extends $tea.Model {
    desc?: string;
    name?: string;
    state?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList extends $tea.Model {
    brief?: string;
    code?: string;
    corpId?: string;
    createAt?: number;
    description?: string;
    dev?: string;
    groupTemplateId?: string;
    icon?: string;
    modifiedAt?: number;
    name?: string;
    outgoingToken?: string;
    outgoingUrl?: string;
    previewMediaId?: string;
    sourceUrl?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList extends $tea.Model {
    appId?: string;
    createAt?: number;
    desc?: string;
    icons?: string;
    modifiedAt?: number;
    name?: string;
    pcUrl?: string;
    pluginId?: string;
    status?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyParentTemplateDetailVO extends $tea.Model {
    robotTemplateList?: QueryTemplateInfoResponseBodyParentTemplateDetailVORobotTemplateList[];
    templateId?: string;
    toolbarPluginList?: QueryTemplateInfoResponseBodyParentTemplateDetailVOToolbarPluginList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyTemplateIntroduction extends $tea.Model {
    banner?: string;
    detail?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds extends $tea.Model {
    deptId?: string;
    deptName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyTemplateVisibilityUserIds extends $tea.Model {
    avatar?: string;
    nick?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateInfoResponseBodyTemplateVisibility extends $tea.Model {
    corpId?: string;
    deptIds?: QueryTemplateInfoResponseBodyTemplateVisibilityDeptIds[];
    roleIds?: string[];
    userIds?: QueryTemplateInfoResponseBodyTemplateVisibilityUserIds[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserBehaviorResponseBodyData extends $tea.Model {
    pictureUrl?: string;
    platform?: number;
    scene?: string;
    time?: number;
    type?: number;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverRequestDataAttrs extends $tea.Model {
    listUnitId?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverRequestData extends $tea.Model {
    atAccount?: string;
    attrs?: RuleBatchReceiverRequestDataAttrs;
    callbackUrl?: string;
    cardCallbackUrl?: string;
    content?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    isAtAll?: boolean;
    receiverAccount?: string;
    receiverType?: number;
    serialNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverResponseBodyData extends $tea.Model {
    msgId?: string;
    serialNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RuleBatchReceiverResponseBodyRows extends $tea.Model {
    serialNumber?: string;
    msgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStorageFunctionSwitchRequestFunctionList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    functionKey?: string;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 1
     */
    functionValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchOrgInnerGroupInfoResponseBodyItems extends $tea.Model {
    extensions?: {
        [key: string]: string;
    };
    /**
     * @remarks
     * This parameter is required.
     */
    groupAdminsCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    groupCreateTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    groupLastActiveTime?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    groupLastActiveTimeShow?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    groupMembersCount?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    groupName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    groupOwner?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    groupOwnerUserId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    status?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    syncToDingpan?: number;
    /**
     * @remarks
     * This parameter is required.
     */
    templateId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    templateName?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetConversationTopCategoryRequestSetCategoryList extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 0
     */
    categoryId?: number;
    /**
     * @example
     * 1
     */
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetOrgTopConversationCategoryRequestBody extends $tea.Model {
    /**
     * @example
     * 123111
     */
    categoryId?: number;
    /**
     * @remarks
     * This parameter is required.
     *
     * @example
     * 重要保障
     */
    categoryName?: string;
    /**
     * @example
     * 1
     */
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverRequestDataAttrs extends $tea.Model {
    listUnitId?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverRequestData extends $tea.Model {
    atAccount?: string;
    attrs?: SpecialRuleBatchReceiverRequestDataAttrs;
    callbackUrl?: string;
    cardCallbackUrl?: string;
    content?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    isAtAll?: boolean;
    privateContent?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    receiverAccount?: string;
    receiverType?: number;
    serialNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverResponseBodyData extends $tea.Model {
    msgId?: string;
    serialNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpecialRuleBatchReceiverResponseBodyRows extends $tea.Model {
    serialNumber?: string;
    msgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoAddDelTaskPersonRequestTaskExecutePersonDTOS extends $tea.Model {
    employeeCode?: string;
    personType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCancelOrDelTaskRequestCardDTO extends $tea.Model {
    atAccount?: string;
    cardCallbackUrl?: string;
    content?: any;
    isAtAll?: boolean;
    receiverAccount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCancelOrDelTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    employeeCode?: string;
    personType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr extends $tea.Model {
    attrCode?: string;
    listAttrOptionsCode?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestAttr extends $tea.Model {
    listTaskDynamicAttr?: TaskInfoCreateAndStartTaskRequestAttrListTaskDynamicAttr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestBacklogDTOContent extends $tea.Model {
    isOnlyShowExecutor?: boolean;
    priority?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestBacklogDTO extends $tea.Model {
    content?: TaskInfoCreateAndStartTaskRequestBacklogDTOContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestCardDTO extends $tea.Model {
    atAccount?: string;
    cardCallbackUrl?: string;
    content?: any;
    isAtAll?: boolean;
    receiverAccount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    employeeCode?: string;
    personType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskRequestTaskGroupDTOList extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList extends $tea.Model {
    corpId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoCreateAndStartTaskResponseBodyData extends $tea.Model {
    groupVoList?: TaskInfoCreateAndStartTaskResponseBodyDataGroupVoList[];
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoFinishTaskRequestCardDTO extends $tea.Model {
    atAccount?: string;
    cardCallbackUrl?: string;
    content?: any;
    isAtAll?: boolean;
    receiverAccount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoFinishTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    employeeCode?: string;
    personType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr extends $tea.Model {
    attrCode?: string;
    listAttrOptionsCode?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskRequestAttr extends $tea.Model {
    listTaskDynamicAttr?: TaskInfoUpdateTaskRequestAttrListTaskDynamicAttr[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskRequestCardDTO extends $tea.Model {
    atAccount?: string;
    cardCallbackUrl?: string;
    content?: any;
    isAtAll?: boolean;
    receiverAccount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskRequestDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskRequestTaskExecutePersonDTOS extends $tea.Model {
    employeeCode?: string;
    personType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskResponseBodyDataGroupVoList extends $tea.Model {
    corpId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaskInfoUpdateTaskResponseBodyData extends $tea.Model {
    groupVoList?: TaskInfoUpdateTaskResponseBodyDataGroupVoList[];
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRealmLicenseRequestDetailList extends $tea.Model {
    /**
     * @example
     * 1001
     */
    licenseType?: number;
    /**
     * @example
     * 123
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVoiceMsgCtrlStatusRequestVoiceMsgCtrlInfo extends $tea.Model {
    /**
     * @remarks
     * This parameter is required.
     */
    openConversationId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    openMsgId?: string;
    /**
     * @remarks
     * This parameter is required.
     */
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 添加自主协议
     *
     * @param request - AddCustomSignConfigRequest
     * @param headers - AddCustomSignConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddCustomSignConfigResponse
     */
    addCustomSignConfigWithOptions(request: AddCustomSignConfigRequest, headers: AddCustomSignConfigHeaders, runtime: $Util.RuntimeOptions): Promise<AddCustomSignConfigResponse>;
    /**
     * 添加自主协议
     *
     * @param request - AddCustomSignConfigRequest
     * @returns AddCustomSignConfigResponse
     */
    addCustomSignConfig(request: AddCustomSignConfigRequest): Promise<AddCustomSignConfigResponse>;
    /**
     * 新增企业
     *
     * @param request - AddOrgRequest
     * @param headers - AddOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddOrgResponse
     */
    addOrgWithOptions(request: AddOrgRequest, headers: AddOrgHeaders, runtime: $Util.RuntimeOptions): Promise<AddOrgResponse>;
    /**
     * 新增企业
     *
     * @param request - AddOrgRequest
     * @returns AddOrgResponse
     */
    addOrg(request: AddOrgRequest): Promise<AddOrgResponse>;
    /**
     * 专属审批结果回调
     *
     * @param request - ApproveProcessCallbackRequest
     * @param headers - ApproveProcessCallbackHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ApproveProcessCallbackResponse
     */
    approveProcessCallbackWithOptions(request: ApproveProcessCallbackRequest, headers: ApproveProcessCallbackHeaders, runtime: $Util.RuntimeOptions): Promise<ApproveProcessCallbackResponse>;
    /**
     * 专属审批结果回调
     *
     * @param request - ApproveProcessCallbackRequest
     * @returns ApproveProcessCallbackResponse
     */
    approveProcessCallback(request: ApproveProcessCallbackRequest): Promise<ApproveProcessCallbackResponse>;
    /**
     * 群禁言或解禁
     *
     * @param request - BanOrOpenGroupWordsRequest
     * @param headers - BanOrOpenGroupWordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BanOrOpenGroupWordsResponse
     */
    banOrOpenGroupWordsWithOptions(request: BanOrOpenGroupWordsRequest, headers: BanOrOpenGroupWordsHeaders, runtime: $Util.RuntimeOptions): Promise<BanOrOpenGroupWordsResponse>;
    /**
     * 群禁言或解禁
     *
     * @param request - BanOrOpenGroupWordsRequest
     * @returns BanOrOpenGroupWordsResponse
     */
    banOrOpenGroupWords(request: BanOrOpenGroupWordsRequest): Promise<BanOrOpenGroupWordsResponse>;
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateCategoryAndBindingGroupsRequest
     * @param headers - CreateCategoryAndBindingGroupsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateCategoryAndBindingGroupsResponse
     */
    createCategoryAndBindingGroupsWithOptions(request: CreateCategoryAndBindingGroupsRequest, headers: CreateCategoryAndBindingGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCategoryAndBindingGroupsResponse>;
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateCategoryAndBindingGroupsRequest
     * @returns CreateCategoryAndBindingGroupsResponse
     */
    createCategoryAndBindingGroups(request: CreateCategoryAndBindingGroupsRequest): Promise<CreateCategoryAndBindingGroupsResponse>;
    /**
     * 创建文件检测任务
     *
     * @param request - CreateDlpTaskRequest
     * @param headers - CreateDlpTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDlpTaskResponse
     */
    createDlpTaskWithOptions(request: CreateDlpTaskRequest, headers: CreateDlpTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDlpTaskResponse>;
    /**
     * 创建文件检测任务
     *
     * @param request - CreateDlpTaskRequest
     * @returns CreateDlpTaskResponse
     */
    createDlpTask(request: CreateDlpTaskRequest): Promise<CreateDlpTaskResponse>;
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateMessageCategoryRequest
     * @param headers - CreateMessageCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateMessageCategoryResponse
     */
    createMessageCategoryWithOptions(request: CreateMessageCategoryRequest, headers: CreateMessageCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<CreateMessageCategoryResponse>;
    /**
     * 创建分组并绑定会话
     *
     * @param request - CreateMessageCategoryRequest
     * @returns CreateMessageCategoryResponse
     */
    createMessageCategory(request: CreateMessageCategoryRequest): Promise<CreateMessageCategoryResponse>;
    /**
     * 创建规则
     *
     * @param request - CreateRuleRequest
     * @param headers - CreateRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateRuleResponse
     */
    createRuleWithOptions(request: CreateRuleRequest, headers: CreateRuleHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRuleResponse>;
    /**
     * 创建规则
     *
     * @param request - CreateRuleRequest
     * @returns CreateRuleResponse
     */
    createRule(request: CreateRuleRequest): Promise<CreateRuleResponse>;
    /**
     * 存入可信设备信息
     *
     * @param request - CreateTrustedDeviceRequest
     * @param headers - CreateTrustedDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTrustedDeviceResponse
     */
    createTrustedDeviceWithOptions(request: CreateTrustedDeviceRequest, headers: CreateTrustedDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTrustedDeviceResponse>;
    /**
     * 存入可信设备信息
     *
     * @param request - CreateTrustedDeviceRequest
     * @returns CreateTrustedDeviceResponse
     */
    createTrustedDevice(request: CreateTrustedDeviceRequest): Promise<CreateTrustedDeviceResponse>;
    /**
     * 批量新增可信设备
     *
     * @param request - CreateTrustedDeviceBatchRequest
     * @param headers - CreateTrustedDeviceBatchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTrustedDeviceBatchResponse
     */
    createTrustedDeviceBatchWithOptions(request: CreateTrustedDeviceBatchRequest, headers: CreateTrustedDeviceBatchHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTrustedDeviceBatchResponse>;
    /**
     * 批量新增可信设备
     *
     * @param request - CreateTrustedDeviceBatchRequest
     * @returns CreateTrustedDeviceBatchResponse
     */
    createTrustedDeviceBatch(request: CreateTrustedDeviceBatchRequest): Promise<CreateTrustedDeviceBatchResponse>;
    /**
     * 触发文件病毒扫描任务
     *
     * @param request - CreateVirusScanTaskRequest
     * @param headers - CreateVirusScanTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateVirusScanTaskResponse
     */
    createVirusScanTaskWithOptions(request: CreateVirusScanTaskRequest, headers: CreateVirusScanTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateVirusScanTaskResponse>;
    /**
     * 触发文件病毒扫描任务
     *
     * @param request - CreateVirusScanTaskRequest
     * @returns CreateVirusScanTaskResponse
     */
    createVirusScanTask(request: CreateVirusScanTaskRequest): Promise<CreateVirusScanTaskResponse>;
    /**
     * 为应用同步数据到专属存储
     *
     * @param request - DataSyncRequest
     * @param headers - DataSyncHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DataSyncResponse
     */
    dataSyncWithOptions(request: DataSyncRequest, headers: DataSyncHeaders, runtime: $Util.RuntimeOptions): Promise<DataSyncResponse>;
    /**
     * 为应用同步数据到专属存储
     *
     * @param request - DataSyncRequest
     * @returns DataSyncResponse
     */
    dataSync(request: DataSyncRequest): Promise<DataSyncResponse>;
    /**
     * 删除跨云存储配置
     *
     * @param headers - DeleteAcrossCloudStroageConfigsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAcrossCloudStroageConfigsResponse
     */
    deleteAcrossCloudStroageConfigsWithOptions(targetCorpId: string, headers: DeleteAcrossCloudStroageConfigsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteAcrossCloudStroageConfigsResponse>;
    /**
     * 删除跨云存储配置
     * @returns DeleteAcrossCloudStroageConfigsResponse
     */
    deleteAcrossCloudStroageConfigs(targetCorpId: string): Promise<DeleteAcrossCloudStroageConfigsResponse>;
    /**
     * 删除评论
     *
     * @param headers - DeleteCommentHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteCommentResponse
     */
    deleteCommentWithOptions(publisherId: string, commentId: string, headers: DeleteCommentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteCommentResponse>;
    /**
     * 删除评论
     * @returns DeleteCommentResponse
     */
    deleteComment(publisherId: string, commentId: string): Promise<DeleteCommentResponse>;
    /**
     * 删除指定可信设备
     *
     * @param request - DeleteTrustedDeviceRequest
     * @param headers - DeleteTrustedDeviceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTrustedDeviceResponse
     */
    deleteTrustedDeviceWithOptions(request: DeleteTrustedDeviceRequest, headers: DeleteTrustedDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTrustedDeviceResponse>;
    /**
     * 删除指定可信设备
     *
     * @param request - DeleteTrustedDeviceRequest
     * @returns DeleteTrustedDeviceResponse
     */
    deleteTrustedDevice(request: DeleteTrustedDeviceRequest): Promise<DeleteTrustedDeviceResponse>;
    /**
     * 分发伙伴应用
     *
     * @param request - DistributePartnerAppRequest
     * @param headers - DistributePartnerAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DistributePartnerAppResponse
     */
    distributePartnerAppWithOptions(request: DistributePartnerAppRequest, headers: DistributePartnerAppHeaders, runtime: $Util.RuntimeOptions): Promise<DistributePartnerAppResponse>;
    /**
     * 分发伙伴应用
     *
     * @param request - DistributePartnerAppRequest
     * @returns DistributePartnerAppResponse
     */
    distributePartnerApp(request: DistributePartnerAppRequest): Promise<DistributePartnerAppResponse>;
    /**
     * 编辑安全卡片管控成员
     *
     * @param request - EditSecurityConfigMemberRequest
     * @param headers - EditSecurityConfigMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EditSecurityConfigMemberResponse
     */
    editSecurityConfigMemberWithOptions(request: EditSecurityConfigMemberRequest, headers: EditSecurityConfigMemberHeaders, runtime: $Util.RuntimeOptions): Promise<EditSecurityConfigMemberResponse>;
    /**
     * 编辑安全卡片管控成员
     *
     * @param request - EditSecurityConfigMemberRequest
     * @returns EditSecurityConfigMemberResponse
     */
    editSecurityConfigMember(request: EditSecurityConfigMemberRequest): Promise<EditSecurityConfigMemberResponse>;
    /**
     * 更换组织主管理员
     *
     * @param request - ExchangeMainAdminRequest
     * @param headers - ExchangeMainAdminHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExchangeMainAdminResponse
     */
    exchangeMainAdminWithOptions(request: ExchangeMainAdminRequest, headers: ExchangeMainAdminHeaders, runtime: $Util.RuntimeOptions): Promise<ExchangeMainAdminResponse>;
    /**
     * 更换组织主管理员
     *
     * @param request - ExchangeMainAdminRequest
     * @returns ExchangeMainAdminResponse
     */
    exchangeMainAdmin(request: ExchangeMainAdminRequest): Promise<ExchangeMainAdminResponse>;
    /**
     * 分发工作台模版
     *
     * @param request - ExclusiveCreateDingPortalRequest
     * @param headers - ExclusiveCreateDingPortalHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExclusiveCreateDingPortalResponse
     */
    exclusiveCreateDingPortalWithOptions(request: ExclusiveCreateDingPortalRequest, headers: ExclusiveCreateDingPortalHeaders, runtime: $Util.RuntimeOptions): Promise<ExclusiveCreateDingPortalResponse>;
    /**
     * 分发工作台模版
     *
     * @param request - ExclusiveCreateDingPortalRequest
     * @returns ExclusiveCreateDingPortalResponse
     */
    exclusiveCreateDingPortal(request: ExclusiveCreateDingPortalRequest): Promise<ExclusiveCreateDingPortalResponse>;
    /**
     * 专属文件第一次设置，激活配置
     *
     * @param request - FileStorageActiveStorageRequest
     * @param headers - FileStorageActiveStorageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageActiveStorageResponse
     */
    fileStorageActiveStorageWithOptions(request: FileStorageActiveStorageRequest, headers: FileStorageActiveStorageHeaders, runtime: $Util.RuntimeOptions): Promise<FileStorageActiveStorageResponse>;
    /**
     * 专属文件第一次设置，激活配置
     *
     * @param request - FileStorageActiveStorageRequest
     * @returns FileStorageActiveStorageResponse
     */
    fileStorageActiveStorage(request: FileStorageActiveStorageRequest): Promise<FileStorageActiveStorageResponse>;
    /**
     * 检查专属存储OSS连接
     *
     * @param request - FileStorageCheckConnectionRequest
     * @param headers - FileStorageCheckConnectionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageCheckConnectionResponse
     */
    fileStorageCheckConnectionWithOptions(request: FileStorageCheckConnectionRequest, headers: FileStorageCheckConnectionHeaders, runtime: $Util.RuntimeOptions): Promise<FileStorageCheckConnectionResponse>;
    /**
     * 检查专属存储OSS连接
     *
     * @param request - FileStorageCheckConnectionRequest
     * @returns FileStorageCheckConnectionResponse
     */
    fileStorageCheckConnection(request: FileStorageCheckConnectionRequest): Promise<FileStorageCheckConnectionResponse>;
    /**
     * 专属文件存储获取存储情况(按时间区间)
     *
     * @param request - FileStorageGetQuotaDataRequest
     * @param headers - FileStorageGetQuotaDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageGetQuotaDataResponse
     */
    fileStorageGetQuotaDataWithOptions(request: FileStorageGetQuotaDataRequest, headers: FileStorageGetQuotaDataHeaders, runtime: $Util.RuntimeOptions): Promise<FileStorageGetQuotaDataResponse>;
    /**
     * 专属文件存储获取存储情况(按时间区间)
     *
     * @param request - FileStorageGetQuotaDataRequest
     * @returns FileStorageGetQuotaDataResponse
     */
    fileStorageGetQuotaData(request: FileStorageGetQuotaDataRequest): Promise<FileStorageGetQuotaDataResponse>;
    /**
     * 专属文件存储获取存储情况和配置
     *
     * @param request - FileStorageGetStorageStateRequest
     * @param headers - FileStorageGetStorageStateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageGetStorageStateResponse
     */
    fileStorageGetStorageStateWithOptions(request: FileStorageGetStorageStateRequest, headers: FileStorageGetStorageStateHeaders, runtime: $Util.RuntimeOptions): Promise<FileStorageGetStorageStateResponse>;
    /**
     * 专属文件存储获取存储情况和配置
     *
     * @param request - FileStorageGetStorageStateRequest
     * @returns FileStorageGetStorageStateResponse
     */
    fileStorageGetStorageState(request: FileStorageGetStorageStateRequest): Promise<FileStorageGetStorageStateResponse>;
    /**
     * 更新文件专属存储配置
     *
     * @param request - FileStorageUpdateStorageRequest
     * @param headers - FileStorageUpdateStorageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns FileStorageUpdateStorageResponse
     */
    fileStorageUpdateStorageWithOptions(request: FileStorageUpdateStorageRequest, headers: FileStorageUpdateStorageHeaders, runtime: $Util.RuntimeOptions): Promise<FileStorageUpdateStorageResponse>;
    /**
     * 更新文件专属存储配置
     *
     * @param request - FileStorageUpdateStorageRequest
     * @returns FileStorageUpdateStorageResponse
     */
    fileStorageUpdateStorage(request: FileStorageUpdateStorageRequest): Promise<FileStorageUpdateStorageResponse>;
    /**
     * 生成暗水印
     *
     * @param request - GenerateDarkWaterMarkRequest
     * @param headers - GenerateDarkWaterMarkHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GenerateDarkWaterMarkResponse
     */
    generateDarkWaterMarkWithOptions(request: GenerateDarkWaterMarkRequest, headers: GenerateDarkWaterMarkHeaders, runtime: $Util.RuntimeOptions): Promise<GenerateDarkWaterMarkResponse>;
    /**
     * 生成暗水印
     *
     * @param request - GenerateDarkWaterMarkRequest
     * @returns GenerateDarkWaterMarkResponse
     */
    generateDarkWaterMark(request: GenerateDarkWaterMarkRequest): Promise<GenerateDarkWaterMarkResponse>;
    /**
     * 获取专属钉钉账号数据迁移结果
     *
     * @param request - GetAccountTransferListRequest
     * @param headers - GetAccountTransferListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAccountTransferListResponse
     */
    getAccountTransferListWithOptions(request: GetAccountTransferListRequest, headers: GetAccountTransferListHeaders, runtime: $Util.RuntimeOptions): Promise<GetAccountTransferListResponse>;
    /**
     * 获取专属钉钉账号数据迁移结果
     *
     * @param request - GetAccountTransferListRequest
     * @returns GetAccountTransferListResponse
     */
    getAccountTransferList(request: GetAccountTransferListRequest): Promise<GetAccountTransferListResponse>;
    /**
     * 获得组织维度的用户dau
     *
     * @param headers - GetActiveUserSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetActiveUserSummaryResponse
     */
    getActiveUserSummaryWithOptions(dataId: string, headers: GetActiveUserSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetActiveUserSummaryResponse>;
    /**
     * 获得组织维度的用户dau
     * @returns GetActiveUserSummaryResponse
     */
    getActiveUserSummary(dataId: string): Promise<GetActiveUserSummaryResponse>;
    /**
     * 根据AppId获取微应用在该组织下的agentId
     *
     * @param request - GetAgentIdByRelatedAppIdRequest
     * @param headers - GetAgentIdByRelatedAppIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAgentIdByRelatedAppIdResponse
     */
    getAgentIdByRelatedAppIdWithOptions(request: GetAgentIdByRelatedAppIdRequest, headers: GetAgentIdByRelatedAppIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetAgentIdByRelatedAppIdResponse>;
    /**
     * 根据AppId获取微应用在该组织下的agentId
     *
     * @param request - GetAgentIdByRelatedAppIdRequest
     * @returns GetAgentIdByRelatedAppIdResponse
     */
    getAgentIdByRelatedAppId(request: GetAgentIdByRelatedAppIdRequest): Promise<GetAgentIdByRelatedAppIdResponse>;
    /**
     * 伙伴钉可打标签部门查询
     *
     * @param headers - GetAllLabelableDeptsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAllLabelableDeptsResponse
     */
    getAllLabelableDeptsWithOptions(headers: GetAllLabelableDeptsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllLabelableDeptsResponse>;
    /**
     * 伙伴钉可打标签部门查询
     * @returns GetAllLabelableDeptsResponse
     */
    getAllLabelableDepts(): Promise<GetAllLabelableDeptsResponse>;
    /**
     * 获得app分发信息
     *
     * @param request - GetAppDispatchInfoRequest
     * @param headers - GetAppDispatchInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAppDispatchInfoResponse
     */
    getAppDispatchInfoWithOptions(request: GetAppDispatchInfoRequest, headers: GetAppDispatchInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetAppDispatchInfoResponse>;
    /**
     * 获得app分发信息
     *
     * @param request - GetAppDispatchInfoRequest
     * @returns GetAppDispatchInfoResponse
     */
    getAppDispatchInfo(request: GetAppDispatchInfoRequest): Promise<GetAppDispatchInfoResponse>;
    /**
     * 获得组织维度日程相关信息
     *
     * @param headers - GetCalenderSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCalenderSummaryResponse
     */
    getCalenderSummaryWithOptions(dataId: string, headers: GetCalenderSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetCalenderSummaryResponse>;
    /**
     * 获得组织维度日程相关信息
     * @returns GetCalenderSummaryResponse
     */
    getCalenderSummary(dataId: string): Promise<GetCalenderSummaryResponse>;
    /**
     * 根据机器人code获取群openConversationId列表
     *
     * @param request - GetCidsByBotCodeRequest
     * @param headers - GetCidsByBotCodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCidsByBotCodeResponse
     */
    getCidsByBotCodeWithOptions(request: GetCidsByBotCodeRequest, headers: GetCidsByBotCodeHeaders, runtime: $Util.RuntimeOptions): Promise<GetCidsByBotCodeResponse>;
    /**
     * 根据机器人code获取群openConversationId列表
     *
     * @param request - GetCidsByBotCodeRequest
     * @returns GetCidsByBotCodeResponse
     */
    getCidsByBotCode(request: GetCidsByBotCodeRequest): Promise<GetCidsByBotCodeResponse>;
    /**
     * 获取发布号的评论列表
     *
     * @param request - GetCommentListRequest
     * @param headers - GetCommentListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCommentListResponse
     */
    getCommentListWithOptions(publisherId: string, request: GetCommentListRequest, headers: GetCommentListHeaders, runtime: $Util.RuntimeOptions): Promise<GetCommentListResponse>;
    /**
     * 获取发布号的评论列表
     *
     * @param request - GetCommentListRequest
     * @returns GetCommentListResponse
     */
    getCommentList(publisherId: string, request: GetCommentListRequest): Promise<GetCommentListResponse>;
    /**
     * 根据逻辑会议id获取会议基本信息
     *
     * @param request - GetConfBaseInfoByLogicalIdRequest
     * @param headers - GetConfBaseInfoByLogicalIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConfBaseInfoByLogicalIdResponse
     */
    getConfBaseInfoByLogicalIdWithOptions(request: GetConfBaseInfoByLogicalIdRequest, headers: GetConfBaseInfoByLogicalIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetConfBaseInfoByLogicalIdResponse>;
    /**
     * 根据逻辑会议id获取会议基本信息
     *
     * @param request - GetConfBaseInfoByLogicalIdRequest
     * @returns GetConfBaseInfoByLogicalIdResponse
     */
    getConfBaseInfoByLogicalId(request: GetConfBaseInfoByLogicalIdRequest): Promise<GetConfBaseInfoByLogicalIdResponse>;
    /**
     * 获取视频会议明细
     *
     * @param headers - GetConferenceDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConferenceDetailResponse
     */
    getConferenceDetailWithOptions(conferenceId: string, headers: GetConferenceDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetConferenceDetailResponse>;
    /**
     * 获取视频会议明细
     * @returns GetConferenceDetailResponse
     */
    getConferenceDetail(conferenceId: string): Promise<GetConferenceDetailResponse>;
    /**
     * 获取会话分组数据
     *
     * @param headers - GetConversationCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationCategoryResponse
     */
    getConversationCategoryWithOptions(headers: GetConversationCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationCategoryResponse>;
    /**
     * 获取会话分组数据
     * @returns GetConversationCategoryResponse
     */
    getConversationCategory(): Promise<GetConversationCategoryResponse>;
    /**
     * 获取会话分组详情
     *
     * @param request - GetConversationDetailRequest
     * @param headers - GetConversationDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetConversationDetailResponse
     */
    getConversationDetailWithOptions(request: GetConversationDetailRequest, headers: GetConversationDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationDetailResponse>;
    /**
     * 获取会话分组详情
     *
     * @param request - GetConversationDetailRequest
     * @returns GetConversationDetailResponse
     */
    getConversationDetail(request: GetConversationDetailRequest): Promise<GetConversationDetailResponse>;
    /**
     * 获取部门维度发布日志信息
     *
     * @param request - GetDingReportDeptSummaryRequest
     * @param headers - GetDingReportDeptSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDingReportDeptSummaryResponse
     */
    getDingReportDeptSummaryWithOptions(dataId: string, request: GetDingReportDeptSummaryRequest, headers: GetDingReportDeptSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDingReportDeptSummaryResponse>;
    /**
     * 获取部门维度发布日志信息
     *
     * @param request - GetDingReportDeptSummaryRequest
     * @returns GetDingReportDeptSummaryResponse
     */
    getDingReportDeptSummary(dataId: string, request: GetDingReportDeptSummaryRequest): Promise<GetDingReportDeptSummaryResponse>;
    /**
     * 获取组织维度发布日志信息
     *
     * @param headers - GetDingReportSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDingReportSummaryResponse
     */
    getDingReportSummaryWithOptions(dataId: string, headers: GetDingReportSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDingReportSummaryResponse>;
    /**
     * 获取组织维度发布日志信息
     * @returns GetDingReportSummaryResponse
     */
    getDingReportSummary(dataId: string): Promise<GetDingReportSummaryResponse>;
    /**
     * 获得部门维度用户创建文档数和创建文档人数
     *
     * @param request - GetDocCreatedDeptSummaryRequest
     * @param headers - GetDocCreatedDeptSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDocCreatedDeptSummaryResponse
     */
    getDocCreatedDeptSummaryWithOptions(dataId: string, request: GetDocCreatedDeptSummaryRequest, headers: GetDocCreatedDeptSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDocCreatedDeptSummaryResponse>;
    /**
     * 获得部门维度用户创建文档数和创建文档人数
     *
     * @param request - GetDocCreatedDeptSummaryRequest
     * @returns GetDocCreatedDeptSummaryResponse
     */
    getDocCreatedDeptSummary(dataId: string, request: GetDocCreatedDeptSummaryRequest): Promise<GetDocCreatedDeptSummaryResponse>;
    /**
     * 获取组织维度用户创建文档数和创建文档人数
     *
     * @param headers - GetDocCreatedSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDocCreatedSummaryResponse
     */
    getDocCreatedSummaryWithOptions(dataId: string, headers: GetDocCreatedSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetDocCreatedSummaryResponse>;
    /**
     * 获取组织维度用户创建文档数和创建文档人数
     * @returns GetDocCreatedSummaryResponse
     */
    getDocCreatedSummary(dataId: string): Promise<GetDocCreatedSummaryResponse>;
    /**
     * 获取专属账号所有组织列表
     *
     * @param request - GetExclusiveAccountAllOrgListRequest
     * @param headers - GetExclusiveAccountAllOrgListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetExclusiveAccountAllOrgListResponse
     */
    getExclusiveAccountAllOrgListWithOptions(request: GetExclusiveAccountAllOrgListRequest, headers: GetExclusiveAccountAllOrgListHeaders, runtime: $Util.RuntimeOptions): Promise<GetExclusiveAccountAllOrgListResponse>;
    /**
     * 获取专属账号所有组织列表
     *
     * @param request - GetExclusiveAccountAllOrgListRequest
     * @returns GetExclusiveAccountAllOrgListResponse
     */
    getExclusiveAccountAllOrgList(request: GetExclusiveAccountAllOrgListRequest): Promise<GetExclusiveAccountAllOrgListResponse>;
    /**
     * 获取部门维度发布智能填表数量和使用智能填表人数
     *
     * @param request - GetGeneralFormCreatedDeptSummaryRequest
     * @param headers - GetGeneralFormCreatedDeptSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGeneralFormCreatedDeptSummaryResponse
     */
    getGeneralFormCreatedDeptSummaryWithOptions(dataId: string, request: GetGeneralFormCreatedDeptSummaryRequest, headers: GetGeneralFormCreatedDeptSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetGeneralFormCreatedDeptSummaryResponse>;
    /**
     * 获取部门维度发布智能填表数量和使用智能填表人数
     *
     * @param request - GetGeneralFormCreatedDeptSummaryRequest
     * @returns GetGeneralFormCreatedDeptSummaryResponse
     */
    getGeneralFormCreatedDeptSummary(dataId: string, request: GetGeneralFormCreatedDeptSummaryRequest): Promise<GetGeneralFormCreatedDeptSummaryResponse>;
    /**
     * 获取组织维度发布智能填表数量和使用智能填表人数
     *
     * @param headers - GetGeneralFormCreatedSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGeneralFormCreatedSummaryResponse
     */
    getGeneralFormCreatedSummaryWithOptions(dataId: string, headers: GetGeneralFormCreatedSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetGeneralFormCreatedSummaryResponse>;
    /**
     * 获取组织维度发布智能填表数量和使用智能填表人数
     * @returns GetGeneralFormCreatedSummaryResponse
     */
    getGeneralFormCreatedSummary(dataId: string): Promise<GetGeneralFormCreatedSummaryResponse>;
    /**
     * 获取群活跃明细
     *
     * @param request - GetGroupActiveInfoRequest
     * @param headers - GetGroupActiveInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupActiveInfoResponse
     */
    getGroupActiveInfoWithOptions(request: GetGroupActiveInfoRequest, headers: GetGroupActiveInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetGroupActiveInfoResponse>;
    /**
     * 获取群活跃明细
     *
     * @param request - GetGroupActiveInfoRequest
     * @returns GetGroupActiveInfoResponse
     */
    getGroupActiveInfo(request: GetGroupActiveInfoRequest): Promise<GetGroupActiveInfoResponse>;
    /**
     * 根据群会话id获取群相关信息
     *
     * @param request - GetGroupInfoByCidRequest
     * @param headers - GetGroupInfoByCidHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupInfoByCidResponse
     */
    getGroupInfoByCidWithOptions(request: GetGroupInfoByCidRequest, headers: GetGroupInfoByCidHeaders, runtime: $Util.RuntimeOptions): Promise<GetGroupInfoByCidResponse>;
    /**
     * 根据群会话id获取群相关信息
     *
     * @param request - GetGroupInfoByCidRequest
     * @returns GetGroupInfoByCidResponse
     */
    getGroupInfoByCid(request: GetGroupInfoByCidRequest): Promise<GetGroupInfoByCidResponse>;
    /**
     * 根据群会话id获取组织cropid
     *
     * @param request - GetGroupOrgByCidRequest
     * @param headers - GetGroupOrgByCidHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetGroupOrgByCidResponse
     */
    getGroupOrgByCidWithOptions(request: GetGroupOrgByCidRequest, headers: GetGroupOrgByCidHeaders, runtime: $Util.RuntimeOptions): Promise<GetGroupOrgByCidResponse>;
    /**
     * 根据群会话id获取组织cropid
     *
     * @param request - GetGroupOrgByCidRequest
     * @returns GetGroupOrgByCidResponse
     */
    getGroupOrgByCid(request: GetGroupOrgByCidRequest): Promise<GetGroupOrgByCidResponse>;
    /**
     * 获取未活跃用户登陆统计明细
     *
     * @param request - GetInActiveUserListRequest
     * @param headers - GetInActiveUserListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInActiveUserListResponse
     */
    getInActiveUserListWithOptions(request: GetInActiveUserListRequest, headers: GetInActiveUserListHeaders, runtime: $Util.RuntimeOptions): Promise<GetInActiveUserListResponse>;
    /**
     * 获取未活跃用户登陆统计明细
     *
     * @param request - GetInActiveUserListRequest
     * @returns GetInActiveUserListResponse
     */
    getInActiveUserList(request: GetInActiveUserListRequest): Promise<GetInActiveUserListResponse>;
    /**
     * 获取最后一次验证通过的企业认证信息
     *
     * @param request - GetLastOrgAuthDataRequest
     * @param headers - GetLastOrgAuthDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetLastOrgAuthDataResponse
     */
    getLastOrgAuthDataWithOptions(request: GetLastOrgAuthDataRequest, headers: GetLastOrgAuthDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetLastOrgAuthDataResponse>;
    /**
     * 获取最后一次验证通过的企业认证信息
     *
     * @param request - GetLastOrgAuthDataRequest
     * @returns GetLastOrgAuthDataResponse
     */
    getLastOrgAuthData(request: GetLastOrgAuthDataRequest): Promise<GetLastOrgAuthDataResponse>;
    /**
     * 消息规则配置和群属性接口
     *
     * @param request - GetMsgConfigRequest
     * @param headers - GetMsgConfigHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMsgConfigResponse
     */
    getMsgConfigWithOptions(request: GetMsgConfigRequest, headers: GetMsgConfigHeaders, runtime: $Util.RuntimeOptions): Promise<GetMsgConfigResponse>;
    /**
     * 消息规则配置和群属性接口
     *
     * @param request - GetMsgConfigRequest
     * @returns GetMsgConfigResponse
     */
    getMsgConfig(request: GetMsgConfigRequest): Promise<GetMsgConfigResponse>;
    /**
     * 获取消息定位链接
     *
     * @param request - GetMsgLocationRequest
     * @param headers - GetMsgLocationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMsgLocationResponse
     */
    getMsgLocationWithOptions(request: GetMsgLocationRequest, headers: GetMsgLocationHeaders, runtime: $Util.RuntimeOptions): Promise<GetMsgLocationResponse>;
    /**
     * 获取消息定位链接
     *
     * @param request - GetMsgLocationRequest
     * @returns GetMsgLocationResponse
     */
    getMsgLocation(request: GetMsgLocationRequest): Promise<GetMsgLocationResponse>;
    /**
     * 获取oa后台操作日志记录
     *
     * @param request - GetOaOperatorLogListRequest
     * @param headers - GetOaOperatorLogListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOaOperatorLogListResponse
     */
    getOaOperatorLogListWithOptions(request: GetOaOperatorLogListRequest, headers: GetOaOperatorLogListHeaders, runtime: $Util.RuntimeOptions): Promise<GetOaOperatorLogListResponse>;
    /**
     * 获取oa后台操作日志记录
     *
     * @param request - GetOaOperatorLogListRequest
     * @returns GetOaOperatorLogListResponse
     */
    getOaOperatorLogList(request: GetOaOperatorLogListRequest): Promise<GetOaOperatorLogListResponse>;
    /**
     * 获取企业的外部审计群列表
     *
     * @param request - GetOutGroupsByPageRequest
     * @param headers - GetOutGroupsByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOutGroupsByPageResponse
     */
    getOutGroupsByPageWithOptions(request: GetOutGroupsByPageRequest, headers: GetOutGroupsByPageHeaders, runtime: $Util.RuntimeOptions): Promise<GetOutGroupsByPageResponse>;
    /**
     * 获取企业的外部审计群列表
     *
     * @param request - GetOutGroupsByPageRequest
     * @returns GetOutGroupsByPageResponse
     */
    getOutGroupsByPage(request: GetOutGroupsByPageRequest): Promise<GetOutGroupsByPageResponse>;
    /**
     * 获取外部审计群消息记录
     *
     * @param request - GetOutsideAuditGroupMessageByPageRequest
     * @param headers - GetOutsideAuditGroupMessageByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOutsideAuditGroupMessageByPageResponse
     */
    getOutsideAuditGroupMessageByPageWithOptions(request: GetOutsideAuditGroupMessageByPageRequest, headers: GetOutsideAuditGroupMessageByPageHeaders, runtime: $Util.RuntimeOptions): Promise<GetOutsideAuditGroupMessageByPageResponse>;
    /**
     * 获取外部审计群消息记录
     *
     * @param request - GetOutsideAuditGroupMessageByPageRequest
     * @returns GetOutsideAuditGroupMessageByPageResponse
     */
    getOutsideAuditGroupMessageByPage(request: GetOutsideAuditGroupMessageByPageRequest): Promise<GetOutsideAuditGroupMessageByPageResponse>;
    /**
     * 伙伴钉根据父标签查询子标签
     *
     * @param headers - GetPartnerTypeByParentIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPartnerTypeByParentIdResponse
     */
    getPartnerTypeByParentIdWithOptions(parentId: string, headers: GetPartnerTypeByParentIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetPartnerTypeByParentIdResponse>;
    /**
     * 伙伴钉根据父标签查询子标签
     * @returns GetPartnerTypeByParentIdResponse
     */
    getPartnerTypeByParentId(parentId: string): Promise<GetPartnerTypeByParentIdResponse>;
    /**
     * 获取公共设备列表。
     *
     * @param request - GetPublicDevicesRequest
     * @param headers - GetPublicDevicesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPublicDevicesResponse
     */
    getPublicDevicesWithOptions(request: GetPublicDevicesRequest, headers: GetPublicDevicesHeaders, runtime: $Util.RuntimeOptions): Promise<GetPublicDevicesResponse>;
    /**
     * 获取公共设备列表。
     *
     * @param request - GetPublicDevicesRequest
     * @returns GetPublicDevicesResponse
     */
    getPublicDevices(request: GetPublicDevicesRequest): Promise<GetPublicDevicesResponse>;
    /**
     * 获取互动服务窗相关数据
     *
     * @param request - GetPublisherSummaryRequest
     * @param headers - GetPublisherSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPublisherSummaryResponse
     */
    getPublisherSummaryWithOptions(dataId: string, request: GetPublisherSummaryRequest, headers: GetPublisherSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetPublisherSummaryResponse>;
    /**
     * 获取互动服务窗相关数据
     *
     * @param request - GetPublisherSummaryRequest
     * @returns GetPublisherSummaryResponse
     */
    getPublisherSummary(dataId: string, request: GetPublisherSummaryRequest): Promise<GetPublisherSummaryResponse>;
    /**
     * 获取实人认证接口调用记录
     *
     * @param request - GetRealPeopleRecordsRequest
     * @param headers - GetRealPeopleRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRealPeopleRecordsResponse
     */
    getRealPeopleRecordsWithOptions(request: GetRealPeopleRecordsRequest, headers: GetRealPeopleRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRealPeopleRecordsResponse>;
    /**
     * 获取实人认证接口调用记录
     *
     * @param request - GetRealPeopleRecordsRequest
     * @returns GetRealPeopleRecordsResponse
     */
    getRealPeopleRecords(request: GetRealPeopleRecordsRequest): Promise<GetRealPeopleRecordsResponse>;
    /**
     * 获取人脸对比接口调用记录
     *
     * @param request - GetRecognizeRecordsRequest
     * @param headers - GetRecognizeRecordsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRecognizeRecordsResponse
     */
    getRecognizeRecordsWithOptions(request: GetRecognizeRecordsRequest, headers: GetRecognizeRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecognizeRecordsResponse>;
    /**
     * 获取人脸对比接口调用记录
     *
     * @param request - GetRecognizeRecordsRequest
     * @returns GetRecognizeRecordsResponse
     */
    getRecognizeRecords(request: GetRecognizeRecordsRequest): Promise<GetRecognizeRecordsResponse>;
    /**
     * 根据机器人标识查询机器人信息
     *
     * @param request - GetRobotInfoByCodeRequest
     * @param headers - GetRobotInfoByCodeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRobotInfoByCodeResponse
     */
    getRobotInfoByCodeWithOptions(request: GetRobotInfoByCodeRequest, headers: GetRobotInfoByCodeHeaders, runtime: $Util.RuntimeOptions): Promise<GetRobotInfoByCodeResponse>;
    /**
     * 根据机器人标识查询机器人信息
     *
     * @param request - GetRobotInfoByCodeRequest
     * @returns GetRobotInfoByCodeResponse
     */
    getRobotInfoByCode(request: GetRobotInfoByCodeRequest): Promise<GetRobotInfoByCodeResponse>;
    /**
     * 获取安全管控卡片成员
     *
     * @param request - GetSecurityConfigMemberRequest
     * @param headers - GetSecurityConfigMemberHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSecurityConfigMemberResponse
     */
    getSecurityConfigMemberWithOptions(request: GetSecurityConfigMemberRequest, headers: GetSecurityConfigMemberHeaders, runtime: $Util.RuntimeOptions): Promise<GetSecurityConfigMemberResponse>;
    /**
     * 获取安全管控卡片成员
     *
     * @param request - GetSecurityConfigMemberRequest
     * @returns GetSecurityConfigMemberResponse
     */
    getSecurityConfigMember(request: GetSecurityConfigMemberRequest): Promise<GetSecurityConfigMemberResponse>;
    /**
     * 获取审计协议签署人员信息
     *
     * @param request - GetSignedDetailByPageRequest
     * @param headers - GetSignedDetailByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSignedDetailByPageResponse
     */
    getSignedDetailByPageWithOptions(request: GetSignedDetailByPageRequest, headers: GetSignedDetailByPageHeaders, runtime: $Util.RuntimeOptions): Promise<GetSignedDetailByPageResponse>;
    /**
     * 获取审计协议签署人员信息
     *
     * @param request - GetSignedDetailByPageRequest
     * @returns GetSignedDetailByPageResponse
     */
    getSignedDetailByPage(request: GetSignedDetailByPageRequest): Promise<GetSignedDetailByPageResponse>;
    /**
     * 获取多个可信设备信息，包括mac地址、staffId、platform
     *
     * @param request - GetTrustDeviceListRequest
     * @param headers - GetTrustDeviceListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTrustDeviceListResponse
     */
    getTrustDeviceListWithOptions(request: GetTrustDeviceListRequest, headers: GetTrustDeviceListHeaders, runtime: $Util.RuntimeOptions): Promise<GetTrustDeviceListResponse>;
    /**
     * 获取多个可信设备信息，包括mac地址、staffId、platform
     *
     * @param request - GetTrustDeviceListRequest
     * @returns GetTrustDeviceListResponse
     */
    getTrustDeviceList(request: GetTrustDeviceListRequest): Promise<GetTrustDeviceListResponse>;
    /**
     * 获得组织维度用户版本分布情况
     *
     * @param request - GetUserAppVersionSummaryRequest
     * @param headers - GetUserAppVersionSummaryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserAppVersionSummaryResponse
     */
    getUserAppVersionSummaryWithOptions(dataId: string, request: GetUserAppVersionSummaryRequest, headers: GetUserAppVersionSummaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserAppVersionSummaryResponse>;
    /**
     * 获得组织维度用户版本分布情况
     *
     * @param request - GetUserAppVersionSummaryRequest
     * @returns GetUserAppVersionSummaryResponse
     */
    getUserAppVersionSummary(dataId: string, request: GetUserAppVersionSummaryRequest): Promise<GetUserAppVersionSummaryResponse>;
    /**
     * 人脸录入状态查询
     *
     * @param request - GetUserFaceStateRequest
     * @param headers - GetUserFaceStateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserFaceStateResponse
     */
    getUserFaceStateWithOptions(request: GetUserFaceStateRequest, headers: GetUserFaceStateHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserFaceStateResponse>;
    /**
     * 人脸录入状态查询
     *
     * @param request - GetUserFaceStateRequest
     * @returns GetUserFaceStateResponse
     */
    getUserFaceState(request: GetUserFaceStateRequest): Promise<GetUserFaceStateResponse>;
    /**
     * 实人认证状态查询
     *
     * @param request - GetUserRealPeopleStateRequest
     * @param headers - GetUserRealPeopleStateHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserRealPeopleStateResponse
     */
    getUserRealPeopleStateWithOptions(request: GetUserRealPeopleStateRequest, headers: GetUserRealPeopleStateHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserRealPeopleStateResponse>;
    /**
     * 实人认证状态查询
     *
     * @param request - GetUserRealPeopleStateRequest
     * @returns GetUserRealPeopleStateResponse
     */
    getUserRealPeopleState(request: GetUserRealPeopleStateRequest): Promise<GetUserRealPeopleStateResponse>;
    /**
     * 获取用户停留时长
     *
     * @param request - GetUserStayLengthRequest
     * @param headers - GetUserStayLengthHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserStayLengthResponse
     */
    getUserStayLengthWithOptions(request: GetUserStayLengthRequest, headers: GetUserStayLengthHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserStayLengthResponse>;
    /**
     * 获取用户停留时长
     *
     * @param request - GetUserStayLengthRequest
     * @returns GetUserStayLengthResponse
     */
    getUserStayLength(request: GetUserStayLengthRequest): Promise<GetUserStayLengthResponse>;
    /**
     * 获取文件病毒扫描结果
     *
     * @param request - GetVirusScanResultRequest
     * @param headers - GetVirusScanResultHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetVirusScanResultResponse
     */
    getVirusScanResultWithOptions(request: GetVirusScanResultRequest, headers: GetVirusScanResultHeaders, runtime: $Util.RuntimeOptions): Promise<GetVirusScanResultResponse>;
    /**
     * 获取文件病毒扫描结果
     *
     * @param request - GetVirusScanResultRequest
     * @returns GetVirusScanResultResponse
     */
    getVirusScanResult(request: GetVirusScanResultRequest): Promise<GetVirusScanResultResponse>;
    /**
     * 根据群属性查询群ID
     *
     * @param request - GroupQueryByAttrRequest
     * @param headers - GroupQueryByAttrHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupQueryByAttrResponse
     */
    groupQueryByAttrWithOptions(request: GroupQueryByAttrRequest, headers: GroupQueryByAttrHeaders, runtime: $Util.RuntimeOptions): Promise<GroupQueryByAttrResponse>;
    /**
     * 根据群属性查询群ID
     *
     * @param request - GroupQueryByAttrRequest
     * @returns GroupQueryByAttrResponse
     */
    groupQueryByAttr(request: GroupQueryByAttrRequest): Promise<GroupQueryByAttrResponse>;
    /**
     * 根据群ID查询群属性
     *
     * @param request - GroupQueryByOpenIdRequest
     * @param headers - GroupQueryByOpenIdHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GroupQueryByOpenIdResponse
     */
    groupQueryByOpenIdWithOptions(request: GroupQueryByOpenIdRequest, headers: GroupQueryByOpenIdHeaders, runtime: $Util.RuntimeOptions): Promise<GroupQueryByOpenIdResponse>;
    /**
     * 根据群ID查询群属性
     *
     * @param request - GroupQueryByOpenIdRequest
     * @returns GroupQueryByOpenIdResponse
     */
    groupQueryByOpenId(request: GroupQueryByOpenIdRequest): Promise<GroupQueryByOpenIdResponse>;
    /**
     * 获取企业文件审计日志
     *
     * @param request - ListAuditLogRequest
     * @param headers - ListAuditLogHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuditLogResponse
     */
    listAuditLogWithOptions(request: ListAuditLogRequest, headers: ListAuditLogHeaders, runtime: $Util.RuntimeOptions): Promise<ListAuditLogResponse>;
    /**
     * 获取企业文件审计日志
     *
     * @param request - ListAuditLogRequest
     * @returns ListAuditLogResponse
     */
    listAuditLog(request: ListAuditLogRequest): Promise<ListAuditLogResponse>;
    /**
     * 根据机器人code列表查询机器人信息
     *
     * @param request - ListByCodesRequest
     * @param headers - ListByCodesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListByCodesResponse
     */
    listByCodesWithOptions(request: ListByCodesRequest, headers: ListByCodesHeaders, runtime: $Util.RuntimeOptions): Promise<ListByCodesResponse>;
    /**
     * 根据机器人code列表查询机器人信息
     *
     * @param request - ListByCodesRequest
     * @returns ListByCodesResponse
     */
    listByCodes(request: ListByCodesRequest): Promise<ListByCodesResponse>;
    /**
     * 根据插件id列表查询插件信息
     *
     * @param request - ListByPluginIdsRequest
     * @param headers - ListByPluginIdsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListByPluginIdsResponse
     */
    listByPluginIdsWithOptions(request: ListByPluginIdsRequest, headers: ListByPluginIdsHeaders, runtime: $Util.RuntimeOptions): Promise<ListByPluginIdsResponse>;
    /**
     * 根据插件id列表查询插件信息
     *
     * @param request - ListByPluginIdsRequest
     * @returns ListByPluginIdsResponse
     */
    listByPluginIds(request: ListByPluginIdsRequest): Promise<ListByPluginIdsResponse>;
    /**
     * 查询分组列表
     *
     * @param tmpReq - ListCategorysRequest
     * @param headers - ListCategorysHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListCategorysResponse
     */
    listCategorysWithOptions(tmpReq: ListCategorysRequest, headers: ListCategorysHeaders, runtime: $Util.RuntimeOptions): Promise<ListCategorysResponse>;
    /**
     * 查询分组列表
     *
     * @param request - ListCategorysRequest
     * @returns ListCategorysResponse
     */
    listCategorys(request: ListCategorysRequest): Promise<ListCategorysResponse>;
    /**
     * 通过手机号获取已加入的属于渠道组织的列表信息
     *
     * @param request - ListJoinOrgInfoRequest
     * @param headers - ListJoinOrgInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListJoinOrgInfoResponse
     */
    listJoinOrgInfoWithOptions(request: ListJoinOrgInfoRequest, headers: ListJoinOrgInfoHeaders, runtime: $Util.RuntimeOptions): Promise<ListJoinOrgInfoResponse>;
    /**
     * 通过手机号获取已加入的属于渠道组织的列表信息
     *
     * @param request - ListJoinOrgInfoRequest
     * @returns ListJoinOrgInfoResponse
     */
    listJoinOrgInfo(request: ListJoinOrgInfoRequest): Promise<ListJoinOrgInfoResponse>;
    /**
     * 获取小程序版本列表
     *
     * @param request - ListMiniAppAvailableVersionRequest
     * @param headers - ListMiniAppAvailableVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMiniAppAvailableVersionResponse
     */
    listMiniAppAvailableVersionWithOptions(request: ListMiniAppAvailableVersionRequest, headers: ListMiniAppAvailableVersionHeaders, runtime: $Util.RuntimeOptions): Promise<ListMiniAppAvailableVersionResponse>;
    /**
     * 获取小程序版本列表
     *
     * @param request - ListMiniAppAvailableVersionRequest
     * @returns ListMiniAppAvailableVersionResponse
     */
    listMiniAppAvailableVersion(request: ListMiniAppAvailableVersionRequest): Promise<ListMiniAppAvailableVersionResponse>;
    /**
     * 获取小程序历史版本列表
     *
     * @param request - ListMiniAppHistoryVersionRequest
     * @param headers - ListMiniAppHistoryVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListMiniAppHistoryVersionResponse
     */
    listMiniAppHistoryVersionWithOptions(request: ListMiniAppHistoryVersionRequest, headers: ListMiniAppHistoryVersionHeaders, runtime: $Util.RuntimeOptions): Promise<ListMiniAppHistoryVersionResponse>;
    /**
     * 获取小程序历史版本列表
     *
     * @param request - ListMiniAppHistoryVersionRequest
     * @returns ListMiniAppHistoryVersionResponse
     */
    listMiniAppHistoryVersion(request: ListMiniAppHistoryVersionRequest): Promise<ListMiniAppHistoryVersionResponse>;
    /**
     * 查询伙伴角色
     *
     * @param headers - ListPartnerRolesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPartnerRolesResponse
     */
    listPartnerRolesWithOptions(parentId: string, headers: ListPartnerRolesHeaders, runtime: $Util.RuntimeOptions): Promise<ListPartnerRolesResponse>;
    /**
     * 查询伙伴角色
     * @returns ListPartnerRolesResponse
     */
    listPartnerRoles(parentId: string): Promise<ListPartnerRolesResponse>;
    /**
     * 获取巡点信息列表
     *
     * @param request - ListPunchScheduleByConditionWithPagingRequest
     * @param headers - ListPunchScheduleByConditionWithPagingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListPunchScheduleByConditionWithPagingResponse
     */
    listPunchScheduleByConditionWithPagingWithOptions(request: ListPunchScheduleByConditionWithPagingRequest, headers: ListPunchScheduleByConditionWithPagingHeaders, runtime: $Util.RuntimeOptions): Promise<ListPunchScheduleByConditionWithPagingResponse>;
    /**
     * 获取巡点信息列表
     *
     * @param request - ListPunchScheduleByConditionWithPagingRequest
     * @returns ListPunchScheduleByConditionWithPagingResponse
     */
    listPunchScheduleByConditionWithPaging(request: ListPunchScheduleByConditionWithPagingRequest): Promise<ListPunchScheduleByConditionWithPagingResponse>;
    /**
     * 查询规则列表
     *
     * @param tmpReq - ListRulesRequest
     * @param headers - ListRulesHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListRulesResponse
     */
    listRulesWithOptions(tmpReq: ListRulesRequest, headers: ListRulesHeaders, runtime: $Util.RuntimeOptions): Promise<ListRulesResponse>;
    /**
     * 查询规则列表
     *
     * @param request - ListRulesRequest
     * @returns ListRulesResponse
     */
    listRules(request: ListRulesRequest): Promise<ListRulesResponse>;
    /**
     * 指定用户强制下线
     *
     * @param request - LogoutRequest
     * @param headers - LogoutHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LogoutResponse
     */
    logoutWithOptions(request: LogoutRequest, headers: LogoutHeaders, runtime: $Util.RuntimeOptions): Promise<LogoutResponse>;
    /**
     * 指定用户强制下线
     *
     * @param request - LogoutRequest
     * @returns LogoutResponse
     */
    logout(request: LogoutRequest): Promise<LogoutResponse>;
    /**
     * 购买权益包
     *
     * @param request - OpenBenefitPackageRequest
     * @param headers - OpenBenefitPackageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpenBenefitPackageResponse
     */
    openBenefitPackageWithOptions(request: OpenBenefitPackageRequest, headers: OpenBenefitPackageHeaders, runtime: $Util.RuntimeOptions): Promise<OpenBenefitPackageResponse>;
    /**
     * 购买权益包
     *
     * @param request - OpenBenefitPackageRequest
     * @returns OpenBenefitPackageResponse
     */
    openBenefitPackage(request: OpenBenefitPackageRequest): Promise<OpenBenefitPackageResponse>;
    /**
     * 商机冲突检测
     *
     * @param request - OpportunitySearchRequest
     * @param headers - OpportunitySearchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OpportunitySearchResponse
     */
    opportunitySearchWithOptions(request: OpportunitySearchRequest, headers: OpportunitySearchHeaders, runtime: $Util.RuntimeOptions): Promise<OpportunitySearchResponse>;
    /**
     * 商机冲突检测
     *
     * @param request - OpportunitySearchRequest
     * @returns OpportunitySearchResponse
     */
    opportunitySearch(request: OpportunitySearchRequest): Promise<OpportunitySearchResponse>;
    /**
     * 防作弊风险检测
     *
     * @param request - PreventCheatingCheckRiskRequest
     * @param headers - PreventCheatingCheckRiskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PreventCheatingCheckRiskResponse
     */
    preventCheatingCheckRiskWithOptions(request: PreventCheatingCheckRiskRequest, headers: PreventCheatingCheckRiskHeaders, runtime: $Util.RuntimeOptions): Promise<PreventCheatingCheckRiskResponse>;
    /**
     * 防作弊风险检测
     *
     * @param request - PreventCheatingCheckRiskRequest
     * @returns PreventCheatingCheckRiskResponse
     */
    preventCheatingCheckRisk(request: PreventCheatingCheckRiskRequest): Promise<PreventCheatingCheckRiskResponse>;
    /**
     * 发送文件更改的评论
     *
     * @param request - PublishFileChangeNoticeRequest
     * @param headers - PublishFileChangeNoticeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PublishFileChangeNoticeResponse
     */
    publishFileChangeNoticeWithOptions(request: PublishFileChangeNoticeRequest, headers: PublishFileChangeNoticeHeaders, runtime: $Util.RuntimeOptions): Promise<PublishFileChangeNoticeResponse>;
    /**
     * 发送文件更改的评论
     *
     * @param request - PublishFileChangeNoticeRequest
     * @returns PublishFileChangeNoticeResponse
     */
    publishFileChangeNotice(request: PublishFileChangeNoticeRequest): Promise<PublishFileChangeNoticeResponse>;
    /**
     * 发布规则
     *
     * @param request - PublishRuleRequest
     * @param headers - PublishRuleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PublishRuleResponse
     */
    publishRuleWithOptions(request: PublishRuleRequest, headers: PublishRuleHeaders, runtime: $Util.RuntimeOptions): Promise<PublishRuleResponse>;
    /**
     * 发布规则
     *
     * @param request - PublishRuleRequest
     * @returns PublishRuleResponse
     */
    publishRule(request: PublishRuleRequest): Promise<PublishRuleResponse>;
    /**
     * 推送专属设计中自建/第三方应用的小红点
     *
     * @param request - PushBadgeRequest
     * @param headers - PushBadgeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushBadgeResponse
     */
    pushBadgeWithOptions(request: PushBadgeRequest, headers: PushBadgeHeaders, runtime: $Util.RuntimeOptions): Promise<PushBadgeResponse>;
    /**
     * 推送专属设计中自建/第三方应用的小红点
     *
     * @param request - PushBadgeRequest
     * @returns PushBadgeResponse
     */
    pushBadge(request: PushBadgeRequest): Promise<PushBadgeResponse>;
    /**
     * 查询跨云存储配置
     *
     * @param request - QueryAcrossCloudStroageConfigsRequest
     * @param headers - QueryAcrossCloudStroageConfigsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAcrossCloudStroageConfigsResponse
     */
    queryAcrossCloudStroageConfigsWithOptions(request: QueryAcrossCloudStroageConfigsRequest, headers: QueryAcrossCloudStroageConfigsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAcrossCloudStroageConfigsResponse>;
    /**
     * 查询跨云存储配置
     *
     * @param request - QueryAcrossCloudStroageConfigsRequest
     * @returns QueryAcrossCloudStroageConfigsResponse
     */
    queryAcrossCloudStroageConfigs(request: QueryAcrossCloudStroageConfigsRequest): Promise<QueryAcrossCloudStroageConfigsResponse>;
    /**
     * 根据手机号查询渠道组织中的员工信息
     *
     * @param request - QueryChannelStaffInfoByMobileRequest
     * @param headers - QueryChannelStaffInfoByMobileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryChannelStaffInfoByMobileResponse
     */
    queryChannelStaffInfoByMobileWithOptions(request: QueryChannelStaffInfoByMobileRequest, headers: QueryChannelStaffInfoByMobileHeaders, runtime: $Util.RuntimeOptions): Promise<QueryChannelStaffInfoByMobileResponse>;
    /**
     * 根据手机号查询渠道组织中的员工信息
     *
     * @param request - QueryChannelStaffInfoByMobileRequest
     * @returns QueryChannelStaffInfoByMobileResponse
     */
    queryChannelStaffInfoByMobile(request: QueryChannelStaffInfoByMobileRequest): Promise<QueryChannelStaffInfoByMobileResponse>;
    /**
     * 获取分组下会话列表
     *
     * @param request - QueryConversationPageRequest
     * @param headers - QueryConversationPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryConversationPageResponse
     */
    queryConversationPageWithOptions(request: QueryConversationPageRequest, headers: QueryConversationPageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryConversationPageResponse>;
    /**
     * 获取分组下会话列表
     *
     * @param request - QueryConversationPageRequest
     * @returns QueryConversationPageResponse
     */
    queryConversationPage(request: QueryConversationPageRequest): Promise<QueryConversationPageResponse>;
    /**
     * 查询专属版权益
     *
     * @param headers - QueryExclusiveBenefitsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryExclusiveBenefitsResponse
     */
    queryExclusiveBenefitsWithOptions(headers: QueryExclusiveBenefitsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryExclusiveBenefitsResponse>;
    /**
     * 查询专属版权益
     * @returns QueryExclusiveBenefitsResponse
     */
    queryExclusiveBenefits(): Promise<QueryExclusiveBenefitsResponse>;
    /**
     * 伙伴钉根据uid查询人员的标签信息
     *
     * @param headers - QueryPartnerInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPartnerInfoResponse
     */
    queryPartnerInfoWithOptions(userId: string, headers: QueryPartnerInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPartnerInfoResponse>;
    /**
     * 伙伴钉根据uid查询人员的标签信息
     * @returns QueryPartnerInfoResponse
     */
    queryPartnerInfo(userId: string): Promise<QueryPartnerInfoResponse>;
    /**
     * 根据templateId查询模版信息
     *
     * @param headers - QueryTemplateInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryTemplateInfoResponse
     */
    queryTemplateInfoWithOptions(templateId: string, headers: QueryTemplateInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTemplateInfoResponse>;
    /**
     * 根据templateId查询模版信息
     * @returns QueryTemplateInfoResponse
     */
    queryTemplateInfo(templateId: string): Promise<QueryTemplateInfoResponse>;
    /**
     * 获取用户截屏操作记录
     *
     * @param request - QueryUserBehaviorRequest
     * @param headers - QueryUserBehaviorHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserBehaviorResponse
     */
    queryUserBehaviorWithOptions(request: QueryUserBehaviorRequest, headers: QueryUserBehaviorHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserBehaviorResponse>;
    /**
     * 获取用户截屏操作记录
     *
     * @param request - QueryUserBehaviorRequest
     * @returns QueryUserBehaviorResponse
     */
    queryUserBehavior(request: QueryUserBehaviorRequest): Promise<QueryUserBehaviorResponse>;
    /**
     * 小程序版本回滚
     *
     * @param request - RollbackMiniAppVersionRequest
     * @param headers - RollbackMiniAppVersionHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RollbackMiniAppVersionResponse
     */
    rollbackMiniAppVersionWithOptions(request: RollbackMiniAppVersionRequest, headers: RollbackMiniAppVersionHeaders, runtime: $Util.RuntimeOptions): Promise<RollbackMiniAppVersionResponse>;
    /**
     * 小程序版本回滚
     *
     * @param request - RollbackMiniAppVersionRequest
     * @returns RollbackMiniAppVersionResponse
     */
    rollbackMiniAppVersion(request: RollbackMiniAppVersionRequest): Promise<RollbackMiniAppVersionResponse>;
    /**
     * 按规则批量发消息
     *
     * @param request - RuleBatchReceiverRequest
     * @param headers - RuleBatchReceiverHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RuleBatchReceiverResponse
     */
    ruleBatchReceiverWithOptions(request: RuleBatchReceiverRequest, headers: RuleBatchReceiverHeaders, runtime: $Util.RuntimeOptions): Promise<RuleBatchReceiverResponse>;
    /**
     * 按规则批量发消息
     *
     * @param request - RuleBatchReceiverRequest
     * @returns RuleBatchReceiverResponse
     */
    ruleBatchReceiver(request: RuleBatchReceiverRequest): Promise<RuleBatchReceiverResponse>;
    /**
     * 新增跨云存储配置
     *
     * @param request - SaveAcrossCloudStroageConfigsRequest
     * @param headers - SaveAcrossCloudStroageConfigsHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveAcrossCloudStroageConfigsResponse
     */
    saveAcrossCloudStroageConfigsWithOptions(request: SaveAcrossCloudStroageConfigsRequest, headers: SaveAcrossCloudStroageConfigsHeaders, runtime: $Util.RuntimeOptions): Promise<SaveAcrossCloudStroageConfigsResponse>;
    /**
     * 新增跨云存储配置
     *
     * @param request - SaveAcrossCloudStroageConfigsRequest
     * @returns SaveAcrossCloudStroageConfigsResponse
     */
    saveAcrossCloudStroageConfigs(request: SaveAcrossCloudStroageConfigsRequest): Promise<SaveAcrossCloudStroageConfigsResponse>;
    /**
     * 保存并提交认证信息
     *
     * @param request - SaveAndSubmitAuthInfoRequest
     * @param headers - SaveAndSubmitAuthInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveAndSubmitAuthInfoResponse
     */
    saveAndSubmitAuthInfoWithOptions(request: SaveAndSubmitAuthInfoRequest, headers: SaveAndSubmitAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SaveAndSubmitAuthInfoResponse>;
    /**
     * 保存并提交认证信息
     *
     * @param request - SaveAndSubmitAuthInfoRequest
     * @returns SaveAndSubmitAuthInfoResponse
     */
    saveAndSubmitAuthInfo(request: SaveAndSubmitAuthInfoRequest): Promise<SaveAndSubmitAuthInfoResponse>;
    /**
     * 亿格云能力结合
     *
     * @param request - SaveOpenTerminalInfoRequest
     * @param headers - SaveOpenTerminalInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveOpenTerminalInfoResponse
     */
    saveOpenTerminalInfoWithOptions(request: SaveOpenTerminalInfoRequest, headers: SaveOpenTerminalInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SaveOpenTerminalInfoResponse>;
    /**
     * 亿格云能力结合
     *
     * @param request - SaveOpenTerminalInfoRequest
     * @returns SaveOpenTerminalInfoResponse
     */
    saveOpenTerminalInfo(request: SaveOpenTerminalInfoRequest): Promise<SaveOpenTerminalInfoResponse>;
    /**
     * 保存专属文件存储的功能项
     *
     * @param request - SaveStorageFunctionSwitchRequest
     * @param headers - SaveStorageFunctionSwitchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveStorageFunctionSwitchResponse
     */
    saveStorageFunctionSwitchWithOptions(request: SaveStorageFunctionSwitchRequest, headers: SaveStorageFunctionSwitchHeaders, runtime: $Util.RuntimeOptions): Promise<SaveStorageFunctionSwitchResponse>;
    /**
     * 保存专属文件存储的功能项
     *
     * @param request - SaveStorageFunctionSwitchRequest
     * @returns SaveStorageFunctionSwitchResponse
     */
    saveStorageFunctionSwitch(request: SaveStorageFunctionSwitchRequest): Promise<SaveStorageFunctionSwitchResponse>;
    /**
     * 保存专属文件存储整体开关
     *
     * @param request - SaveStorageSwitchRequest
     * @param headers - SaveStorageSwitchHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveStorageSwitchResponse
     */
    saveStorageSwitchWithOptions(request: SaveStorageSwitchRequest, headers: SaveStorageSwitchHeaders, runtime: $Util.RuntimeOptions): Promise<SaveStorageSwitchResponse>;
    /**
     * 保存专属文件存储整体开关
     *
     * @param request - SaveStorageSwitchRequest
     * @returns SaveStorageSwitchResponse
     */
    saveStorageSwitch(request: SaveStorageSwitchRequest): Promise<SaveStorageSwitchResponse>;
    /**
     * 用于提供mdm微应用白名单配置能力
     *
     * @param request - SaveWhiteAppRequest
     * @param headers - SaveWhiteAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SaveWhiteAppResponse
     */
    saveWhiteAppWithOptions(request: SaveWhiteAppRequest, headers: SaveWhiteAppHeaders, runtime: $Util.RuntimeOptions): Promise<SaveWhiteAppResponse>;
    /**
     * 用于提供mdm微应用白名单配置能力
     *
     * @param request - SaveWhiteAppRequest
     * @returns SaveWhiteAppResponse
     */
    saveWhiteApp(request: SaveWhiteAppRequest): Promise<SaveWhiteAppResponse>;
    /**
     * 查询企业内部群信息
     *
     * @param request - SearchOrgInnerGroupInfoRequest
     * @param headers - SearchOrgInnerGroupInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchOrgInnerGroupInfoResponse
     */
    searchOrgInnerGroupInfoWithOptions(request: SearchOrgInnerGroupInfoRequest, headers: SearchOrgInnerGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SearchOrgInnerGroupInfoResponse>;
    /**
     * 查询企业内部群信息
     *
     * @param request - SearchOrgInnerGroupInfoRequest
     * @returns SearchOrgInnerGroupInfoResponse
     */
    searchOrgInnerGroupInfo(request: SearchOrgInnerGroupInfoRequest): Promise<SearchOrgInnerGroupInfoResponse>;
    /**
     * 通过接口发送应用内DING
     *
     * @param request - SendAppDingRequest
     * @param headers - SendAppDingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendAppDingResponse
     */
    sendAppDingWithOptions(request: SendAppDingRequest, headers: SendAppDingHeaders, runtime: $Util.RuntimeOptions): Promise<SendAppDingResponse>;
    /**
     * 通过接口发送应用内DING
     *
     * @param request - SendAppDingRequest
     * @returns SendAppDingResponse
     */
    sendAppDing(request: SendAppDingRequest): Promise<SendAppDingResponse>;
    /**
     * 发送邀请函
     *
     * @param request - SendInvitationRequest
     * @param headers - SendInvitationHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendInvitationResponse
     */
    sendInvitationWithOptions(request: SendInvitationRequest, headers: SendInvitationHeaders, runtime: $Util.RuntimeOptions): Promise<SendInvitationResponse>;
    /**
     * 发送邀请函
     *
     * @param request - SendInvitationRequest
     * @returns SendInvitationResponse
     */
    sendInvitation(request: SendInvitationRequest): Promise<SendInvitationResponse>;
    /**
     * 通过接口发送电话DING
     *
     * @param request - SendPhoneDingRequest
     * @param headers - SendPhoneDingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendPhoneDingResponse
     */
    sendPhoneDingWithOptions(request: SendPhoneDingRequest, headers: SendPhoneDingHeaders, runtime: $Util.RuntimeOptions): Promise<SendPhoneDingResponse>;
    /**
     * 通过接口发送电话DING
     *
     * @param request - SendPhoneDingRequest
     * @returns SendPhoneDingResponse
     */
    sendPhoneDing(request: SendPhoneDingRequest): Promise<SendPhoneDingResponse>;
    /**
     * 设置会话所属分组
     *
     * @param request - SetConversationCategoryRequest
     * @param headers - SetConversationCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetConversationCategoryResponse
     */
    setConversationCategoryWithOptions(request: SetConversationCategoryRequest, headers: SetConversationCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<SetConversationCategoryResponse>;
    /**
     * 设置会话所属分组
     *
     * @param request - SetConversationCategoryRequest
     * @returns SetConversationCategoryResponse
     */
    setConversationCategory(request: SetConversationCategoryRequest): Promise<SetConversationCategoryResponse>;
    /**
     * 设置会话副标题
     *
     * @param request - SetConversationSubtitleRequest
     * @param headers - SetConversationSubtitleHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetConversationSubtitleResponse
     */
    setConversationSubtitleWithOptions(request: SetConversationSubtitleRequest, headers: SetConversationSubtitleHeaders, runtime: $Util.RuntimeOptions): Promise<SetConversationSubtitleResponse>;
    /**
     * 设置会话副标题
     *
     * @param request - SetConversationSubtitleRequest
     * @returns SetConversationSubtitleResponse
     */
    setConversationSubtitle(request: SetConversationSubtitleRequest): Promise<SetConversationSubtitleResponse>;
    /**
     * 设置会话所属顶部分组
     *
     * @param request - SetConversationTopCategoryRequest
     * @param headers - SetConversationTopCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetConversationTopCategoryResponse
     */
    setConversationTopCategoryWithOptions(request: SetConversationTopCategoryRequest, headers: SetConversationTopCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<SetConversationTopCategoryResponse>;
    /**
     * 设置会话所属顶部分组
     *
     * @param request - SetConversationTopCategoryRequest
     * @returns SetConversationTopCategoryResponse
     */
    setConversationTopCategory(request: SetConversationTopCategoryRequest): Promise<SetConversationTopCategoryResponse>;
    /**
     * 伙伴钉设置部门伙伴编码和伙伴类型
     *
     * @param request - SetDeptPartnerTypeAndNumRequest
     * @param headers - SetDeptPartnerTypeAndNumHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetDeptPartnerTypeAndNumResponse
     */
    setDeptPartnerTypeAndNumWithOptions(request: SetDeptPartnerTypeAndNumRequest, headers: SetDeptPartnerTypeAndNumHeaders, runtime: $Util.RuntimeOptions): Promise<SetDeptPartnerTypeAndNumResponse>;
    /**
     * 伙伴钉设置部门伙伴编码和伙伴类型
     *
     * @param request - SetDeptPartnerTypeAndNumRequest
     * @returns SetDeptPartnerTypeAndNumResponse
     */
    setDeptPartnerTypeAndNum(request: SetDeptPartnerTypeAndNumRequest): Promise<SetDeptPartnerTypeAndNumResponse>;
    /**
     * 设置企业全局顶部会话分组
     *
     * @param request - SetOrgTopConversationCategoryRequest
     * @param headers - SetOrgTopConversationCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetOrgTopConversationCategoryResponse
     */
    setOrgTopConversationCategoryWithOptions(request: SetOrgTopConversationCategoryRequest, headers: SetOrgTopConversationCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<SetOrgTopConversationCategoryResponse>;
    /**
     * 设置企业全局顶部会话分组
     *
     * @param request - SetOrgTopConversationCategoryRequest
     * @returns SetOrgTopConversationCategoryResponse
     */
    setOrgTopConversationCategory(request: SetOrgTopConversationCategoryRequest): Promise<SetOrgTopConversationCategoryResponse>;
    /**
     * 千人千面按规则批量发消息
     *
     * @param request - SpecialRuleBatchReceiverRequest
     * @param headers - SpecialRuleBatchReceiverHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SpecialRuleBatchReceiverResponse
     */
    specialRuleBatchReceiverWithOptions(request: SpecialRuleBatchReceiverRequest, headers: SpecialRuleBatchReceiverHeaders, runtime: $Util.RuntimeOptions): Promise<SpecialRuleBatchReceiverResponse>;
    /**
     * 千人千面按规则批量发消息
     *
     * @param request - SpecialRuleBatchReceiverRequest
     * @returns SpecialRuleBatchReceiverResponse
     */
    specialRuleBatchReceiver(request: SpecialRuleBatchReceiverRequest): Promise<SpecialRuleBatchReceiverResponse>;
    /**
     * 增加/删除任务人员
     *
     * @param request - TaskInfoAddDelTaskPersonRequest
     * @param headers - TaskInfoAddDelTaskPersonHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoAddDelTaskPersonResponse
     */
    taskInfoAddDelTaskPersonWithOptions(request: TaskInfoAddDelTaskPersonRequest, headers: TaskInfoAddDelTaskPersonHeaders, runtime: $Util.RuntimeOptions): Promise<TaskInfoAddDelTaskPersonResponse>;
    /**
     * 增加/删除任务人员
     *
     * @param request - TaskInfoAddDelTaskPersonRequest
     * @returns TaskInfoAddDelTaskPersonResponse
     */
    taskInfoAddDelTaskPerson(request: TaskInfoAddDelTaskPersonRequest): Promise<TaskInfoAddDelTaskPersonResponse>;
    /**
     * 删除任务
     *
     * @param request - TaskInfoCancelOrDelTaskRequest
     * @param headers - TaskInfoCancelOrDelTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoCancelOrDelTaskResponse
     */
    taskInfoCancelOrDelTaskWithOptions(request: TaskInfoCancelOrDelTaskRequest, headers: TaskInfoCancelOrDelTaskHeaders, runtime: $Util.RuntimeOptions): Promise<TaskInfoCancelOrDelTaskResponse>;
    /**
     * 删除任务
     *
     * @param request - TaskInfoCancelOrDelTaskRequest
     * @returns TaskInfoCancelOrDelTaskResponse
     */
    taskInfoCancelOrDelTask(request: TaskInfoCancelOrDelTaskRequest): Promise<TaskInfoCancelOrDelTaskResponse>;
    /**
     * 创建并启动任务
     *
     * @param request - TaskInfoCreateAndStartTaskRequest
     * @param headers - TaskInfoCreateAndStartTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoCreateAndStartTaskResponse
     */
    taskInfoCreateAndStartTaskWithOptions(request: TaskInfoCreateAndStartTaskRequest, headers: TaskInfoCreateAndStartTaskHeaders, runtime: $Util.RuntimeOptions): Promise<TaskInfoCreateAndStartTaskResponse>;
    /**
     * 创建并启动任务
     *
     * @param request - TaskInfoCreateAndStartTaskRequest
     * @returns TaskInfoCreateAndStartTaskResponse
     */
    taskInfoCreateAndStartTask(request: TaskInfoCreateAndStartTaskRequest): Promise<TaskInfoCreateAndStartTaskResponse>;
    /**
     * 完成任务
     *
     * @param request - TaskInfoFinishTaskRequest
     * @param headers - TaskInfoFinishTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoFinishTaskResponse
     */
    taskInfoFinishTaskWithOptions(request: TaskInfoFinishTaskRequest, headers: TaskInfoFinishTaskHeaders, runtime: $Util.RuntimeOptions): Promise<TaskInfoFinishTaskResponse>;
    /**
     * 完成任务
     *
     * @param request - TaskInfoFinishTaskRequest
     * @returns TaskInfoFinishTaskResponse
     */
    taskInfoFinishTask(request: TaskInfoFinishTaskRequest): Promise<TaskInfoFinishTaskResponse>;
    /**
     * 更新任务
     *
     * @param request - TaskInfoUpdateTaskRequest
     * @param headers - TaskInfoUpdateTaskHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TaskInfoUpdateTaskResponse
     */
    taskInfoUpdateTaskWithOptions(request: TaskInfoUpdateTaskRequest, headers: TaskInfoUpdateTaskHeaders, runtime: $Util.RuntimeOptions): Promise<TaskInfoUpdateTaskResponse>;
    /**
     * 更新任务
     *
     * @param request - TaskInfoUpdateTaskRequest
     * @returns TaskInfoUpdateTaskResponse
     */
    taskInfoUpdateTask(request: TaskInfoUpdateTaskRequest): Promise<TaskInfoUpdateTaskResponse>;
    /**
     * 切换组织归属
     *
     * @param request - TransferExclusiveAccountOrgRequest
     * @param headers - TransferExclusiveAccountOrgHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns TransferExclusiveAccountOrgResponse
     */
    transferExclusiveAccountOrgWithOptions(request: TransferExclusiveAccountOrgRequest, headers: TransferExclusiveAccountOrgHeaders, runtime: $Util.RuntimeOptions): Promise<TransferExclusiveAccountOrgResponse>;
    /**
     * 切换组织归属
     *
     * @param request - TransferExclusiveAccountOrgRequest
     * @returns TransferExclusiveAccountOrgResponse
     */
    transferExclusiveAccountOrg(request: TransferExclusiveAccountOrgRequest): Promise<TransferExclusiveAccountOrgResponse>;
    /**
     * 更改分组名称
     *
     * @param request - UpdateCategoryNameRequest
     * @param headers - UpdateCategoryNameHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateCategoryNameResponse
     */
    updateCategoryNameWithOptions(request: UpdateCategoryNameRequest, headers: UpdateCategoryNameHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCategoryNameResponse>;
    /**
     * 更改分组名称
     *
     * @param request - UpdateCategoryNameRequest
     * @returns UpdateCategoryNameResponse
     */
    updateCategoryName(request: UpdateCategoryNameRequest): Promise<UpdateCategoryNameResponse>;
    /**
     * 变更群聊类型
     *
     * @param request - UpdateConversationTypeRequest
     * @param headers - UpdateConversationTypeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateConversationTypeResponse
     */
    updateConversationTypeWithOptions(request: UpdateConversationTypeRequest, headers: UpdateConversationTypeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateConversationTypeResponse>;
    /**
     * 变更群聊类型
     *
     * @param request - UpdateConversationTypeRequest
     * @returns UpdateConversationTypeResponse
     */
    updateConversationType(request: UpdateConversationTypeRequest): Promise<UpdateConversationTypeResponse>;
    /**
     * 更新发送文件的检测状态
     *
     * @param request - UpdateFileStatusRequest
     * @param headers - UpdateFileStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateFileStatusResponse
     */
    updateFileStatusWithOptions(request: UpdateFileStatusRequest, headers: UpdateFileStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateFileStatusResponse>;
    /**
     * 更新发送文件的检测状态
     *
     * @param request - UpdateFileStatusRequest
     * @returns UpdateFileStatusResponse
     */
    updateFileStatus(request: UpdateFileStatusRequest): Promise<UpdateFileStatusResponse>;
    /**
     * 发布版本
     *
     * @param request - UpdateMiniAppVersionStatusRequest
     * @param headers - UpdateMiniAppVersionStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateMiniAppVersionStatusResponse
     */
    updateMiniAppVersionStatusWithOptions(request: UpdateMiniAppVersionStatusRequest, headers: UpdateMiniAppVersionStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMiniAppVersionStatusResponse>;
    /**
     * 发布版本
     *
     * @param request - UpdateMiniAppVersionStatusRequest
     * @returns UpdateMiniAppVersionStatusResponse
     */
    updateMiniAppVersionStatus(request: UpdateMiniAppVersionStatusRequest): Promise<UpdateMiniAppVersionStatusResponse>;
    /**
     * 修改伙伴类型可见性
     *
     * @param request - UpdatePartnerVisibilityRequest
     * @param headers - UpdatePartnerVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdatePartnerVisibilityResponse
     */
    updatePartnerVisibilityWithOptions(request: UpdatePartnerVisibilityRequest, headers: UpdatePartnerVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePartnerVisibilityResponse>;
    /**
     * 修改伙伴类型可见性
     *
     * @param request - UpdatePartnerVisibilityRequest
     * @returns UpdatePartnerVisibilityResponse
     */
    updatePartnerVisibility(request: UpdatePartnerVisibilityRequest): Promise<UpdatePartnerVisibilityResponse>;
    /**
     * 专属一线版-企业修改员工license
     *
     * @param request - UpdateRealmLicenseRequest
     * @param headers - UpdateRealmLicenseHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRealmLicenseResponse
     */
    updateRealmLicenseWithOptions(request: UpdateRealmLicenseRequest, headers: UpdateRealmLicenseHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRealmLicenseResponse>;
    /**
     * 专属一线版-企业修改员工license
     *
     * @param request - UpdateRealmLicenseRequest
     * @returns UpdateRealmLicenseResponse
     */
    updateRealmLicense(request: UpdateRealmLicenseRequest): Promise<UpdateRealmLicenseResponse>;
    /**
     * 修改角色可见性
     *
     * @param request - UpdateRoleVisibilityRequest
     * @param headers - UpdateRoleVisibilityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateRoleVisibilityResponse
     */
    updateRoleVisibilityWithOptions(request: UpdateRoleVisibilityRequest, headers: UpdateRoleVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRoleVisibilityResponse>;
    /**
     * 修改角色可见性
     *
     * @param request - UpdateRoleVisibilityRequest
     * @returns UpdateRoleVisibilityResponse
     */
    updateRoleVisibility(request: UpdateRoleVisibilityRequest): Promise<UpdateRoleVisibilityResponse>;
    /**
     * 更新组织专属存储模式
     *
     * @param request - UpdateStorageModeRequest
     * @param headers - UpdateStorageModeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateStorageModeResponse
     */
    updateStorageModeWithOptions(request: UpdateStorageModeRequest, headers: UpdateStorageModeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateStorageModeResponse>;
    /**
     * 更新组织专属存储模式
     *
     * @param request - UpdateStorageModeRequest
     * @returns UpdateStorageModeResponse
     */
    updateStorageMode(request: UpdateStorageModeRequest): Promise<UpdateStorageModeResponse>;
    /**
     * 允许三方调用该API，决定对应的语音消息管控状态
     *
     * @param request - UpdateVoiceMsgCtrlStatusRequest
     * @param headers - UpdateVoiceMsgCtrlStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateVoiceMsgCtrlStatusResponse
     */
    updateVoiceMsgCtrlStatusWithOptions(request: UpdateVoiceMsgCtrlStatusRequest, headers: UpdateVoiceMsgCtrlStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateVoiceMsgCtrlStatusResponse>;
    /**
     * 允许三方调用该API，决定对应的语音消息管控状态
     *
     * @param request - UpdateVoiceMsgCtrlStatusRequest
     * @returns UpdateVoiceMsgCtrlStatusResponse
     */
    updateVoiceMsgCtrlStatus(request: UpdateVoiceMsgCtrlStatusRequest): Promise<UpdateVoiceMsgCtrlStatusResponse>;
}
