/**
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class PushLiveActivityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushLiveActivityRequest extends $tea.Model {
    activityEventData?: PushLiveActivityRequestActivityEventData;
    activityEventOption?: PushLiveActivityRequestActivityEventOption;
    /**
     * @example
     * bizUniqueId
     */
    activityId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushLiveActivityResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushLiveActivityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushLiveActivityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveActivityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveActivityRequest extends $tea.Model {
    activityEventData?: SendLiveActivityRequestActivityEventData;
    activityEventOption?: SendLiveActivityRequestActivityEventOption;
    /**
     * @example
     * bizUniqueId
     */
    activityId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveActivityResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveActivityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendLiveActivityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushLiveActivityRequestActivityEventData extends $tea.Model {
    i18nContentState?: any;
    /**
     * @example
     * ride_with_alibtrip
     */
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushLiveActivityRequestActivityEventOption extends $tea.Model {
    /**
     * @example
     * 1686903998
     */
    dismissalDate?: number;
    /**
     * @example
     * update
     */
    pushType?: string;
    /**
     * @example
     * 1686903998
     */
    sendDate?: number;
    /**
     * @example
     * 1686903998
     */
    staleDate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveActivityRequestActivityEventData extends $tea.Model {
    i18nContentState?: any;
    /**
     * @example
     * ride_with_alibtrip
     */
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendLiveActivityRequestActivityEventOption extends $tea.Model {
    /**
     * @example
     * 1686903998
     */
    dismissalDate?: number;
    /**
     * @example
     * update
     */
    pushType?: string;
    /**
     * @example
     * 1686903998
     */
    sendDate?: number;
    /**
     * @example
     * 1686903998
     */
    staleDate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    /**
     * 实时活动发送接口
     *
     * @param request - PushLiveActivityRequest
     * @param headers - PushLiveActivityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PushLiveActivityResponse
     */
    pushLiveActivityWithOptions(request: PushLiveActivityRequest, headers: PushLiveActivityHeaders, runtime: $Util.RuntimeOptions): Promise<PushLiveActivityResponse>;
    /**
     * 实时活动发送接口
     *
     * @param request - PushLiveActivityRequest
     * @returns PushLiveActivityResponse
     */
    pushLiveActivity(request: PushLiveActivityRequest): Promise<PushLiveActivityResponse>;
    /**
     * 发送实时活动
     *
     * @param request - SendLiveActivityRequest
     * @param headers - SendLiveActivityHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SendLiveActivityResponse
     */
    sendLiveActivityWithOptions(request: SendLiveActivityRequest, headers: SendLiveActivityHeaders, runtime: $Util.RuntimeOptions): Promise<SendLiveActivityResponse>;
    /**
     * 发送实时活动
     *
     * @param request - SendLiveActivityRequest
     * @returns SendLiveActivityResponse
     */
    sendLiveActivity(request: SendLiveActivityRequest): Promise<SendLiveActivityResponse>;
}
