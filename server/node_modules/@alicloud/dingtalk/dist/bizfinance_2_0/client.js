"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkCommonInvokeRequest = exports.LinkCommonInvokeHeaders = exports.IssueInvoiceWithOrderResponse = exports.IssueInvoiceWithOrderResponseBody = exports.IssueInvoiceWithOrderRequest = exports.IssueInvoiceWithOrderHeaders = exports.GetSupplierResponse = exports.GetSupplierResponseBody = exports.GetSupplierRequest = exports.GetSupplierHeaders = exports.GetReceiptResponse = exports.GetReceiptResponseBody = exports.GetReceiptRequest = exports.GetReceiptHeaders = exports.GetProjectResponse = exports.GetProjectResponseBody = exports.GetProjectRequest = exports.GetProjectHeaders = exports.GetFinanceAccountResponse = exports.GetFinanceAccountResponseBody = exports.GetFinanceAccountRequest = exports.GetFinanceAccountHeaders = exports.GetCategoryResponse = exports.GetCategoryResponseBody = exports.GetCategoryRequest = exports.GetCategoryHeaders = exports.CheckVoucherStatusResponse = exports.CheckVoucherStatusResponseBody = exports.CheckVoucherStatusRequest = exports.CheckVoucherStatusHeaders = exports.BatchSyncBankReceiptResponse = exports.BatchSyncBankReceiptResponseBody = exports.BatchSyncBankReceiptRequest = exports.BatchSyncBankReceiptHeaders = exports.BatchQueryPaymentRecallFileResponse = exports.BatchQueryPaymentRecallFileResponseBody = exports.BatchQueryPaymentRecallFileRequest = exports.BatchQueryPaymentRecallFileHeaders = exports.BatchQueryOrgInvoiceUrlResponse = exports.BatchQueryOrgInvoiceUrlResponseBody = exports.BatchQueryOrgInvoiceUrlRequest = exports.BatchQueryOrgInvoiceUrlHeaders = exports.BatchDeleteReceiptResponse = exports.BatchDeleteReceiptResponseBody = exports.BatchDeleteReceiptRequest = exports.BatchDeleteReceiptHeaders = exports.BankGatewayInvokeResponse = exports.BankGatewayInvokeResponseBody = exports.BankGatewayInvokeRequest = exports.BankGatewayInvokeHeaders = void 0;
exports.QuerySupplierByPageResponseBody = exports.QuerySupplierByPageRequest = exports.QuerySupplierByPageHeaders = exports.QueryReceiptForInvoiceResponse = exports.QueryReceiptForInvoiceResponseBody = exports.QueryReceiptForInvoiceRequest = exports.QueryReceiptForInvoiceHeaders = exports.QueryProjectByPageResponse = exports.QueryProjectByPageResponseBody = exports.QueryProjectByPageRequest = exports.QueryProjectByPageHeaders = exports.QueryPaymentStatusResponse = exports.QueryPaymentStatusResponseBody = exports.QueryPaymentStatusRequest = exports.QueryPaymentStatusHeaders = exports.QueryPaymentRecallFileResponse = exports.QueryPaymentRecallFileResponseBody = exports.QueryPaymentRecallFileRequest = exports.QueryPaymentRecallFileHeaders = exports.QueryInvoiceTransferDataResponse = exports.QueryInvoiceTransferDataResponseBody = exports.QueryInvoiceTransferDataShrinkRequest = exports.QueryInvoiceTransferDataRequest = exports.QueryInvoiceTransferDataHeaders = exports.QueryInstancePaymentOrderDetailResponse = exports.QueryInstancePaymentOrderDetailResponseBody = exports.QueryInstancePaymentOrderDetailRequest = exports.QueryInstancePaymentOrderDetailHeaders = exports.QueryEnterpriseAccountByPageResponse = exports.QueryEnterpriseAccountByPageResponseBody = exports.QueryEnterpriseAccountByPageRequest = exports.QueryEnterpriseAccountByPageHeaders = exports.QueryCustomerByPageResponse = exports.QueryCustomerByPageResponseBody = exports.QueryCustomerByPageRequest = exports.QueryCustomerByPageHeaders = exports.QueryCategoryByPageResponse = exports.QueryCategoryByPageResponseBody = exports.QueryCategoryByPageRequest = exports.QueryCategoryByPageHeaders = exports.QueryAccountTradeByPageResponse = exports.QueryAccountTradeByPageResponseBody = exports.QueryAccountTradeByPageRequest = exports.QueryAccountTradeByPageHeaders = exports.OrderBillingResponse = exports.OrderBillingResponseBody = exports.OrderBillingRequest = exports.OrderBillingHeaders = exports.LinkCommonInvokeResponse = exports.LinkCommonInvokeResponseBody = void 0;
exports.QueryInvoiceTransferDataRequestBody = exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO = exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO = exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO = exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO = exports.QueryEnterpriseAccountByPageResponseBodyList = exports.QueryCustomerByPageResponseBodyList = exports.QueryCategoryByPageResponseBodyList = exports.QueryAccountTradeByPageResponseBodyResult = exports.QueryAccountTradeByPageResponseBodyResultReceiptFile = exports.QueryAccountTradeByPageRequestFilter = exports.OrderBillingRequestProducts = exports.OrderBillingRequestAdditionInfos = exports.IssueInvoiceWithOrderRequestContent = exports.IssueInvoiceWithOrderRequestContentProducts = exports.IssueInvoiceWithOrderRequestContentAdditionInfo = exports.BatchSyncBankReceiptRequestBody = exports.BatchQueryPaymentRecallFileResponseBodyPaymentRecallFileList = exports.BatchQueryOrgInvoiceUrlResponseBodyOrgInvoiceUrlList = exports.BatchQueryOrgInvoiceUrlResponseBodyFailInvoiceList = exports.BatchQueryOrgInvoiceUrlRequestInvoiceKeyVOList = exports.UpdateInvoiceUrlResponse = exports.UpdateInvoiceUrlResponseBody = exports.UpdateInvoiceUrlShrinkRequest = exports.UpdateInvoiceUrlRequest = exports.UpdateInvoiceUrlHeaders = exports.UpdateInvoiceDataTransferDoneResponse = exports.UpdateInvoiceDataTransferDoneResponseBody = exports.UpdateInvoiceDataTransferDoneHeaders = exports.UpdateInstanceOrderInfoResponse = exports.UpdateInstanceOrderInfoResponseBody = exports.UpdateInstanceOrderInfoShrinkRequest = exports.UpdateInstanceOrderInfoRequest = exports.UpdateInstanceOrderInfoHeaders = exports.SyncReceiptRecallResponse = exports.SyncReceiptRecallResponseBody = exports.SyncReceiptRecallRequest = exports.SyncReceiptRecallHeaders = exports.SignEnterpriseAccountResponse = exports.SignEnterpriseAccountResponseBody = exports.SignEnterpriseAccountRequest = exports.SignEnterpriseAccountHeaders = exports.QueryUserRoleListResponse = exports.QueryUserRoleListResponseBody = exports.QueryUserRoleListRequest = exports.QueryUserRoleListHeaders = exports.QueryUseNewInvoiceAppResponse = exports.QueryUseNewInvoiceAppResponseBody = exports.QueryUseNewInvoiceAppHeaders = exports.QuerySupplierByPageResponse = void 0;
exports.UpdateInvoiceUrlResponseBodyResult = exports.UpdateInvoiceUrlResponseBodyResultFailInvoiceList = exports.UpdateInvoiceUrlRequestBody = exports.UpdateInvoiceUrlRequestBodyUrlList = exports.UpdateInstanceOrderInfoRequestPayerBank = exports.QueryUserRoleListResponseBodyRoleVOList = exports.QueryUserRoleListResponseBodyFinanceEmpDeptOpenList = exports.QuerySupplierByPageResponseBodyList = exports.QueryReceiptForInvoiceResponseBodyList = exports.QueryReceiptForInvoiceResponseBodyListProductInfoList = exports.QueryReceiptForInvoiceResponseBodyListCustomer = exports.QueryReceiptForInvoiceResponseBodyListCreator = exports.QueryProjectByPageResponseBodyList = exports.QueryPaymentStatusResponseBodyPayerAccountInfo = exports.QueryPaymentStatusResponseBodyPayerAccountInfoBankOpenDTO = exports.QueryPaymentStatusResponseBodyPayeeAccountInfo = exports.QueryPaymentStatusResponseBodyPayeeAccountInfoBankOpenDTO = exports.QueryPaymentRecallFileResponseBodyPaymentRecallFileList = void 0;
// This file is auto-generated, don't edit it
/**
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BankGatewayInvokeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeHeaders = BankGatewayInvokeHeaders;
class BankGatewayInvokeRequest extends $tea.Model {
    static names() {
        return {
            actionType: 'actionType',
            inputData: 'inputData',
            url: 'url',
        };
    }
    static types() {
        return {
            actionType: 'string',
            inputData: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeRequest = BankGatewayInvokeRequest;
class BankGatewayInvokeResponseBody extends $tea.Model {
    static names() {
        return {
            outputData: 'outputData',
        };
    }
    static types() {
        return {
            outputData: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeResponseBody = BankGatewayInvokeResponseBody;
class BankGatewayInvokeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BankGatewayInvokeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeResponse = BankGatewayInvokeResponse;
class BatchDeleteReceiptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptHeaders = BatchDeleteReceiptHeaders;
class BatchDeleteReceiptRequest extends $tea.Model {
    static names() {
        return {
            instanceIdList: 'instanceIdList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            instanceIdList: { 'type': 'array', 'itemType': 'string' },
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptRequest = BatchDeleteReceiptRequest;
class BatchDeleteReceiptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptResponseBody = BatchDeleteReceiptResponseBody;
class BatchDeleteReceiptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchDeleteReceiptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptResponse = BatchDeleteReceiptResponse;
class BatchQueryOrgInvoiceUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlHeaders = BatchQueryOrgInvoiceUrlHeaders;
class BatchQueryOrgInvoiceUrlRequest extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            invoiceKeyVOList: 'invoiceKeyVOList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            invoiceKeyVOList: { 'type': 'array', 'itemType': BatchQueryOrgInvoiceUrlRequestInvoiceKeyVOList },
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlRequest = BatchQueryOrgInvoiceUrlRequest;
class BatchQueryOrgInvoiceUrlResponseBody extends $tea.Model {
    static names() {
        return {
            failInvoiceList: 'failInvoiceList',
            orgInvoiceUrlList: 'orgInvoiceUrlList',
        };
    }
    static types() {
        return {
            failInvoiceList: { 'type': 'array', 'itemType': BatchQueryOrgInvoiceUrlResponseBodyFailInvoiceList },
            orgInvoiceUrlList: { 'type': 'array', 'itemType': BatchQueryOrgInvoiceUrlResponseBodyOrgInvoiceUrlList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlResponseBody = BatchQueryOrgInvoiceUrlResponseBody;
class BatchQueryOrgInvoiceUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryOrgInvoiceUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlResponse = BatchQueryOrgInvoiceUrlResponse;
class BatchQueryPaymentRecallFileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryPaymentRecallFileHeaders = BatchQueryPaymentRecallFileHeaders;
class BatchQueryPaymentRecallFileRequest extends $tea.Model {
    static names() {
        return {
            detailIdList: 'detailIdList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            detailIdList: { 'type': 'array', 'itemType': 'string' },
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryPaymentRecallFileRequest = BatchQueryPaymentRecallFileRequest;
class BatchQueryPaymentRecallFileResponseBody extends $tea.Model {
    static names() {
        return {
            paymentRecallFileList: 'paymentRecallFileList',
        };
    }
    static types() {
        return {
            paymentRecallFileList: { 'type': 'array', 'itemType': BatchQueryPaymentRecallFileResponseBodyPaymentRecallFileList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryPaymentRecallFileResponseBody = BatchQueryPaymentRecallFileResponseBody;
class BatchQueryPaymentRecallFileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryPaymentRecallFileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryPaymentRecallFileResponse = BatchQueryPaymentRecallFileResponse;
class BatchSyncBankReceiptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptHeaders = BatchSyncBankReceiptHeaders;
class BatchSyncBankReceiptRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': BatchSyncBankReceiptRequestBody },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptRequest = BatchSyncBankReceiptRequest;
class BatchSyncBankReceiptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptResponseBody = BatchSyncBankReceiptResponseBody;
class BatchSyncBankReceiptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchSyncBankReceiptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptResponse = BatchSyncBankReceiptResponse;
class CheckVoucherStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckVoucherStatusHeaders = CheckVoucherStatusHeaders;
class CheckVoucherStatusRequest extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            endTime: 'endTime',
            financeType: 'financeType',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            taxNo: 'taxNo',
            verifyStatus: 'verifyStatus',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            endTime: 'number',
            financeType: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            taxNo: 'string',
            verifyStatus: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckVoucherStatusRequest = CheckVoucherStatusRequest;
class CheckVoucherStatusResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckVoucherStatusResponseBody = CheckVoucherStatusResponseBody;
class CheckVoucherStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckVoucherStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckVoucherStatusResponse = CheckVoucherStatusResponse;
class GetCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryHeaders = GetCategoryHeaders;
class GetCategoryRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryRequest = GetCategoryRequest;
class GetCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            remark: 'remark',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            remark: 'string',
            status: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryResponseBody = GetCategoryResponseBody;
class GetCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryResponse = GetCategoryResponse;
class GetFinanceAccountHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountHeaders = GetFinanceAccountHeaders;
class GetFinanceAccountRequest extends $tea.Model {
    static names() {
        return {
            accountCode: 'accountCode',
        };
    }
    static types() {
        return {
            accountCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountRequest = GetFinanceAccountRequest;
class GetFinanceAccountResponseBody extends $tea.Model {
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            accountantBookIdList: 'accountantBookIdList',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountResponseBody = GetFinanceAccountResponseBody;
class GetFinanceAccountResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFinanceAccountResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountResponse = GetFinanceAccountResponse;
class GetProjectHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectHeaders = GetProjectHeaders;
class GetProjectRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectRequest = GetProjectRequest;
class GetProjectResponseBody extends $tea.Model {
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectResponseBody = GetProjectResponseBody;
class GetProjectResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProjectResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectResponse = GetProjectResponse;
class GetReceiptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptHeaders = GetReceiptHeaders;
class GetReceiptRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            modelId: 'modelId',
        };
    }
    static types() {
        return {
            code: 'string',
            modelId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptRequest = GetReceiptRequest;
class GetReceiptResponseBody extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            data: 'data',
            modelId: 'modelId',
            source: 'source',
        };
    }
    static types() {
        return {
            appId: 'string',
            data: 'string',
            modelId: 'string',
            source: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptResponseBody = GetReceiptResponseBody;
class GetReceiptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetReceiptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptResponse = GetReceiptResponse;
class GetSupplierHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierHeaders = GetSupplierHeaders;
class GetSupplierRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierRequest = GetSupplierRequest;
class GetSupplierResponseBody extends $tea.Model {
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierResponseBody = GetSupplierResponseBody;
class GetSupplierResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSupplierResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierResponse = GetSupplierResponse;
class IssueInvoiceWithOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderHeaders = IssueInvoiceWithOrderHeaders;
class IssueInvoiceWithOrderRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            financeAppKey: 'financeAppKey',
            operator: 'operator',
            signature: 'signature',
        };
    }
    static types() {
        return {
            content: IssueInvoiceWithOrderRequestContent,
            financeAppKey: 'string',
            operator: 'string',
            signature: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderRequest = IssueInvoiceWithOrderRequest;
class IssueInvoiceWithOrderResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderResponseBody = IssueInvoiceWithOrderResponseBody;
class IssueInvoiceWithOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IssueInvoiceWithOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderResponse = IssueInvoiceWithOrderResponse;
class LinkCommonInvokeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeHeaders = LinkCommonInvokeHeaders;
class LinkCommonInvokeRequest extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            data: 'data',
            invokeId: 'invokeId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizType: 'string',
            data: 'string',
            invokeId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeRequest = LinkCommonInvokeRequest;
class LinkCommonInvokeResponseBody extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            data: 'data',
            invokeId: 'invokeId',
        };
    }
    static types() {
        return {
            bizType: 'string',
            data: 'string',
            invokeId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeResponseBody = LinkCommonInvokeResponseBody;
class LinkCommonInvokeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LinkCommonInvokeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeResponse = LinkCommonInvokeResponse;
class OrderBillingHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderBillingHeaders = OrderBillingHeaders;
class OrderBillingRequest extends $tea.Model {
    static names() {
        return {
            additionInfos: 'additionInfos',
            appKey: 'appKey',
            applyPerson: 'applyPerson',
            invoiceRemark: 'invoiceRemark',
            invoiceType: 'invoiceType',
            isNaturalPerson: 'isNaturalPerson',
            operator: 'operator',
            orderId: 'orderId',
            payee: 'payee',
            phone: 'phone',
            products: 'products',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankName: 'purchaserBankName',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            reviewer: 'reviewer',
            signature: 'signature',
            taxSign: 'taxSign',
        };
    }
    static types() {
        return {
            additionInfos: { 'type': 'array', 'itemType': OrderBillingRequestAdditionInfos },
            appKey: 'string',
            applyPerson: 'string',
            invoiceRemark: 'string',
            invoiceType: 'string',
            isNaturalPerson: 'boolean',
            operator: 'string',
            orderId: 'string',
            payee: 'string',
            phone: 'string',
            products: { 'type': 'array', 'itemType': OrderBillingRequestProducts },
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankName: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            reviewer: 'string',
            signature: 'string',
            taxSign: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderBillingRequest = OrderBillingRequest;
class OrderBillingResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderBillingResponseBody = OrderBillingResponseBody;
class OrderBillingResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OrderBillingResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderBillingResponse = OrderBillingResponse;
class QueryAccountTradeByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageHeaders = QueryAccountTradeByPageHeaders;
class QueryAccountTradeByPageRequest extends $tea.Model {
    static names() {
        return {
            accountId: 'accountId',
            endDate: 'endDate',
            filter: 'filter',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startDate: 'startDate',
            userId: 'userId',
        };
    }
    static types() {
        return {
            accountId: 'string',
            endDate: 'number',
            filter: QueryAccountTradeByPageRequestFilter,
            pageNumber: 'number',
            pageSize: 'number',
            startDate: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageRequest = QueryAccountTradeByPageRequest;
class QueryAccountTradeByPageResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryAccountTradeByPageResponseBodyResult },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageResponseBody = QueryAccountTradeByPageResponseBody;
class QueryAccountTradeByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAccountTradeByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageResponse = QueryAccountTradeByPageResponse;
class QueryCategoryByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageHeaders = QueryCategoryByPageHeaders;
class QueryCategoryByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            type: 'type',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageRequest = QueryCategoryByPageRequest;
class QueryCategoryByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCategoryByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageResponseBody = QueryCategoryByPageResponseBody;
class QueryCategoryByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCategoryByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageResponse = QueryCategoryByPageResponse;
class QueryCustomerByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageHeaders = QueryCustomerByPageHeaders;
class QueryCustomerByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageRequest = QueryCustomerByPageRequest;
class QueryCustomerByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCustomerByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageResponseBody = QueryCustomerByPageResponseBody;
class QueryCustomerByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCustomerByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageResponse = QueryCustomerByPageResponse;
class QueryEnterpriseAccountByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageHeaders = QueryEnterpriseAccountByPageHeaders;
class QueryEnterpriseAccountByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageRequest = QueryEnterpriseAccountByPageRequest;
class QueryEnterpriseAccountByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryEnterpriseAccountByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageResponseBody = QueryEnterpriseAccountByPageResponseBody;
class QueryEnterpriseAccountByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryEnterpriseAccountByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageResponse = QueryEnterpriseAccountByPageResponse;
class QueryInstancePaymentOrderDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailHeaders = QueryInstancePaymentOrderDetailHeaders;
class QueryInstancePaymentOrderDetailRequest extends $tea.Model {
    static names() {
        return {
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailRequest = QueryInstancePaymentOrderDetailRequest;
class QueryInstancePaymentOrderDetailResponseBody extends $tea.Model {
    static names() {
        return {
            amount: 'amount',
            instanceId: 'instanceId',
            payeeAccountDTO: 'payeeAccountDTO',
            payerAccountDTO: 'payerAccountDTO',
            remark: 'remark',
            usage: 'usage',
            userId: 'userId',
        };
    }
    static types() {
        return {
            amount: 'string',
            instanceId: 'string',
            payeeAccountDTO: QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO,
            payerAccountDTO: QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO,
            remark: 'string',
            usage: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBody = QueryInstancePaymentOrderDetailResponseBody;
class QueryInstancePaymentOrderDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryInstancePaymentOrderDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponse = QueryInstancePaymentOrderDetailResponse;
class QueryInvoiceTransferDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInvoiceTransferDataHeaders = QueryInvoiceTransferDataHeaders;
class QueryInvoiceTransferDataRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: QueryInvoiceTransferDataRequestBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInvoiceTransferDataRequest = QueryInvoiceTransferDataRequest;
class QueryInvoiceTransferDataShrinkRequest extends $tea.Model {
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInvoiceTransferDataShrinkRequest = QueryInvoiceTransferDataShrinkRequest;
class QueryInvoiceTransferDataResponseBody extends $tea.Model {
    static names() {
        return {
            keyToData: 'keyToData',
        };
    }
    static types() {
        return {
            keyToData: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInvoiceTransferDataResponseBody = QueryInvoiceTransferDataResponseBody;
class QueryInvoiceTransferDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryInvoiceTransferDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInvoiceTransferDataResponse = QueryInvoiceTransferDataResponse;
class QueryPaymentRecallFileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentRecallFileHeaders = QueryPaymentRecallFileHeaders;
class QueryPaymentRecallFileRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentRecallFileRequest = QueryPaymentRecallFileRequest;
class QueryPaymentRecallFileResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            paymentRecallFileList: 'paymentRecallFileList',
        };
    }
    static types() {
        return {
            corpId: 'string',
            paymentRecallFileList: { 'type': 'array', 'itemType': QueryPaymentRecallFileResponseBodyPaymentRecallFileList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentRecallFileResponseBody = QueryPaymentRecallFileResponseBody;
class QueryPaymentRecallFileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPaymentRecallFileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentRecallFileResponse = QueryPaymentRecallFileResponse;
class QueryPaymentStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusHeaders = QueryPaymentStatusHeaders;
class QueryPaymentStatusRequest extends $tea.Model {
    static names() {
        return {
            instanceId: 'instanceId',
            orderNo: 'orderNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            orderNo: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusRequest = QueryPaymentStatusRequest;
class QueryPaymentStatusResponseBody extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
            failReason: 'failReason',
            instanceId: 'instanceId',
            orderNo: 'orderNo',
            payeeAccountInfo: 'payeeAccountInfo',
            payerAccountInfo: 'payerAccountInfo',
            paymentStatus: 'paymentStatus',
            paymentTime: 'paymentTime',
            remark: 'remark',
            usage: 'usage',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            failReason: 'string',
            instanceId: 'string',
            orderNo: 'string',
            payeeAccountInfo: QueryPaymentStatusResponseBodyPayeeAccountInfo,
            payerAccountInfo: QueryPaymentStatusResponseBodyPayerAccountInfo,
            paymentStatus: 'string',
            paymentTime: 'string',
            remark: 'string',
            usage: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusResponseBody = QueryPaymentStatusResponseBody;
class QueryPaymentStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPaymentStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusResponse = QueryPaymentStatusResponse;
class QueryProjectByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageHeaders = QueryProjectByPageHeaders;
class QueryProjectByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageRequest = QueryProjectByPageRequest;
class QueryProjectByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryProjectByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageResponseBody = QueryProjectByPageResponseBody;
class QueryProjectByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProjectByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageResponse = QueryProjectByPageResponse;
class QueryReceiptForInvoiceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceHeaders = QueryReceiptForInvoiceHeaders;
class QueryReceiptForInvoiceRequest extends $tea.Model {
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            applyStatusList: 'applyStatusList',
            bizStatusList: 'bizStatusList',
            companyCode: 'companyCode',
            endTime: 'endTime',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            receiptStatusList: 'receiptStatusList',
            searchParams: 'searchParams',
            startTime: 'startTime',
            title: 'title',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            applyStatusList: { 'type': 'array', 'itemType': 'string' },
            bizStatusList: { 'type': 'array', 'itemType': 'string' },
            companyCode: 'string',
            endTime: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            receiptStatusList: { 'type': 'array', 'itemType': 'string' },
            searchParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            startTime: 'number',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceRequest = QueryReceiptForInvoiceRequest;
class QueryReceiptForInvoiceResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'string',
            list: { 'type': 'array', 'itemType': QueryReceiptForInvoiceResponseBodyList },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceResponseBody = QueryReceiptForInvoiceResponseBody;
class QueryReceiptForInvoiceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReceiptForInvoiceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceResponse = QueryReceiptForInvoiceResponse;
class QuerySupplierByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageHeaders = QuerySupplierByPageHeaders;
class QuerySupplierByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageRequest = QuerySupplierByPageRequest;
class QuerySupplierByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QuerySupplierByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageResponseBody = QuerySupplierByPageResponseBody;
class QuerySupplierByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySupplierByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageResponse = QuerySupplierByPageResponse;
class QueryUseNewInvoiceAppHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUseNewInvoiceAppHeaders = QueryUseNewInvoiceAppHeaders;
class QueryUseNewInvoiceAppResponseBody extends $tea.Model {
    static names() {
        return {
            useNew: 'useNew',
        };
    }
    static types() {
        return {
            useNew: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUseNewInvoiceAppResponseBody = QueryUseNewInvoiceAppResponseBody;
class QueryUseNewInvoiceAppResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUseNewInvoiceAppResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUseNewInvoiceAppResponse = QueryUseNewInvoiceAppResponse;
class QueryUserRoleListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListHeaders = QueryUserRoleListHeaders;
class QueryUserRoleListRequest extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            userId: 'userId',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListRequest = QueryUserRoleListRequest;
class QueryUserRoleListResponseBody extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            financeEmpDeptOpenList: 'financeEmpDeptOpenList',
            roleVOList: 'roleVOList',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            financeEmpDeptOpenList: { 'type': 'array', 'itemType': QueryUserRoleListResponseBodyFinanceEmpDeptOpenList },
            roleVOList: { 'type': 'array', 'itemType': QueryUserRoleListResponseBodyRoleVOList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponseBody = QueryUserRoleListResponseBody;
class QueryUserRoleListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserRoleListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponse = QueryUserRoleListResponse;
class SignEnterpriseAccountHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountHeaders = SignEnterpriseAccountHeaders;
class SignEnterpriseAccountRequest extends $tea.Model {
    static names() {
        return {
            bankCardNo: 'bankCardNo',
            bankOpenId: 'bankOpenId',
            channelType: 'channelType',
            operator: 'operator',
            signOperateType: 'signOperateType',
        };
    }
    static types() {
        return {
            bankCardNo: 'string',
            bankOpenId: 'string',
            channelType: 'string',
            operator: 'string',
            signOperateType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountRequest = SignEnterpriseAccountRequest;
class SignEnterpriseAccountResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountResponseBody = SignEnterpriseAccountResponseBody;
class SignEnterpriseAccountResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SignEnterpriseAccountResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountResponse = SignEnterpriseAccountResponse;
class SyncReceiptRecallHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallHeaders = SyncReceiptRecallHeaders;
class SyncReceiptRecallRequest extends $tea.Model {
    static names() {
        return {
            fileDownloadUrl: 'fileDownloadUrl',
            fileName: 'fileName',
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            fileDownloadUrl: 'string',
            fileName: 'string',
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallRequest = SyncReceiptRecallRequest;
class SyncReceiptRecallResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallResponseBody = SyncReceiptRecallResponseBody;
class SyncReceiptRecallResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SyncReceiptRecallResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallResponse = SyncReceiptRecallResponse;
class UpdateInstanceOrderInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoHeaders = UpdateInstanceOrderInfoHeaders;
class UpdateInstanceOrderInfoRequest extends $tea.Model {
    static names() {
        return {
            failReason: 'failReason',
            orderNo: 'orderNo',
            outOrderNo: 'outOrderNo',
            payerBank: 'payerBank',
            paymentTime: 'paymentTime',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            failReason: 'string',
            orderNo: 'string',
            outOrderNo: 'string',
            payerBank: UpdateInstanceOrderInfoRequestPayerBank,
            paymentTime: 'number',
            status: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoRequest = UpdateInstanceOrderInfoRequest;
class UpdateInstanceOrderInfoShrinkRequest extends $tea.Model {
    static names() {
        return {
            failReason: 'failReason',
            orderNo: 'orderNo',
            outOrderNo: 'outOrderNo',
            payerBankShrink: 'payerBank',
            paymentTime: 'paymentTime',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            failReason: 'string',
            orderNo: 'string',
            outOrderNo: 'string',
            payerBankShrink: 'string',
            paymentTime: 'number',
            status: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoShrinkRequest = UpdateInstanceOrderInfoShrinkRequest;
class UpdateInstanceOrderInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoResponseBody = UpdateInstanceOrderInfoResponseBody;
class UpdateInstanceOrderInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInstanceOrderInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoResponse = UpdateInstanceOrderInfoResponse;
class UpdateInvoiceDataTransferDoneHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceDataTransferDoneHeaders = UpdateInvoiceDataTransferDoneHeaders;
class UpdateInvoiceDataTransferDoneResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceDataTransferDoneResponseBody = UpdateInvoiceDataTransferDoneResponseBody;
class UpdateInvoiceDataTransferDoneResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceDataTransferDoneResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceDataTransferDoneResponse = UpdateInvoiceDataTransferDoneResponse;
class UpdateInvoiceUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlHeaders = UpdateInvoiceUrlHeaders;
class UpdateInvoiceUrlRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: UpdateInvoiceUrlRequestBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlRequest = UpdateInvoiceUrlRequest;
class UpdateInvoiceUrlShrinkRequest extends $tea.Model {
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlShrinkRequest = UpdateInvoiceUrlShrinkRequest;
class UpdateInvoiceUrlResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateInvoiceUrlResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlResponseBody = UpdateInvoiceUrlResponseBody;
class UpdateInvoiceUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlResponse = UpdateInvoiceUrlResponse;
class BatchQueryOrgInvoiceUrlRequestInvoiceKeyVOList extends $tea.Model {
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlRequestInvoiceKeyVOList = BatchQueryOrgInvoiceUrlRequestInvoiceKeyVOList;
class BatchQueryOrgInvoiceUrlResponseBodyFailInvoiceList extends $tea.Model {
    static names() {
        return {
            errorMsg: 'errorMsg',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            errorMsg: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlResponseBodyFailInvoiceList = BatchQueryOrgInvoiceUrlResponseBodyFailInvoiceList;
class BatchQueryOrgInvoiceUrlResponseBodyOrgInvoiceUrlList extends $tea.Model {
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            ofdUrl: 'ofdUrl',
            originFileType: 'originFileType',
            originFileUrl: 'originFileUrl',
            pdfUrl: 'pdfUrl',
            xmlUrl: 'xmlUrl',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
            ofdUrl: 'string',
            originFileType: 'string',
            originFileUrl: 'string',
            pdfUrl: 'string',
            xmlUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryOrgInvoiceUrlResponseBodyOrgInvoiceUrlList = BatchQueryOrgInvoiceUrlResponseBodyOrgInvoiceUrlList;
class BatchQueryPaymentRecallFileResponseBodyPaymentRecallFileList extends $tea.Model {
    static names() {
        return {
            detailId: 'detailId',
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            recallFileUrl: 'recallFileUrl',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            detailId: 'string',
            fileId: 'string',
            fileName: 'string',
            fileSize: 'string',
            fileType: 'string',
            recallFileUrl: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchQueryPaymentRecallFileResponseBodyPaymentRecallFileList = BatchQueryPaymentRecallFileResponseBodyPaymentRecallFileList;
class BatchSyncBankReceiptRequestBody extends $tea.Model {
    static names() {
        return {
            fileDownloadUrl: 'fileDownloadUrl',
            fileName: 'fileName',
            messageId: 'messageId',
            messageIdType: 'messageIdType',
        };
    }
    static types() {
        return {
            fileDownloadUrl: 'string',
            fileName: 'string',
            messageId: 'string',
            messageIdType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptRequestBody = BatchSyncBankReceiptRequestBody;
class IssueInvoiceWithOrderRequestContentAdditionInfo extends $tea.Model {
    static names() {
        return {
            additionContent: 'additionContent',
            additionName: 'additionName',
            dataType: 'dataType',
        };
    }
    static types() {
        return {
            additionContent: 'string',
            additionName: 'string',
            dataType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderRequestContentAdditionInfo = IssueInvoiceWithOrderRequestContentAdditionInfo;
class IssueInvoiceWithOrderRequestContentProducts extends $tea.Model {
    static names() {
        return {
            amountIncludeTax: 'amountIncludeTax',
            productName: 'productName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            specs: 'specs',
            taxSign: 'taxSign',
            unit: 'unit',
        };
    }
    static types() {
        return {
            amountIncludeTax: 'string',
            productName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            specs: 'string',
            taxSign: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderRequestContentProducts = IssueInvoiceWithOrderRequestContentProducts;
class IssueInvoiceWithOrderRequestContent extends $tea.Model {
    static names() {
        return {
            additionInfo: 'additionInfo',
            applyPerson: 'applyPerson',
            bankAccount: 'bankAccount',
            bankName: 'bankName',
            invoiceRemark: 'invoiceRemark',
            invoiceType: 'invoiceType',
            naturalPerson: 'naturalPerson',
            orderId: 'orderId',
            payee: 'payee',
            phone: 'phone',
            products: 'products',
            purchaser: 'purchaser',
            purchaserAddress: 'purchaserAddress',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            reviewer: 'reviewer',
            taxnum: 'taxnum',
        };
    }
    static types() {
        return {
            additionInfo: { 'type': 'array', 'itemType': IssueInvoiceWithOrderRequestContentAdditionInfo },
            applyPerson: 'string',
            bankAccount: 'string',
            bankName: 'string',
            invoiceRemark: 'string',
            invoiceType: 'number',
            naturalPerson: 'string',
            orderId: 'string',
            payee: 'string',
            phone: 'string',
            products: { 'type': 'array', 'itemType': IssueInvoiceWithOrderRequestContentProducts },
            purchaser: 'string',
            purchaserAddress: 'string',
            purchaserTel: 'string',
            remark: 'string',
            reviewer: 'string',
            taxnum: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.IssueInvoiceWithOrderRequestContent = IssueInvoiceWithOrderRequestContent;
class OrderBillingRequestAdditionInfos extends $tea.Model {
    static names() {
        return {
            additionContent: 'additionContent',
            additionName: 'additionName',
            dataType: 'dataType',
        };
    }
    static types() {
        return {
            additionContent: 'string',
            additionName: 'string',
            dataType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderBillingRequestAdditionInfos = OrderBillingRequestAdditionInfos;
class OrderBillingRequestProducts extends $tea.Model {
    static names() {
        return {
            amountWithTax: 'amountWithTax',
            productName: 'productName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            specification: 'specification',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amountWithTax: 'string',
            productName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            specification: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderBillingRequestProducts = OrderBillingRequestProducts;
class QueryAccountTradeByPageRequestFilter extends $tea.Model {
    static names() {
        return {
            endAmount: 'endAmount',
            otherAccountName: 'otherAccountName',
            startAmount: 'startAmount',
            tradeType: 'tradeType',
        };
    }
    static types() {
        return {
            endAmount: 'string',
            otherAccountName: 'string',
            startAmount: 'string',
            tradeType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageRequestFilter = QueryAccountTradeByPageRequestFilter;
class QueryAccountTradeByPageResponseBodyResultReceiptFile extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            previewUrl: 'previewUrl',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'number',
            fileType: 'string',
            previewUrl: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageResponseBodyResultReceiptFile = QueryAccountTradeByPageResponseBodyResultReceiptFile;
class QueryAccountTradeByPageResponseBodyResult extends $tea.Model {
    static names() {
        return {
            balance: 'balance',
            detailId: 'detailId',
            instanceId: 'instanceId',
            instanceTitle: 'instanceTitle',
            instanceUrl: 'instanceUrl',
            otherAccountName: 'otherAccountName',
            otherAccountNo: 'otherAccountNo',
            receiptFile: 'receiptFile',
            remark: 'remark',
            tradeAmount: 'tradeAmount',
            tradeNo: 'tradeNo',
            tradeTime: 'tradeTime',
            tradeType: 'tradeType',
        };
    }
    static types() {
        return {
            balance: 'string',
            detailId: 'string',
            instanceId: 'string',
            instanceTitle: 'string',
            instanceUrl: 'string',
            otherAccountName: 'string',
            otherAccountNo: 'string',
            receiptFile: QueryAccountTradeByPageResponseBodyResultReceiptFile,
            remark: 'string',
            tradeAmount: 'string',
            tradeNo: 'string',
            tradeTime: 'number',
            tradeType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAccountTradeByPageResponseBodyResult = QueryAccountTradeByPageResponseBodyResult;
class QueryCategoryByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            remark: 'remark',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            remark: 'string',
            status: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageResponseBodyList = QueryCategoryByPageResponseBodyList;
class QueryCustomerByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageResponseBodyList = QueryCustomerByPageResponseBodyList;
class QueryEnterpriseAccountByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
            signStatus: 'signStatus',
            supportReceipt: 'supportReceipt',
            supportTradeDetail: 'supportTradeDetail',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
            signStatus: 'string',
            supportReceipt: 'boolean',
            supportTradeDetail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageResponseBodyList = QueryEnterpriseAccountByPageResponseBodyList;
class QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO extends $tea.Model {
    static names() {
        return {
            accountName: 'accountName',
            bankBranchCode: 'bankBranchCode',
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankCode: 'bankCode',
            bankName: 'bankName',
            type: 'type',
        };
    }
    static types() {
        return {
            accountName: 'string',
            bankBranchCode: 'string',
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankCode: 'string',
            bankName: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO = QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO;
class QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO extends $tea.Model {
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO = QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO;
class QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO extends $tea.Model {
    static names() {
        return {
            accountName: 'accountName',
            bankBranchCode: 'bankBranchCode',
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankCode: 'bankCode',
            bankName: 'bankName',
            type: 'type',
        };
    }
    static types() {
        return {
            accountName: 'string',
            bankBranchCode: 'string',
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankCode: 'string',
            bankName: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO = QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO;
class QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO extends $tea.Model {
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
            enterpriseAccountCode: 'enterpriseAccountCode',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO,
            enterpriseAccountCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO = QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO;
class QueryInvoiceTransferDataRequestBody extends $tea.Model {
    static names() {
        return {
            keys: 'keys',
        };
    }
    static types() {
        return {
            keys: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInvoiceTransferDataRequestBody = QueryInvoiceTransferDataRequestBody;
class QueryPaymentRecallFileResponseBodyPaymentRecallFileList extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileSize: 'fileSize',
            fileType: 'fileType',
            instanceId: 'instanceId',
            orderNo: 'orderNo',
            previewUrl: 'previewUrl',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileSize: 'string',
            fileType: 'string',
            instanceId: 'string',
            orderNo: 'string',
            previewUrl: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentRecallFileResponseBodyPaymentRecallFileList = QueryPaymentRecallFileResponseBodyPaymentRecallFileList;
class QueryPaymentStatusResponseBodyPayeeAccountInfoBankOpenDTO extends $tea.Model {
    static names() {
        return {
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankName: 'bankName',
        };
    }
    static types() {
        return {
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusResponseBodyPayeeAccountInfoBankOpenDTO = QueryPaymentStatusResponseBodyPayeeAccountInfoBankOpenDTO;
class QueryPaymentStatusResponseBodyPayeeAccountInfo extends $tea.Model {
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryPaymentStatusResponseBodyPayeeAccountInfoBankOpenDTO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusResponseBodyPayeeAccountInfo = QueryPaymentStatusResponseBodyPayeeAccountInfo;
class QueryPaymentStatusResponseBodyPayerAccountInfoBankOpenDTO extends $tea.Model {
    static names() {
        return {
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankName: 'bankName',
        };
    }
    static types() {
        return {
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusResponseBodyPayerAccountInfoBankOpenDTO = QueryPaymentStatusResponseBodyPayerAccountInfoBankOpenDTO;
class QueryPaymentStatusResponseBodyPayerAccountInfo extends $tea.Model {
    static names() {
        return {
            accountType: 'accountType',
            bankOpenDTO: 'bankOpenDTO',
            enterpriseAccountCode: 'enterpriseAccountCode',
        };
    }
    static types() {
        return {
            accountType: 'string',
            bankOpenDTO: QueryPaymentStatusResponseBodyPayerAccountInfoBankOpenDTO,
            enterpriseAccountCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryPaymentStatusResponseBodyPayerAccountInfo = QueryPaymentStatusResponseBodyPayerAccountInfo;
class QueryProjectByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            caode: 'caode',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            caode: 'string',
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageResponseBodyList = QueryProjectByPageResponseBodyList;
class QueryReceiptForInvoiceResponseBodyListCreator extends $tea.Model {
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceResponseBodyListCreator = QueryReceiptForInvoiceResponseBodyListCreator;
class QueryReceiptForInvoiceResponseBodyListCustomer extends $tea.Model {
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceResponseBodyListCustomer = QueryReceiptForInvoiceResponseBodyListCustomer;
class QueryReceiptForInvoiceResponseBodyListProductInfoList extends $tea.Model {
    static names() {
        return {
            amountWithTax: 'amountWithTax',
            amountWithoutTax: 'amountWithoutTax',
            discountAmount: 'discountAmount',
            name: 'name',
            quantity: 'quantity',
            specification: 'specification',
            taxClassificationCode: 'taxClassificationCode',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPriceWithTax: 'unitPriceWithTax',
            unitPriceWithoutTax: 'unitPriceWithoutTax',
            withTax: 'withTax',
        };
    }
    static types() {
        return {
            amountWithTax: 'string',
            amountWithoutTax: 'string',
            discountAmount: 'string',
            name: 'string',
            quantity: 'string',
            specification: 'string',
            taxClassificationCode: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPriceWithTax: 'string',
            unitPriceWithoutTax: 'string',
            withTax: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceResponseBodyListProductInfoList = QueryReceiptForInvoiceResponseBodyListProductInfoList;
class QueryReceiptForInvoiceResponseBodyList extends $tea.Model {
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            amount: 'amount',
            applyStatus: 'applyStatus',
            bizStatus: 'bizStatus',
            businessId: 'businessId',
            companyCode: 'companyCode',
            createTime: 'createTime',
            creator: 'creator',
            customer: 'customer',
            drawerEmail: 'drawerEmail',
            drawerTelephone: 'drawerTelephone',
            invoiceType: 'invoiceType',
            modelId: 'modelId',
            productInfoList: 'productInfoList',
            purchaserAccount: 'purchaserAccount',
            purchaserAddress: 'purchaserAddress',
            purchaserBankName: 'purchaserBankName',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            receiptId: 'receiptId',
            recordTime: 'recordTime',
            remark: 'remark',
            source: 'source',
            status: 'status',
            title: 'title',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            amount: 'string',
            applyStatus: 'string',
            bizStatus: 'string',
            businessId: 'string',
            companyCode: 'string',
            createTime: 'string',
            creator: QueryReceiptForInvoiceResponseBodyListCreator,
            customer: QueryReceiptForInvoiceResponseBodyListCustomer,
            drawerEmail: 'string',
            drawerTelephone: 'string',
            invoiceType: 'string',
            modelId: 'string',
            productInfoList: { 'type': 'array', 'itemType': QueryReceiptForInvoiceResponseBodyListProductInfoList },
            purchaserAccount: 'string',
            purchaserAddress: 'string',
            purchaserBankName: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            receiptId: 'string',
            recordTime: 'string',
            remark: 'string',
            source: 'string',
            status: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReceiptForInvoiceResponseBodyList = QueryReceiptForInvoiceResponseBodyList;
class QuerySupplierByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageResponseBodyList = QuerySupplierByPageResponseBodyList;
class QueryUserRoleListResponseBodyFinanceEmpDeptOpenList extends $tea.Model {
    static names() {
        return {
            cascadeDeptId: 'cascadeDeptId',
            deptId: 'deptId',
            name: 'name',
            superDeptId: 'superDeptId',
        };
    }
    static types() {
        return {
            cascadeDeptId: 'string',
            deptId: 'number',
            name: 'string',
            superDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponseBodyFinanceEmpDeptOpenList = QueryUserRoleListResponseBodyFinanceEmpDeptOpenList;
class QueryUserRoleListResponseBodyRoleVOList extends $tea.Model {
    static names() {
        return {
            roleCode: 'roleCode',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            roleCode: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponseBodyRoleVOList = QueryUserRoleListResponseBodyRoleVOList;
class UpdateInstanceOrderInfoRequestPayerBank extends $tea.Model {
    static names() {
        return {
            cardNo: 'cardNo',
            name: 'name',
        };
    }
    static types() {
        return {
            cardNo: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoRequestPayerBank = UpdateInstanceOrderInfoRequestPayerBank;
class UpdateInvoiceUrlRequestBodyUrlList extends $tea.Model {
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            ofdUrl: 'ofdUrl',
            pdfUrl: 'pdfUrl',
            xmlUrl: 'xmlUrl',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
            ofdUrl: 'string',
            pdfUrl: 'string',
            xmlUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlRequestBodyUrlList = UpdateInvoiceUrlRequestBodyUrlList;
class UpdateInvoiceUrlRequestBody extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            operator: 'operator',
            urlList: 'urlList',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            operator: 'string',
            urlList: { 'type': 'array', 'itemType': UpdateInvoiceUrlRequestBodyUrlList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlRequestBody = UpdateInvoiceUrlRequestBody;
class UpdateInvoiceUrlResponseBodyResultFailInvoiceList extends $tea.Model {
    static names() {
        return {
            errorMsg: 'errorMsg',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            errorMsg: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlResponseBodyResultFailInvoiceList = UpdateInvoiceUrlResponseBodyResultFailInvoiceList;
class UpdateInvoiceUrlResponseBodyResult extends $tea.Model {
    static names() {
        return {
            failInvoiceList: 'failInvoiceList',
            isAllSuccess: 'isAllSuccess',
        };
    }
    static types() {
        return {
            failInvoiceList: { 'type': 'array', 'itemType': UpdateInvoiceUrlResponseBodyResultFailInvoiceList },
            isAllSuccess: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInvoiceUrlResponseBodyResult = UpdateInvoiceUrlResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        let gatewayClient = new gateway_dingtalk_1.default();
        this._spi = gatewayClient;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * 银行接入层通用接口
     *
     * @param request - BankGatewayInvokeRequest
     * @param headers - BankGatewayInvokeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BankGatewayInvokeResponse
     */
    async bankGatewayInvokeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionType)) {
            body["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.inputData)) {
            body["inputData"] = request.inputData;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            body["url"] = request.url;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BankGatewayInvoke",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/bankGateways/invoke`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BankGatewayInvokeResponse({}));
    }
    /**
     * 银行接入层通用接口
     *
     * @param request - BankGatewayInvokeRequest
     * @returns BankGatewayInvokeResponse
     */
    async bankGatewayInvoke(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BankGatewayInvokeHeaders({});
        return await this.bankGatewayInvokeWithOptions(request, headers, runtime);
    }
    /**
     * 批量删除智能财务单据
     *
     * @param request - BatchDeleteReceiptRequest
     * @param headers - BatchDeleteReceiptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchDeleteReceiptResponse
     */
    async batchDeleteReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.instanceIdList)) {
            body["instanceIdList"] = request.instanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchDeleteReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchDeleteReceiptResponse({}));
    }
    /**
     * 批量删除智能财务单据
     *
     * @param request - BatchDeleteReceiptRequest
     * @returns BatchDeleteReceiptResponse
     */
    async batchDeleteReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchDeleteReceiptHeaders({});
        return await this.batchDeleteReceiptWithOptions(request, headers, runtime);
    }
    /**
     * 批量查询企业票池发票下载链接
     *
     * @param request - BatchQueryOrgInvoiceUrlRequest
     * @param headers - BatchQueryOrgInvoiceUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchQueryOrgInvoiceUrlResponse
     */
    async batchQueryOrgInvoiceUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceKeyVOList)) {
            body["invoiceKeyVOList"] = request.invoiceKeyVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryOrgInvoiceUrl",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoices/urls/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryOrgInvoiceUrlResponse({}));
    }
    /**
     * 批量查询企业票池发票下载链接
     *
     * @param request - BatchQueryOrgInvoiceUrlRequest
     * @returns BatchQueryOrgInvoiceUrlResponse
     */
    async batchQueryOrgInvoiceUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryOrgInvoiceUrlHeaders({});
        return await this.batchQueryOrgInvoiceUrlWithOptions(request, headers, runtime);
    }
    /**
     * 批量查询支付回单文件
     *
     * @param request - BatchQueryPaymentRecallFileRequest
     * @param headers - BatchQueryPaymentRecallFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchQueryPaymentRecallFileResponse
     */
    async batchQueryPaymentRecallFileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.detailIdList)) {
            body["detailIdList"] = request.detailIdList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryPaymentRecallFile",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/payments/recallFiles/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryPaymentRecallFileResponse({}));
    }
    /**
     * 批量查询支付回单文件
     *
     * @param request - BatchQueryPaymentRecallFileRequest
     * @returns BatchQueryPaymentRecallFileResponse
     */
    async batchQueryPaymentRecallFile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryPaymentRecallFileHeaders({});
        return await this.batchQueryPaymentRecallFileWithOptions(request, headers, runtime);
    }
    /**
     * 批量同步银行回单
     *
     * @param request - BatchSyncBankReceiptRequest
     * @param headers - BatchSyncBankReceiptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchSyncBankReceiptResponse
     */
    async batchSyncBankReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "BatchSyncBankReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/receipts/batchSync`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchSyncBankReceiptResponse({}));
    }
    /**
     * 批量同步银行回单
     *
     * @param request - BatchSyncBankReceiptRequest
     * @returns BatchSyncBankReceiptResponse
     */
    async batchSyncBankReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchSyncBankReceiptHeaders({});
        return await this.batchSyncBankReceiptWithOptions(request, headers, runtime);
    }
    /**
     * 查验发票是否生成凭证
     *
     * @param request - CheckVoucherStatusRequest
     * @param headers - CheckVoucherStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CheckVoucherStatusResponse
     */
    async checkVoucherStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.financeType)) {
            body["financeType"] = request.financeType;
        }
        if (!tea_util_1.default.isUnset(request.invoiceCode)) {
            body["invoiceCode"] = request.invoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceNo)) {
            body["invoiceNo"] = request.invoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.taxNo)) {
            body["taxNo"] = request.taxNo;
        }
        if (!tea_util_1.default.isUnset(request.verifyStatus)) {
            body["verifyStatus"] = request.verifyStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CheckVoucherStatus",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoices/checkVoucherStatus/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckVoucherStatusResponse({}));
    }
    /**
     * 查验发票是否生成凭证
     *
     * @param request - CheckVoucherStatusRequest
     * @returns CheckVoucherStatusResponse
     */
    async checkVoucherStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckVoucherStatusHeaders({});
        return await this.checkVoucherStatusWithOptions(request, headers, runtime);
    }
    /**
     * 获取费用类别
     *
     * @param request - GetCategoryRequest
     * @param headers - GetCategoryHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetCategoryResponse
     */
    async getCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCategory",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/categories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCategoryResponse({}));
    }
    /**
     * 获取费用类别
     *
     * @param request - GetCategoryRequest
     * @returns GetCategoryResponse
     */
    async getCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCategoryHeaders({});
        return await this.getCategoryWithOptions(request, headers, runtime);
    }
    /**
     * 获取企业账户
     *
     * @param request - GetFinanceAccountRequest
     * @param headers - GetFinanceAccountHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetFinanceAccountResponse
     */
    async getFinanceAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountCode)) {
            query["accountCode"] = request.accountCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFinanceAccount",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/financeAccounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFinanceAccountResponse({}));
    }
    /**
     * 获取企业账户
     *
     * @param request - GetFinanceAccountRequest
     * @returns GetFinanceAccountResponse
     */
    async getFinanceAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFinanceAccountHeaders({});
        return await this.getFinanceAccountWithOptions(request, headers, runtime);
    }
    /**
     * 获取单条项目
     *
     * @param request - GetProjectRequest
     * @param headers - GetProjectHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetProjectResponse
     */
    async getProjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetProject",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/projects`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProjectResponse({}));
    }
    /**
     * 获取单条项目
     *
     * @param request - GetProjectRequest
     * @returns GetProjectResponse
     */
    async getProject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProjectHeaders({});
        return await this.getProjectWithOptions(request, headers, runtime);
    }
    /**
     * 获取智能财务单据详情
     *
     * @param request - GetReceiptRequest
     * @param headers - GetReceiptHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetReceiptResponse
     */
    async getReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.modelId)) {
            query["modelId"] = request.modelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/receipts/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetReceiptResponse({}));
    }
    /**
     * 获取智能财务单据详情
     *
     * @param request - GetReceiptRequest
     * @returns GetReceiptResponse
     */
    async getReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetReceiptHeaders({});
        return await this.getReceiptWithOptions(request, headers, runtime);
    }
    /**
     * 获取智能财务应用内维护的供应商信息
     *
     * @param request - GetSupplierRequest
     * @param headers - GetSupplierHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSupplierResponse
     */
    async getSupplierWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSupplier",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/suppliers/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSupplierResponse({}));
    }
    /**
     * 获取智能财务应用内维护的供应商信息
     *
     * @param request - GetSupplierRequest
     * @returns GetSupplierResponse
     */
    async getSupplier(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSupplierHeaders({});
        return await this.getSupplierWithOptions(request, headers, runtime);
    }
    /**
     * 订单开票
     *
     * @param request - IssueInvoiceWithOrderRequest
     * @param headers - IssueInvoiceWithOrderHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns IssueInvoiceWithOrderResponse
     */
    async issueInvoiceWithOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.financeAppKey)) {
            body["financeAppKey"] = request.financeAppKey;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IssueInvoiceWithOrder",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/issueInvoices/order`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IssueInvoiceWithOrderResponse({}));
    }
    /**
     * 订单开票
     *
     * @param request - IssueInvoiceWithOrderRequest
     * @returns IssueInvoiceWithOrderResponse
     */
    async issueInvoiceWithOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IssueInvoiceWithOrderHeaders({});
        return await this.issueInvoiceWithOrderWithOptions(request, headers, runtime);
    }
    /**
     * 根据不同的bizType查询不同的数据
     *
     * @param request - LinkCommonInvokeRequest
     * @param headers - LinkCommonInvokeHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns LinkCommonInvokeResponse
     */
    async linkCommonInvokeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.invokeId)) {
            body["invokeId"] = request.invokeId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "LinkCommonInvoke",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/link/bizTypes/invoke`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LinkCommonInvokeResponse({}));
    }
    /**
     * 根据不同的bizType查询不同的数据
     *
     * @param request - LinkCommonInvokeRequest
     * @returns LinkCommonInvokeResponse
     */
    async linkCommonInvoke(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LinkCommonInvokeHeaders({});
        return await this.linkCommonInvokeWithOptions(request, headers, runtime);
    }
    /**
     * 订单开票
     *
     * @param request - OrderBillingRequest
     * @param headers - OrderBillingHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OrderBillingResponse
     */
    async orderBillingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.additionInfos)) {
            body["additionInfos"] = request.additionInfos;
        }
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.applyPerson)) {
            body["applyPerson"] = request.applyPerson;
        }
        if (!tea_util_1.default.isUnset(request.invoiceRemark)) {
            body["invoiceRemark"] = request.invoiceRemark;
        }
        if (!tea_util_1.default.isUnset(request.invoiceType)) {
            body["invoiceType"] = request.invoiceType;
        }
        if (!tea_util_1.default.isUnset(request.isNaturalPerson)) {
            body["isNaturalPerson"] = request.isNaturalPerson;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        if (!tea_util_1.default.isUnset(request.payee)) {
            body["payee"] = request.payee;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            body["phone"] = request.phone;
        }
        if (!tea_util_1.default.isUnset(request.products)) {
            body["products"] = request.products;
        }
        if (!tea_util_1.default.isUnset(request.purchaserAddress)) {
            body["purchaserAddress"] = request.purchaserAddress;
        }
        if (!tea_util_1.default.isUnset(request.purchaserBankAccount)) {
            body["purchaserBankAccount"] = request.purchaserBankAccount;
        }
        if (!tea_util_1.default.isUnset(request.purchaserBankName)) {
            body["purchaserBankName"] = request.purchaserBankName;
        }
        if (!tea_util_1.default.isUnset(request.purchaserName)) {
            body["purchaserName"] = request.purchaserName;
        }
        if (!tea_util_1.default.isUnset(request.purchaserTaxNo)) {
            body["purchaserTaxNo"] = request.purchaserTaxNo;
        }
        if (!tea_util_1.default.isUnset(request.purchaserTel)) {
            body["purchaserTel"] = request.purchaserTel;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.reviewer)) {
            body["reviewer"] = request.reviewer;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.taxSign)) {
            body["taxSign"] = request.taxSign;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OrderBilling",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/billings/order`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OrderBillingResponse({}));
    }
    /**
     * 订单开票
     *
     * @param request - OrderBillingRequest
     * @returns OrderBillingResponse
     */
    async orderBilling(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OrderBillingHeaders({});
        return await this.orderBillingWithOptions(request, headers, runtime);
    }
    /**
     * 分页查询账户的银行交易流水
     *
     * @param request - QueryAccountTradeByPageRequest
     * @param headers - QueryAccountTradeByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryAccountTradeByPageResponse
     */
    async queryAccountTradeByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountId)) {
            body["accountId"] = request.accountId;
        }
        if (!tea_util_1.default.isUnset(request.endDate)) {
            body["endDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.filter)) {
            body["filter"] = request.filter;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            body["startDate"] = request.startDate;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryAccountTradeByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/payments/trades/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAccountTradeByPageResponse({}));
    }
    /**
     * 分页查询账户的银行交易流水
     *
     * @param request - QueryAccountTradeByPageRequest
     * @returns QueryAccountTradeByPageResponse
     */
    async queryAccountTradeByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAccountTradeByPageHeaders({});
        return await this.queryAccountTradeByPageWithOptions(request, headers, runtime);
    }
    /**
     * 批量获取费用类别
     *
     * @param request - QueryCategoryByPageRequest
     * @param headers - QueryCategoryByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryCategoryByPageResponse
     */
    async queryCategoryByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCategoryByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/categories/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCategoryByPageResponse({}));
    }
    /**
     * 批量获取费用类别
     *
     * @param request - QueryCategoryByPageRequest
     * @returns QueryCategoryByPageResponse
     */
    async queryCategoryByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCategoryByPageHeaders({});
        return await this.queryCategoryByPageWithOptions(request, headers, runtime);
    }
    /**
     * 分页批量获取智能财务应用内维护的客户信息
     *
     * @param request - QueryCustomerByPageRequest
     * @param headers - QueryCustomerByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryCustomerByPageResponse
     */
    async queryCustomerByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCustomerByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/customers/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCustomerByPageResponse({}));
    }
    /**
     * 分页批量获取智能财务应用内维护的客户信息
     *
     * @param request - QueryCustomerByPageRequest
     * @returns QueryCustomerByPageResponse
     */
    async queryCustomerByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCustomerByPageHeaders({});
        return await this.queryCustomerByPageWithOptions(request, headers, runtime);
    }
    /**
     * 批量获取企业账户
     *
     * @param request - QueryEnterpriseAccountByPageRequest
     * @param headers - QueryEnterpriseAccountByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryEnterpriseAccountByPageResponse
     */
    async queryEnterpriseAccountByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEnterpriseAccountByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/financeAccounts/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryEnterpriseAccountByPageResponse({}));
    }
    /**
     * 批量获取企业账户
     *
     * @param request - QueryEnterpriseAccountByPageRequest
     * @returns QueryEnterpriseAccountByPageResponse
     */
    async queryEnterpriseAccountByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEnterpriseAccountByPageHeaders({});
        return await this.queryEnterpriseAccountByPageWithOptions(request, headers, runtime);
    }
    /**
     * 查询支付订单详情
     *
     * @param request - QueryInstancePaymentOrderDetailRequest
     * @param headers - QueryInstancePaymentOrderDetailHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryInstancePaymentOrderDetailResponse
     */
    async queryInstancePaymentOrderDetailWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryInstancePaymentOrderDetail",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/${instanceId}/paymentOrders/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryInstancePaymentOrderDetailResponse({}));
    }
    /**
     * 查询支付订单详情
     *
     * @param request - QueryInstancePaymentOrderDetailRequest
     * @returns QueryInstancePaymentOrderDetailResponse
     */
    async queryInstancePaymentOrderDetail(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryInstancePaymentOrderDetailHeaders({});
        return await this.queryInstancePaymentOrderDetailWithOptions(instanceId, request, headers, runtime);
    }
    /**
     * 发票数据迁移，根据数据key查询具体数据data
     *
     * @param tmpReq - QueryInvoiceTransferDataRequest
     * @param headers - QueryInvoiceTransferDataHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryInvoiceTransferDataResponse
     */
    async queryInvoiceTransferDataWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryInvoiceTransferDataShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryInvoiceTransferData",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoices/transferredDatas/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryInvoiceTransferDataResponse({}));
    }
    /**
     * 发票数据迁移，根据数据key查询具体数据data
     *
     * @param request - QueryInvoiceTransferDataRequest
     * @returns QueryInvoiceTransferDataResponse
     */
    async queryInvoiceTransferData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryInvoiceTransferDataHeaders({});
        return await this.queryInvoiceTransferDataWithOptions(request, headers, runtime);
    }
    /**
     * 查询支付回单信息
     *
     * @param request - QueryPaymentRecallFileRequest
     * @param headers - QueryPaymentRecallFileHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPaymentRecallFileResponse
     */
    async queryPaymentRecallFileWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPaymentRecallFile",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/payments/recallFiles/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPaymentRecallFileResponse({}));
    }
    /**
     * 查询支付回单信息
     *
     * @param request - QueryPaymentRecallFileRequest
     * @returns QueryPaymentRecallFileResponse
     */
    async queryPaymentRecallFile(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPaymentRecallFileHeaders({});
        return await this.queryPaymentRecallFileWithOptions(instanceId, request, headers, runtime);
    }
    /**
     * 查询支付订单的状态
     *
     * @param request - QueryPaymentStatusRequest
     * @param headers - QueryPaymentStatusHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryPaymentStatusResponse
     */
    async queryPaymentStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPaymentStatus",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/payments/statuses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPaymentStatusResponse({}));
    }
    /**
     * 查询支付订单的状态
     *
     * @param request - QueryPaymentStatusRequest
     * @returns QueryPaymentStatusResponse
     */
    async queryPaymentStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPaymentStatusHeaders({});
        return await this.queryPaymentStatusWithOptions(request, headers, runtime);
    }
    /**
     * 批量获取项目信息
     *
     * @param request - QueryProjectByPageRequest
     * @param headers - QueryProjectByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryProjectByPageResponse
     */
    async queryProjectByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProjectByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/projects/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProjectByPageResponse({}));
    }
    /**
     * 批量获取项目信息
     *
     * @param request - QueryProjectByPageRequest
     * @returns QueryProjectByPageResponse
     */
    async queryProjectByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProjectByPageHeaders({});
        return await this.queryProjectByPageWithOptions(request, headers, runtime);
    }
    /**
     * 批量查询智能财务单据主数据信息
     *
     * @param request - QueryReceiptForInvoiceRequest
     * @param headers - QueryReceiptForInvoiceHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryReceiptForInvoiceResponse
     */
    async queryReceiptForInvoiceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountantBookId)) {
            body["accountantBookId"] = request.accountantBookId;
        }
        if (!tea_util_1.default.isUnset(request.applyStatusList)) {
            body["applyStatusList"] = request.applyStatusList;
        }
        if (!tea_util_1.default.isUnset(request.bizStatusList)) {
            body["bizStatusList"] = request.bizStatusList;
        }
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.receiptStatusList)) {
            body["receiptStatusList"] = request.receiptStatusList;
        }
        if (!tea_util_1.default.isUnset(request.searchParams)) {
            body["searchParams"] = request.searchParams;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryReceiptForInvoice",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoices/receipts/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReceiptForInvoiceResponse({}));
    }
    /**
     * 批量查询智能财务单据主数据信息
     *
     * @param request - QueryReceiptForInvoiceRequest
     * @returns QueryReceiptForInvoiceResponse
     */
    async queryReceiptForInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReceiptForInvoiceHeaders({});
        return await this.queryReceiptForInvoiceWithOptions(request, headers, runtime);
    }
    /**
     * 分页批量获取智能财务应用内维护的供应商信息
     *
     * @param request - QuerySupplierByPageRequest
     * @param headers - QuerySupplierByPageHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QuerySupplierByPageResponse
     */
    async querySupplierByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySupplierByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/suppliers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySupplierByPageResponse({}));
    }
    /**
     * 分页批量获取智能财务应用内维护的供应商信息
     *
     * @param request - QuerySupplierByPageRequest
     * @returns QuerySupplierByPageResponse
     */
    async querySupplierByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySupplierByPageHeaders({});
        return await this.querySupplierByPageWithOptions(request, headers, runtime);
    }
    /**
     * 查询组织是否命中走新发票应用
     *
     * @param headers - QueryUseNewInvoiceAppHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUseNewInvoiceAppResponse
     */
    async queryUseNewInvoiceAppWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryUseNewInvoiceApp",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoice/appGray`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUseNewInvoiceAppResponse({}));
    }
    /**
     * 查询组织是否命中走新发票应用
     * @returns QueryUseNewInvoiceAppResponse
     */
    async queryUseNewInvoiceApp() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUseNewInvoiceAppHeaders({});
        return await this.queryUseNewInvoiceAppWithOptions(headers, runtime);
    }
    /**
     * 查询用户角色成员，支持分页，可获取某个企业主体下的角色成员
     *
     * @param request - QueryUserRoleListRequest
     * @param headers - QueryUserRoleListHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryUserRoleListResponse
     */
    async queryUserRoleListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            query["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserRoleList",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/users/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserRoleListResponse({}));
    }
    /**
     * 查询用户角色成员，支持分页，可获取某个企业主体下的角色成员
     *
     * @param request - QueryUserRoleListRequest
     * @returns QueryUserRoleListResponse
     */
    async queryUserRoleList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserRoleListHeaders({});
        return await this.queryUserRoleListWithOptions(request, headers, runtime);
    }
    /**
     * 签约企业账户
     *
     * @param request - SignEnterpriseAccountRequest
     * @param headers - SignEnterpriseAccountHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SignEnterpriseAccountResponse
     */
    async signEnterpriseAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bankCardNo)) {
            query["bankCardNo"] = request.bankCardNo;
        }
        if (!tea_util_1.default.isUnset(request.bankOpenId)) {
            query["bankOpenId"] = request.bankOpenId;
        }
        if (!tea_util_1.default.isUnset(request.channelType)) {
            query["channelType"] = request.channelType;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.signOperateType)) {
            query["signOperateType"] = request.signOperateType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SignEnterpriseAccount",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/enterpriseAccounts/sign`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SignEnterpriseAccountResponse({}));
    }
    /**
     * 签约企业账户
     *
     * @param request - SignEnterpriseAccountRequest
     * @returns SignEnterpriseAccountResponse
     */
    async signEnterpriseAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SignEnterpriseAccountHeaders({});
        return await this.signEnterpriseAccountWithOptions(request, headers, runtime);
    }
    /**
     * 发送银企支付回单文件信息
     *
     * @param request - SyncReceiptRecallRequest
     * @param headers - SyncReceiptRecallHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SyncReceiptRecallResponse
     */
    async syncReceiptRecallWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fileDownloadUrl)) {
            query["fileDownloadUrl"] = request.fileDownloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            query["fileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SyncReceiptRecall",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/receipts/syncRecall`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SyncReceiptRecallResponse({}));
    }
    /**
     * 发送银企支付回单文件信息
     *
     * @param request - SyncReceiptRecallRequest
     * @returns SyncReceiptRecallResponse
     */
    async syncReceiptRecall(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SyncReceiptRecallHeaders({});
        return await this.syncReceiptRecallWithOptions(request, headers, runtime);
    }
    /**
     * 更新单据的支付状态
     *
     * @param tmpReq - UpdateInstanceOrderInfoRequest
     * @param headers - UpdateInstanceOrderInfoHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateInstanceOrderInfoResponse
     */
    async updateInstanceOrderInfoWithOptions(instanceId, tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new UpdateInstanceOrderInfoShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.payerBank)) {
            request.payerBankShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.payerBank, "payerBank", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.failReason)) {
            query["failReason"] = request.failReason;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.outOrderNo)) {
            query["outOrderNo"] = request.outOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.payerBankShrink)) {
            query["payerBank"] = request.payerBankShrink;
        }
        if (!tea_util_1.default.isUnset(request.paymentTime)) {
            query["paymentTime"] = request.paymentTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInstanceOrderInfo",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/${instanceId}/paymentOrders/states`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInstanceOrderInfoResponse({}));
    }
    /**
     * 更新单据的支付状态
     *
     * @param request - UpdateInstanceOrderInfoRequest
     * @returns UpdateInstanceOrderInfoResponse
     */
    async updateInstanceOrderInfo(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInstanceOrderInfoHeaders({});
        return await this.updateInstanceOrderInfoWithOptions(instanceId, request, headers, runtime);
    }
    /**
     * 发票数据迁移，新发票应用上报已成功搬移数据
     *
     * @param headers - UpdateInvoiceDataTransferDoneHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateInvoiceDataTransferDoneResponse
     */
    async updateInvoiceDataTransferDoneWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceDataTransferDone",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoices/transferredDatas/statuses`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceDataTransferDoneResponse({}));
    }
    /**
     * 发票数据迁移，新发票应用上报已成功搬移数据
     * @returns UpdateInvoiceDataTransferDoneResponse
     */
    async updateInvoiceDataTransferDone() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceDataTransferDoneHeaders({});
        return await this.updateInvoiceDataTransferDoneWithOptions(headers, runtime);
    }
    /**
     * 用于更新智能财务企业票池内对应发票的下载链接
     *
     * @param tmpReq - UpdateInvoiceUrlRequest
     * @param headers - UpdateInvoiceUrlHeaders
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateInvoiceUrlResponse
     */
    async updateInvoiceUrlWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new UpdateInvoiceUrlShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceUrl",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/invoices/urls`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceUrlResponse({}));
    }
    /**
     * 用于更新智能财务企业票池内对应发票的下载链接
     *
     * @param request - UpdateInvoiceUrlRequest
     * @returns UpdateInvoiceUrlResponse
     */
    async updateInvoiceUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceUrlHeaders({});
        return await this.updateInvoiceUrlWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map